// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/gov/v1/query.proto
// Original file comments:
// Since: cosmos-sdk 0.46
#ifndef GRPC_cosmos_2fgov_2fv1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fgov_2fv1_2fquery_2eproto__INCLUDED

#include "cosmos/gov/v1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace gov {
namespace v1 {

// Query defines the gRPC querier service for gov module
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.gov.v1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Proposal queries proposal details based on ProposalID.
    virtual ::grpc::Status Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::cosmos::gov::v1::QueryProposalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalResponse>> AsyncProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalResponse>>(AsyncProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalResponse>> PrepareAsyncProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalResponse>>(PrepareAsyncProposalRaw(context, request, cq));
    }
    // Proposals queries all proposals based on given status.
    virtual ::grpc::Status Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::cosmos::gov::v1::QueryProposalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalsResponse>> AsyncProposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalsResponse>>(AsyncProposalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalsResponse>> PrepareAsyncProposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalsResponse>>(PrepareAsyncProposalsRaw(context, request, cq));
    }
    // Vote queries voted information based on proposalID, voterAddr.
    virtual ::grpc::Status Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::cosmos::gov::v1::QueryVoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVoteResponse>> AsyncVote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVoteResponse>>(AsyncVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVoteResponse>> PrepareAsyncVote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVoteResponse>>(PrepareAsyncVoteRaw(context, request, cq));
    }
    // Votes queries votes of a given proposal.
    virtual ::grpc::Status Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::cosmos::gov::v1::QueryVotesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVotesResponse>> AsyncVotes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVotesResponse>>(AsyncVotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVotesResponse>> PrepareAsyncVotes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVotesResponse>>(PrepareAsyncVotesRaw(context, request, cq));
    }
    // Params queries all parameters of the gov module.
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::cosmos::gov::v1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // Deposit queries single deposit information based proposalID, depositAddr.
    virtual ::grpc::Status Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::cosmos::gov::v1::QueryDepositResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositResponse>> AsyncDeposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositResponse>>(AsyncDepositRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositResponse>> PrepareAsyncDeposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositResponse>>(PrepareAsyncDepositRaw(context, request, cq));
    }
    // Deposits queries all deposits of a single proposal.
    virtual ::grpc::Status Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::cosmos::gov::v1::QueryDepositsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositsResponse>> AsyncDeposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositsResponse>>(AsyncDepositsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositsResponse>> PrepareAsyncDeposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositsResponse>>(PrepareAsyncDepositsRaw(context, request, cq));
    }
    // TallyResult queries the tally of a proposal vote.
    virtual ::grpc::Status TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::cosmos::gov::v1::QueryTallyResultResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryTallyResultResponse>> AsyncTallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryTallyResultResponse>>(AsyncTallyResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryTallyResultResponse>> PrepareAsyncTallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryTallyResultResponse>>(PrepareAsyncTallyResultRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Proposal queries proposal details based on ProposalID.
      virtual void Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest* request, ::cosmos::gov::v1::QueryProposalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest* request, ::cosmos::gov::v1::QueryProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Proposals queries all proposals based on given status.
      virtual void Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest* request, ::cosmos::gov::v1::QueryProposalsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest* request, ::cosmos::gov::v1::QueryProposalsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Vote queries voted information based on proposalID, voterAddr.
      virtual void Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest* request, ::cosmos::gov::v1::QueryVoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest* request, ::cosmos::gov::v1::QueryVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Votes queries votes of a given proposal.
      virtual void Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest* request, ::cosmos::gov::v1::QueryVotesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest* request, ::cosmos::gov::v1::QueryVotesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Params queries all parameters of the gov module.
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest* request, ::cosmos::gov::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest* request, ::cosmos::gov::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deposit queries single deposit information based proposalID, depositAddr.
      virtual void Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest* request, ::cosmos::gov::v1::QueryDepositResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest* request, ::cosmos::gov::v1::QueryDepositResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deposits queries all deposits of a single proposal.
      virtual void Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest* request, ::cosmos::gov::v1::QueryDepositsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest* request, ::cosmos::gov::v1::QueryDepositsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TallyResult queries the tally of a proposal vote.
      virtual void TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest* request, ::cosmos::gov::v1::QueryTallyResultResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest* request, ::cosmos::gov::v1::QueryTallyResultResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalResponse>* AsyncProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalResponse>* PrepareAsyncProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalsResponse>* AsyncProposalsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryProposalsResponse>* PrepareAsyncProposalsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVoteResponse>* AsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVoteResponse>* PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVotesResponse>* AsyncVotesRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryVotesResponse>* PrepareAsyncVotesRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositResponse>* AsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositResponse>* PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositsResponse>* AsyncDepositsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryDepositsResponse>* PrepareAsyncDepositsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryTallyResultResponse>* AsyncTallyResultRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::QueryTallyResultResponse>* PrepareAsyncTallyResultRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::cosmos::gov::v1::QueryProposalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalResponse>> AsyncProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalResponse>>(AsyncProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalResponse>> PrepareAsyncProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalResponse>>(PrepareAsyncProposalRaw(context, request, cq));
    }
    ::grpc::Status Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::cosmos::gov::v1::QueryProposalsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalsResponse>> AsyncProposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalsResponse>>(AsyncProposalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalsResponse>> PrepareAsyncProposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalsResponse>>(PrepareAsyncProposalsRaw(context, request, cq));
    }
    ::grpc::Status Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::cosmos::gov::v1::QueryVoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVoteResponse>> AsyncVote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVoteResponse>>(AsyncVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVoteResponse>> PrepareAsyncVote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVoteResponse>>(PrepareAsyncVoteRaw(context, request, cq));
    }
    ::grpc::Status Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::cosmos::gov::v1::QueryVotesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVotesResponse>> AsyncVotes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVotesResponse>>(AsyncVotesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVotesResponse>> PrepareAsyncVotes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVotesResponse>>(PrepareAsyncVotesRaw(context, request, cq));
    }
    ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::cosmos::gov::v1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::cosmos::gov::v1::QueryDepositResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositResponse>> AsyncDeposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositResponse>>(AsyncDepositRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositResponse>> PrepareAsyncDeposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositResponse>>(PrepareAsyncDepositRaw(context, request, cq));
    }
    ::grpc::Status Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::cosmos::gov::v1::QueryDepositsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositsResponse>> AsyncDeposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositsResponse>>(AsyncDepositsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositsResponse>> PrepareAsyncDeposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositsResponse>>(PrepareAsyncDepositsRaw(context, request, cq));
    }
    ::grpc::Status TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::cosmos::gov::v1::QueryTallyResultResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryTallyResultResponse>> AsyncTallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryTallyResultResponse>>(AsyncTallyResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryTallyResultResponse>> PrepareAsyncTallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryTallyResultResponse>>(PrepareAsyncTallyResultRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest* request, ::cosmos::gov::v1::QueryProposalResponse* response, std::function<void(::grpc::Status)>) override;
      void Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest* request, ::cosmos::gov::v1::QueryProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest* request, ::cosmos::gov::v1::QueryProposalsResponse* response, std::function<void(::grpc::Status)>) override;
      void Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest* request, ::cosmos::gov::v1::QueryProposalsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest* request, ::cosmos::gov::v1::QueryVoteResponse* response, std::function<void(::grpc::Status)>) override;
      void Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest* request, ::cosmos::gov::v1::QueryVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest* request, ::cosmos::gov::v1::QueryVotesResponse* response, std::function<void(::grpc::Status)>) override;
      void Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest* request, ::cosmos::gov::v1::QueryVotesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest* request, ::cosmos::gov::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest* request, ::cosmos::gov::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest* request, ::cosmos::gov::v1::QueryDepositResponse* response, std::function<void(::grpc::Status)>) override;
      void Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest* request, ::cosmos::gov::v1::QueryDepositResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest* request, ::cosmos::gov::v1::QueryDepositsResponse* response, std::function<void(::grpc::Status)>) override;
      void Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest* request, ::cosmos::gov::v1::QueryDepositsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest* request, ::cosmos::gov::v1::QueryTallyResultResponse* response, std::function<void(::grpc::Status)>) override;
      void TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest* request, ::cosmos::gov::v1::QueryTallyResultResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalResponse>* AsyncProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalResponse>* PrepareAsyncProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalsResponse>* AsyncProposalsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryProposalsResponse>* PrepareAsyncProposalsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVoteResponse>* AsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVoteResponse>* PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVotesResponse>* AsyncVotesRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryVotesResponse>* PrepareAsyncVotesRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositResponse>* AsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositResponse>* PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositsResponse>* AsyncDepositsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryDepositsResponse>* PrepareAsyncDepositsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryTallyResultResponse>* AsyncTallyResultRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::QueryTallyResultResponse>* PrepareAsyncTallyResultRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Proposal_;
    const ::grpc::internal::RpcMethod rpcmethod_Proposals_;
    const ::grpc::internal::RpcMethod rpcmethod_Vote_;
    const ::grpc::internal::RpcMethod rpcmethod_Votes_;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_Deposit_;
    const ::grpc::internal::RpcMethod rpcmethod_Deposits_;
    const ::grpc::internal::RpcMethod rpcmethod_TallyResult_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Proposal queries proposal details based on ProposalID.
    virtual ::grpc::Status Proposal(::grpc::ServerContext* context, const ::cosmos::gov::v1::QueryProposalRequest* request, ::cosmos::gov::v1::QueryProposalResponse* response);
    // Proposals queries all proposals based on given status.
    virtual ::grpc::Status Proposals(::grpc::ServerContext* context, const ::cosmos::gov::v1::QueryProposalsRequest* request, ::cosmos::gov::v1::QueryProposalsResponse* response);
    // Vote queries voted information based on proposalID, voterAddr.
    virtual ::grpc::Status Vote(::grpc::ServerContext* context, const ::cosmos::gov::v1::QueryVoteRequest* request, ::cosmos::gov::v1::QueryVoteResponse* response);
    // Votes queries votes of a given proposal.
    virtual ::grpc::Status Votes(::grpc::ServerContext* context, const ::cosmos::gov::v1::QueryVotesRequest* request, ::cosmos::gov::v1::QueryVotesResponse* response);
    // Params queries all parameters of the gov module.
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::cosmos::gov::v1::QueryParamsRequest* request, ::cosmos::gov::v1::QueryParamsResponse* response);
    // Deposit queries single deposit information based proposalID, depositAddr.
    virtual ::grpc::Status Deposit(::grpc::ServerContext* context, const ::cosmos::gov::v1::QueryDepositRequest* request, ::cosmos::gov::v1::QueryDepositResponse* response);
    // Deposits queries all deposits of a single proposal.
    virtual ::grpc::Status Deposits(::grpc::ServerContext* context, const ::cosmos::gov::v1::QueryDepositsRequest* request, ::cosmos::gov::v1::QueryDepositsResponse* response);
    // TallyResult queries the tally of a proposal vote.
    virtual ::grpc::Status TallyResult(::grpc::ServerContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest* request, ::cosmos::gov::v1::QueryTallyResultResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Proposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Proposal() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Proposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalRequest* /*request*/, ::cosmos::gov::v1::QueryProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposal(::grpc::ServerContext* context, ::cosmos::gov::v1::QueryProposalRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::QueryProposalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Proposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Proposals() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Proposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposals(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalsRequest* /*request*/, ::cosmos::gov::v1::QueryProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposals(::grpc::ServerContext* context, ::cosmos::gov::v1::QueryProposalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::QueryProposalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Vote() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVoteRequest* /*request*/, ::cosmos::gov::v1::QueryVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVote(::grpc::ServerContext* context, ::cosmos::gov::v1::QueryVoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::QueryVoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Votes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Votes() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Votes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Votes(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVotesRequest* /*request*/, ::cosmos::gov::v1::QueryVotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVotes(::grpc::ServerContext* context, ::cosmos::gov::v1::QueryVotesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::QueryVotesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryParamsRequest* /*request*/, ::cosmos::gov::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::cosmos::gov::v1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Deposit() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositRequest* /*request*/, ::cosmos::gov::v1::QueryDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeposit(::grpc::ServerContext* context, ::cosmos::gov::v1::QueryDepositRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::QueryDepositResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Deposits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Deposits() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Deposits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposits(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositsRequest* /*request*/, ::cosmos::gov::v1::QueryDepositsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeposits(::grpc::ServerContext* context, ::cosmos::gov::v1::QueryDepositsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::QueryDepositsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TallyResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TallyResult() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_TallyResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TallyResult(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryTallyResultRequest* /*request*/, ::cosmos::gov::v1::QueryTallyResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTallyResult(::grpc::ServerContext* context, ::cosmos::gov::v1::QueryTallyResultRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::QueryTallyResultResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Proposal<WithAsyncMethod_Proposals<WithAsyncMethod_Vote<WithAsyncMethod_Votes<WithAsyncMethod_Params<WithAsyncMethod_Deposit<WithAsyncMethod_Deposits<WithAsyncMethod_TallyResult<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Proposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Proposal() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryProposalRequest, ::cosmos::gov::v1::QueryProposalResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::QueryProposalRequest* request, ::cosmos::gov::v1::QueryProposalResponse* response) { return this->Proposal(context, request, response); }));}
    void SetMessageAllocatorFor_Proposal(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::QueryProposalRequest, ::cosmos::gov::v1::QueryProposalResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryProposalRequest, ::cosmos::gov::v1::QueryProposalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Proposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalRequest* /*request*/, ::cosmos::gov::v1::QueryProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Proposal(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalRequest* /*request*/, ::cosmos::gov::v1::QueryProposalResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Proposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Proposals() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryProposalsRequest, ::cosmos::gov::v1::QueryProposalsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::QueryProposalsRequest* request, ::cosmos::gov::v1::QueryProposalsResponse* response) { return this->Proposals(context, request, response); }));}
    void SetMessageAllocatorFor_Proposals(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::QueryProposalsRequest, ::cosmos::gov::v1::QueryProposalsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryProposalsRequest, ::cosmos::gov::v1::QueryProposalsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Proposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposals(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalsRequest* /*request*/, ::cosmos::gov::v1::QueryProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Proposals(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalsRequest* /*request*/, ::cosmos::gov::v1::QueryProposalsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Vote() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryVoteRequest, ::cosmos::gov::v1::QueryVoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::QueryVoteRequest* request, ::cosmos::gov::v1::QueryVoteResponse* response) { return this->Vote(context, request, response); }));}
    void SetMessageAllocatorFor_Vote(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::QueryVoteRequest, ::cosmos::gov::v1::QueryVoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryVoteRequest, ::cosmos::gov::v1::QueryVoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVoteRequest* /*request*/, ::cosmos::gov::v1::QueryVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Vote(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::QueryVoteRequest* /*request*/, ::cosmos::gov::v1::QueryVoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Votes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Votes() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryVotesRequest, ::cosmos::gov::v1::QueryVotesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::QueryVotesRequest* request, ::cosmos::gov::v1::QueryVotesResponse* response) { return this->Votes(context, request, response); }));}
    void SetMessageAllocatorFor_Votes(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::QueryVotesRequest, ::cosmos::gov::v1::QueryVotesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryVotesRequest, ::cosmos::gov::v1::QueryVotesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Votes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Votes(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVotesRequest* /*request*/, ::cosmos::gov::v1::QueryVotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Votes(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::QueryVotesRequest* /*request*/, ::cosmos::gov::v1::QueryVotesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryParamsRequest, ::cosmos::gov::v1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::QueryParamsRequest* request, ::cosmos::gov::v1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::QueryParamsRequest, ::cosmos::gov::v1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryParamsRequest, ::cosmos::gov::v1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryParamsRequest* /*request*/, ::cosmos::gov::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::QueryParamsRequest* /*request*/, ::cosmos::gov::v1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Deposit() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryDepositRequest, ::cosmos::gov::v1::QueryDepositResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::QueryDepositRequest* request, ::cosmos::gov::v1::QueryDepositResponse* response) { return this->Deposit(context, request, response); }));}
    void SetMessageAllocatorFor_Deposit(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::QueryDepositRequest, ::cosmos::gov::v1::QueryDepositResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryDepositRequest, ::cosmos::gov::v1::QueryDepositResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositRequest* /*request*/, ::cosmos::gov::v1::QueryDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deposit(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositRequest* /*request*/, ::cosmos::gov::v1::QueryDepositResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Deposits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Deposits() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryDepositsRequest, ::cosmos::gov::v1::QueryDepositsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::QueryDepositsRequest* request, ::cosmos::gov::v1::QueryDepositsResponse* response) { return this->Deposits(context, request, response); }));}
    void SetMessageAllocatorFor_Deposits(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::QueryDepositsRequest, ::cosmos::gov::v1::QueryDepositsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryDepositsRequest, ::cosmos::gov::v1::QueryDepositsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Deposits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposits(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositsRequest* /*request*/, ::cosmos::gov::v1::QueryDepositsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deposits(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositsRequest* /*request*/, ::cosmos::gov::v1::QueryDepositsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TallyResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TallyResult() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryTallyResultRequest, ::cosmos::gov::v1::QueryTallyResultResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::QueryTallyResultRequest* request, ::cosmos::gov::v1::QueryTallyResultResponse* response) { return this->TallyResult(context, request, response); }));}
    void SetMessageAllocatorFor_TallyResult(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::QueryTallyResultRequest, ::cosmos::gov::v1::QueryTallyResultResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::QueryTallyResultRequest, ::cosmos::gov::v1::QueryTallyResultResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TallyResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TallyResult(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryTallyResultRequest* /*request*/, ::cosmos::gov::v1::QueryTallyResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TallyResult(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::QueryTallyResultRequest* /*request*/, ::cosmos::gov::v1::QueryTallyResultResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Proposal<WithCallbackMethod_Proposals<WithCallbackMethod_Vote<WithCallbackMethod_Votes<WithCallbackMethod_Params<WithCallbackMethod_Deposit<WithCallbackMethod_Deposits<WithCallbackMethod_TallyResult<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Proposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Proposal() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Proposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalRequest* /*request*/, ::cosmos::gov::v1::QueryProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Proposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Proposals() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Proposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposals(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalsRequest* /*request*/, ::cosmos::gov::v1::QueryProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Vote() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVoteRequest* /*request*/, ::cosmos::gov::v1::QueryVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Votes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Votes() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Votes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Votes(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVotesRequest* /*request*/, ::cosmos::gov::v1::QueryVotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryParamsRequest* /*request*/, ::cosmos::gov::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Deposit() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositRequest* /*request*/, ::cosmos::gov::v1::QueryDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Deposits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Deposits() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Deposits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposits(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositsRequest* /*request*/, ::cosmos::gov::v1::QueryDepositsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TallyResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TallyResult() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_TallyResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TallyResult(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryTallyResultRequest* /*request*/, ::cosmos::gov::v1::QueryTallyResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Proposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Proposal() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Proposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalRequest* /*request*/, ::cosmos::gov::v1::QueryProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Proposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Proposals() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Proposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposals(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalsRequest* /*request*/, ::cosmos::gov::v1::QueryProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProposals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Vote() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVoteRequest* /*request*/, ::cosmos::gov::v1::QueryVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Votes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Votes() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Votes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Votes(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVotesRequest* /*request*/, ::cosmos::gov::v1::QueryVotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVotes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryParamsRequest* /*request*/, ::cosmos::gov::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Deposit() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositRequest* /*request*/, ::cosmos::gov::v1::QueryDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeposit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Deposits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Deposits() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Deposits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposits(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositsRequest* /*request*/, ::cosmos::gov::v1::QueryDepositsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeposits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TallyResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TallyResult() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_TallyResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TallyResult(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryTallyResultRequest* /*request*/, ::cosmos::gov::v1::QueryTallyResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTallyResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Proposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Proposal() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Proposal(context, request, response); }));
    }
    ~WithRawCallbackMethod_Proposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalRequest* /*request*/, ::cosmos::gov::v1::QueryProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Proposal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Proposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Proposals() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Proposals(context, request, response); }));
    }
    ~WithRawCallbackMethod_Proposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Proposals(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalsRequest* /*request*/, ::cosmos::gov::v1::QueryProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Proposals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Vote() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Vote(context, request, response); }));
    }
    ~WithRawCallbackMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVoteRequest* /*request*/, ::cosmos::gov::v1::QueryVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Vote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Votes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Votes() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Votes(context, request, response); }));
    }
    ~WithRawCallbackMethod_Votes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Votes(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVotesRequest* /*request*/, ::cosmos::gov::v1::QueryVotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Votes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryParamsRequest* /*request*/, ::cosmos::gov::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Deposit() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Deposit(context, request, response); }));
    }
    ~WithRawCallbackMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositRequest* /*request*/, ::cosmos::gov::v1::QueryDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deposit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Deposits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Deposits() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Deposits(context, request, response); }));
    }
    ~WithRawCallbackMethod_Deposits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposits(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositsRequest* /*request*/, ::cosmos::gov::v1::QueryDepositsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deposits(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TallyResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TallyResult() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TallyResult(context, request, response); }));
    }
    ~WithRawCallbackMethod_TallyResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TallyResult(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryTallyResultRequest* /*request*/, ::cosmos::gov::v1::QueryTallyResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TallyResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Proposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Proposal() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::QueryProposalRequest, ::cosmos::gov::v1::QueryProposalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::QueryProposalRequest, ::cosmos::gov::v1::QueryProposalResponse>* streamer) {
                       return this->StreamedProposal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Proposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Proposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalRequest* /*request*/, ::cosmos::gov::v1::QueryProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProposal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::QueryProposalRequest,::cosmos::gov::v1::QueryProposalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Proposals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Proposals() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::QueryProposalsRequest, ::cosmos::gov::v1::QueryProposalsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::QueryProposalsRequest, ::cosmos::gov::v1::QueryProposalsResponse>* streamer) {
                       return this->StreamedProposals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Proposals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Proposals(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryProposalsRequest* /*request*/, ::cosmos::gov::v1::QueryProposalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProposals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::QueryProposalsRequest,::cosmos::gov::v1::QueryProposalsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Vote() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::QueryVoteRequest, ::cosmos::gov::v1::QueryVoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::QueryVoteRequest, ::cosmos::gov::v1::QueryVoteResponse>* streamer) {
                       return this->StreamedVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVoteRequest* /*request*/, ::cosmos::gov::v1::QueryVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::QueryVoteRequest,::cosmos::gov::v1::QueryVoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Votes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Votes() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::QueryVotesRequest, ::cosmos::gov::v1::QueryVotesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::QueryVotesRequest, ::cosmos::gov::v1::QueryVotesResponse>* streamer) {
                       return this->StreamedVotes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Votes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Votes(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryVotesRequest* /*request*/, ::cosmos::gov::v1::QueryVotesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVotes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::QueryVotesRequest,::cosmos::gov::v1::QueryVotesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::QueryParamsRequest, ::cosmos::gov::v1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::QueryParamsRequest, ::cosmos::gov::v1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryParamsRequest* /*request*/, ::cosmos::gov::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::QueryParamsRequest,::cosmos::gov::v1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Deposit() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::QueryDepositRequest, ::cosmos::gov::v1::QueryDepositResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::QueryDepositRequest, ::cosmos::gov::v1::QueryDepositResponse>* streamer) {
                       return this->StreamedDeposit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositRequest* /*request*/, ::cosmos::gov::v1::QueryDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeposit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::QueryDepositRequest,::cosmos::gov::v1::QueryDepositResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Deposits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Deposits() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::QueryDepositsRequest, ::cosmos::gov::v1::QueryDepositsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::QueryDepositsRequest, ::cosmos::gov::v1::QueryDepositsResponse>* streamer) {
                       return this->StreamedDeposits(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Deposits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Deposits(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryDepositsRequest* /*request*/, ::cosmos::gov::v1::QueryDepositsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeposits(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::QueryDepositsRequest,::cosmos::gov::v1::QueryDepositsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TallyResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TallyResult() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::QueryTallyResultRequest, ::cosmos::gov::v1::QueryTallyResultResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::QueryTallyResultRequest, ::cosmos::gov::v1::QueryTallyResultResponse>* streamer) {
                       return this->StreamedTallyResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TallyResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TallyResult(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::QueryTallyResultRequest* /*request*/, ::cosmos::gov::v1::QueryTallyResultResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTallyResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::QueryTallyResultRequest,::cosmos::gov::v1::QueryTallyResultResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Proposal<WithStreamedUnaryMethod_Proposals<WithStreamedUnaryMethod_Vote<WithStreamedUnaryMethod_Votes<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_Deposit<WithStreamedUnaryMethod_Deposits<WithStreamedUnaryMethod_TallyResult<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Proposal<WithStreamedUnaryMethod_Proposals<WithStreamedUnaryMethod_Vote<WithStreamedUnaryMethod_Votes<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_Deposit<WithStreamedUnaryMethod_Deposits<WithStreamedUnaryMethod_TallyResult<Service > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace gov
}  // namespace cosmos


#endif  // GRPC_cosmos_2fgov_2fv1_2fquery_2eproto__INCLUDED

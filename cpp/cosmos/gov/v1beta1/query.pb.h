// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/gov/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgov_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgov_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/gov/v1beta1/gov.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgov_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace gov {
namespace v1beta1 {
class QueryDepositRequest;
struct QueryDepositRequestDefaultTypeInternal;
extern QueryDepositRequestDefaultTypeInternal _QueryDepositRequest_default_instance_;
class QueryDepositResponse;
struct QueryDepositResponseDefaultTypeInternal;
extern QueryDepositResponseDefaultTypeInternal _QueryDepositResponse_default_instance_;
class QueryDepositsRequest;
struct QueryDepositsRequestDefaultTypeInternal;
extern QueryDepositsRequestDefaultTypeInternal _QueryDepositsRequest_default_instance_;
class QueryDepositsResponse;
struct QueryDepositsResponseDefaultTypeInternal;
extern QueryDepositsResponseDefaultTypeInternal _QueryDepositsResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
class QueryProposalRequest;
struct QueryProposalRequestDefaultTypeInternal;
extern QueryProposalRequestDefaultTypeInternal _QueryProposalRequest_default_instance_;
class QueryProposalResponse;
struct QueryProposalResponseDefaultTypeInternal;
extern QueryProposalResponseDefaultTypeInternal _QueryProposalResponse_default_instance_;
class QueryProposalsRequest;
struct QueryProposalsRequestDefaultTypeInternal;
extern QueryProposalsRequestDefaultTypeInternal _QueryProposalsRequest_default_instance_;
class QueryProposalsResponse;
struct QueryProposalsResponseDefaultTypeInternal;
extern QueryProposalsResponseDefaultTypeInternal _QueryProposalsResponse_default_instance_;
class QueryTallyResultRequest;
struct QueryTallyResultRequestDefaultTypeInternal;
extern QueryTallyResultRequestDefaultTypeInternal _QueryTallyResultRequest_default_instance_;
class QueryTallyResultResponse;
struct QueryTallyResultResponseDefaultTypeInternal;
extern QueryTallyResultResponseDefaultTypeInternal _QueryTallyResultResponse_default_instance_;
class QueryVoteRequest;
struct QueryVoteRequestDefaultTypeInternal;
extern QueryVoteRequestDefaultTypeInternal _QueryVoteRequest_default_instance_;
class QueryVoteResponse;
struct QueryVoteResponseDefaultTypeInternal;
extern QueryVoteResponseDefaultTypeInternal _QueryVoteResponse_default_instance_;
class QueryVotesRequest;
struct QueryVotesRequestDefaultTypeInternal;
extern QueryVotesRequestDefaultTypeInternal _QueryVotesRequest_default_instance_;
class QueryVotesResponse;
struct QueryVotesResponseDefaultTypeInternal;
extern QueryVotesResponseDefaultTypeInternal _QueryVotesResponse_default_instance_;
}  // namespace v1beta1
}  // namespace gov
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::gov::v1beta1::QueryDepositRequest* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryDepositRequest>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryDepositResponse* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryDepositResponse>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryDepositsRequest* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryDepositsRequest>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryDepositsResponse* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryDepositsResponse>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryParamsRequest* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryParamsRequest>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryParamsResponse* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryParamsResponse>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryProposalRequest* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryProposalRequest>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryProposalResponse* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryProposalResponse>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryProposalsRequest* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryProposalsRequest>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryProposalsResponse* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryProposalsResponse>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryTallyResultRequest* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryTallyResultRequest>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryTallyResultResponse* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryTallyResultResponse>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryVoteRequest* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryVoteRequest>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryVoteResponse* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryVoteResponse>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryVotesRequest* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryVotesRequest>(Arena*);
template <>
::cosmos::gov::v1beta1::QueryVotesResponse* Arena::CreateMaybeMessage<::cosmos::gov::v1beta1::QueryVotesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace gov {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryProposalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryProposalRequest) */ {
 public:
  inline QueryProposalRequest() : QueryProposalRequest(nullptr) {}
  ~QueryProposalRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProposalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProposalRequest(const QueryProposalRequest& from);
  QueryProposalRequest(QueryProposalRequest&& from) noexcept
    : QueryProposalRequest() {
    *this = ::std::move(from);
  }

  inline QueryProposalRequest& operator=(const QueryProposalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProposalRequest& operator=(QueryProposalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProposalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProposalRequest* internal_default_instance() {
    return reinterpret_cast<const QueryProposalRequest*>(
               &_QueryProposalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryProposalRequest& a, QueryProposalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProposalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProposalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProposalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProposalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProposalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProposalRequest& from) {
    QueryProposalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProposalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryProposalRequest";
  }
  protected:
  explicit QueryProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryProposalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProposalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryProposalResponse) */ {
 public:
  inline QueryProposalResponse() : QueryProposalResponse(nullptr) {}
  ~QueryProposalResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProposalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProposalResponse(const QueryProposalResponse& from);
  QueryProposalResponse(QueryProposalResponse&& from) noexcept
    : QueryProposalResponse() {
    *this = ::std::move(from);
  }

  inline QueryProposalResponse& operator=(const QueryProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProposalResponse& operator=(QueryProposalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProposalResponse* internal_default_instance() {
    return reinterpret_cast<const QueryProposalResponse*>(
               &_QueryProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryProposalResponse& a, QueryProposalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProposalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProposalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProposalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProposalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProposalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProposalResponse& from) {
    QueryProposalResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProposalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryProposalResponse";
  }
  protected:
  explicit QueryProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
  };
  // .cosmos.gov.v1beta1.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_proposal() const;
  void clear_proposal() ;
  const ::cosmos::gov::v1beta1::Proposal& proposal() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1beta1::Proposal* release_proposal();
  ::cosmos::gov::v1beta1::Proposal* mutable_proposal();
  void set_allocated_proposal(::cosmos::gov::v1beta1::Proposal* proposal);
  private:
  const ::cosmos::gov::v1beta1::Proposal& _internal_proposal() const;
  ::cosmos::gov::v1beta1::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::cosmos::gov::v1beta1::Proposal* proposal);
  ::cosmos::gov::v1beta1::Proposal* unsafe_arena_release_proposal();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryProposalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::gov::v1beta1::Proposal* proposal_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProposalsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryProposalsRequest) */ {
 public:
  inline QueryProposalsRequest() : QueryProposalsRequest(nullptr) {}
  ~QueryProposalsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProposalsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProposalsRequest(const QueryProposalsRequest& from);
  QueryProposalsRequest(QueryProposalsRequest&& from) noexcept
    : QueryProposalsRequest() {
    *this = ::std::move(from);
  }

  inline QueryProposalsRequest& operator=(const QueryProposalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProposalsRequest& operator=(QueryProposalsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProposalsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProposalsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryProposalsRequest*>(
               &_QueryProposalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryProposalsRequest& a, QueryProposalsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProposalsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProposalsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProposalsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProposalsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProposalsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProposalsRequest& from) {
    QueryProposalsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProposalsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryProposalsRequest";
  }
  protected:
  explicit QueryProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterFieldNumber = 2,
    kDepositorFieldNumber = 3,
    kPaginationFieldNumber = 4,
    kProposalStatusFieldNumber = 1,
  };
  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* ptr);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // string depositor = 3 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_depositor() ;
  const std::string& depositor() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_depositor(Arg_&& arg, Args_... args);
  std::string* mutable_depositor();
  PROTOBUF_NODISCARD std::string* release_depositor();
  void set_allocated_depositor(std::string* ptr);

  private:
  const std::string& _internal_depositor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depositor(
      const std::string& value);
  std::string* _internal_mutable_depositor();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 4 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // .cosmos.gov.v1beta1.ProposalStatus proposal_status = 1 [json_name = "proposalStatus"];
  void clear_proposal_status() ;
  ::cosmos::gov::v1beta1::ProposalStatus proposal_status() const;
  void set_proposal_status(::cosmos::gov::v1beta1::ProposalStatus value);

  private:
  ::cosmos::gov::v1beta1::ProposalStatus _internal_proposal_status() const;
  void _internal_set_proposal_status(::cosmos::gov::v1beta1::ProposalStatus value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryProposalsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depositor_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    int proposal_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProposalsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryProposalsResponse) */ {
 public:
  inline QueryProposalsResponse() : QueryProposalsResponse(nullptr) {}
  ~QueryProposalsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProposalsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProposalsResponse(const QueryProposalsResponse& from);
  QueryProposalsResponse(QueryProposalsResponse&& from) noexcept
    : QueryProposalsResponse() {
    *this = ::std::move(from);
  }

  inline QueryProposalsResponse& operator=(const QueryProposalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProposalsResponse& operator=(QueryProposalsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProposalsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProposalsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryProposalsResponse*>(
               &_QueryProposalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryProposalsResponse& a, QueryProposalsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProposalsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProposalsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProposalsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProposalsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProposalsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProposalsResponse& from) {
    QueryProposalsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProposalsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryProposalsResponse";
  }
  protected:
  explicit QueryProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.gov.v1beta1.Proposal proposals = 1 [json_name = "proposals", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int proposals_size() const;
  private:
  int _internal_proposals_size() const;

  public:
  void clear_proposals() ;
  ::cosmos::gov::v1beta1::Proposal* mutable_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Proposal >*
      mutable_proposals();
  private:
  const ::cosmos::gov::v1beta1::Proposal& _internal_proposals(int index) const;
  ::cosmos::gov::v1beta1::Proposal* _internal_add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Proposal>& _internal_proposals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Proposal>* _internal_mutable_proposals();
  public:
  const ::cosmos::gov::v1beta1::Proposal& proposals(int index) const;
  ::cosmos::gov::v1beta1::Proposal* add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Proposal >&
      proposals() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryProposalsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Proposal > proposals_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVoteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryVoteRequest) */ {
 public:
  inline QueryVoteRequest() : QueryVoteRequest(nullptr) {}
  ~QueryVoteRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVoteRequest(const QueryVoteRequest& from);
  QueryVoteRequest(QueryVoteRequest&& from) noexcept
    : QueryVoteRequest() {
    *this = ::std::move(from);
  }

  inline QueryVoteRequest& operator=(const QueryVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVoteRequest& operator=(QueryVoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVoteRequest* internal_default_instance() {
    return reinterpret_cast<const QueryVoteRequest*>(
               &_QueryVoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryVoteRequest& a, QueryVoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVoteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVoteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVoteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVoteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVoteRequest& from) {
    QueryVoteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVoteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryVoteRequest";
  }
  protected:
  explicit QueryVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* ptr);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryVoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_;
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryVoteResponse) */ {
 public:
  inline QueryVoteResponse() : QueryVoteResponse(nullptr) {}
  ~QueryVoteResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVoteResponse(const QueryVoteResponse& from);
  QueryVoteResponse(QueryVoteResponse&& from) noexcept
    : QueryVoteResponse() {
    *this = ::std::move(from);
  }

  inline QueryVoteResponse& operator=(const QueryVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVoteResponse& operator=(QueryVoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVoteResponse* internal_default_instance() {
    return reinterpret_cast<const QueryVoteResponse*>(
               &_QueryVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryVoteResponse& a, QueryVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVoteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVoteResponse& from) {
    QueryVoteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVoteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryVoteResponse";
  }
  protected:
  explicit QueryVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteFieldNumber = 1,
  };
  // .cosmos.gov.v1beta1.Vote vote = 1 [json_name = "vote", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_vote() const;
  void clear_vote() ;
  const ::cosmos::gov::v1beta1::Vote& vote() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1beta1::Vote* release_vote();
  ::cosmos::gov::v1beta1::Vote* mutable_vote();
  void set_allocated_vote(::cosmos::gov::v1beta1::Vote* vote);
  private:
  const ::cosmos::gov::v1beta1::Vote& _internal_vote() const;
  ::cosmos::gov::v1beta1::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::cosmos::gov::v1beta1::Vote* vote);
  ::cosmos::gov::v1beta1::Vote* unsafe_arena_release_vote();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::gov::v1beta1::Vote* vote_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVotesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryVotesRequest) */ {
 public:
  inline QueryVotesRequest() : QueryVotesRequest(nullptr) {}
  ~QueryVotesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVotesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVotesRequest(const QueryVotesRequest& from);
  QueryVotesRequest(QueryVotesRequest&& from) noexcept
    : QueryVotesRequest() {
    *this = ::std::move(from);
  }

  inline QueryVotesRequest& operator=(const QueryVotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVotesRequest& operator=(QueryVotesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVotesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVotesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryVotesRequest*>(
               &_QueryVotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryVotesRequest& a, QueryVotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVotesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVotesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVotesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVotesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVotesRequest& from) {
    QueryVotesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVotesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryVotesRequest";
  }
  protected:
  explicit QueryVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryVotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t proposal_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVotesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryVotesResponse) */ {
 public:
  inline QueryVotesResponse() : QueryVotesResponse(nullptr) {}
  ~QueryVotesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVotesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVotesResponse(const QueryVotesResponse& from);
  QueryVotesResponse(QueryVotesResponse&& from) noexcept
    : QueryVotesResponse() {
    *this = ::std::move(from);
  }

  inline QueryVotesResponse& operator=(const QueryVotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVotesResponse& operator=(QueryVotesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVotesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVotesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryVotesResponse*>(
               &_QueryVotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryVotesResponse& a, QueryVotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVotesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVotesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVotesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVotesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVotesResponse& from) {
    QueryVotesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVotesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryVotesResponse";
  }
  protected:
  explicit QueryVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.gov.v1beta1.Vote votes = 1 [json_name = "votes", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int votes_size() const;
  private:
  int _internal_votes_size() const;

  public:
  void clear_votes() ;
  ::cosmos::gov::v1beta1::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Vote >*
      mutable_votes();
  private:
  const ::cosmos::gov::v1beta1::Vote& _internal_votes(int index) const;
  ::cosmos::gov::v1beta1::Vote* _internal_add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Vote>& _internal_votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Vote>* _internal_mutable_votes();
  public:
  const ::cosmos::gov::v1beta1::Vote& votes(int index) const;
  ::cosmos::gov::v1beta1::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Vote >&
      votes() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryVotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Vote > votes_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  ~QueryParamsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsRequest& from) {
    QueryParamsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsTypeFieldNumber = 1,
  };
  // string params_type = 1 [json_name = "paramsType"];
  void clear_params_type() ;
  const std::string& params_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_params_type(Arg_&& arg, Args_... args);
  std::string* mutable_params_type();
  PROTOBUF_NODISCARD std::string* release_params_type();
  void set_allocated_params_type(std::string* ptr);

  private:
  const std::string& _internal_params_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_params_type(
      const std::string& value);
  std::string* _internal_mutable_params_type();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr params_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotingParamsFieldNumber = 1,
    kDepositParamsFieldNumber = 2,
    kTallyParamsFieldNumber = 3,
  };
  // .cosmos.gov.v1beta1.VotingParams voting_params = 1 [json_name = "votingParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_voting_params() const;
  void clear_voting_params() ;
  const ::cosmos::gov::v1beta1::VotingParams& voting_params() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1beta1::VotingParams* release_voting_params();
  ::cosmos::gov::v1beta1::VotingParams* mutable_voting_params();
  void set_allocated_voting_params(::cosmos::gov::v1beta1::VotingParams* voting_params);
  private:
  const ::cosmos::gov::v1beta1::VotingParams& _internal_voting_params() const;
  ::cosmos::gov::v1beta1::VotingParams* _internal_mutable_voting_params();
  public:
  void unsafe_arena_set_allocated_voting_params(
      ::cosmos::gov::v1beta1::VotingParams* voting_params);
  ::cosmos::gov::v1beta1::VotingParams* unsafe_arena_release_voting_params();
  // .cosmos.gov.v1beta1.DepositParams deposit_params = 2 [json_name = "depositParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_deposit_params() const;
  void clear_deposit_params() ;
  const ::cosmos::gov::v1beta1::DepositParams& deposit_params() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1beta1::DepositParams* release_deposit_params();
  ::cosmos::gov::v1beta1::DepositParams* mutable_deposit_params();
  void set_allocated_deposit_params(::cosmos::gov::v1beta1::DepositParams* deposit_params);
  private:
  const ::cosmos::gov::v1beta1::DepositParams& _internal_deposit_params() const;
  ::cosmos::gov::v1beta1::DepositParams* _internal_mutable_deposit_params();
  public:
  void unsafe_arena_set_allocated_deposit_params(
      ::cosmos::gov::v1beta1::DepositParams* deposit_params);
  ::cosmos::gov::v1beta1::DepositParams* unsafe_arena_release_deposit_params();
  // .cosmos.gov.v1beta1.TallyParams tally_params = 3 [json_name = "tallyParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_tally_params() const;
  void clear_tally_params() ;
  const ::cosmos::gov::v1beta1::TallyParams& tally_params() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1beta1::TallyParams* release_tally_params();
  ::cosmos::gov::v1beta1::TallyParams* mutable_tally_params();
  void set_allocated_tally_params(::cosmos::gov::v1beta1::TallyParams* tally_params);
  private:
  const ::cosmos::gov::v1beta1::TallyParams& _internal_tally_params() const;
  ::cosmos::gov::v1beta1::TallyParams* _internal_mutable_tally_params();
  public:
  void unsafe_arena_set_allocated_tally_params(
      ::cosmos::gov::v1beta1::TallyParams* tally_params);
  ::cosmos::gov::v1beta1::TallyParams* unsafe_arena_release_tally_params();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::gov::v1beta1::VotingParams* voting_params_;
    ::cosmos::gov::v1beta1::DepositParams* deposit_params_;
    ::cosmos::gov::v1beta1::TallyParams* tally_params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDepositRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryDepositRequest) */ {
 public:
  inline QueryDepositRequest() : QueryDepositRequest(nullptr) {}
  ~QueryDepositRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDepositRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDepositRequest(const QueryDepositRequest& from);
  QueryDepositRequest(QueryDepositRequest&& from) noexcept
    : QueryDepositRequest() {
    *this = ::std::move(from);
  }

  inline QueryDepositRequest& operator=(const QueryDepositRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDepositRequest& operator=(QueryDepositRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDepositRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDepositRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDepositRequest*>(
               &_QueryDepositRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryDepositRequest& a, QueryDepositRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDepositRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDepositRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDepositRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDepositRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDepositRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDepositRequest& from) {
    QueryDepositRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDepositRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryDepositRequest";
  }
  protected:
  explicit QueryDepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositorFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_depositor() ;
  const std::string& depositor() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_depositor(Arg_&& arg, Args_... args);
  std::string* mutable_depositor();
  PROTOBUF_NODISCARD std::string* release_depositor();
  void set_allocated_depositor(std::string* ptr);

  private:
  const std::string& _internal_depositor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depositor(
      const std::string& value);
  std::string* _internal_mutable_depositor();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryDepositRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depositor_;
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDepositResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryDepositResponse) */ {
 public:
  inline QueryDepositResponse() : QueryDepositResponse(nullptr) {}
  ~QueryDepositResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDepositResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDepositResponse(const QueryDepositResponse& from);
  QueryDepositResponse(QueryDepositResponse&& from) noexcept
    : QueryDepositResponse() {
    *this = ::std::move(from);
  }

  inline QueryDepositResponse& operator=(const QueryDepositResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDepositResponse& operator=(QueryDepositResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDepositResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDepositResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDepositResponse*>(
               &_QueryDepositResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryDepositResponse& a, QueryDepositResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDepositResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDepositResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDepositResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDepositResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDepositResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDepositResponse& from) {
    QueryDepositResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDepositResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryDepositResponse";
  }
  protected:
  explicit QueryDepositResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositFieldNumber = 1,
  };
  // .cosmos.gov.v1beta1.Deposit deposit = 1 [json_name = "deposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_deposit() const;
  void clear_deposit() ;
  const ::cosmos::gov::v1beta1::Deposit& deposit() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1beta1::Deposit* release_deposit();
  ::cosmos::gov::v1beta1::Deposit* mutable_deposit();
  void set_allocated_deposit(::cosmos::gov::v1beta1::Deposit* deposit);
  private:
  const ::cosmos::gov::v1beta1::Deposit& _internal_deposit() const;
  ::cosmos::gov::v1beta1::Deposit* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::cosmos::gov::v1beta1::Deposit* deposit);
  ::cosmos::gov::v1beta1::Deposit* unsafe_arena_release_deposit();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryDepositResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::gov::v1beta1::Deposit* deposit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDepositsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryDepositsRequest) */ {
 public:
  inline QueryDepositsRequest() : QueryDepositsRequest(nullptr) {}
  ~QueryDepositsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDepositsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDepositsRequest(const QueryDepositsRequest& from);
  QueryDepositsRequest(QueryDepositsRequest&& from) noexcept
    : QueryDepositsRequest() {
    *this = ::std::move(from);
  }

  inline QueryDepositsRequest& operator=(const QueryDepositsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDepositsRequest& operator=(QueryDepositsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDepositsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDepositsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDepositsRequest*>(
               &_QueryDepositsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryDepositsRequest& a, QueryDepositsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDepositsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDepositsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDepositsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDepositsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDepositsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDepositsRequest& from) {
    QueryDepositsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDepositsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryDepositsRequest";
  }
  protected:
  explicit QueryDepositsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryDepositsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t proposal_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDepositsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryDepositsResponse) */ {
 public:
  inline QueryDepositsResponse() : QueryDepositsResponse(nullptr) {}
  ~QueryDepositsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDepositsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDepositsResponse(const QueryDepositsResponse& from);
  QueryDepositsResponse(QueryDepositsResponse&& from) noexcept
    : QueryDepositsResponse() {
    *this = ::std::move(from);
  }

  inline QueryDepositsResponse& operator=(const QueryDepositsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDepositsResponse& operator=(QueryDepositsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDepositsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDepositsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDepositsResponse*>(
               &_QueryDepositsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryDepositsResponse& a, QueryDepositsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDepositsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDepositsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDepositsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDepositsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDepositsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDepositsResponse& from) {
    QueryDepositsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDepositsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryDepositsResponse";
  }
  protected:
  explicit QueryDepositsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepositsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.gov.v1beta1.Deposit deposits = 1 [json_name = "deposits", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int deposits_size() const;
  private:
  int _internal_deposits_size() const;

  public:
  void clear_deposits() ;
  ::cosmos::gov::v1beta1::Deposit* mutable_deposits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Deposit >*
      mutable_deposits();
  private:
  const ::cosmos::gov::v1beta1::Deposit& _internal_deposits(int index) const;
  ::cosmos::gov::v1beta1::Deposit* _internal_add_deposits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Deposit>& _internal_deposits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Deposit>* _internal_mutable_deposits();
  public:
  const ::cosmos::gov::v1beta1::Deposit& deposits(int index) const;
  ::cosmos::gov::v1beta1::Deposit* add_deposits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Deposit >&
      deposits() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryDepositsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Deposit > deposits_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTallyResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryTallyResultRequest) */ {
 public:
  inline QueryTallyResultRequest() : QueryTallyResultRequest(nullptr) {}
  ~QueryTallyResultRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTallyResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTallyResultRequest(const QueryTallyResultRequest& from);
  QueryTallyResultRequest(QueryTallyResultRequest&& from) noexcept
    : QueryTallyResultRequest() {
    *this = ::std::move(from);
  }

  inline QueryTallyResultRequest& operator=(const QueryTallyResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTallyResultRequest& operator=(QueryTallyResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTallyResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTallyResultRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTallyResultRequest*>(
               &_QueryTallyResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryTallyResultRequest& a, QueryTallyResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTallyResultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTallyResultRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTallyResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTallyResultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTallyResultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTallyResultRequest& from) {
    QueryTallyResultRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTallyResultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryTallyResultRequest";
  }
  protected:
  explicit QueryTallyResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryTallyResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTallyResultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1beta1.QueryTallyResultResponse) */ {
 public:
  inline QueryTallyResultResponse() : QueryTallyResultResponse(nullptr) {}
  ~QueryTallyResultResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTallyResultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTallyResultResponse(const QueryTallyResultResponse& from);
  QueryTallyResultResponse(QueryTallyResultResponse&& from) noexcept
    : QueryTallyResultResponse() {
    *this = ::std::move(from);
  }

  inline QueryTallyResultResponse& operator=(const QueryTallyResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTallyResultResponse& operator=(QueryTallyResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTallyResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTallyResultResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTallyResultResponse*>(
               &_QueryTallyResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryTallyResultResponse& a, QueryTallyResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTallyResultResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTallyResultResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTallyResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTallyResultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTallyResultResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTallyResultResponse& from) {
    QueryTallyResultResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTallyResultResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1beta1.QueryTallyResultResponse";
  }
  protected:
  explicit QueryTallyResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTallyFieldNumber = 1,
  };
  // .cosmos.gov.v1beta1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_tally() const;
  void clear_tally() ;
  const ::cosmos::gov::v1beta1::TallyResult& tally() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1beta1::TallyResult* release_tally();
  ::cosmos::gov::v1beta1::TallyResult* mutable_tally();
  void set_allocated_tally(::cosmos::gov::v1beta1::TallyResult* tally);
  private:
  const ::cosmos::gov::v1beta1::TallyResult& _internal_tally() const;
  ::cosmos::gov::v1beta1::TallyResult* _internal_mutable_tally();
  public:
  void unsafe_arena_set_allocated_tally(
      ::cosmos::gov::v1beta1::TallyResult* tally);
  ::cosmos::gov::v1beta1::TallyResult* unsafe_arena_release_tally();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1beta1.QueryTallyResultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::gov::v1beta1::TallyResult* tally_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryProposalRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryProposalRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryProposalRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryProposalRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryProposalRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryProposalRequest.proposal_id)
}
inline ::uint64_t QueryProposalRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryProposalRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// QueryProposalResponse

// .cosmos.gov.v1beta1.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryProposalResponse::has_proposal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposal_ != nullptr);
  return value;
}
inline const ::cosmos::gov::v1beta1::Proposal& QueryProposalResponse::_internal_proposal() const {
  const ::cosmos::gov::v1beta1::Proposal* p = _impl_.proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1beta1::Proposal&>(
      ::cosmos::gov::v1beta1::_Proposal_default_instance_);
}
inline const ::cosmos::gov::v1beta1::Proposal& QueryProposalResponse::proposal() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryProposalResponse.proposal)
  return _internal_proposal();
}
inline void QueryProposalResponse::unsafe_arena_set_allocated_proposal(
    ::cosmos::gov::v1beta1::Proposal* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposal_);
  }
  _impl_.proposal_ = proposal;
  if (proposal) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryProposalResponse.proposal)
}
inline ::cosmos::gov::v1beta1::Proposal* QueryProposalResponse::release_proposal() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::Proposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::gov::v1beta1::Proposal* QueryProposalResponse::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryProposalResponse.proposal)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::Proposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1beta1::Proposal* QueryProposalResponse::_internal_mutable_proposal() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::gov::v1beta1::Proposal>(GetArenaForAllocation());
    _impl_.proposal_ = p;
  }
  return _impl_.proposal_;
}
inline ::cosmos::gov::v1beta1::Proposal* QueryProposalResponse::mutable_proposal() {
  ::cosmos::gov::v1beta1::Proposal* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryProposalResponse.proposal)
  return _msg;
}
inline void QueryProposalResponse::set_allocated_proposal(::cosmos::gov::v1beta1::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposal_);
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal));
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryProposalResponse.proposal)
}

// -------------------------------------------------------------------

// QueryProposalsRequest

// .cosmos.gov.v1beta1.ProposalStatus proposal_status = 1 [json_name = "proposalStatus"];
inline void QueryProposalsRequest::clear_proposal_status() {
  _impl_.proposal_status_ = 0;
}
inline ::cosmos::gov::v1beta1::ProposalStatus QueryProposalsRequest::proposal_status() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryProposalsRequest.proposal_status)
  return _internal_proposal_status();
}
inline void QueryProposalsRequest::set_proposal_status(::cosmos::gov::v1beta1::ProposalStatus value) {
   _internal_set_proposal_status(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryProposalsRequest.proposal_status)
}
inline ::cosmos::gov::v1beta1::ProposalStatus QueryProposalsRequest::_internal_proposal_status() const {
  return static_cast<::cosmos::gov::v1beta1::ProposalStatus>(_impl_.proposal_status_);
}
inline void QueryProposalsRequest::_internal_set_proposal_status(::cosmos::gov::v1beta1::ProposalStatus value) {
  ;
  _impl_.proposal_status_ = value;
}

// string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryProposalsRequest::clear_voter() {
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& QueryProposalsRequest::voter() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryProposalsRequest.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryProposalsRequest::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryProposalsRequest.voter)
}
inline std::string* QueryProposalsRequest::mutable_voter() {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryProposalsRequest.voter)
  return _s;
}
inline const std::string& QueryProposalsRequest::_internal_voter() const {
  return _impl_.voter_.Get();
}
inline void QueryProposalsRequest::_internal_set_voter(const std::string& value) {
  ;


  _impl_.voter_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryProposalsRequest::_internal_mutable_voter() {
  ;
  return _impl_.voter_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryProposalsRequest::release_voter() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryProposalsRequest.voter)
  return _impl_.voter_.Release();
}
inline void QueryProposalsRequest::set_allocated_voter(std::string* value) {
  _impl_.voter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.voter_.IsDefault()) {
          _impl_.voter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryProposalsRequest.voter)
}

// string depositor = 3 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryProposalsRequest::clear_depositor() {
  _impl_.depositor_.ClearToEmpty();
}
inline const std::string& QueryProposalsRequest::depositor() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryProposalsRequest.depositor)
  return _internal_depositor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryProposalsRequest::set_depositor(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.depositor_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryProposalsRequest.depositor)
}
inline std::string* QueryProposalsRequest::mutable_depositor() {
  std::string* _s = _internal_mutable_depositor();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryProposalsRequest.depositor)
  return _s;
}
inline const std::string& QueryProposalsRequest::_internal_depositor() const {
  return _impl_.depositor_.Get();
}
inline void QueryProposalsRequest::_internal_set_depositor(const std::string& value) {
  ;


  _impl_.depositor_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryProposalsRequest::_internal_mutable_depositor() {
  ;
  return _impl_.depositor_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryProposalsRequest::release_depositor() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryProposalsRequest.depositor)
  return _impl_.depositor_.Release();
}
inline void QueryProposalsRequest::set_allocated_depositor(std::string* value) {
  _impl_.depositor_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.depositor_.IsDefault()) {
          _impl_.depositor_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryProposalsRequest.depositor)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 4 [json_name = "pagination"];
inline bool QueryProposalsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryProposalsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryProposalsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryProposalsRequest.pagination)
  return _internal_pagination();
}
inline void QueryProposalsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryProposalsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryProposalsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryProposalsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryProposalsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryProposalsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryProposalsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryProposalsRequest.pagination)
  return _msg;
}
inline void QueryProposalsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryProposalsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryProposalsResponse

// repeated .cosmos.gov.v1beta1.Proposal proposals = 1 [json_name = "proposals", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int QueryProposalsResponse::_internal_proposals_size() const {
  return _impl_.proposals_.size();
}
inline int QueryProposalsResponse::proposals_size() const {
  return _internal_proposals_size();
}
inline ::cosmos::gov::v1beta1::Proposal* QueryProposalsResponse::mutable_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryProposalsResponse.proposals)
  return _internal_mutable_proposals()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Proposal >*
QueryProposalsResponse::mutable_proposals() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1beta1.QueryProposalsResponse.proposals)
  return _internal_mutable_proposals();
}
inline const ::cosmos::gov::v1beta1::Proposal& QueryProposalsResponse::_internal_proposals(int index) const {
  return _internal_proposals().Get(index);
}
inline const ::cosmos::gov::v1beta1::Proposal& QueryProposalsResponse::proposals(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryProposalsResponse.proposals)
  return _internal_proposals(index);
}
inline ::cosmos::gov::v1beta1::Proposal* QueryProposalsResponse::_internal_add_proposals() {
  return _internal_mutable_proposals()->Add();
}
inline ::cosmos::gov::v1beta1::Proposal* QueryProposalsResponse::add_proposals() {
  ::cosmos::gov::v1beta1::Proposal* _add = _internal_add_proposals();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1beta1.QueryProposalsResponse.proposals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Proposal >&
QueryProposalsResponse::proposals() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1beta1.QueryProposalsResponse.proposals)
  return _internal_proposals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Proposal>&
QueryProposalsResponse::_internal_proposals() const {
  return _impl_.proposals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Proposal>*
QueryProposalsResponse::_internal_mutable_proposals() {
  return &_impl_.proposals_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryProposalsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryProposalsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryProposalsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryProposalsResponse.pagination)
  return _internal_pagination();
}
inline void QueryProposalsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryProposalsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryProposalsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryProposalsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryProposalsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryProposalsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryProposalsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryProposalsResponse.pagination)
  return _msg;
}
inline void QueryProposalsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryProposalsResponse.pagination)
}

// -------------------------------------------------------------------

// QueryVoteRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryVoteRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryVoteRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryVoteRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryVoteRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryVoteRequest.proposal_id)
}
inline ::uint64_t QueryVoteRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryVoteRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryVoteRequest::clear_voter() {
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& QueryVoteRequest::voter() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryVoteRequest.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryVoteRequest::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryVoteRequest.voter)
}
inline std::string* QueryVoteRequest::mutable_voter() {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryVoteRequest.voter)
  return _s;
}
inline const std::string& QueryVoteRequest::_internal_voter() const {
  return _impl_.voter_.Get();
}
inline void QueryVoteRequest::_internal_set_voter(const std::string& value) {
  ;


  _impl_.voter_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryVoteRequest::_internal_mutable_voter() {
  ;
  return _impl_.voter_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryVoteRequest::release_voter() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryVoteRequest.voter)
  return _impl_.voter_.Release();
}
inline void QueryVoteRequest::set_allocated_voter(std::string* value) {
  _impl_.voter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.voter_.IsDefault()) {
          _impl_.voter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryVoteRequest.voter)
}

// -------------------------------------------------------------------

// QueryVoteResponse

// .cosmos.gov.v1beta1.Vote vote = 1 [json_name = "vote", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryVoteResponse::has_vote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_ != nullptr);
  return value;
}
inline const ::cosmos::gov::v1beta1::Vote& QueryVoteResponse::_internal_vote() const {
  const ::cosmos::gov::v1beta1::Vote* p = _impl_.vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1beta1::Vote&>(
      ::cosmos::gov::v1beta1::_Vote_default_instance_);
}
inline const ::cosmos::gov::v1beta1::Vote& QueryVoteResponse::vote() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryVoteResponse.vote)
  return _internal_vote();
}
inline void QueryVoteResponse::unsafe_arena_set_allocated_vote(
    ::cosmos::gov::v1beta1::Vote* vote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vote_);
  }
  _impl_.vote_ = vote;
  if (vote) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryVoteResponse.vote)
}
inline ::cosmos::gov::v1beta1::Vote* QueryVoteResponse::release_vote() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::Vote* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::gov::v1beta1::Vote* QueryVoteResponse::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryVoteResponse.vote)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::Vote* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1beta1::Vote* QueryVoteResponse::_internal_mutable_vote() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.vote_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::gov::v1beta1::Vote>(GetArenaForAllocation());
    _impl_.vote_ = p;
  }
  return _impl_.vote_;
}
inline ::cosmos::gov::v1beta1::Vote* QueryVoteResponse::mutable_vote() {
  ::cosmos::gov::v1beta1::Vote* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryVoteResponse.vote)
  return _msg;
}
inline void QueryVoteResponse::set_allocated_vote(::cosmos::gov::v1beta1::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vote_);
  }
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote));
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vote_ = vote;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryVoteResponse.vote)
}

// -------------------------------------------------------------------

// QueryVotesRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryVotesRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryVotesRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryVotesRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryVotesRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryVotesRequest.proposal_id)
}
inline ::uint64_t QueryVotesRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryVotesRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryVotesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryVotesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryVotesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryVotesRequest.pagination)
  return _internal_pagination();
}
inline void QueryVotesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryVotesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryVotesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryVotesRequest.pagination)
  return _msg;
}
inline void QueryVotesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryVotesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryVotesResponse

// repeated .cosmos.gov.v1beta1.Vote votes = 1 [json_name = "votes", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int QueryVotesResponse::_internal_votes_size() const {
  return _impl_.votes_.size();
}
inline int QueryVotesResponse::votes_size() const {
  return _internal_votes_size();
}
inline ::cosmos::gov::v1beta1::Vote* QueryVotesResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryVotesResponse.votes)
  return _internal_mutable_votes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Vote >*
QueryVotesResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1beta1.QueryVotesResponse.votes)
  return _internal_mutable_votes();
}
inline const ::cosmos::gov::v1beta1::Vote& QueryVotesResponse::_internal_votes(int index) const {
  return _internal_votes().Get(index);
}
inline const ::cosmos::gov::v1beta1::Vote& QueryVotesResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryVotesResponse.votes)
  return _internal_votes(index);
}
inline ::cosmos::gov::v1beta1::Vote* QueryVotesResponse::_internal_add_votes() {
  return _internal_mutable_votes()->Add();
}
inline ::cosmos::gov::v1beta1::Vote* QueryVotesResponse::add_votes() {
  ::cosmos::gov::v1beta1::Vote* _add = _internal_add_votes();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1beta1.QueryVotesResponse.votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Vote >&
QueryVotesResponse::votes() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1beta1.QueryVotesResponse.votes)
  return _internal_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Vote>&
QueryVotesResponse::_internal_votes() const {
  return _impl_.votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Vote>*
QueryVotesResponse::_internal_mutable_votes() {
  return &_impl_.votes_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryVotesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryVotesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryVotesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryVotesResponse.pagination)
  return _internal_pagination();
}
inline void QueryVotesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryVotesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryVotesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryVotesResponse.pagination)
  return _msg;
}
inline void QueryVotesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryVotesResponse.pagination)
}

// -------------------------------------------------------------------

// QueryParamsRequest

// string params_type = 1 [json_name = "paramsType"];
inline void QueryParamsRequest::clear_params_type() {
  _impl_.params_type_.ClearToEmpty();
}
inline const std::string& QueryParamsRequest::params_type() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryParamsRequest.params_type)
  return _internal_params_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryParamsRequest::set_params_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.params_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryParamsRequest.params_type)
}
inline std::string* QueryParamsRequest::mutable_params_type() {
  std::string* _s = _internal_mutable_params_type();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryParamsRequest.params_type)
  return _s;
}
inline const std::string& QueryParamsRequest::_internal_params_type() const {
  return _impl_.params_type_.Get();
}
inline void QueryParamsRequest::_internal_set_params_type(const std::string& value) {
  ;


  _impl_.params_type_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryParamsRequest::_internal_mutable_params_type() {
  ;
  return _impl_.params_type_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryParamsRequest::release_params_type() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryParamsRequest.params_type)
  return _impl_.params_type_.Release();
}
inline void QueryParamsRequest::set_allocated_params_type(std::string* value) {
  _impl_.params_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.params_type_.IsDefault()) {
          _impl_.params_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryParamsRequest.params_type)
}

// -------------------------------------------------------------------

// QueryParamsResponse

// .cosmos.gov.v1beta1.VotingParams voting_params = 1 [json_name = "votingParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryParamsResponse::has_voting_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_params_ != nullptr);
  return value;
}
inline const ::cosmos::gov::v1beta1::VotingParams& QueryParamsResponse::_internal_voting_params() const {
  const ::cosmos::gov::v1beta1::VotingParams* p = _impl_.voting_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1beta1::VotingParams&>(
      ::cosmos::gov::v1beta1::_VotingParams_default_instance_);
}
inline const ::cosmos::gov::v1beta1::VotingParams& QueryParamsResponse::voting_params() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryParamsResponse.voting_params)
  return _internal_voting_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_voting_params(
    ::cosmos::gov::v1beta1::VotingParams* voting_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_params_);
  }
  _impl_.voting_params_ = voting_params;
  if (voting_params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryParamsResponse.voting_params)
}
inline ::cosmos::gov::v1beta1::VotingParams* QueryParamsResponse::release_voting_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::VotingParams* temp = _impl_.voting_params_;
  _impl_.voting_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::gov::v1beta1::VotingParams* QueryParamsResponse::unsafe_arena_release_voting_params() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryParamsResponse.voting_params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::VotingParams* temp = _impl_.voting_params_;
  _impl_.voting_params_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1beta1::VotingParams* QueryParamsResponse::_internal_mutable_voting_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.voting_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::gov::v1beta1::VotingParams>(GetArenaForAllocation());
    _impl_.voting_params_ = p;
  }
  return _impl_.voting_params_;
}
inline ::cosmos::gov::v1beta1::VotingParams* QueryParamsResponse::mutable_voting_params() {
  ::cosmos::gov::v1beta1::VotingParams* _msg = _internal_mutable_voting_params();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryParamsResponse.voting_params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_voting_params(::cosmos::gov::v1beta1::VotingParams* voting_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_params_);
  }
  if (voting_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voting_params));
    if (message_arena != submessage_arena) {
      voting_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voting_params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.voting_params_ = voting_params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryParamsResponse.voting_params)
}

// .cosmos.gov.v1beta1.DepositParams deposit_params = 2 [json_name = "depositParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryParamsResponse::has_deposit_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deposit_params_ != nullptr);
  return value;
}
inline const ::cosmos::gov::v1beta1::DepositParams& QueryParamsResponse::_internal_deposit_params() const {
  const ::cosmos::gov::v1beta1::DepositParams* p = _impl_.deposit_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1beta1::DepositParams&>(
      ::cosmos::gov::v1beta1::_DepositParams_default_instance_);
}
inline const ::cosmos::gov::v1beta1::DepositParams& QueryParamsResponse::deposit_params() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryParamsResponse.deposit_params)
  return _internal_deposit_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_deposit_params(
    ::cosmos::gov::v1beta1::DepositParams* deposit_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposit_params_);
  }
  _impl_.deposit_params_ = deposit_params;
  if (deposit_params) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryParamsResponse.deposit_params)
}
inline ::cosmos::gov::v1beta1::DepositParams* QueryParamsResponse::release_deposit_params() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::gov::v1beta1::DepositParams* temp = _impl_.deposit_params_;
  _impl_.deposit_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::gov::v1beta1::DepositParams* QueryParamsResponse::unsafe_arena_release_deposit_params() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryParamsResponse.deposit_params)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::gov::v1beta1::DepositParams* temp = _impl_.deposit_params_;
  _impl_.deposit_params_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1beta1::DepositParams* QueryParamsResponse::_internal_mutable_deposit_params() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.deposit_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::gov::v1beta1::DepositParams>(GetArenaForAllocation());
    _impl_.deposit_params_ = p;
  }
  return _impl_.deposit_params_;
}
inline ::cosmos::gov::v1beta1::DepositParams* QueryParamsResponse::mutable_deposit_params() {
  ::cosmos::gov::v1beta1::DepositParams* _msg = _internal_mutable_deposit_params();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryParamsResponse.deposit_params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_deposit_params(::cosmos::gov::v1beta1::DepositParams* deposit_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposit_params_);
  }
  if (deposit_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit_params));
    if (message_arena != submessage_arena) {
      deposit_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit_params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.deposit_params_ = deposit_params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryParamsResponse.deposit_params)
}

// .cosmos.gov.v1beta1.TallyParams tally_params = 3 [json_name = "tallyParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryParamsResponse::has_tally_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tally_params_ != nullptr);
  return value;
}
inline const ::cosmos::gov::v1beta1::TallyParams& QueryParamsResponse::_internal_tally_params() const {
  const ::cosmos::gov::v1beta1::TallyParams* p = _impl_.tally_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1beta1::TallyParams&>(
      ::cosmos::gov::v1beta1::_TallyParams_default_instance_);
}
inline const ::cosmos::gov::v1beta1::TallyParams& QueryParamsResponse::tally_params() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryParamsResponse.tally_params)
  return _internal_tally_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_tally_params(
    ::cosmos::gov::v1beta1::TallyParams* tally_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tally_params_);
  }
  _impl_.tally_params_ = tally_params;
  if (tally_params) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryParamsResponse.tally_params)
}
inline ::cosmos::gov::v1beta1::TallyParams* QueryParamsResponse::release_tally_params() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::gov::v1beta1::TallyParams* temp = _impl_.tally_params_;
  _impl_.tally_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::gov::v1beta1::TallyParams* QueryParamsResponse::unsafe_arena_release_tally_params() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryParamsResponse.tally_params)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::gov::v1beta1::TallyParams* temp = _impl_.tally_params_;
  _impl_.tally_params_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1beta1::TallyParams* QueryParamsResponse::_internal_mutable_tally_params() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tally_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::gov::v1beta1::TallyParams>(GetArenaForAllocation());
    _impl_.tally_params_ = p;
  }
  return _impl_.tally_params_;
}
inline ::cosmos::gov::v1beta1::TallyParams* QueryParamsResponse::mutable_tally_params() {
  ::cosmos::gov::v1beta1::TallyParams* _msg = _internal_mutable_tally_params();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryParamsResponse.tally_params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_tally_params(::cosmos::gov::v1beta1::TallyParams* tally_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tally_params_);
  }
  if (tally_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tally_params));
    if (message_arena != submessage_arena) {
      tally_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tally_params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tally_params_ = tally_params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryParamsResponse.tally_params)
}

// -------------------------------------------------------------------

// QueryDepositRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryDepositRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryDepositRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryDepositRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryDepositRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryDepositRequest.proposal_id)
}
inline ::uint64_t QueryDepositRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryDepositRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryDepositRequest::clear_depositor() {
  _impl_.depositor_.ClearToEmpty();
}
inline const std::string& QueryDepositRequest::depositor() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryDepositRequest.depositor)
  return _internal_depositor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDepositRequest::set_depositor(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.depositor_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryDepositRequest.depositor)
}
inline std::string* QueryDepositRequest::mutable_depositor() {
  std::string* _s = _internal_mutable_depositor();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryDepositRequest.depositor)
  return _s;
}
inline const std::string& QueryDepositRequest::_internal_depositor() const {
  return _impl_.depositor_.Get();
}
inline void QueryDepositRequest::_internal_set_depositor(const std::string& value) {
  ;


  _impl_.depositor_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDepositRequest::_internal_mutable_depositor() {
  ;
  return _impl_.depositor_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDepositRequest::release_depositor() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryDepositRequest.depositor)
  return _impl_.depositor_.Release();
}
inline void QueryDepositRequest::set_allocated_depositor(std::string* value) {
  _impl_.depositor_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.depositor_.IsDefault()) {
          _impl_.depositor_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryDepositRequest.depositor)
}

// -------------------------------------------------------------------

// QueryDepositResponse

// .cosmos.gov.v1beta1.Deposit deposit = 1 [json_name = "deposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryDepositResponse::has_deposit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deposit_ != nullptr);
  return value;
}
inline const ::cosmos::gov::v1beta1::Deposit& QueryDepositResponse::_internal_deposit() const {
  const ::cosmos::gov::v1beta1::Deposit* p = _impl_.deposit_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1beta1::Deposit&>(
      ::cosmos::gov::v1beta1::_Deposit_default_instance_);
}
inline const ::cosmos::gov::v1beta1::Deposit& QueryDepositResponse::deposit() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryDepositResponse.deposit)
  return _internal_deposit();
}
inline void QueryDepositResponse::unsafe_arena_set_allocated_deposit(
    ::cosmos::gov::v1beta1::Deposit* deposit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposit_);
  }
  _impl_.deposit_ = deposit;
  if (deposit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryDepositResponse.deposit)
}
inline ::cosmos::gov::v1beta1::Deposit* QueryDepositResponse::release_deposit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::Deposit* temp = _impl_.deposit_;
  _impl_.deposit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::gov::v1beta1::Deposit* QueryDepositResponse::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryDepositResponse.deposit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::Deposit* temp = _impl_.deposit_;
  _impl_.deposit_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1beta1::Deposit* QueryDepositResponse::_internal_mutable_deposit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.deposit_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::gov::v1beta1::Deposit>(GetArenaForAllocation());
    _impl_.deposit_ = p;
  }
  return _impl_.deposit_;
}
inline ::cosmos::gov::v1beta1::Deposit* QueryDepositResponse::mutable_deposit() {
  ::cosmos::gov::v1beta1::Deposit* _msg = _internal_mutable_deposit();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryDepositResponse.deposit)
  return _msg;
}
inline void QueryDepositResponse::set_allocated_deposit(::cosmos::gov::v1beta1::Deposit* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposit_);
  }
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit));
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deposit_ = deposit;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryDepositResponse.deposit)
}

// -------------------------------------------------------------------

// QueryDepositsRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryDepositsRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryDepositsRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryDepositsRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryDepositsRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryDepositsRequest.proposal_id)
}
inline ::uint64_t QueryDepositsRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryDepositsRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryDepositsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryDepositsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryDepositsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryDepositsRequest.pagination)
  return _internal_pagination();
}
inline void QueryDepositsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryDepositsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDepositsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDepositsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryDepositsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDepositsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDepositsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryDepositsRequest.pagination)
  return _msg;
}
inline void QueryDepositsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryDepositsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryDepositsResponse

// repeated .cosmos.gov.v1beta1.Deposit deposits = 1 [json_name = "deposits", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int QueryDepositsResponse::_internal_deposits_size() const {
  return _impl_.deposits_.size();
}
inline int QueryDepositsResponse::deposits_size() const {
  return _internal_deposits_size();
}
inline ::cosmos::gov::v1beta1::Deposit* QueryDepositsResponse::mutable_deposits(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryDepositsResponse.deposits)
  return _internal_mutable_deposits()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Deposit >*
QueryDepositsResponse::mutable_deposits() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1beta1.QueryDepositsResponse.deposits)
  return _internal_mutable_deposits();
}
inline const ::cosmos::gov::v1beta1::Deposit& QueryDepositsResponse::_internal_deposits(int index) const {
  return _internal_deposits().Get(index);
}
inline const ::cosmos::gov::v1beta1::Deposit& QueryDepositsResponse::deposits(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryDepositsResponse.deposits)
  return _internal_deposits(index);
}
inline ::cosmos::gov::v1beta1::Deposit* QueryDepositsResponse::_internal_add_deposits() {
  return _internal_mutable_deposits()->Add();
}
inline ::cosmos::gov::v1beta1::Deposit* QueryDepositsResponse::add_deposits() {
  ::cosmos::gov::v1beta1::Deposit* _add = _internal_add_deposits();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1beta1.QueryDepositsResponse.deposits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1beta1::Deposit >&
QueryDepositsResponse::deposits() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1beta1.QueryDepositsResponse.deposits)
  return _internal_deposits();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Deposit>&
QueryDepositsResponse::_internal_deposits() const {
  return _impl_.deposits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1beta1::Deposit>*
QueryDepositsResponse::_internal_mutable_deposits() {
  return &_impl_.deposits_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryDepositsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryDepositsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryDepositsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryDepositsResponse.pagination)
  return _internal_pagination();
}
inline void QueryDepositsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryDepositsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDepositsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDepositsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryDepositsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDepositsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDepositsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryDepositsResponse.pagination)
  return _msg;
}
inline void QueryDepositsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryDepositsResponse.pagination)
}

// -------------------------------------------------------------------

// QueryTallyResultRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryTallyResultRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryTallyResultRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryTallyResultRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryTallyResultRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1beta1.QueryTallyResultRequest.proposal_id)
}
inline ::uint64_t QueryTallyResultRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryTallyResultRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// QueryTallyResultResponse

// .cosmos.gov.v1beta1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryTallyResultResponse::has_tally() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tally_ != nullptr);
  return value;
}
inline const ::cosmos::gov::v1beta1::TallyResult& QueryTallyResultResponse::_internal_tally() const {
  const ::cosmos::gov::v1beta1::TallyResult* p = _impl_.tally_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1beta1::TallyResult&>(
      ::cosmos::gov::v1beta1::_TallyResult_default_instance_);
}
inline const ::cosmos::gov::v1beta1::TallyResult& QueryTallyResultResponse::tally() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1beta1.QueryTallyResultResponse.tally)
  return _internal_tally();
}
inline void QueryTallyResultResponse::unsafe_arena_set_allocated_tally(
    ::cosmos::gov::v1beta1::TallyResult* tally) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tally_);
  }
  _impl_.tally_ = tally;
  if (tally) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1beta1.QueryTallyResultResponse.tally)
}
inline ::cosmos::gov::v1beta1::TallyResult* QueryTallyResultResponse::release_tally() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::TallyResult* temp = _impl_.tally_;
  _impl_.tally_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::gov::v1beta1::TallyResult* QueryTallyResultResponse::unsafe_arena_release_tally() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1beta1.QueryTallyResultResponse.tally)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1beta1::TallyResult* temp = _impl_.tally_;
  _impl_.tally_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1beta1::TallyResult* QueryTallyResultResponse::_internal_mutable_tally() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tally_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::gov::v1beta1::TallyResult>(GetArenaForAllocation());
    _impl_.tally_ = p;
  }
  return _impl_.tally_;
}
inline ::cosmos::gov::v1beta1::TallyResult* QueryTallyResultResponse::mutable_tally() {
  ::cosmos::gov::v1beta1::TallyResult* _msg = _internal_mutable_tally();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1beta1.QueryTallyResultResponse.tally)
  return _msg;
}
inline void QueryTallyResultResponse::set_allocated_tally(::cosmos::gov::v1beta1::TallyResult* tally) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tally_);
  }
  if (tally) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tally));
    if (message_arena != submessage_arena) {
      tally = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tally, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tally_ = tally;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1beta1.QueryTallyResultResponse.tally)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace gov
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgov_2fv1beta1_2fquery_2eproto_2epb_2eh

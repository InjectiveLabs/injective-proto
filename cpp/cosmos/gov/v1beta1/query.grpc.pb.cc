// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/gov/v1beta1/query.proto

#include "cosmos/gov/v1beta1/query.pb.h"
#include "cosmos/gov/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace gov {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/cosmos.gov.v1beta1.Query/Proposal",
  "/cosmos.gov.v1beta1.Query/Proposals",
  "/cosmos.gov.v1beta1.Query/Vote",
  "/cosmos.gov.v1beta1.Query/Votes",
  "/cosmos.gov.v1beta1.Query/Params",
  "/cosmos.gov.v1beta1.Query/Deposit",
  "/cosmos.gov.v1beta1.Query/Deposits",
  "/cosmos.gov.v1beta1.Query/TallyResult",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Proposal_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Proposals_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Vote_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Votes_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Params_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deposit_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deposits_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TallyResult_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalRequest& request, ::cosmos::gov::v1beta1::QueryProposalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::gov::v1beta1::QueryProposalRequest, ::cosmos::gov::v1beta1::QueryProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Proposal_, context, request, response);
}

void Query::Stub::async::Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalRequest* request, ::cosmos::gov::v1beta1::QueryProposalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::gov::v1beta1::QueryProposalRequest, ::cosmos::gov::v1beta1::QueryProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Proposal_, context, request, response, std::move(f));
}

void Query::Stub::async::Proposal(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalRequest* request, ::cosmos::gov::v1beta1::QueryProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Proposal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryProposalResponse>* Query::Stub::PrepareAsyncProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::gov::v1beta1::QueryProposalResponse, ::cosmos::gov::v1beta1::QueryProposalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Proposal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryProposalResponse>* Query::Stub::AsyncProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalsRequest& request, ::cosmos::gov::v1beta1::QueryProposalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::gov::v1beta1::QueryProposalsRequest, ::cosmos::gov::v1beta1::QueryProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Proposals_, context, request, response);
}

void Query::Stub::async::Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalsRequest* request, ::cosmos::gov::v1beta1::QueryProposalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::gov::v1beta1::QueryProposalsRequest, ::cosmos::gov::v1beta1::QueryProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Proposals_, context, request, response, std::move(f));
}

void Query::Stub::async::Proposals(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalsRequest* request, ::cosmos::gov::v1beta1::QueryProposalsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Proposals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryProposalsResponse>* Query::Stub::PrepareAsyncProposalsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::gov::v1beta1::QueryProposalsResponse, ::cosmos::gov::v1beta1::QueryProposalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Proposals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryProposalsResponse>* Query::Stub::AsyncProposalsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryProposalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVoteRequest& request, ::cosmos::gov::v1beta1::QueryVoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::gov::v1beta1::QueryVoteRequest, ::cosmos::gov::v1beta1::QueryVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Vote_, context, request, response);
}

void Query::Stub::async::Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVoteRequest* request, ::cosmos::gov::v1beta1::QueryVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::gov::v1beta1::QueryVoteRequest, ::cosmos::gov::v1beta1::QueryVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Vote_, context, request, response, std::move(f));
}

void Query::Stub::async::Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVoteRequest* request, ::cosmos::gov::v1beta1::QueryVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Vote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryVoteResponse>* Query::Stub::PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::gov::v1beta1::QueryVoteResponse, ::cosmos::gov::v1beta1::QueryVoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Vote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryVoteResponse>* Query::Stub::AsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVotesRequest& request, ::cosmos::gov::v1beta1::QueryVotesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::gov::v1beta1::QueryVotesRequest, ::cosmos::gov::v1beta1::QueryVotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Votes_, context, request, response);
}

void Query::Stub::async::Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVotesRequest* request, ::cosmos::gov::v1beta1::QueryVotesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::gov::v1beta1::QueryVotesRequest, ::cosmos::gov::v1beta1::QueryVotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Votes_, context, request, response, std::move(f));
}

void Query::Stub::async::Votes(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVotesRequest* request, ::cosmos::gov::v1beta1::QueryVotesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Votes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryVotesResponse>* Query::Stub::PrepareAsyncVotesRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::gov::v1beta1::QueryVotesResponse, ::cosmos::gov::v1beta1::QueryVotesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Votes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryVotesResponse>* Query::Stub::AsyncVotesRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryVotesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVotesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryParamsRequest& request, ::cosmos::gov::v1beta1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::gov::v1beta1::QueryParamsRequest, ::cosmos::gov::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryParamsRequest* request, ::cosmos::gov::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::gov::v1beta1::QueryParamsRequest, ::cosmos::gov::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryParamsRequest* request, ::cosmos::gov::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::gov::v1beta1::QueryParamsResponse, ::cosmos::gov::v1beta1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositRequest& request, ::cosmos::gov::v1beta1::QueryDepositResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::gov::v1beta1::QueryDepositRequest, ::cosmos::gov::v1beta1::QueryDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Deposit_, context, request, response);
}

void Query::Stub::async::Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositRequest* request, ::cosmos::gov::v1beta1::QueryDepositResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::gov::v1beta1::QueryDepositRequest, ::cosmos::gov::v1beta1::QueryDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, std::move(f));
}

void Query::Stub::async::Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositRequest* request, ::cosmos::gov::v1beta1::QueryDepositResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryDepositResponse>* Query::Stub::PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::gov::v1beta1::QueryDepositResponse, ::cosmos::gov::v1beta1::QueryDepositRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Deposit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryDepositResponse>* Query::Stub::AsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDepositRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositsRequest& request, ::cosmos::gov::v1beta1::QueryDepositsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::gov::v1beta1::QueryDepositsRequest, ::cosmos::gov::v1beta1::QueryDepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Deposits_, context, request, response);
}

void Query::Stub::async::Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositsRequest* request, ::cosmos::gov::v1beta1::QueryDepositsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::gov::v1beta1::QueryDepositsRequest, ::cosmos::gov::v1beta1::QueryDepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposits_, context, request, response, std::move(f));
}

void Query::Stub::async::Deposits(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositsRequest* request, ::cosmos::gov::v1beta1::QueryDepositsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Deposits_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryDepositsResponse>* Query::Stub::PrepareAsyncDepositsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::gov::v1beta1::QueryDepositsResponse, ::cosmos::gov::v1beta1::QueryDepositsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Deposits_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryDepositsResponse>* Query::Stub::AsyncDepositsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryDepositsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDepositsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryTallyResultRequest& request, ::cosmos::gov::v1beta1::QueryTallyResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::gov::v1beta1::QueryTallyResultRequest, ::cosmos::gov::v1beta1::QueryTallyResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TallyResult_, context, request, response);
}

void Query::Stub::async::TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryTallyResultRequest* request, ::cosmos::gov::v1beta1::QueryTallyResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::gov::v1beta1::QueryTallyResultRequest, ::cosmos::gov::v1beta1::QueryTallyResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TallyResult_, context, request, response, std::move(f));
}

void Query::Stub::async::TallyResult(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryTallyResultRequest* request, ::cosmos::gov::v1beta1::QueryTallyResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TallyResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryTallyResultResponse>* Query::Stub::PrepareAsyncTallyResultRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::gov::v1beta1::QueryTallyResultResponse, ::cosmos::gov::v1beta1::QueryTallyResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TallyResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1beta1::QueryTallyResultResponse>* Query::Stub::AsyncTallyResultRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1beta1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTallyResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::gov::v1beta1::QueryProposalRequest, ::cosmos::gov::v1beta1::QueryProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::gov::v1beta1::QueryProposalRequest* req,
             ::cosmos::gov::v1beta1::QueryProposalResponse* resp) {
               return service->Proposal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::gov::v1beta1::QueryProposalsRequest, ::cosmos::gov::v1beta1::QueryProposalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::gov::v1beta1::QueryProposalsRequest* req,
             ::cosmos::gov::v1beta1::QueryProposalsResponse* resp) {
               return service->Proposals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::gov::v1beta1::QueryVoteRequest, ::cosmos::gov::v1beta1::QueryVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::gov::v1beta1::QueryVoteRequest* req,
             ::cosmos::gov::v1beta1::QueryVoteResponse* resp) {
               return service->Vote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::gov::v1beta1::QueryVotesRequest, ::cosmos::gov::v1beta1::QueryVotesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::gov::v1beta1::QueryVotesRequest* req,
             ::cosmos::gov::v1beta1::QueryVotesResponse* resp) {
               return service->Votes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::gov::v1beta1::QueryParamsRequest, ::cosmos::gov::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::gov::v1beta1::QueryParamsRequest* req,
             ::cosmos::gov::v1beta1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::gov::v1beta1::QueryDepositRequest, ::cosmos::gov::v1beta1::QueryDepositResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::gov::v1beta1::QueryDepositRequest* req,
             ::cosmos::gov::v1beta1::QueryDepositResponse* resp) {
               return service->Deposit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::gov::v1beta1::QueryDepositsRequest, ::cosmos::gov::v1beta1::QueryDepositsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::gov::v1beta1::QueryDepositsRequest* req,
             ::cosmos::gov::v1beta1::QueryDepositsResponse* resp) {
               return service->Deposits(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::gov::v1beta1::QueryTallyResultRequest, ::cosmos::gov::v1beta1::QueryTallyResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::gov::v1beta1::QueryTallyResultRequest* req,
             ::cosmos::gov::v1beta1::QueryTallyResultResponse* resp) {
               return service->TallyResult(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Proposal(::grpc::ServerContext* context, const ::cosmos::gov::v1beta1::QueryProposalRequest* request, ::cosmos::gov::v1beta1::QueryProposalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Proposals(::grpc::ServerContext* context, const ::cosmos::gov::v1beta1::QueryProposalsRequest* request, ::cosmos::gov::v1beta1::QueryProposalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Vote(::grpc::ServerContext* context, const ::cosmos::gov::v1beta1::QueryVoteRequest* request, ::cosmos::gov::v1beta1::QueryVoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Votes(::grpc::ServerContext* context, const ::cosmos::gov::v1beta1::QueryVotesRequest* request, ::cosmos::gov::v1beta1::QueryVotesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::cosmos::gov::v1beta1::QueryParamsRequest* request, ::cosmos::gov::v1beta1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Deposit(::grpc::ServerContext* context, const ::cosmos::gov::v1beta1::QueryDepositRequest* request, ::cosmos::gov::v1beta1::QueryDepositResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Deposits(::grpc::ServerContext* context, const ::cosmos::gov::v1beta1::QueryDepositsRequest* request, ::cosmos::gov::v1beta1::QueryDepositsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TallyResult(::grpc::ServerContext* context, const ::cosmos::gov::v1beta1::QueryTallyResultRequest* request, ::cosmos::gov::v1beta1::QueryTallyResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace gov
}  // namespace v1beta1


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/gov/v1beta1/query.proto

#include "cosmos/gov/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace gov {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR QueryProposalRequest::QueryProposalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryProposalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProposalRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProposalRequestDefaultTypeInternal() {}
  union {
    QueryProposalRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProposalRequestDefaultTypeInternal _QueryProposalRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProposalResponse::QueryProposalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposal_)*/nullptr} {}
struct QueryProposalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProposalResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProposalResponseDefaultTypeInternal() {}
  union {
    QueryProposalResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProposalResponseDefaultTypeInternal _QueryProposalResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProposalsRequest::QueryProposalsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.depositor_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.proposal_status_)*/ 0
} {}
struct QueryProposalsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProposalsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProposalsRequestDefaultTypeInternal() {}
  union {
    QueryProposalsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProposalsRequestDefaultTypeInternal _QueryProposalsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProposalsResponse::QueryProposalsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposals_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryProposalsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProposalsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProposalsResponseDefaultTypeInternal() {}
  union {
    QueryProposalsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProposalsResponseDefaultTypeInternal _QueryProposalsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVoteRequest::QueryVoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryVoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVoteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVoteRequestDefaultTypeInternal() {}
  union {
    QueryVoteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVoteRequestDefaultTypeInternal _QueryVoteRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVoteResponse::QueryVoteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vote_)*/nullptr} {}
struct QueryVoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVoteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVoteResponseDefaultTypeInternal() {}
  union {
    QueryVoteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVoteResponseDefaultTypeInternal _QueryVoteResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVotesRequest::QueryVotesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}
} {}
struct QueryVotesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVotesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVotesRequestDefaultTypeInternal() {}
  union {
    QueryVotesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVotesRequestDefaultTypeInternal _QueryVotesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVotesResponse::QueryVotesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryVotesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVotesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVotesResponseDefaultTypeInternal() {}
  union {
    QueryVotesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVotesResponseDefaultTypeInternal _QueryVotesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsRequest::QueryParamsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryParamsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsRequestDefaultTypeInternal() {}
  union {
    QueryParamsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsResponse::QueryParamsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voting_params_)*/nullptr
  , /*decltype(_impl_.deposit_params_)*/nullptr
  , /*decltype(_impl_.tally_params_)*/nullptr} {}
struct QueryParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsResponseDefaultTypeInternal() {}
  union {
    QueryParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDepositRequest::QueryDepositRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.depositor_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDepositRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDepositRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDepositRequestDefaultTypeInternal() {}
  union {
    QueryDepositRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDepositRequestDefaultTypeInternal _QueryDepositRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDepositResponse::QueryDepositResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deposit_)*/nullptr} {}
struct QueryDepositResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDepositResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDepositResponseDefaultTypeInternal() {}
  union {
    QueryDepositResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDepositResponseDefaultTypeInternal _QueryDepositResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDepositsRequest::QueryDepositsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}
} {}
struct QueryDepositsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDepositsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDepositsRequestDefaultTypeInternal() {}
  union {
    QueryDepositsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDepositsRequestDefaultTypeInternal _QueryDepositsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDepositsResponse::QueryDepositsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deposits_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryDepositsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDepositsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDepositsResponseDefaultTypeInternal() {}
  union {
    QueryDepositsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDepositsResponseDefaultTypeInternal _QueryDepositsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTallyResultRequest::QueryTallyResultRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTallyResultRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTallyResultRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTallyResultRequestDefaultTypeInternal() {}
  union {
    QueryTallyResultRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTallyResultRequestDefaultTypeInternal _QueryTallyResultRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTallyResultResponse::QueryTallyResultResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tally_)*/nullptr} {}
struct QueryTallyResultResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTallyResultResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTallyResultResponseDefaultTypeInternal() {}
  union {
    QueryTallyResultResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTallyResultResponseDefaultTypeInternal _QueryTallyResultResponse_default_instance_;
}  // namespace v1beta1
}  // namespace gov
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[16];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fgov_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fgov_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalResponse, _impl_.proposal_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsRequest, _impl_.proposal_status_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsRequest, _impl_.voter_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsRequest, _impl_.depositor_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsRequest, _impl_.pagination_),
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsResponse, _impl_.proposals_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryProposalsResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVoteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVoteRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVoteRequest, _impl_.voter_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVoteResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVoteResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVoteResponse, _impl_.vote_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVotesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVotesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVotesRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVotesRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVotesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVotesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVotesResponse, _impl_.votes_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryVotesResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryParamsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryParamsRequest, _impl_.params_type_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryParamsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryParamsResponse, _impl_.voting_params_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryParamsResponse, _impl_.deposit_params_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryParamsResponse, _impl_.tally_params_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositRequest, _impl_.depositor_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositResponse, _impl_.deposit_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositsRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositsRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositsResponse, _impl_.deposits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryDepositsResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryTallyResultRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryTallyResultRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryTallyResultResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryTallyResultResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1beta1::QueryTallyResultResponse, _impl_.tally_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::gov::v1beta1::QueryProposalRequest)},
        { 9, 18, -1, sizeof(::cosmos::gov::v1beta1::QueryProposalResponse)},
        { 19, 31, -1, sizeof(::cosmos::gov::v1beta1::QueryProposalsRequest)},
        { 35, 45, -1, sizeof(::cosmos::gov::v1beta1::QueryProposalsResponse)},
        { 47, -1, -1, sizeof(::cosmos::gov::v1beta1::QueryVoteRequest)},
        { 57, 66, -1, sizeof(::cosmos::gov::v1beta1::QueryVoteResponse)},
        { 67, 77, -1, sizeof(::cosmos::gov::v1beta1::QueryVotesRequest)},
        { 79, 89, -1, sizeof(::cosmos::gov::v1beta1::QueryVotesResponse)},
        { 91, -1, -1, sizeof(::cosmos::gov::v1beta1::QueryParamsRequest)},
        { 100, 111, -1, sizeof(::cosmos::gov::v1beta1::QueryParamsResponse)},
        { 114, -1, -1, sizeof(::cosmos::gov::v1beta1::QueryDepositRequest)},
        { 124, 133, -1, sizeof(::cosmos::gov::v1beta1::QueryDepositResponse)},
        { 134, 144, -1, sizeof(::cosmos::gov::v1beta1::QueryDepositsRequest)},
        { 146, 156, -1, sizeof(::cosmos::gov::v1beta1::QueryDepositsResponse)},
        { 158, -1, -1, sizeof(::cosmos::gov::v1beta1::QueryTallyResultRequest)},
        { 167, 176, -1, sizeof(::cosmos::gov::v1beta1::QueryTallyResultResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::gov::v1beta1::_QueryProposalRequest_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryProposalResponse_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryProposalsRequest_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryProposalsResponse_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryVoteRequest_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryVoteResponse_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryVotesRequest_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryVotesResponse_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryParamsRequest_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryParamsResponse_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryDepositRequest_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryDepositResponse_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryDepositsRequest_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryDepositsResponse_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryTallyResultRequest_default_instance_._instance,
    &::cosmos::gov::v1beta1::_QueryTallyResultResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fgov_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036cosmos/gov/v1beta1/query.proto\022\022cosmos"
    ".gov.v1beta1\032*cosmos/base/query/v1beta1/"
    "pagination.proto\032\024gogoproto/gogo.proto\032\034"
    "google/api/annotations.proto\032\034cosmos/gov"
    "/v1beta1/gov.proto\032\031cosmos_proto/cosmos."
    "proto\032\021amino/amino.proto\"7\n\024QueryProposa"
    "lRequest\022\037\n\013proposal_id\030\001 \001(\004R\nproposalI"
    "d\"\\\n\025QueryProposalResponse\022C\n\010proposal\030\001"
    " \001(\0132\034.cosmos.gov.v1beta1.ProposalB\t\310\336\037\000"
    "\250\347\260*\001R\010proposal\"\236\002\n\025QueryProposalsReques"
    "t\022K\n\017proposal_status\030\001 \001(\0162\".cosmos.gov."
    "v1beta1.ProposalStatusR\016proposalStatus\022."
    "\n\005voter\030\002 \001(\tB\030\322\264-\024cosmos.AddressStringR"
    "\005voter\0226\n\tdepositor\030\003 \001(\tB\030\322\264-\024cosmos.Ad"
    "dressStringR\tdepositor\022F\n\npagination\030\004 \001"
    "(\0132&.cosmos.base.query.v1beta1.PageReque"
    "stR\npagination:\010\210\240\037\000\350\240\037\000\"\250\001\n\026QueryPropos"
    "alsResponse\022E\n\tproposals\030\001 \003(\0132\034.cosmos."
    "gov.v1beta1.ProposalB\t\310\336\037\000\250\347\260*\001R\tproposa"
    "ls\022G\n\npagination\030\002 \001(\0132\'.cosmos.base.que"
    "ry.v1beta1.PageResponseR\npagination\"m\n\020Q"
    "ueryVoteRequest\022\037\n\013proposal_id\030\001 \001(\004R\npr"
    "oposalId\022.\n\005voter\030\002 \001(\tB\030\322\264-\024cosmos.Addr"
    "essStringR\005voter:\010\210\240\037\000\350\240\037\000\"L\n\021QueryVoteR"
    "esponse\0227\n\004vote\030\001 \001(\0132\030.cosmos.gov.v1bet"
    "a1.VoteB\t\310\336\037\000\250\347\260*\001R\004vote\"|\n\021QueryVotesRe"
    "quest\022\037\n\013proposal_id\030\001 \001(\004R\nproposalId\022F"
    "\n\npagination\030\002 \001(\0132&.cosmos.base.query.v"
    "1beta1.PageRequestR\npagination\"\230\001\n\022Query"
    "VotesResponse\0229\n\005votes\030\001 \003(\0132\030.cosmos.go"
    "v.v1beta1.VoteB\t\310\336\037\000\250\347\260*\001R\005votes\022G\n\npagi"
    "nation\030\002 \001(\0132\'.cosmos.base.query.v1beta1"
    ".PageResponseR\npagination\"5\n\022QueryParams"
    "Request\022\037\n\013params_type\030\001 \001(\tR\nparamsType"
    "\"\213\002\n\023QueryParamsResponse\022P\n\rvoting_param"
    "s\030\001 \001(\0132 .cosmos.gov.v1beta1.VotingParam"
    "sB\t\310\336\037\000\250\347\260*\001R\014votingParams\022S\n\016deposit_pa"
    "rams\030\002 \001(\0132!.cosmos.gov.v1beta1.DepositP"
    "aramsB\t\310\336\037\000\250\347\260*\001R\rdepositParams\022M\n\014tally"
    "_params\030\003 \001(\0132\037.cosmos.gov.v1beta1.Tally"
    "ParamsB\t\310\336\037\000\250\347\260*\001R\013tallyParams\"x\n\023QueryD"
    "epositRequest\022\037\n\013proposal_id\030\001 \001(\004R\nprop"
    "osalId\0226\n\tdepositor\030\002 \001(\tB\030\322\264-\024cosmos.Ad"
    "dressStringR\tdepositor:\010\210\240\037\000\350\240\037\000\"X\n\024Quer"
    "yDepositResponse\022@\n\007deposit\030\001 \001(\0132\033.cosm"
    "os.gov.v1beta1.DepositB\t\310\336\037\000\250\347\260*\001R\007depos"
    "it\"\177\n\024QueryDepositsRequest\022\037\n\013proposal_i"
    "d\030\001 \001(\004R\nproposalId\022F\n\npagination\030\002 \001(\0132"
    "&.cosmos.base.query.v1beta1.PageRequestR"
    "\npagination\"\244\001\n\025QueryDepositsResponse\022B\n"
    "\010deposits\030\001 \003(\0132\033.cosmos.gov.v1beta1.Dep"
    "ositB\t\310\336\037\000\250\347\260*\001R\010deposits\022G\n\npagination\030"
    "\002 \001(\0132\'.cosmos.base.query.v1beta1.PageRe"
    "sponseR\npagination\":\n\027QueryTallyResultRe"
    "quest\022\037\n\013proposal_id\030\001 \001(\004R\nproposalId\"\\"
    "\n\030QueryTallyResultResponse\022@\n\005tally\030\001 \001("
    "\0132\037.cosmos.gov.v1beta1.TallyResultB\t\310\336\037\000"
    "\250\347\260*\001R\005tally2\324\t\n\005Query\022\224\001\n\010Proposal\022(.co"
    "smos.gov.v1beta1.QueryProposalRequest\032)."
    "cosmos.gov.v1beta1.QueryProposalResponse"
    "\"3\202\323\344\223\002-\022+/cosmos/gov/v1beta1/proposals/"
    "{proposal_id}\022\211\001\n\tProposals\022).cosmos.gov"
    ".v1beta1.QueryProposalsRequest\032*.cosmos."
    "gov.v1beta1.QueryProposalsResponse\"%\202\323\344\223"
    "\002\037\022\035/cosmos/gov/v1beta1/proposals\022\226\001\n\004Vo"
    "te\022$.cosmos.gov.v1beta1.QueryVoteRequest"
    "\032%.cosmos.gov.v1beta1.QueryVoteResponse\""
    "A\202\323\344\223\002;\0229/cosmos/gov/v1beta1/proposals/{"
    "proposal_id}/votes/{voter}\022\221\001\n\005Votes\022%.c"
    "osmos.gov.v1beta1.QueryVotesRequest\032&.co"
    "smos.gov.v1beta1.QueryVotesResponse\"9\202\323\344"
    "\223\0023\0221/cosmos/gov/v1beta1/proposals/{prop"
    "osal_id}/votes\022\213\001\n\006Params\022&.cosmos.gov.v"
    "1beta1.QueryParamsRequest\032\'.cosmos.gov.v"
    "1beta1.QueryParamsResponse\"0\202\323\344\223\002*\022(/cos"
    "mos/gov/v1beta1/params/{params_type}\022\246\001\n"
    "\007Deposit\022\'.cosmos.gov.v1beta1.QueryDepos"
    "itRequest\032(.cosmos.gov.v1beta1.QueryDepo"
    "sitResponse\"H\202\323\344\223\002B\022@/cosmos/gov/v1beta1"
    "/proposals/{proposal_id}/deposits/{depos"
    "itor}\022\235\001\n\010Deposits\022(.cosmos.gov.v1beta1."
    "QueryDepositsRequest\032).cosmos.gov.v1beta"
    "1.QueryDepositsResponse\"<\202\323\344\223\0026\0224/cosmos"
    "/gov/v1beta1/proposals/{proposal_id}/dep"
    "osits\022\243\001\n\013TallyResult\022+.cosmos.gov.v1bet"
    "a1.QueryTallyResultRequest\032,.cosmos.gov."
    "v1beta1.QueryTallyResultResponse\"9\202\323\344\223\0023"
    "\0221/cosmos/gov/v1beta1/proposals/{proposa"
    "l_id}/tallyB\300\001\n\026com.cosmos.gov.v1beta1B\n"
    "QueryProtoP\001Z0github.com/cosmos/cosmos-s"
    "dk/x/gov/types/v1beta1\242\002\003CGX\252\002\022Cosmos.Go"
    "v.V1beta1\312\002\022Cosmos\\Gov\\V1beta1\342\002\036Cosmos\\"
    "Gov\\V1beta1\\GPBMetadata\352\002\024Cosmos::Gov::V"
    "1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_deps[6] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_cosmos_2fgov_2fv1beta1_2fgov_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    3734,
    descriptor_table_protodef_cosmos_2fgov_2fv1beta1_2fquery_2eproto,
    "cosmos/gov/v1beta1/query.proto",
    &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_deps,
    6,
    16,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fgov_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_cosmos_2fgov_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_cosmos_2fgov_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fgov_2fv1beta1_2fquery_2eproto(&descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto);
namespace cosmos {
namespace gov {
namespace v1beta1 {
// ===================================================================

class QueryProposalRequest::_Internal {
 public:
};

QueryProposalRequest::QueryProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryProposalRequest)
}
QueryProposalRequest::QueryProposalRequest(const QueryProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryProposalRequest)
}

inline void QueryProposalRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryProposalRequest::~QueryProposalRequest() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryProposalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProposalRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryProposalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryProposalRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProposalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProposalRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryProposalRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryProposalRequest)
  return target;
}

::size_t QueryProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryProposalRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProposalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProposalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProposalRequest::GetClassData() const { return &_class_data_; }


void QueryProposalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProposalRequest*>(&to_msg);
  auto& from = static_cast<const QueryProposalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryProposalRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProposalRequest::CopyFrom(const QueryProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProposalRequest::IsInitialized() const {
  return true;
}

void QueryProposalRequest::InternalSwap(QueryProposalRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProposalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryProposalResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryProposalResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryProposalResponse, _impl_._has_bits_);
  static const ::cosmos::gov::v1beta1::Proposal& proposal(const QueryProposalResponse* msg);
  static void set_has_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::gov::v1beta1::Proposal&
QueryProposalResponse::_Internal::proposal(const QueryProposalResponse* msg) {
  return *msg->_impl_.proposal_;
}
void QueryProposalResponse::clear_proposal() {
  if (_impl_.proposal_ != nullptr) _impl_.proposal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryProposalResponse::QueryProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryProposalResponse)
}
QueryProposalResponse::QueryProposalResponse(const QueryProposalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProposalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proposal_ = new ::cosmos::gov::v1beta1::Proposal(*from._impl_.proposal_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryProposalResponse)
}

inline void QueryProposalResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}
  };
}

QueryProposalResponse::~QueryProposalResponse() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryProposalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProposalResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.proposal_;
}

void QueryProposalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryProposalResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proposal_ != nullptr);
    _impl_.proposal_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProposalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.gov.v1beta1.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProposalResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryProposalResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.gov.v1beta1.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::proposal(this),
        _Internal::proposal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryProposalResponse)
  return target;
}

::size_t QueryProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryProposalResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.gov.v1beta1.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProposalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProposalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProposalResponse::GetClassData() const { return &_class_data_; }


void QueryProposalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProposalResponse*>(&to_msg);
  auto& from = static_cast<const QueryProposalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryProposalResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proposal()->::cosmos::gov::v1beta1::Proposal::MergeFrom(
        from._internal_proposal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProposalResponse::CopyFrom(const QueryProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProposalResponse::IsInitialized() const {
  return true;
}

void QueryProposalResponse::InternalSwap(QueryProposalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.proposal_, other->_impl_.proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProposalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryProposalsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryProposalsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryProposalsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryProposalsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryProposalsRequest::_Internal::pagination(const QueryProposalsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryProposalsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryProposalsRequest::QueryProposalsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryProposalsRequest)
}
QueryProposalsRequest::QueryProposalsRequest(const QueryProposalsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProposalsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voter_) {}

    , decltype(_impl_.depositor_) {}

    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.proposal_status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voter().empty()) {
    _this->_impl_.voter_.Set(from._internal_voter(), _this->GetArenaForAllocation());
  }
  _impl_.depositor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.depositor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_depositor().empty()) {
    _this->_impl_.depositor_.Set(from._internal_depositor(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.proposal_status_ = from._impl_.proposal_status_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryProposalsRequest)
}

inline void QueryProposalsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voter_) {}

    , decltype(_impl_.depositor_) {}

    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.proposal_status_) { 0 }

  };
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.depositor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.depositor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryProposalsRequest::~QueryProposalsRequest() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryProposalsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProposalsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voter_.Destroy();
  _impl_.depositor_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryProposalsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProposalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryProposalsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voter_.ClearToEmpty();
  _impl_.depositor_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.proposal_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProposalsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.gov.v1beta1.ProposalStatus proposal_status = 1 [json_name = "proposalStatus"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_proposal_status(static_cast<::cosmos::gov::v1beta1::ProposalStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_voter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1beta1.QueryProposalsRequest.voter"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string depositor = 3 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_depositor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1beta1.QueryProposalsRequest.depositor"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 4 [json_name = "pagination"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProposalsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryProposalsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.gov.v1beta1.ProposalStatus proposal_status = 1 [json_name = "proposalStatus"];
  if (this->_internal_proposal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_proposal_status(), target);
  }

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    const std::string& _s = this->_internal_voter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1beta1.QueryProposalsRequest.voter");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string depositor = 3 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_depositor().empty()) {
    const std::string& _s = this->_internal_depositor();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1beta1.QueryProposalsRequest.depositor");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 4 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryProposalsRequest)
  return target;
}

::size_t QueryProposalsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryProposalsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_voter());
  }

  // string depositor = 3 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_depositor().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_depositor());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 4 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // .cosmos.gov.v1beta1.ProposalStatus proposal_status = 1 [json_name = "proposalStatus"];
  if (this->_internal_proposal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_proposal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProposalsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProposalsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProposalsRequest::GetClassData() const { return &_class_data_; }


void QueryProposalsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProposalsRequest*>(&to_msg);
  auto& from = static_cast<const QueryProposalsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryProposalsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_voter().empty()) {
    _this->_internal_set_voter(from._internal_voter());
  }
  if (!from._internal_depositor().empty()) {
    _this->_internal_set_depositor(from._internal_depositor());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_proposal_status() != 0) {
    _this->_internal_set_proposal_status(from._internal_proposal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProposalsRequest::CopyFrom(const QueryProposalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryProposalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProposalsRequest::IsInitialized() const {
  return true;
}

void QueryProposalsRequest::InternalSwap(QueryProposalsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voter_, lhs_arena,
                                       &other->_impl_.voter_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.depositor_, lhs_arena,
                                       &other->_impl_.depositor_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryProposalsRequest, _impl_.proposal_status_)
      + sizeof(QueryProposalsRequest::_impl_.proposal_status_)
      - PROTOBUF_FIELD_OFFSET(QueryProposalsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProposalsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryProposalsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryProposalsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryProposalsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryProposalsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryProposalsResponse::_Internal::pagination(const QueryProposalsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryProposalsResponse::clear_proposals() {
  _internal_mutable_proposals()->Clear();
}
void QueryProposalsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryProposalsResponse::QueryProposalsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryProposalsResponse)
}
QueryProposalsResponse::QueryProposalsResponse(const QueryProposalsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProposalsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposals_){from._impl_.proposals_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryProposalsResponse)
}

inline void QueryProposalsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposals_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryProposalsResponse::~QueryProposalsResponse() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryProposalsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProposalsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_proposals()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryProposalsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProposalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryProposalsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_proposals()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProposalsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.gov.v1beta1.Proposal proposals = 1 [json_name = "proposals", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProposalsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryProposalsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.gov.v1beta1.Proposal proposals = 1 [json_name = "proposals", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryProposalsResponse)
  return target;
}

::size_t QueryProposalsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryProposalsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.gov.v1beta1.Proposal proposals = 1 [json_name = "proposals", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->_internal_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProposalsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProposalsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProposalsResponse::GetClassData() const { return &_class_data_; }


void QueryProposalsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProposalsResponse*>(&to_msg);
  auto& from = static_cast<const QueryProposalsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryProposalsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proposals()->MergeFrom(from._internal_proposals());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProposalsResponse::CopyFrom(const QueryProposalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryProposalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProposalsResponse::IsInitialized() const {
  return true;
}

void QueryProposalsResponse::InternalSwap(QueryProposalsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_proposals()->InternalSwap(other->_internal_mutable_proposals());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProposalsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[3]);
}
// ===================================================================

class QueryVoteRequest::_Internal {
 public:
};

QueryVoteRequest::QueryVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryVoteRequest)
}
QueryVoteRequest::QueryVoteRequest(const QueryVoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voter_) {}

    , decltype(_impl_.proposal_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voter().empty()) {
    _this->_impl_.voter_.Set(from._internal_voter(), _this->GetArenaForAllocation());
  }
  _this->_impl_.proposal_id_ = from._impl_.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryVoteRequest)
}

inline void QueryVoteRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.voter_) {}

    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryVoteRequest::~QueryVoteRequest() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryVoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVoteRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voter_.Destroy();
}

void QueryVoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryVoteRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voter_.ClearToEmpty();
  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_voter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1beta1.QueryVoteRequest.voter"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVoteRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryVoteRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    const std::string& _s = this->_internal_voter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1beta1.QueryVoteRequest.voter");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryVoteRequest)
  return target;
}

::size_t QueryVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryVoteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_voter());
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVoteRequest::GetClassData() const { return &_class_data_; }


void QueryVoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVoteRequest*>(&to_msg);
  auto& from = static_cast<const QueryVoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryVoteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_voter().empty()) {
    _this->_internal_set_voter(from._internal_voter());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVoteRequest::CopyFrom(const QueryVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVoteRequest::IsInitialized() const {
  return true;
}

void QueryVoteRequest::InternalSwap(QueryVoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voter_, lhs_arena,
                                       &other->_impl_.voter_, rhs_arena);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[4]);
}
// ===================================================================

class QueryVoteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryVoteResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryVoteResponse, _impl_._has_bits_);
  static const ::cosmos::gov::v1beta1::Vote& vote(const QueryVoteResponse* msg);
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::gov::v1beta1::Vote&
QueryVoteResponse::_Internal::vote(const QueryVoteResponse* msg) {
  return *msg->_impl_.vote_;
}
void QueryVoteResponse::clear_vote() {
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryVoteResponse::QueryVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryVoteResponse)
}
QueryVoteResponse::QueryVoteResponse(const QueryVoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVoteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vote_ = new ::cosmos::gov::v1beta1::Vote(*from._impl_.vote_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryVoteResponse)
}

inline void QueryVoteResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_){nullptr}
  };
}

QueryVoteResponse::~QueryVoteResponse() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryVoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVoteResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vote_;
}

void QueryVoteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryVoteResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.gov.v1beta1.Vote vote = 1 [json_name = "vote", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVoteResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryVoteResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.gov.v1beta1.Vote vote = 1 [json_name = "vote", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vote(this),
        _Internal::vote(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryVoteResponse)
  return target;
}

::size_t QueryVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryVoteResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.gov.v1beta1.Vote vote = 1 [json_name = "vote", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vote_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVoteResponse::GetClassData() const { return &_class_data_; }


void QueryVoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVoteResponse*>(&to_msg);
  auto& from = static_cast<const QueryVoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryVoteResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_vote()->::cosmos::gov::v1beta1::Vote::MergeFrom(
        from._internal_vote());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVoteResponse::CopyFrom(const QueryVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVoteResponse::IsInitialized() const {
  return true;
}

void QueryVoteResponse::InternalSwap(QueryVoteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.vote_, other->_impl_.vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[5]);
}
// ===================================================================

class QueryVotesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryVotesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryVotesRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryVotesRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryVotesRequest::_Internal::pagination(const QueryVotesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryVotesRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryVotesRequest::QueryVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryVotesRequest)
}
QueryVotesRequest::QueryVotesRequest(const QueryVotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVotesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.proposal_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.proposal_id_ = from._impl_.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryVotesRequest)
}

inline void QueryVotesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

  };
}

QueryVotesRequest::~QueryVotesRequest() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryVotesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVotesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryVotesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryVotesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.proposal_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVotesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVotesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryVotesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryVotesRequest)
  return target;
}

::size_t QueryVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryVotesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVotesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVotesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVotesRequest::GetClassData() const { return &_class_data_; }


void QueryVotesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVotesRequest*>(&to_msg);
  auto& from = static_cast<const QueryVotesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryVotesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVotesRequest::CopyFrom(const QueryVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVotesRequest::IsInitialized() const {
  return true;
}

void QueryVotesRequest::InternalSwap(QueryVotesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryVotesRequest, _impl_.proposal_id_)
      + sizeof(QueryVotesRequest::_impl_.proposal_id_)
      - PROTOBUF_FIELD_OFFSET(QueryVotesRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVotesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[6]);
}
// ===================================================================

class QueryVotesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryVotesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryVotesResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryVotesResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryVotesResponse::_Internal::pagination(const QueryVotesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryVotesResponse::clear_votes() {
  _internal_mutable_votes()->Clear();
}
void QueryVotesResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryVotesResponse::QueryVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryVotesResponse)
}
QueryVotesResponse::QueryVotesResponse(const QueryVotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVotesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.votes_){from._impl_.votes_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryVotesResponse)
}

inline void QueryVotesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.votes_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryVotesResponse::~QueryVotesResponse() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryVotesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVotesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_votes()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryVotesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryVotesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_votes()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVotesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.gov.v1beta1.Vote votes = 1 [json_name = "votes", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVotesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryVotesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.gov.v1beta1.Vote votes = 1 [json_name = "votes", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryVotesResponse)
  return target;
}

::size_t QueryVotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryVotesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.gov.v1beta1.Vote votes = 1 [json_name = "votes", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->_internal_votes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVotesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVotesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVotesResponse::GetClassData() const { return &_class_data_; }


void QueryVotesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVotesResponse*>(&to_msg);
  auto& from = static_cast<const QueryVotesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryVotesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_votes()->MergeFrom(from._internal_votes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVotesResponse::CopyFrom(const QueryVotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVotesResponse::IsInitialized() const {
  return true;
}

void QueryVotesResponse::InternalSwap(QueryVotesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_votes()->InternalSwap(other->_internal_mutable_votes());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVotesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[7]);
}
// ===================================================================

class QueryParamsRequest::_Internal {
 public:
};

QueryParamsRequest::QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryParamsRequest)
}
QueryParamsRequest::QueryParamsRequest(const QueryParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParamsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.params_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.params_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_params_type().empty()) {
    _this->_impl_.params_type_.Set(from._internal_params_type(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryParamsRequest)
}

inline void QueryParamsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.params_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.params_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.params_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryParamsRequest::~QueryParamsRequest() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryParamsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParamsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_type_.Destroy();
}

void QueryParamsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryParamsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParamsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string params_type = 1 [json_name = "paramsType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_params_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1beta1.QueryParamsRequest.params_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryParamsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryParamsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string params_type = 1 [json_name = "paramsType"];
  if (!this->_internal_params_type().empty()) {
    const std::string& _s = this->_internal_params_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1beta1.QueryParamsRequest.params_type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryParamsRequest)
  return target;
}

::size_t QueryParamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryParamsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string params_type = 1 [json_name = "paramsType"];
  if (!this->_internal_params_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_params_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParamsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsRequest::GetClassData() const { return &_class_data_; }


void QueryParamsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParamsRequest*>(&to_msg);
  auto& from = static_cast<const QueryParamsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryParamsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_params_type().empty()) {
    _this->_internal_set_params_type(from._internal_params_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParamsRequest::CopyFrom(const QueryParamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryParamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParamsRequest::IsInitialized() const {
  return true;
}

void QueryParamsRequest::InternalSwap(QueryParamsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.params_type_, lhs_arena,
                                       &other->_impl_.params_type_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryParamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryParamsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryParamsResponse, _impl_._has_bits_);
  static const ::cosmos::gov::v1beta1::VotingParams& voting_params(const QueryParamsResponse* msg);
  static void set_has_voting_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::gov::v1beta1::DepositParams& deposit_params(const QueryParamsResponse* msg);
  static void set_has_deposit_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cosmos::gov::v1beta1::TallyParams& tally_params(const QueryParamsResponse* msg);
  static void set_has_tally_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cosmos::gov::v1beta1::VotingParams&
QueryParamsResponse::_Internal::voting_params(const QueryParamsResponse* msg) {
  return *msg->_impl_.voting_params_;
}
const ::cosmos::gov::v1beta1::DepositParams&
QueryParamsResponse::_Internal::deposit_params(const QueryParamsResponse* msg) {
  return *msg->_impl_.deposit_params_;
}
const ::cosmos::gov::v1beta1::TallyParams&
QueryParamsResponse::_Internal::tally_params(const QueryParamsResponse* msg) {
  return *msg->_impl_.tally_params_;
}
void QueryParamsResponse::clear_voting_params() {
  if (_impl_.voting_params_ != nullptr) _impl_.voting_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryParamsResponse::clear_deposit_params() {
  if (_impl_.deposit_params_ != nullptr) _impl_.deposit_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void QueryParamsResponse::clear_tally_params() {
  if (_impl_.tally_params_ != nullptr) _impl_.tally_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
QueryParamsResponse::QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryParamsResponse)
}
QueryParamsResponse::QueryParamsResponse(const QueryParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParamsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voting_params_){nullptr}
    , decltype(_impl_.deposit_params_){nullptr}
    , decltype(_impl_.tally_params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.voting_params_ = new ::cosmos::gov::v1beta1::VotingParams(*from._impl_.voting_params_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.deposit_params_ = new ::cosmos::gov::v1beta1::DepositParams(*from._impl_.deposit_params_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.tally_params_ = new ::cosmos::gov::v1beta1::TallyParams(*from._impl_.tally_params_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryParamsResponse)
}

inline void QueryParamsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voting_params_){nullptr}
    , decltype(_impl_.deposit_params_){nullptr}
    , decltype(_impl_.tally_params_){nullptr}
  };
}

QueryParamsResponse::~QueryParamsResponse() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryParamsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParamsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.voting_params_;
  if (this != internal_default_instance()) delete _impl_.deposit_params_;
  if (this != internal_default_instance()) delete _impl_.tally_params_;
}

void QueryParamsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.voting_params_ != nullptr);
      _impl_.voting_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.deposit_params_ != nullptr);
      _impl_.deposit_params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.tally_params_ != nullptr);
      _impl_.tally_params_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParamsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.gov.v1beta1.VotingParams voting_params = 1 [json_name = "votingParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_voting_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.gov.v1beta1.DepositParams deposit_params = 2 [json_name = "depositParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.gov.v1beta1.TallyParams tally_params = 3 [json_name = "tallyParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tally_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryParamsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.gov.v1beta1.VotingParams voting_params = 1 [json_name = "votingParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::voting_params(this),
        _Internal::voting_params(this).GetCachedSize(), target, stream);
  }

  // .cosmos.gov.v1beta1.DepositParams deposit_params = 2 [json_name = "depositParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::deposit_params(this),
        _Internal::deposit_params(this).GetCachedSize(), target, stream);
  }

  // .cosmos.gov.v1beta1.TallyParams tally_params = 3 [json_name = "tallyParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tally_params(this),
        _Internal::tally_params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryParamsResponse)
  return target;
}

::size_t QueryParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryParamsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cosmos.gov.v1beta1.VotingParams voting_params = 1 [json_name = "votingParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voting_params_);
    }

    // .cosmos.gov.v1beta1.DepositParams deposit_params = 2 [json_name = "depositParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deposit_params_);
    }

    // .cosmos.gov.v1beta1.TallyParams tally_params = 3 [json_name = "tallyParams", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tally_params_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParamsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsResponse::GetClassData() const { return &_class_data_; }


void QueryParamsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParamsResponse*>(&to_msg);
  auto& from = static_cast<const QueryParamsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryParamsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_voting_params()->::cosmos::gov::v1beta1::VotingParams::MergeFrom(
          from._internal_voting_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deposit_params()->::cosmos::gov::v1beta1::DepositParams::MergeFrom(
          from._internal_deposit_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tally_params()->::cosmos::gov::v1beta1::TallyParams::MergeFrom(
          from._internal_tally_params());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParamsResponse::CopyFrom(const QueryParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParamsResponse::IsInitialized() const {
  return true;
}

void QueryParamsResponse::InternalSwap(QueryParamsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryParamsResponse, _impl_.tally_params_)
      + sizeof(QueryParamsResponse::_impl_.tally_params_)
      - PROTOBUF_FIELD_OFFSET(QueryParamsResponse, _impl_.voting_params_)>(
          reinterpret_cast<char*>(&_impl_.voting_params_),
          reinterpret_cast<char*>(&other->_impl_.voting_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[9]);
}
// ===================================================================

class QueryDepositRequest::_Internal {
 public:
};

QueryDepositRequest::QueryDepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryDepositRequest)
}
QueryDepositRequest::QueryDepositRequest(const QueryDepositRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDepositRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.depositor_) {}

    , decltype(_impl_.proposal_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.depositor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.depositor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_depositor().empty()) {
    _this->_impl_.depositor_.Set(from._internal_depositor(), _this->GetArenaForAllocation());
  }
  _this->_impl_.proposal_id_ = from._impl_.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryDepositRequest)
}

inline void QueryDepositRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.depositor_) {}

    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.depositor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.depositor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDepositRequest::~QueryDepositRequest() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryDepositRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDepositRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.depositor_.Destroy();
}

void QueryDepositRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDepositRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryDepositRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.depositor_.ClearToEmpty();
  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDepositRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_depositor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1beta1.QueryDepositRequest.depositor"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDepositRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryDepositRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_depositor().empty()) {
    const std::string& _s = this->_internal_depositor();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1beta1.QueryDepositRequest.depositor");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryDepositRequest)
  return target;
}

::size_t QueryDepositRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryDepositRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_depositor().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_depositor());
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDepositRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDepositRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDepositRequest::GetClassData() const { return &_class_data_; }


void QueryDepositRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDepositRequest*>(&to_msg);
  auto& from = static_cast<const QueryDepositRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryDepositRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_depositor().empty()) {
    _this->_internal_set_depositor(from._internal_depositor());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDepositRequest::CopyFrom(const QueryDepositRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryDepositRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepositRequest::IsInitialized() const {
  return true;
}

void QueryDepositRequest::InternalSwap(QueryDepositRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.depositor_, lhs_arena,
                                       &other->_impl_.depositor_, rhs_arena);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepositRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[10]);
}
// ===================================================================

class QueryDepositResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDepositResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDepositResponse, _impl_._has_bits_);
  static const ::cosmos::gov::v1beta1::Deposit& deposit(const QueryDepositResponse* msg);
  static void set_has_deposit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::gov::v1beta1::Deposit&
QueryDepositResponse::_Internal::deposit(const QueryDepositResponse* msg) {
  return *msg->_impl_.deposit_;
}
void QueryDepositResponse::clear_deposit() {
  if (_impl_.deposit_ != nullptr) _impl_.deposit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDepositResponse::QueryDepositResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryDepositResponse)
}
QueryDepositResponse::QueryDepositResponse(const QueryDepositResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDepositResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposit_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deposit_ = new ::cosmos::gov::v1beta1::Deposit(*from._impl_.deposit_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryDepositResponse)
}

inline void QueryDepositResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposit_){nullptr}
  };
}

QueryDepositResponse::~QueryDepositResponse() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryDepositResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDepositResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.deposit_;
}

void QueryDepositResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDepositResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryDepositResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.deposit_ != nullptr);
    _impl_.deposit_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDepositResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.gov.v1beta1.Deposit deposit = 1 [json_name = "deposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDepositResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryDepositResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.gov.v1beta1.Deposit deposit = 1 [json_name = "deposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::deposit(this),
        _Internal::deposit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryDepositResponse)
  return target;
}

::size_t QueryDepositResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryDepositResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.gov.v1beta1.Deposit deposit = 1 [json_name = "deposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deposit_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDepositResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDepositResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDepositResponse::GetClassData() const { return &_class_data_; }


void QueryDepositResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDepositResponse*>(&to_msg);
  auto& from = static_cast<const QueryDepositResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryDepositResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_deposit()->::cosmos::gov::v1beta1::Deposit::MergeFrom(
        from._internal_deposit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDepositResponse::CopyFrom(const QueryDepositResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryDepositResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepositResponse::IsInitialized() const {
  return true;
}

void QueryDepositResponse::InternalSwap(QueryDepositResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.deposit_, other->_impl_.deposit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepositResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryDepositsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDepositsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDepositsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryDepositsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryDepositsRequest::_Internal::pagination(const QueryDepositsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryDepositsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDepositsRequest::QueryDepositsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryDepositsRequest)
}
QueryDepositsRequest::QueryDepositsRequest(const QueryDepositsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDepositsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.proposal_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.proposal_id_ = from._impl_.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryDepositsRequest)
}

inline void QueryDepositsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

  };
}

QueryDepositsRequest::~QueryDepositsRequest() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryDepositsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDepositsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryDepositsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDepositsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryDepositsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.proposal_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDepositsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDepositsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryDepositsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryDepositsRequest)
  return target;
}

::size_t QueryDepositsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryDepositsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDepositsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDepositsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDepositsRequest::GetClassData() const { return &_class_data_; }


void QueryDepositsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDepositsRequest*>(&to_msg);
  auto& from = static_cast<const QueryDepositsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryDepositsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDepositsRequest::CopyFrom(const QueryDepositsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryDepositsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepositsRequest::IsInitialized() const {
  return true;
}

void QueryDepositsRequest::InternalSwap(QueryDepositsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryDepositsRequest, _impl_.proposal_id_)
      + sizeof(QueryDepositsRequest::_impl_.proposal_id_)
      - PROTOBUF_FIELD_OFFSET(QueryDepositsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepositsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryDepositsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDepositsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDepositsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryDepositsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryDepositsResponse::_Internal::pagination(const QueryDepositsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryDepositsResponse::clear_deposits() {
  _internal_mutable_deposits()->Clear();
}
void QueryDepositsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDepositsResponse::QueryDepositsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryDepositsResponse)
}
QueryDepositsResponse::QueryDepositsResponse(const QueryDepositsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDepositsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposits_){from._impl_.deposits_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryDepositsResponse)
}

inline void QueryDepositsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposits_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryDepositsResponse::~QueryDepositsResponse() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryDepositsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDepositsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_deposits()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryDepositsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDepositsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryDepositsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_deposits()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDepositsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.gov.v1beta1.Deposit deposits = 1 [json_name = "deposits", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deposits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDepositsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryDepositsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.gov.v1beta1.Deposit deposits = 1 [json_name = "deposits", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deposits_size()); i < n; i++) {
    const auto& repfield = this->_internal_deposits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryDepositsResponse)
  return target;
}

::size_t QueryDepositsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryDepositsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.gov.v1beta1.Deposit deposits = 1 [json_name = "deposits", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_deposits_size();
  for (const auto& msg : this->_internal_deposits()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDepositsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDepositsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDepositsResponse::GetClassData() const { return &_class_data_; }


void QueryDepositsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDepositsResponse*>(&to_msg);
  auto& from = static_cast<const QueryDepositsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryDepositsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_deposits()->MergeFrom(from._internal_deposits());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDepositsResponse::CopyFrom(const QueryDepositsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryDepositsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDepositsResponse::IsInitialized() const {
  return true;
}

void QueryDepositsResponse::InternalSwap(QueryDepositsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_deposits()->InternalSwap(other->_internal_mutable_deposits());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDepositsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[13]);
}
// ===================================================================

class QueryTallyResultRequest::_Internal {
 public:
};

QueryTallyResultRequest::QueryTallyResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryTallyResultRequest)
}
QueryTallyResultRequest::QueryTallyResultRequest(const QueryTallyResultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryTallyResultRequest)
}

inline void QueryTallyResultRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTallyResultRequest::~QueryTallyResultRequest() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryTallyResultRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTallyResultRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryTallyResultRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTallyResultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryTallyResultRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTallyResultRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTallyResultRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryTallyResultRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryTallyResultRequest)
  return target;
}

::size_t QueryTallyResultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryTallyResultRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTallyResultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTallyResultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTallyResultRequest::GetClassData() const { return &_class_data_; }


void QueryTallyResultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTallyResultRequest*>(&to_msg);
  auto& from = static_cast<const QueryTallyResultRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryTallyResultRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTallyResultRequest::CopyFrom(const QueryTallyResultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryTallyResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTallyResultRequest::IsInitialized() const {
  return true;
}

void QueryTallyResultRequest::InternalSwap(QueryTallyResultRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTallyResultRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[14]);
}
// ===================================================================

class QueryTallyResultResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryTallyResultResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryTallyResultResponse, _impl_._has_bits_);
  static const ::cosmos::gov::v1beta1::TallyResult& tally(const QueryTallyResultResponse* msg);
  static void set_has_tally(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::gov::v1beta1::TallyResult&
QueryTallyResultResponse::_Internal::tally(const QueryTallyResultResponse* msg) {
  return *msg->_impl_.tally_;
}
void QueryTallyResultResponse::clear_tally() {
  if (_impl_.tally_ != nullptr) _impl_.tally_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryTallyResultResponse::QueryTallyResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1beta1.QueryTallyResultResponse)
}
QueryTallyResultResponse::QueryTallyResultResponse(const QueryTallyResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTallyResultResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tally_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tally_ = new ::cosmos::gov::v1beta1::TallyResult(*from._impl_.tally_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1beta1.QueryTallyResultResponse)
}

inline void QueryTallyResultResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tally_){nullptr}
  };
}

QueryTallyResultResponse::~QueryTallyResultResponse() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1beta1.QueryTallyResultResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTallyResultResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tally_;
}

void QueryTallyResultResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTallyResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1beta1.QueryTallyResultResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.tally_ != nullptr);
    _impl_.tally_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTallyResultResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.gov.v1beta1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tally(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTallyResultResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1beta1.QueryTallyResultResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.gov.v1beta1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tally(this),
        _Internal::tally(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1beta1.QueryTallyResultResponse)
  return target;
}

::size_t QueryTallyResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1beta1.QueryTallyResultResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.gov.v1beta1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tally_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTallyResultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTallyResultResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTallyResultResponse::GetClassData() const { return &_class_data_; }


void QueryTallyResultResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTallyResultResponse*>(&to_msg);
  auto& from = static_cast<const QueryTallyResultResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1beta1.QueryTallyResultResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_tally()->::cosmos::gov::v1beta1::TallyResult::MergeFrom(
        from._internal_tally());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTallyResultResponse::CopyFrom(const QueryTallyResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1beta1.QueryTallyResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTallyResultResponse::IsInitialized() const {
  return true;
}

void QueryTallyResultResponse::InternalSwap(QueryTallyResultResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tally_, other->_impl_.tally_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTallyResultResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1beta1_2fquery_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace gov
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryProposalRequest*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryProposalResponse*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryProposalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryProposalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryProposalsRequest*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryProposalsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryProposalsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryProposalsResponse*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryProposalsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryProposalsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryVoteRequest*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryVoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryVoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryVoteResponse*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryVoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryVotesRequest*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryVotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryVotesResponse*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryVotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryVotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryParamsRequest*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryParamsResponse*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryDepositRequest*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryDepositRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryDepositRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryDepositResponse*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryDepositResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryDepositResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryDepositsRequest*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryDepositsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryDepositsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryDepositsResponse*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryDepositsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryDepositsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryTallyResultRequest*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryTallyResultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryTallyResultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1beta1::QueryTallyResultResponse*
Arena::CreateMaybeMessage< ::cosmos::gov::v1beta1::QueryTallyResultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1beta1::QueryTallyResultResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

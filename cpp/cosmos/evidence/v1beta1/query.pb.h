// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/evidence/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fevidence_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace evidence {
namespace v1beta1 {
class QueryAllEvidenceRequest;
struct QueryAllEvidenceRequestDefaultTypeInternal;
extern QueryAllEvidenceRequestDefaultTypeInternal _QueryAllEvidenceRequest_default_instance_;
class QueryAllEvidenceResponse;
struct QueryAllEvidenceResponseDefaultTypeInternal;
extern QueryAllEvidenceResponseDefaultTypeInternal _QueryAllEvidenceResponse_default_instance_;
class QueryEvidenceRequest;
struct QueryEvidenceRequestDefaultTypeInternal;
extern QueryEvidenceRequestDefaultTypeInternal _QueryEvidenceRequest_default_instance_;
class QueryEvidenceResponse;
struct QueryEvidenceResponseDefaultTypeInternal;
extern QueryEvidenceResponseDefaultTypeInternal _QueryEvidenceResponse_default_instance_;
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::evidence::v1beta1::QueryAllEvidenceRequest* Arena::CreateMaybeMessage<::cosmos::evidence::v1beta1::QueryAllEvidenceRequest>(Arena*);
template <>
::cosmos::evidence::v1beta1::QueryAllEvidenceResponse* Arena::CreateMaybeMessage<::cosmos::evidence::v1beta1::QueryAllEvidenceResponse>(Arena*);
template <>
::cosmos::evidence::v1beta1::QueryEvidenceRequest* Arena::CreateMaybeMessage<::cosmos::evidence::v1beta1::QueryEvidenceRequest>(Arena*);
template <>
::cosmos::evidence::v1beta1::QueryEvidenceResponse* Arena::CreateMaybeMessage<::cosmos::evidence::v1beta1::QueryEvidenceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace evidence {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryEvidenceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.QueryEvidenceRequest) */ {
 public:
  inline QueryEvidenceRequest() : QueryEvidenceRequest(nullptr) {}
  ~QueryEvidenceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEvidenceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEvidenceRequest(const QueryEvidenceRequest& from);
  QueryEvidenceRequest(QueryEvidenceRequest&& from) noexcept
    : QueryEvidenceRequest() {
    *this = ::std::move(from);
  }

  inline QueryEvidenceRequest& operator=(const QueryEvidenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEvidenceRequest& operator=(QueryEvidenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEvidenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEvidenceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryEvidenceRequest*>(
               &_QueryEvidenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryEvidenceRequest& a, QueryEvidenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEvidenceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEvidenceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEvidenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEvidenceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEvidenceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEvidenceRequest& from) {
    QueryEvidenceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEvidenceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.evidence.v1beta1.QueryEvidenceRequest";
  }
  protected:
  explicit QueryEvidenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvidenceHashFieldNumber = 1,
    kHashFieldNumber = 2,
  };
  // bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true, (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  [[deprecated]]  void clear_evidence_hash() ;
  [[deprecated]] const std::string& evidence_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_evidence_hash(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_evidence_hash();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_evidence_hash();
  [[deprecated]] void set_allocated_evidence_hash(std::string* ptr);

  private:
  const std::string& _internal_evidence_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_evidence_hash(
      const std::string& value);
  std::string* _internal_mutable_evidence_hash();

  public:
  // string hash = 2 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.QueryEvidenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evidence_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEvidenceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.QueryEvidenceResponse) */ {
 public:
  inline QueryEvidenceResponse() : QueryEvidenceResponse(nullptr) {}
  ~QueryEvidenceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEvidenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEvidenceResponse(const QueryEvidenceResponse& from);
  QueryEvidenceResponse(QueryEvidenceResponse&& from) noexcept
    : QueryEvidenceResponse() {
    *this = ::std::move(from);
  }

  inline QueryEvidenceResponse& operator=(const QueryEvidenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEvidenceResponse& operator=(QueryEvidenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEvidenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEvidenceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryEvidenceResponse*>(
               &_QueryEvidenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryEvidenceResponse& a, QueryEvidenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEvidenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEvidenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEvidenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEvidenceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEvidenceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEvidenceResponse& from) {
    QueryEvidenceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEvidenceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.evidence.v1beta1.QueryEvidenceResponse";
  }
  protected:
  explicit QueryEvidenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvidenceFieldNumber = 1,
  };
  // .google.protobuf.Any evidence = 1 [json_name = "evidence"];
  bool has_evidence() const;
  void clear_evidence() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& evidence() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_evidence();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_evidence();
  void set_allocated_evidence(::PROTOBUF_NAMESPACE_ID::Any* evidence);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_evidence() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::PROTOBUF_NAMESPACE_ID::Any* evidence);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_evidence();
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.QueryEvidenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* evidence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllEvidenceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.QueryAllEvidenceRequest) */ {
 public:
  inline QueryAllEvidenceRequest() : QueryAllEvidenceRequest(nullptr) {}
  ~QueryAllEvidenceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllEvidenceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllEvidenceRequest(const QueryAllEvidenceRequest& from);
  QueryAllEvidenceRequest(QueryAllEvidenceRequest&& from) noexcept
    : QueryAllEvidenceRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllEvidenceRequest& operator=(const QueryAllEvidenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllEvidenceRequest& operator=(QueryAllEvidenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllEvidenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllEvidenceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllEvidenceRequest*>(
               &_QueryAllEvidenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAllEvidenceRequest& a, QueryAllEvidenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllEvidenceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllEvidenceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllEvidenceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllEvidenceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllEvidenceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllEvidenceRequest& from) {
    QueryAllEvidenceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllEvidenceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.evidence.v1beta1.QueryAllEvidenceRequest";
  }
  protected:
  explicit QueryAllEvidenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllEvidenceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.QueryAllEvidenceResponse) */ {
 public:
  inline QueryAllEvidenceResponse() : QueryAllEvidenceResponse(nullptr) {}
  ~QueryAllEvidenceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllEvidenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllEvidenceResponse(const QueryAllEvidenceResponse& from);
  QueryAllEvidenceResponse(QueryAllEvidenceResponse&& from) noexcept
    : QueryAllEvidenceResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllEvidenceResponse& operator=(const QueryAllEvidenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllEvidenceResponse& operator=(QueryAllEvidenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllEvidenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllEvidenceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllEvidenceResponse*>(
               &_QueryAllEvidenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryAllEvidenceResponse& a, QueryAllEvidenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllEvidenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllEvidenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllEvidenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllEvidenceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllEvidenceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllEvidenceResponse& from) {
    QueryAllEvidenceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllEvidenceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.evidence.v1beta1.QueryAllEvidenceResponse";
  }
  protected:
  explicit QueryAllEvidenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvidenceFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
  int evidence_size() const;
  private:
  int _internal_evidence_size() const;

  public:
  void clear_evidence() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_evidence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_evidence();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_evidence(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_evidence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_evidence() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_evidence();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& evidence(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_evidence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      evidence() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > evidence_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryEvidenceRequest

// bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true, (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
inline void QueryEvidenceRequest::clear_evidence_hash() {
  _impl_.evidence_hash_.ClearToEmpty();
}
inline const std::string& QueryEvidenceRequest::evidence_hash() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.QueryEvidenceRequest.evidence_hash)
  return _internal_evidence_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryEvidenceRequest::set_evidence_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.evidence_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.QueryEvidenceRequest.evidence_hash)
}
inline std::string* QueryEvidenceRequest::mutable_evidence_hash() {
  std::string* _s = _internal_mutable_evidence_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.QueryEvidenceRequest.evidence_hash)
  return _s;
}
inline const std::string& QueryEvidenceRequest::_internal_evidence_hash() const {
  return _impl_.evidence_hash_.Get();
}
inline void QueryEvidenceRequest::_internal_set_evidence_hash(const std::string& value) {
  ;


  _impl_.evidence_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryEvidenceRequest::_internal_mutable_evidence_hash() {
  ;
  return _impl_.evidence_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryEvidenceRequest::release_evidence_hash() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.QueryEvidenceRequest.evidence_hash)
  return _impl_.evidence_hash_.Release();
}
inline void QueryEvidenceRequest::set_allocated_evidence_hash(std::string* value) {
  _impl_.evidence_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.evidence_hash_.IsDefault()) {
          _impl_.evidence_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.QueryEvidenceRequest.evidence_hash)
}

// string hash = 2 [json_name = "hash"];
inline void QueryEvidenceRequest::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& QueryEvidenceRequest::hash() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.QueryEvidenceRequest.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryEvidenceRequest::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.QueryEvidenceRequest.hash)
}
inline std::string* QueryEvidenceRequest::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.QueryEvidenceRequest.hash)
  return _s;
}
inline const std::string& QueryEvidenceRequest::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void QueryEvidenceRequest::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryEvidenceRequest::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryEvidenceRequest::release_hash() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.QueryEvidenceRequest.hash)
  return _impl_.hash_.Release();
}
inline void QueryEvidenceRequest::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.QueryEvidenceRequest.hash)
}

// -------------------------------------------------------------------

// QueryEvidenceResponse

// .google.protobuf.Any evidence = 1 [json_name = "evidence"];
inline bool QueryEvidenceResponse::has_evidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evidence_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryEvidenceResponse::_internal_evidence() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryEvidenceResponse::evidence() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.QueryEvidenceResponse.evidence)
  return _internal_evidence();
}
inline void QueryEvidenceResponse::unsafe_arena_set_allocated_evidence(
    ::PROTOBUF_NAMESPACE_ID::Any* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.evidence_);
  }
  _impl_.evidence_ = evidence;
  if (evidence) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.evidence.v1beta1.QueryEvidenceResponse.evidence)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryEvidenceResponse::release_evidence() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryEvidenceResponse::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.QueryEvidenceResponse.evidence)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryEvidenceResponse::_internal_mutable_evidence() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.evidence_ = p;
  }
  return _impl_.evidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryEvidenceResponse::mutable_evidence() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.QueryEvidenceResponse.evidence)
  return _msg;
}
inline void QueryEvidenceResponse::set_allocated_evidence(::PROTOBUF_NAMESPACE_ID::Any* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.evidence_);
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence));
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.QueryEvidenceResponse.evidence)
}

// -------------------------------------------------------------------

// QueryAllEvidenceRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryAllEvidenceRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllEvidenceRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllEvidenceRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.QueryAllEvidenceRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllEvidenceRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.evidence.v1beta1.QueryAllEvidenceRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllEvidenceRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllEvidenceRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.QueryAllEvidenceRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllEvidenceRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllEvidenceRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.QueryAllEvidenceRequest.pagination)
  return _msg;
}
inline void QueryAllEvidenceRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.QueryAllEvidenceRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAllEvidenceResponse

// repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
inline int QueryAllEvidenceResponse::_internal_evidence_size() const {
  return _impl_.evidence_.size();
}
inline int QueryAllEvidenceResponse::evidence_size() const {
  return _internal_evidence_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAllEvidenceResponse::mutable_evidence(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.evidence)
  return _internal_mutable_evidence()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
QueryAllEvidenceResponse::mutable_evidence() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.evidence)
  return _internal_mutable_evidence();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryAllEvidenceResponse::_internal_evidence(int index) const {
  return _internal_evidence().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryAllEvidenceResponse::evidence(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.evidence)
  return _internal_evidence(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAllEvidenceResponse::_internal_add_evidence() {
  return _internal_mutable_evidence()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAllEvidenceResponse::add_evidence() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_evidence();
  // @@protoc_insertion_point(field_add:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.evidence)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
QueryAllEvidenceResponse::evidence() const {
  // @@protoc_insertion_point(field_list:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.evidence)
  return _internal_evidence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
QueryAllEvidenceResponse::_internal_evidence() const {
  return _impl_.evidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
QueryAllEvidenceResponse::_internal_mutable_evidence() {
  return &_impl_.evidence_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryAllEvidenceResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllEvidenceResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllEvidenceResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.pagination)
  return _internal_pagination();
}
inline void QueryAllEvidenceResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllEvidenceResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllEvidenceResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllEvidenceResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllEvidenceResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.pagination)
  return _msg;
}
inline void QueryAllEvidenceResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.QueryAllEvidenceResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_2epb_2eh

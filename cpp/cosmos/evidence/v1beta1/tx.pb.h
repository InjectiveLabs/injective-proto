// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/evidence/v1beta1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fevidence_2fv1beta1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fevidence_2fv1beta1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fevidence_2fv1beta1_2ftx_2eproto;
namespace cosmos {
namespace evidence {
namespace v1beta1 {
class MsgSubmitEvidence;
struct MsgSubmitEvidenceDefaultTypeInternal;
extern MsgSubmitEvidenceDefaultTypeInternal _MsgSubmitEvidence_default_instance_;
class MsgSubmitEvidenceResponse;
struct MsgSubmitEvidenceResponseDefaultTypeInternal;
extern MsgSubmitEvidenceResponseDefaultTypeInternal _MsgSubmitEvidenceResponse_default_instance_;
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::evidence::v1beta1::MsgSubmitEvidence* Arena::CreateMaybeMessage<::cosmos::evidence::v1beta1::MsgSubmitEvidence>(Arena*);
template <>
::cosmos::evidence::v1beta1::MsgSubmitEvidenceResponse* Arena::CreateMaybeMessage<::cosmos::evidence::v1beta1::MsgSubmitEvidenceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace evidence {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgSubmitEvidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.MsgSubmitEvidence) */ {
 public:
  inline MsgSubmitEvidence() : MsgSubmitEvidence(nullptr) {}
  ~MsgSubmitEvidence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitEvidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSubmitEvidence(const MsgSubmitEvidence& from);
  MsgSubmitEvidence(MsgSubmitEvidence&& from) noexcept
    : MsgSubmitEvidence() {
    *this = ::std::move(from);
  }

  inline MsgSubmitEvidence& operator=(const MsgSubmitEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitEvidence& operator=(MsgSubmitEvidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitEvidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitEvidence* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitEvidence*>(
               &_MsgSubmitEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSubmitEvidence& a, MsgSubmitEvidence& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSubmitEvidence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitEvidence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitEvidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSubmitEvidence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSubmitEvidence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSubmitEvidence& from) {
    MsgSubmitEvidence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSubmitEvidence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.evidence.v1beta1.MsgSubmitEvidence";
  }
  protected:
  explicit MsgSubmitEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmitterFieldNumber = 1,
    kEvidenceFieldNumber = 2,
  };
  // string submitter = 1 [json_name = "submitter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_submitter() ;
  const std::string& submitter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_submitter(Arg_&& arg, Args_... args);
  std::string* mutable_submitter();
  PROTOBUF_NODISCARD std::string* release_submitter();
  void set_allocated_submitter(std::string* ptr);

  private:
  const std::string& _internal_submitter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_submitter(
      const std::string& value);
  std::string* _internal_mutable_submitter();

  public:
  // .google.protobuf.Any evidence = 2 [json_name = "evidence", (.cosmos_proto.accepts_interface) = "cosmos.evidence.v1beta1.Evidence"];
  bool has_evidence() const;
  void clear_evidence() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& evidence() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_evidence();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_evidence();
  void set_allocated_evidence(::PROTOBUF_NAMESPACE_ID::Any* evidence);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_evidence() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::PROTOBUF_NAMESPACE_ID::Any* evidence);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_evidence();
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.MsgSubmitEvidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submitter_;
    ::PROTOBUF_NAMESPACE_ID::Any* evidence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgSubmitEvidenceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse) */ {
 public:
  inline MsgSubmitEvidenceResponse() : MsgSubmitEvidenceResponse(nullptr) {}
  ~MsgSubmitEvidenceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitEvidenceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSubmitEvidenceResponse(const MsgSubmitEvidenceResponse& from);
  MsgSubmitEvidenceResponse(MsgSubmitEvidenceResponse&& from) noexcept
    : MsgSubmitEvidenceResponse() {
    *this = ::std::move(from);
  }

  inline MsgSubmitEvidenceResponse& operator=(const MsgSubmitEvidenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitEvidenceResponse& operator=(MsgSubmitEvidenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitEvidenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitEvidenceResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitEvidenceResponse*>(
               &_MsgSubmitEvidenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgSubmitEvidenceResponse& a, MsgSubmitEvidenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSubmitEvidenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitEvidenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitEvidenceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSubmitEvidenceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSubmitEvidenceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSubmitEvidenceResponse& from) {
    MsgSubmitEvidenceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSubmitEvidenceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse";
  }
  protected:
  explicit MsgSubmitEvidenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 4,
  };
  // bytes hash = 4 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgSubmitEvidence

// string submitter = 1 [json_name = "submitter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgSubmitEvidence::clear_submitter() {
  _impl_.submitter_.ClearToEmpty();
}
inline const std::string& MsgSubmitEvidence::submitter() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
  return _internal_submitter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitEvidence::set_submitter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.submitter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
}
inline std::string* MsgSubmitEvidence::mutable_submitter() {
  std::string* _s = _internal_mutable_submitter();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
  return _s;
}
inline const std::string& MsgSubmitEvidence::_internal_submitter() const {
  return _impl_.submitter_.Get();
}
inline void MsgSubmitEvidence::_internal_set_submitter(const std::string& value) {
  ;


  _impl_.submitter_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSubmitEvidence::_internal_mutable_submitter() {
  ;
  return _impl_.submitter_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSubmitEvidence::release_submitter() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
  return _impl_.submitter_.Release();
}
inline void MsgSubmitEvidence::set_allocated_submitter(std::string* value) {
  _impl_.submitter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.submitter_.IsDefault()) {
          _impl_.submitter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.MsgSubmitEvidence.submitter)
}

// .google.protobuf.Any evidence = 2 [json_name = "evidence", (.cosmos_proto.accepts_interface) = "cosmos.evidence.v1beta1.Evidence"];
inline bool MsgSubmitEvidence::has_evidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evidence_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgSubmitEvidence::_internal_evidence() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgSubmitEvidence::evidence() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
  return _internal_evidence();
}
inline void MsgSubmitEvidence::unsafe_arena_set_allocated_evidence(
    ::PROTOBUF_NAMESPACE_ID::Any* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.evidence_);
  }
  _impl_.evidence_ = evidence;
  if (evidence) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitEvidence::release_evidence() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitEvidence::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitEvidence::_internal_mutable_evidence() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.evidence_ = p;
  }
  return _impl_.evidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitEvidence::mutable_evidence() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
  return _msg;
}
inline void MsgSubmitEvidence::set_allocated_evidence(::PROTOBUF_NAMESPACE_ID::Any* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.evidence_);
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence));
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.MsgSubmitEvidence.evidence)
}

// -------------------------------------------------------------------

// MsgSubmitEvidenceResponse

// bytes hash = 4 [json_name = "hash"];
inline void MsgSubmitEvidenceResponse::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& MsgSubmitEvidenceResponse::hash() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitEvidenceResponse::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
}
inline std::string* MsgSubmitEvidenceResponse::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
  return _s;
}
inline const std::string& MsgSubmitEvidenceResponse::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void MsgSubmitEvidenceResponse::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSubmitEvidenceResponse::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSubmitEvidenceResponse::release_hash() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
  return _impl_.hash_.Release();
}
inline void MsgSubmitEvidenceResponse::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse.hash)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2ftx_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/evidence/v1beta1/evidence.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "amino/amino.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto;
namespace cosmos {
namespace evidence {
namespace v1beta1 {
class Equivocation;
struct EquivocationDefaultTypeInternal;
extern EquivocationDefaultTypeInternal _Equivocation_default_instance_;
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::evidence::v1beta1::Equivocation* Arena::CreateMaybeMessage<::cosmos::evidence::v1beta1::Equivocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace evidence {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Equivocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.evidence.v1beta1.Equivocation) */ {
 public:
  inline Equivocation() : Equivocation(nullptr) {}
  ~Equivocation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Equivocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Equivocation(const Equivocation& from);
  Equivocation(Equivocation&& from) noexcept
    : Equivocation() {
    *this = ::std::move(from);
  }

  inline Equivocation& operator=(const Equivocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Equivocation& operator=(Equivocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Equivocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Equivocation* internal_default_instance() {
    return reinterpret_cast<const Equivocation*>(
               &_Equivocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Equivocation& a, Equivocation& b) {
    a.Swap(&b);
  }
  inline void Swap(Equivocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Equivocation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Equivocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Equivocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Equivocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Equivocation& from) {
    Equivocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Equivocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.evidence.v1beta1.Equivocation";
  }
  protected:
  explicit Equivocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsensusAddressFieldNumber = 4,
    kTimeFieldNumber = 2,
    kHeightFieldNumber = 1,
    kPowerFieldNumber = 3,
  };
  // string consensus_address = 4 [json_name = "consensusAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_consensus_address() ;
  const std::string& consensus_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_consensus_address(Arg_&& arg, Args_... args);
  std::string* mutable_consensus_address();
  PROTOBUF_NODISCARD std::string* release_consensus_address();
  void set_allocated_consensus_address(std::string* ptr);

  private:
  const std::string& _internal_consensus_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consensus_address(
      const std::string& value);
  std::string* _internal_mutable_consensus_address();

  public:
  // .google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_time() const;
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // int64 power = 3 [json_name = "power"];
  void clear_power() ;
  ::int64_t power() const;
  void set_power(::int64_t value);

  private:
  ::int64_t _internal_power() const;
  void _internal_set_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.evidence.v1beta1.Equivocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consensus_address_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::int64_t height_;
    ::int64_t power_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Equivocation

// int64 height = 1 [json_name = "height"];
inline void Equivocation::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t Equivocation::height() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.Equivocation.height)
  return _internal_height();
}
inline void Equivocation::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.Equivocation.height)
}
inline ::int64_t Equivocation::_internal_height() const {
  return _impl_.height_;
}
inline void Equivocation::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 2 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Equivocation::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Equivocation::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Equivocation::time() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.Equivocation.time)
  return _internal_time();
}
inline void Equivocation::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.evidence.v1beta1.Equivocation.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Equivocation::release_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Equivocation::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.Equivocation.time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Equivocation::_internal_mutable_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Equivocation::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.Equivocation.time)
  return _msg;
}
inline void Equivocation::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.Equivocation.time)
}

// int64 power = 3 [json_name = "power"];
inline void Equivocation::clear_power() {
  _impl_.power_ = ::int64_t{0};
}
inline ::int64_t Equivocation::power() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.Equivocation.power)
  return _internal_power();
}
inline void Equivocation::set_power(::int64_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.Equivocation.power)
}
inline ::int64_t Equivocation::_internal_power() const {
  return _impl_.power_;
}
inline void Equivocation::_internal_set_power(::int64_t value) {
  ;
  _impl_.power_ = value;
}

// string consensus_address = 4 [json_name = "consensusAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Equivocation::clear_consensus_address() {
  _impl_.consensus_address_.ClearToEmpty();
}
inline const std::string& Equivocation::consensus_address() const {
  // @@protoc_insertion_point(field_get:cosmos.evidence.v1beta1.Equivocation.consensus_address)
  return _internal_consensus_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Equivocation::set_consensus_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.consensus_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.evidence.v1beta1.Equivocation.consensus_address)
}
inline std::string* Equivocation::mutable_consensus_address() {
  std::string* _s = _internal_mutable_consensus_address();
  // @@protoc_insertion_point(field_mutable:cosmos.evidence.v1beta1.Equivocation.consensus_address)
  return _s;
}
inline const std::string& Equivocation::_internal_consensus_address() const {
  return _impl_.consensus_address_.Get();
}
inline void Equivocation::_internal_set_consensus_address(const std::string& value) {
  ;


  _impl_.consensus_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Equivocation::_internal_mutable_consensus_address() {
  ;
  return _impl_.consensus_address_.Mutable( GetArenaForAllocation());
}
inline std::string* Equivocation::release_consensus_address() {
  // @@protoc_insertion_point(field_release:cosmos.evidence.v1beta1.Equivocation.consensus_address)
  return _impl_.consensus_address_.Release();
}
inline void Equivocation::set_allocated_consensus_address(std::string* value) {
  _impl_.consensus_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.consensus_address_.IsDefault()) {
          _impl_.consensus_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.evidence.v1beta1.Equivocation.consensus_address)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fevidence_2fv1beta1_2fevidence_2eproto_2epb_2eh

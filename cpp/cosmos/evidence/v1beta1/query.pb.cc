// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/evidence/v1beta1/query.proto

#include "cosmos/evidence/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace evidence {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR QueryEvidenceRequest::QueryEvidenceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.evidence_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryEvidenceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryEvidenceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryEvidenceRequestDefaultTypeInternal() {}
  union {
    QueryEvidenceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryEvidenceRequestDefaultTypeInternal _QueryEvidenceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryEvidenceResponse::QueryEvidenceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.evidence_)*/nullptr} {}
struct QueryEvidenceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryEvidenceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryEvidenceResponseDefaultTypeInternal() {}
  union {
    QueryEvidenceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryEvidenceResponseDefaultTypeInternal _QueryEvidenceResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAllEvidenceRequest::QueryAllEvidenceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryAllEvidenceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllEvidenceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllEvidenceRequestDefaultTypeInternal() {}
  union {
    QueryAllEvidenceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllEvidenceRequestDefaultTypeInternal _QueryAllEvidenceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAllEvidenceResponse::QueryAllEvidenceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.evidence_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryAllEvidenceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllEvidenceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllEvidenceResponseDefaultTypeInternal() {}
  union {
    QueryAllEvidenceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllEvidenceResponseDefaultTypeInternal _QueryAllEvidenceResponse_default_instance_;
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fevidence_2fv1beta1_2fquery_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fevidence_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fevidence_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceRequest, _impl_.evidence_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceRequest, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryEvidenceResponse, _impl_.evidence_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceRequest, _impl_.pagination_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse, _impl_.evidence_),
    PROTOBUF_FIELD_OFFSET(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse, _impl_.pagination_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::evidence::v1beta1::QueryEvidenceRequest)},
        { 10, 19, -1, sizeof(::cosmos::evidence::v1beta1::QueryEvidenceResponse)},
        { 20, 29, -1, sizeof(::cosmos::evidence::v1beta1::QueryAllEvidenceRequest)},
        { 30, 40, -1, sizeof(::cosmos::evidence::v1beta1::QueryAllEvidenceResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::evidence::v1beta1::_QueryEvidenceRequest_default_instance_._instance,
    &::cosmos::evidence::v1beta1::_QueryEvidenceResponse_default_instance_._instance,
    &::cosmos::evidence::v1beta1::_QueryAllEvidenceRequest_default_instance_._instance,
    &::cosmos::evidence::v1beta1::_QueryAllEvidenceResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fevidence_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#cosmos/evidence/v1beta1/query.proto\022\027c"
    "osmos.evidence.v1beta1\032*cosmos/base/quer"
    "y/v1beta1/pagination.proto\032\024gogoproto/go"
    "go.proto\032\031google/protobuf/any.proto\032\034goo"
    "gle/api/annotations.proto\"\207\001\n\024QueryEvide"
    "nceRequest\022[\n\revidence_hash\030\001 \001(\014B6\030\001\372\336\037"
    "0github.com/cometbft/cometbft/libs/bytes"
    ".HexBytesR\014evidenceHash\022\022\n\004hash\030\002 \001(\tR\004h"
    "ash\"I\n\025QueryEvidenceResponse\0220\n\010evidence"
    "\030\001 \001(\0132\024.google.protobuf.AnyR\010evidence\"a"
    "\n\027QueryAllEvidenceRequest\022F\n\npagination\030"
    "\001 \001(\0132&.cosmos.base.query.v1beta1.PageRe"
    "questR\npagination\"\225\001\n\030QueryAllEvidenceRe"
    "sponse\0220\n\010evidence\030\001 \003(\0132\024.google.protob"
    "uf.AnyR\010evidence\022G\n\npagination\030\002 \001(\0132\'.c"
    "osmos.base.query.v1beta1.PageResponseR\np"
    "agination2\305\002\n\005Query\022\233\001\n\010Evidence\022-.cosmo"
    "s.evidence.v1beta1.QueryEvidenceRequest\032"
    "..cosmos.evidence.v1beta1.QueryEvidenceR"
    "esponse\"0\202\323\344\223\002*\022(/cosmos/evidence/v1beta"
    "1/evidence/{hash}\022\235\001\n\013AllEvidence\0220.cosm"
    "os.evidence.v1beta1.QueryAllEvidenceRequ"
    "est\0321.cosmos.evidence.v1beta1.QueryAllEv"
    "idenceResponse\")\202\323\344\223\002#\022!/cosmos/evidence"
    "/v1beta1/evidenceB\326\001\n\033com.cosmos.evidenc"
    "e.v1beta1B\nQueryProtoP\001Z-github.com/cosm"
    "os/cosmos-sdk/x/evidence/types\242\002\003CEX\252\002\027C"
    "osmos.Evidence.V1beta1\312\002\027Cosmos\\Evidence"
    "\\V1beta1\342\002#Cosmos\\Evidence\\V1beta1\\GPBMe"
    "tadata\352\002\031Cosmos::Evidence::V1beta1b\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    1202,
    descriptor_table_protodef_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    "cosmos/evidence/v1beta1/query.proto",
    &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fevidence_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_cosmos_2fevidence_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fevidence_2fv1beta1_2fquery_2eproto(&descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto);
namespace cosmos {
namespace evidence {
namespace v1beta1 {
// ===================================================================

class QueryEvidenceRequest::_Internal {
 public:
};

QueryEvidenceRequest::QueryEvidenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.QueryEvidenceRequest)
}
QueryEvidenceRequest::QueryEvidenceRequest(const QueryEvidenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryEvidenceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.evidence_hash_) {}

    , decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.evidence_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.evidence_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_evidence_hash().empty()) {
    _this->_impl_.evidence_hash_.Set(from._internal_evidence_hash(), _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.QueryEvidenceRequest)
}

inline void QueryEvidenceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.evidence_hash_) {}

    , decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.evidence_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.evidence_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryEvidenceRequest::~QueryEvidenceRequest() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryEvidenceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.evidence_hash_.Destroy();
  _impl_.hash_.Destroy();
}

void QueryEvidenceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryEvidenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.evidence_hash_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryEvidenceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true, (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_evidence_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string hash = 2 [json_name = "hash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.evidence.v1beta1.QueryEvidenceRequest.hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryEvidenceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true, (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  if (!this->_internal_evidence_hash().empty()) {
    const std::string& _s = this->_internal_evidence_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // string hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.evidence.v1beta1.QueryEvidenceRequest.hash");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  return target;
}

::size_t QueryEvidenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes evidence_hash = 1 [json_name = "evidenceHash", deprecated = true, (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  if (!this->_internal_evidence_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_evidence_hash());
  }

  // string hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryEvidenceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryEvidenceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryEvidenceRequest::GetClassData() const { return &_class_data_; }


void QueryEvidenceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryEvidenceRequest*>(&to_msg);
  auto& from = static_cast<const QueryEvidenceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_evidence_hash().empty()) {
    _this->_internal_set_evidence_hash(from._internal_evidence_hash());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryEvidenceRequest::CopyFrom(const QueryEvidenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.QueryEvidenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEvidenceRequest::IsInitialized() const {
  return true;
}

void QueryEvidenceRequest::InternalSwap(QueryEvidenceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evidence_hash_, lhs_arena,
                                       &other->_impl_.evidence_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryEvidenceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fevidence_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryEvidenceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryEvidenceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryEvidenceResponse, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& evidence(const QueryEvidenceResponse* msg);
  static void set_has_evidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
QueryEvidenceResponse::_Internal::evidence(const QueryEvidenceResponse* msg) {
  return *msg->_impl_.evidence_;
}
void QueryEvidenceResponse::clear_evidence() {
  if (_impl_.evidence_ != nullptr) _impl_.evidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryEvidenceResponse::QueryEvidenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.QueryEvidenceResponse)
}
QueryEvidenceResponse::QueryEvidenceResponse(const QueryEvidenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryEvidenceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.evidence_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.evidence_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.evidence_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.QueryEvidenceResponse)
}

inline void QueryEvidenceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.evidence_){nullptr}
  };
}

QueryEvidenceResponse::~QueryEvidenceResponse() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryEvidenceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.evidence_;
}

void QueryEvidenceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryEvidenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.evidence_ != nullptr);
    _impl_.evidence_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryEvidenceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any evidence = 1 [json_name = "evidence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryEvidenceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any evidence = 1 [json_name = "evidence"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::evidence(this),
        _Internal::evidence(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  return target;
}

::size_t QueryEvidenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any evidence = 1 [json_name = "evidence"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.evidence_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryEvidenceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryEvidenceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryEvidenceResponse::GetClassData() const { return &_class_data_; }


void QueryEvidenceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryEvidenceResponse*>(&to_msg);
  auto& from = static_cast<const QueryEvidenceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_evidence()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_evidence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryEvidenceResponse::CopyFrom(const QueryEvidenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.QueryEvidenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEvidenceResponse::IsInitialized() const {
  return true;
}

void QueryEvidenceResponse::InternalSwap(QueryEvidenceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.evidence_, other->_impl_.evidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryEvidenceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fevidence_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryAllEvidenceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAllEvidenceRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAllEvidenceRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryAllEvidenceRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryAllEvidenceRequest::_Internal::pagination(const QueryAllEvidenceRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryAllEvidenceRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllEvidenceRequest::QueryAllEvidenceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
}
QueryAllEvidenceRequest::QueryAllEvidenceRequest(const QueryAllEvidenceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAllEvidenceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
}

inline void QueryAllEvidenceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryAllEvidenceRequest::~QueryAllEvidenceRequest() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAllEvidenceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryAllEvidenceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAllEvidenceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAllEvidenceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAllEvidenceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  return target;
}

::size_t QueryAllEvidenceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAllEvidenceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAllEvidenceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAllEvidenceRequest::GetClassData() const { return &_class_data_; }


void QueryAllEvidenceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAllEvidenceRequest*>(&to_msg);
  auto& from = static_cast<const QueryAllEvidenceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllEvidenceRequest::CopyFrom(const QueryAllEvidenceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.QueryAllEvidenceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllEvidenceRequest::IsInitialized() const {
  return true;
}

void QueryAllEvidenceRequest::InternalSwap(QueryAllEvidenceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllEvidenceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fevidence_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryAllEvidenceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAllEvidenceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAllEvidenceResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryAllEvidenceResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryAllEvidenceResponse::_Internal::pagination(const QueryAllEvidenceResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryAllEvidenceResponse::clear_evidence() {
  _internal_mutable_evidence()->Clear();
}
void QueryAllEvidenceResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllEvidenceResponse::QueryAllEvidenceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
}
QueryAllEvidenceResponse::QueryAllEvidenceResponse(const QueryAllEvidenceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAllEvidenceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.evidence_){from._impl_.evidence_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
}

inline void QueryAllEvidenceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.evidence_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryAllEvidenceResponse::~QueryAllEvidenceResponse() {
  // @@protoc_insertion_point(destructor:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAllEvidenceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_evidence()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryAllEvidenceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAllEvidenceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_evidence()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAllEvidenceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evidence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAllEvidenceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_evidence_size()); i < n; i++) {
    const auto& repfield = this->_internal_evidence(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  return target;
}

::size_t QueryAllEvidenceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any evidence = 1 [json_name = "evidence"];
  total_size += 1UL * this->_internal_evidence_size();
  for (const auto& msg : this->_internal_evidence()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAllEvidenceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAllEvidenceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAllEvidenceResponse::GetClassData() const { return &_class_data_; }


void QueryAllEvidenceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAllEvidenceResponse*>(&to_msg);
  auto& from = static_cast<const QueryAllEvidenceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_evidence()->MergeFrom(from._internal_evidence());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllEvidenceResponse::CopyFrom(const QueryAllEvidenceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.evidence.v1beta1.QueryAllEvidenceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllEvidenceResponse::IsInitialized() const {
  return true;
}

void QueryAllEvidenceResponse::InternalSwap(QueryAllEvidenceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_evidence()->InternalSwap(other->_internal_mutable_evidence());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllEvidenceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fevidence_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fevidence_2fv1beta1_2fquery_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace evidence
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::evidence::v1beta1::QueryEvidenceRequest*
Arena::CreateMaybeMessage< ::cosmos::evidence::v1beta1::QueryEvidenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::evidence::v1beta1::QueryEvidenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::evidence::v1beta1::QueryEvidenceResponse*
Arena::CreateMaybeMessage< ::cosmos::evidence::v1beta1::QueryEvidenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::evidence::v1beta1::QueryEvidenceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::evidence::v1beta1::QueryAllEvidenceRequest*
Arena::CreateMaybeMessage< ::cosmos::evidence::v1beta1::QueryAllEvidenceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::evidence::v1beta1::QueryAllEvidenceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::evidence::v1beta1::QueryAllEvidenceResponse*
Arena::CreateMaybeMessage< ::cosmos::evidence::v1beta1::QueryAllEvidenceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::evidence::v1beta1::QueryAllEvidenceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

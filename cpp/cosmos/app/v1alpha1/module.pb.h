// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/app/v1alpha1/module.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto;
namespace cosmos {
namespace app {
namespace v1alpha1 {
class MigrateFromInfo;
struct MigrateFromInfoDefaultTypeInternal;
extern MigrateFromInfoDefaultTypeInternal _MigrateFromInfo_default_instance_;
class ModuleDescriptor;
struct ModuleDescriptorDefaultTypeInternal;
extern ModuleDescriptorDefaultTypeInternal _ModuleDescriptor_default_instance_;
class PackageReference;
struct PackageReferenceDefaultTypeInternal;
extern PackageReferenceDefaultTypeInternal _PackageReference_default_instance_;
}  // namespace v1alpha1
}  // namespace app
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::app::v1alpha1::MigrateFromInfo* Arena::CreateMaybeMessage<::cosmos::app::v1alpha1::MigrateFromInfo>(Arena*);
template <>
::cosmos::app::v1alpha1::ModuleDescriptor* Arena::CreateMaybeMessage<::cosmos::app::v1alpha1::ModuleDescriptor>(Arena*);
template <>
::cosmos::app::v1alpha1::PackageReference* Arena::CreateMaybeMessage<::cosmos::app::v1alpha1::PackageReference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace app {
namespace v1alpha1 {

// ===================================================================


// -------------------------------------------------------------------

class ModuleDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.app.v1alpha1.ModuleDescriptor) */ {
 public:
  inline ModuleDescriptor() : ModuleDescriptor(nullptr) {}
  ~ModuleDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleDescriptor(const ModuleDescriptor& from);
  ModuleDescriptor(ModuleDescriptor&& from) noexcept
    : ModuleDescriptor() {
    *this = ::std::move(from);
  }

  inline ModuleDescriptor& operator=(const ModuleDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleDescriptor& operator=(ModuleDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleDescriptor* internal_default_instance() {
    return reinterpret_cast<const ModuleDescriptor*>(
               &_ModuleDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModuleDescriptor& a, ModuleDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModuleDescriptor& from) {
    ModuleDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.app.v1alpha1.ModuleDescriptor";
  }
  protected:
  explicit ModuleDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsePackageFieldNumber = 2,
    kCanMigrateFromFieldNumber = 3,
    kGoImportFieldNumber = 1,
  };
  // repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];
  int use_package_size() const;
  private:
  int _internal_use_package_size() const;

  public:
  void clear_use_package() ;
  ::cosmos::app::v1alpha1::PackageReference* mutable_use_package(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::PackageReference >*
      mutable_use_package();
  private:
  const ::cosmos::app::v1alpha1::PackageReference& _internal_use_package(int index) const;
  ::cosmos::app::v1alpha1::PackageReference* _internal_add_use_package();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::v1alpha1::PackageReference>& _internal_use_package() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::v1alpha1::PackageReference>* _internal_mutable_use_package();
  public:
  const ::cosmos::app::v1alpha1::PackageReference& use_package(int index) const;
  ::cosmos::app::v1alpha1::PackageReference* add_use_package();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::PackageReference >&
      use_package() const;
  // repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];
  int can_migrate_from_size() const;
  private:
  int _internal_can_migrate_from_size() const;

  public:
  void clear_can_migrate_from() ;
  ::cosmos::app::v1alpha1::MigrateFromInfo* mutable_can_migrate_from(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::MigrateFromInfo >*
      mutable_can_migrate_from();
  private:
  const ::cosmos::app::v1alpha1::MigrateFromInfo& _internal_can_migrate_from(int index) const;
  ::cosmos::app::v1alpha1::MigrateFromInfo* _internal_add_can_migrate_from();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::v1alpha1::MigrateFromInfo>& _internal_can_migrate_from() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::v1alpha1::MigrateFromInfo>* _internal_mutable_can_migrate_from();
  public:
  const ::cosmos::app::v1alpha1::MigrateFromInfo& can_migrate_from(int index) const;
  ::cosmos::app::v1alpha1::MigrateFromInfo* add_can_migrate_from();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::MigrateFromInfo >&
      can_migrate_from() const;
  // string go_import = 1 [json_name = "goImport"];
  void clear_go_import() ;
  const std::string& go_import() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_go_import(Arg_&& arg, Args_... args);
  std::string* mutable_go_import();
  PROTOBUF_NODISCARD std::string* release_go_import();
  void set_allocated_go_import(std::string* ptr);

  private:
  const std::string& _internal_go_import() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_go_import(
      const std::string& value);
  std::string* _internal_mutable_go_import();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.app.v1alpha1.ModuleDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::PackageReference > use_package_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::MigrateFromInfo > can_migrate_from_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr go_import_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto;
};// -------------------------------------------------------------------

class PackageReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.app.v1alpha1.PackageReference) */ {
 public:
  inline PackageReference() : PackageReference(nullptr) {}
  ~PackageReference() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PackageReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackageReference(const PackageReference& from);
  PackageReference(PackageReference&& from) noexcept
    : PackageReference() {
    *this = ::std::move(from);
  }

  inline PackageReference& operator=(const PackageReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageReference& operator=(PackageReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackageReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackageReference* internal_default_instance() {
    return reinterpret_cast<const PackageReference*>(
               &_PackageReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PackageReference& a, PackageReference& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackageReference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackageReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackageReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackageReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PackageReference& from) {
    PackageReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.app.v1alpha1.PackageReference";
  }
  protected:
  explicit PackageReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRevisionFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint32 revision = 2 [json_name = "revision"];
  void clear_revision() ;
  ::uint32_t revision() const;
  void set_revision(::uint32_t value);

  private:
  ::uint32_t _internal_revision() const;
  void _internal_set_revision(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.app.v1alpha1.PackageReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t revision_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto;
};// -------------------------------------------------------------------

class MigrateFromInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.app.v1alpha1.MigrateFromInfo) */ {
 public:
  inline MigrateFromInfo() : MigrateFromInfo(nullptr) {}
  ~MigrateFromInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MigrateFromInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MigrateFromInfo(const MigrateFromInfo& from);
  MigrateFromInfo(MigrateFromInfo&& from) noexcept
    : MigrateFromInfo() {
    *this = ::std::move(from);
  }

  inline MigrateFromInfo& operator=(const MigrateFromInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MigrateFromInfo& operator=(MigrateFromInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MigrateFromInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MigrateFromInfo* internal_default_instance() {
    return reinterpret_cast<const MigrateFromInfo*>(
               &_MigrateFromInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MigrateFromInfo& a, MigrateFromInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MigrateFromInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MigrateFromInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MigrateFromInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MigrateFromInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MigrateFromInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MigrateFromInfo& from) {
    MigrateFromInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateFromInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.app.v1alpha1.MigrateFromInfo";
  }
  protected:
  explicit MigrateFromInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
  };
  // string module = 1 [json_name = "module"];
  void clear_module() ;
  const std::string& module() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module(Arg_&& arg, Args_... args);
  std::string* mutable_module();
  PROTOBUF_NODISCARD std::string* release_module();
  void set_allocated_module(std::string* ptr);

  private:
  const std::string& _internal_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module(
      const std::string& value);
  std::string* _internal_mutable_module();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.app.v1alpha1.MigrateFromInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto;
};

// ===================================================================



static const int kModuleFieldNumber = 57193479;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cosmos::app::v1alpha1::ModuleDescriptor >, 11, false >
  module;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModuleDescriptor

// string go_import = 1 [json_name = "goImport"];
inline void ModuleDescriptor::clear_go_import() {
  _impl_.go_import_.ClearToEmpty();
}
inline const std::string& ModuleDescriptor::go_import() const {
  // @@protoc_insertion_point(field_get:cosmos.app.v1alpha1.ModuleDescriptor.go_import)
  return _internal_go_import();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModuleDescriptor::set_go_import(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.go_import_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.app.v1alpha1.ModuleDescriptor.go_import)
}
inline std::string* ModuleDescriptor::mutable_go_import() {
  std::string* _s = _internal_mutable_go_import();
  // @@protoc_insertion_point(field_mutable:cosmos.app.v1alpha1.ModuleDescriptor.go_import)
  return _s;
}
inline const std::string& ModuleDescriptor::_internal_go_import() const {
  return _impl_.go_import_.Get();
}
inline void ModuleDescriptor::_internal_set_go_import(const std::string& value) {
  ;


  _impl_.go_import_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleDescriptor::_internal_mutable_go_import() {
  ;
  return _impl_.go_import_.Mutable( GetArenaForAllocation());
}
inline std::string* ModuleDescriptor::release_go_import() {
  // @@protoc_insertion_point(field_release:cosmos.app.v1alpha1.ModuleDescriptor.go_import)
  return _impl_.go_import_.Release();
}
inline void ModuleDescriptor::set_allocated_go_import(std::string* value) {
  _impl_.go_import_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.go_import_.IsDefault()) {
          _impl_.go_import_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.app.v1alpha1.ModuleDescriptor.go_import)
}

// repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];
inline int ModuleDescriptor::_internal_use_package_size() const {
  return _impl_.use_package_.size();
}
inline int ModuleDescriptor::use_package_size() const {
  return _internal_use_package_size();
}
inline void ModuleDescriptor::clear_use_package() {
  _internal_mutable_use_package()->Clear();
}
inline ::cosmos::app::v1alpha1::PackageReference* ModuleDescriptor::mutable_use_package(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.app.v1alpha1.ModuleDescriptor.use_package)
  return _internal_mutable_use_package()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::PackageReference >*
ModuleDescriptor::mutable_use_package() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.app.v1alpha1.ModuleDescriptor.use_package)
  return _internal_mutable_use_package();
}
inline const ::cosmos::app::v1alpha1::PackageReference& ModuleDescriptor::_internal_use_package(int index) const {
  return _internal_use_package().Get(index);
}
inline const ::cosmos::app::v1alpha1::PackageReference& ModuleDescriptor::use_package(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.app.v1alpha1.ModuleDescriptor.use_package)
  return _internal_use_package(index);
}
inline ::cosmos::app::v1alpha1::PackageReference* ModuleDescriptor::_internal_add_use_package() {
  return _internal_mutable_use_package()->Add();
}
inline ::cosmos::app::v1alpha1::PackageReference* ModuleDescriptor::add_use_package() {
  ::cosmos::app::v1alpha1::PackageReference* _add = _internal_add_use_package();
  // @@protoc_insertion_point(field_add:cosmos.app.v1alpha1.ModuleDescriptor.use_package)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::PackageReference >&
ModuleDescriptor::use_package() const {
  // @@protoc_insertion_point(field_list:cosmos.app.v1alpha1.ModuleDescriptor.use_package)
  return _internal_use_package();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::v1alpha1::PackageReference>&
ModuleDescriptor::_internal_use_package() const {
  return _impl_.use_package_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::v1alpha1::PackageReference>*
ModuleDescriptor::_internal_mutable_use_package() {
  return &_impl_.use_package_;
}

// repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];
inline int ModuleDescriptor::_internal_can_migrate_from_size() const {
  return _impl_.can_migrate_from_.size();
}
inline int ModuleDescriptor::can_migrate_from_size() const {
  return _internal_can_migrate_from_size();
}
inline void ModuleDescriptor::clear_can_migrate_from() {
  _internal_mutable_can_migrate_from()->Clear();
}
inline ::cosmos::app::v1alpha1::MigrateFromInfo* ModuleDescriptor::mutable_can_migrate_from(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.app.v1alpha1.ModuleDescriptor.can_migrate_from)
  return _internal_mutable_can_migrate_from()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::MigrateFromInfo >*
ModuleDescriptor::mutable_can_migrate_from() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.app.v1alpha1.ModuleDescriptor.can_migrate_from)
  return _internal_mutable_can_migrate_from();
}
inline const ::cosmos::app::v1alpha1::MigrateFromInfo& ModuleDescriptor::_internal_can_migrate_from(int index) const {
  return _internal_can_migrate_from().Get(index);
}
inline const ::cosmos::app::v1alpha1::MigrateFromInfo& ModuleDescriptor::can_migrate_from(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.app.v1alpha1.ModuleDescriptor.can_migrate_from)
  return _internal_can_migrate_from(index);
}
inline ::cosmos::app::v1alpha1::MigrateFromInfo* ModuleDescriptor::_internal_add_can_migrate_from() {
  return _internal_mutable_can_migrate_from()->Add();
}
inline ::cosmos::app::v1alpha1::MigrateFromInfo* ModuleDescriptor::add_can_migrate_from() {
  ::cosmos::app::v1alpha1::MigrateFromInfo* _add = _internal_add_can_migrate_from();
  // @@protoc_insertion_point(field_add:cosmos.app.v1alpha1.ModuleDescriptor.can_migrate_from)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::v1alpha1::MigrateFromInfo >&
ModuleDescriptor::can_migrate_from() const {
  // @@protoc_insertion_point(field_list:cosmos.app.v1alpha1.ModuleDescriptor.can_migrate_from)
  return _internal_can_migrate_from();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::v1alpha1::MigrateFromInfo>&
ModuleDescriptor::_internal_can_migrate_from() const {
  return _impl_.can_migrate_from_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::v1alpha1::MigrateFromInfo>*
ModuleDescriptor::_internal_mutable_can_migrate_from() {
  return &_impl_.can_migrate_from_;
}

// -------------------------------------------------------------------

// PackageReference

// string name = 1 [json_name = "name"];
inline void PackageReference::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PackageReference::name() const {
  // @@protoc_insertion_point(field_get:cosmos.app.v1alpha1.PackageReference.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PackageReference::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.app.v1alpha1.PackageReference.name)
}
inline std::string* PackageReference::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.app.v1alpha1.PackageReference.name)
  return _s;
}
inline const std::string& PackageReference::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PackageReference::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PackageReference::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* PackageReference::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.app.v1alpha1.PackageReference.name)
  return _impl_.name_.Release();
}
inline void PackageReference::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.app.v1alpha1.PackageReference.name)
}

// uint32 revision = 2 [json_name = "revision"];
inline void PackageReference::clear_revision() {
  _impl_.revision_ = 0u;
}
inline ::uint32_t PackageReference::revision() const {
  // @@protoc_insertion_point(field_get:cosmos.app.v1alpha1.PackageReference.revision)
  return _internal_revision();
}
inline void PackageReference::set_revision(::uint32_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:cosmos.app.v1alpha1.PackageReference.revision)
}
inline ::uint32_t PackageReference::_internal_revision() const {
  return _impl_.revision_;
}
inline void PackageReference::_internal_set_revision(::uint32_t value) {
  ;
  _impl_.revision_ = value;
}

// -------------------------------------------------------------------

// MigrateFromInfo

// string module = 1 [json_name = "module"];
inline void MigrateFromInfo::clear_module() {
  _impl_.module_.ClearToEmpty();
}
inline const std::string& MigrateFromInfo::module() const {
  // @@protoc_insertion_point(field_get:cosmos.app.v1alpha1.MigrateFromInfo.module)
  return _internal_module();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MigrateFromInfo::set_module(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.module_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.app.v1alpha1.MigrateFromInfo.module)
}
inline std::string* MigrateFromInfo::mutable_module() {
  std::string* _s = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:cosmos.app.v1alpha1.MigrateFromInfo.module)
  return _s;
}
inline const std::string& MigrateFromInfo::_internal_module() const {
  return _impl_.module_.Get();
}
inline void MigrateFromInfo::_internal_set_module(const std::string& value) {
  ;


  _impl_.module_.Set(value, GetArenaForAllocation());
}
inline std::string* MigrateFromInfo::_internal_mutable_module() {
  ;
  return _impl_.module_.Mutable( GetArenaForAllocation());
}
inline std::string* MigrateFromInfo::release_module() {
  // @@protoc_insertion_point(field_release:cosmos.app.v1alpha1.MigrateFromInfo.module)
  return _impl_.module_.Release();
}
inline void MigrateFromInfo::set_allocated_module(std::string* value) {
  _impl_.module_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_.IsDefault()) {
          _impl_.module_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.app.v1alpha1.MigrateFromInfo.module)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace app
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fapp_2fv1alpha1_2fmodule_2eproto_2epb_2eh

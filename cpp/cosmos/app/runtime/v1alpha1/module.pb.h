// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/app/runtime/v1alpha1/module.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fapp_2fruntime_2fv1alpha1_2fmodule_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fapp_2fruntime_2fv1alpha1_2fmodule_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/app/v1alpha1/module.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fapp_2fruntime_2fv1alpha1_2fmodule_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fapp_2fruntime_2fv1alpha1_2fmodule_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fapp_2fruntime_2fv1alpha1_2fmodule_2eproto;
namespace cosmos {
namespace app {
namespace runtime {
namespace v1alpha1 {
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class StoreKeyConfig;
struct StoreKeyConfigDefaultTypeInternal;
extern StoreKeyConfigDefaultTypeInternal _StoreKeyConfig_default_instance_;
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace app
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::app::runtime::v1alpha1::Module* Arena::CreateMaybeMessage<::cosmos::app::runtime::v1alpha1::Module>(Arena*);
template <>
::cosmos::app::runtime::v1alpha1::StoreKeyConfig* Arena::CreateMaybeMessage<::cosmos::app::runtime::v1alpha1::StoreKeyConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace app {
namespace runtime {
namespace v1alpha1 {

// ===================================================================


// -------------------------------------------------------------------

class Module final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.app.runtime.v1alpha1.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Module& from) {
    Module::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.app.runtime.v1alpha1.Module";
  }
  protected:
  explicit Module(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginBlockersFieldNumber = 2,
    kEndBlockersFieldNumber = 3,
    kInitGenesisFieldNumber = 4,
    kExportGenesisFieldNumber = 5,
    kOverrideStoreKeysFieldNumber = 6,
    kAppNameFieldNumber = 1,
  };
  // repeated string begin_blockers = 2 [json_name = "beginBlockers"];
  int begin_blockers_size() const;
  private:
  int _internal_begin_blockers_size() const;

  public:
  void clear_begin_blockers() ;
  const std::string& begin_blockers(int index) const;
  std::string* mutable_begin_blockers(int index);
  void set_begin_blockers(int index, const std::string& value);
  void set_begin_blockers(int index, std::string&& value);
  void set_begin_blockers(int index, const char* value);
  void set_begin_blockers(int index, const char* value, std::size_t size);
  void set_begin_blockers(int index, absl::string_view value);
  std::string* add_begin_blockers();
  void add_begin_blockers(const std::string& value);
  void add_begin_blockers(std::string&& value);
  void add_begin_blockers(const char* value);
  void add_begin_blockers(const char* value, std::size_t size);
  void add_begin_blockers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& begin_blockers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_begin_blockers();

  private:
  const std::string& _internal_begin_blockers(int index) const;
  std::string* _internal_add_begin_blockers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_begin_blockers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_begin_blockers();

  public:
  // repeated string end_blockers = 3 [json_name = "endBlockers"];
  int end_blockers_size() const;
  private:
  int _internal_end_blockers_size() const;

  public:
  void clear_end_blockers() ;
  const std::string& end_blockers(int index) const;
  std::string* mutable_end_blockers(int index);
  void set_end_blockers(int index, const std::string& value);
  void set_end_blockers(int index, std::string&& value);
  void set_end_blockers(int index, const char* value);
  void set_end_blockers(int index, const char* value, std::size_t size);
  void set_end_blockers(int index, absl::string_view value);
  std::string* add_end_blockers();
  void add_end_blockers(const std::string& value);
  void add_end_blockers(std::string&& value);
  void add_end_blockers(const char* value);
  void add_end_blockers(const char* value, std::size_t size);
  void add_end_blockers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& end_blockers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_end_blockers();

  private:
  const std::string& _internal_end_blockers(int index) const;
  std::string* _internal_add_end_blockers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_end_blockers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_end_blockers();

  public:
  // repeated string init_genesis = 4 [json_name = "initGenesis"];
  int init_genesis_size() const;
  private:
  int _internal_init_genesis_size() const;

  public:
  void clear_init_genesis() ;
  const std::string& init_genesis(int index) const;
  std::string* mutable_init_genesis(int index);
  void set_init_genesis(int index, const std::string& value);
  void set_init_genesis(int index, std::string&& value);
  void set_init_genesis(int index, const char* value);
  void set_init_genesis(int index, const char* value, std::size_t size);
  void set_init_genesis(int index, absl::string_view value);
  std::string* add_init_genesis();
  void add_init_genesis(const std::string& value);
  void add_init_genesis(std::string&& value);
  void add_init_genesis(const char* value);
  void add_init_genesis(const char* value, std::size_t size);
  void add_init_genesis(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& init_genesis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_init_genesis();

  private:
  const std::string& _internal_init_genesis(int index) const;
  std::string* _internal_add_init_genesis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_init_genesis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_init_genesis();

  public:
  // repeated string export_genesis = 5 [json_name = "exportGenesis"];
  int export_genesis_size() const;
  private:
  int _internal_export_genesis_size() const;

  public:
  void clear_export_genesis() ;
  const std::string& export_genesis(int index) const;
  std::string* mutable_export_genesis(int index);
  void set_export_genesis(int index, const std::string& value);
  void set_export_genesis(int index, std::string&& value);
  void set_export_genesis(int index, const char* value);
  void set_export_genesis(int index, const char* value, std::size_t size);
  void set_export_genesis(int index, absl::string_view value);
  std::string* add_export_genesis();
  void add_export_genesis(const std::string& value);
  void add_export_genesis(std::string&& value);
  void add_export_genesis(const char* value);
  void add_export_genesis(const char* value, std::size_t size);
  void add_export_genesis(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& export_genesis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_export_genesis();

  private:
  const std::string& _internal_export_genesis(int index) const;
  std::string* _internal_add_export_genesis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_export_genesis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_export_genesis();

  public:
  // repeated .cosmos.app.runtime.v1alpha1.StoreKeyConfig override_store_keys = 6 [json_name = "overrideStoreKeys"];
  int override_store_keys_size() const;
  private:
  int _internal_override_store_keys_size() const;

  public:
  void clear_override_store_keys() ;
  ::cosmos::app::runtime::v1alpha1::StoreKeyConfig* mutable_override_store_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::runtime::v1alpha1::StoreKeyConfig >*
      mutable_override_store_keys();
  private:
  const ::cosmos::app::runtime::v1alpha1::StoreKeyConfig& _internal_override_store_keys(int index) const;
  ::cosmos::app::runtime::v1alpha1::StoreKeyConfig* _internal_add_override_store_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::runtime::v1alpha1::StoreKeyConfig>& _internal_override_store_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::runtime::v1alpha1::StoreKeyConfig>* _internal_mutable_override_store_keys();
  public:
  const ::cosmos::app::runtime::v1alpha1::StoreKeyConfig& override_store_keys(int index) const;
  ::cosmos::app::runtime::v1alpha1::StoreKeyConfig* add_override_store_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::runtime::v1alpha1::StoreKeyConfig >&
      override_store_keys() const;
  // string app_name = 1 [json_name = "appName"];
  void clear_app_name() ;
  const std::string& app_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_name(Arg_&& arg, Args_... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* ptr);

  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(
      const std::string& value);
  std::string* _internal_mutable_app_name();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.app.runtime.v1alpha1.Module)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> begin_blockers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> end_blockers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> init_genesis_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> export_genesis_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::runtime::v1alpha1::StoreKeyConfig > override_store_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fapp_2fruntime_2fv1alpha1_2fmodule_2eproto;
};// -------------------------------------------------------------------

class StoreKeyConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.app.runtime.v1alpha1.StoreKeyConfig) */ {
 public:
  inline StoreKeyConfig() : StoreKeyConfig(nullptr) {}
  ~StoreKeyConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StoreKeyConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreKeyConfig(const StoreKeyConfig& from);
  StoreKeyConfig(StoreKeyConfig&& from) noexcept
    : StoreKeyConfig() {
    *this = ::std::move(from);
  }

  inline StoreKeyConfig& operator=(const StoreKeyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreKeyConfig& operator=(StoreKeyConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreKeyConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreKeyConfig* internal_default_instance() {
    return reinterpret_cast<const StoreKeyConfig*>(
               &_StoreKeyConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StoreKeyConfig& a, StoreKeyConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreKeyConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreKeyConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreKeyConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreKeyConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreKeyConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoreKeyConfig& from) {
    StoreKeyConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreKeyConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.app.runtime.v1alpha1.StoreKeyConfig";
  }
  protected:
  explicit StoreKeyConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
    kKvStoreKeyFieldNumber = 2,
  };
  // string module_name = 1 [json_name = "moduleName"];
  void clear_module_name() ;
  const std::string& module_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module_name(Arg_&& arg, Args_... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* ptr);

  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(
      const std::string& value);
  std::string* _internal_mutable_module_name();

  public:
  // string kv_store_key = 2 [json_name = "kvStoreKey"];
  void clear_kv_store_key() ;
  const std::string& kv_store_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_kv_store_key(Arg_&& arg, Args_... args);
  std::string* mutable_kv_store_key();
  PROTOBUF_NODISCARD std::string* release_kv_store_key();
  void set_allocated_kv_store_key(std::string* ptr);

  private:
  const std::string& _internal_kv_store_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kv_store_key(
      const std::string& value);
  std::string* _internal_mutable_kv_store_key();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.app.runtime.v1alpha1.StoreKeyConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kv_store_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fapp_2fruntime_2fv1alpha1_2fmodule_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Module

// string app_name = 1 [json_name = "appName"];
inline void Module::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
}
inline const std::string& Module::app_name() const {
  // @@protoc_insertion_point(field_get:cosmos.app.runtime.v1alpha1.Module.app_name)
  return _internal_app_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Module::set_app_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.app_name)
}
inline std::string* Module::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:cosmos.app.runtime.v1alpha1.Module.app_name)
  return _s;
}
inline const std::string& Module::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void Module::_internal_set_app_name(const std::string& value) {
  ;


  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_app_name() {
  ;
  return _impl_.app_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Module::release_app_name() {
  // @@protoc_insertion_point(field_release:cosmos.app.runtime.v1alpha1.Module.app_name)
  return _impl_.app_name_.Release();
}
inline void Module::set_allocated_app_name(std::string* value) {
  _impl_.app_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_name_.IsDefault()) {
          _impl_.app_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.app.runtime.v1alpha1.Module.app_name)
}

// repeated string begin_blockers = 2 [json_name = "beginBlockers"];
inline int Module::_internal_begin_blockers_size() const {
  return _impl_.begin_blockers_.size();
}
inline int Module::begin_blockers_size() const {
  return _internal_begin_blockers_size();
}
inline void Module::clear_begin_blockers() {
  _internal_mutable_begin_blockers()->Clear();
}
inline std::string* Module::add_begin_blockers() {
  std::string* _s = _internal_add_begin_blockers();
  // @@protoc_insertion_point(field_add_mutable:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
  return _s;
}
inline const std::string& Module::begin_blockers(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
  return _internal_begin_blockers(index);
}
inline std::string* Module::mutable_begin_blockers(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
  return _internal_mutable_begin_blockers()->Mutable(index);
}
inline void Module::set_begin_blockers(int index, const std::string& value) {
  _internal_mutable_begin_blockers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::set_begin_blockers(int index, std::string&& value) {
  _internal_mutable_begin_blockers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::set_begin_blockers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_begin_blockers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::set_begin_blockers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_begin_blockers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::set_begin_blockers(int index, absl::string_view value) {
  _internal_mutable_begin_blockers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::add_begin_blockers(const std::string& value) {
  _internal_mutable_begin_blockers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::add_begin_blockers(std::string&& value) {
  _internal_mutable_begin_blockers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::add_begin_blockers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_begin_blockers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::add_begin_blockers(const char* value, std::size_t size) {
  _internal_mutable_begin_blockers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline void Module::add_begin_blockers(absl::string_view value) {
  _internal_mutable_begin_blockers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::begin_blockers() const {
  // @@protoc_insertion_point(field_list:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
  return _internal_begin_blockers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Module::mutable_begin_blockers() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.app.runtime.v1alpha1.Module.begin_blockers)
  return _internal_mutable_begin_blockers();
}
inline const std::string& Module::_internal_begin_blockers(int index) const {
  return _internal_begin_blockers().Get(index);
}
inline std::string* Module::_internal_add_begin_blockers() {
  return _internal_mutable_begin_blockers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::_internal_begin_blockers() const {
  return _impl_.begin_blockers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Module::_internal_mutable_begin_blockers() {
  return &_impl_.begin_blockers_;
}

// repeated string end_blockers = 3 [json_name = "endBlockers"];
inline int Module::_internal_end_blockers_size() const {
  return _impl_.end_blockers_.size();
}
inline int Module::end_blockers_size() const {
  return _internal_end_blockers_size();
}
inline void Module::clear_end_blockers() {
  _internal_mutable_end_blockers()->Clear();
}
inline std::string* Module::add_end_blockers() {
  std::string* _s = _internal_add_end_blockers();
  // @@protoc_insertion_point(field_add_mutable:cosmos.app.runtime.v1alpha1.Module.end_blockers)
  return _s;
}
inline const std::string& Module::end_blockers(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.app.runtime.v1alpha1.Module.end_blockers)
  return _internal_end_blockers(index);
}
inline std::string* Module::mutable_end_blockers(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.app.runtime.v1alpha1.Module.end_blockers)
  return _internal_mutable_end_blockers()->Mutable(index);
}
inline void Module::set_end_blockers(int index, const std::string& value) {
  _internal_mutable_end_blockers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::set_end_blockers(int index, std::string&& value) {
  _internal_mutable_end_blockers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::set_end_blockers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_end_blockers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::set_end_blockers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_end_blockers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::set_end_blockers(int index, absl::string_view value) {
  _internal_mutable_end_blockers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::add_end_blockers(const std::string& value) {
  _internal_mutable_end_blockers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::add_end_blockers(std::string&& value) {
  _internal_mutable_end_blockers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::add_end_blockers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_end_blockers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::add_end_blockers(const char* value, std::size_t size) {
  _internal_mutable_end_blockers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline void Module::add_end_blockers(absl::string_view value) {
  _internal_mutable_end_blockers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.app.runtime.v1alpha1.Module.end_blockers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::end_blockers() const {
  // @@protoc_insertion_point(field_list:cosmos.app.runtime.v1alpha1.Module.end_blockers)
  return _internal_end_blockers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Module::mutable_end_blockers() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.app.runtime.v1alpha1.Module.end_blockers)
  return _internal_mutable_end_blockers();
}
inline const std::string& Module::_internal_end_blockers(int index) const {
  return _internal_end_blockers().Get(index);
}
inline std::string* Module::_internal_add_end_blockers() {
  return _internal_mutable_end_blockers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::_internal_end_blockers() const {
  return _impl_.end_blockers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Module::_internal_mutable_end_blockers() {
  return &_impl_.end_blockers_;
}

// repeated string init_genesis = 4 [json_name = "initGenesis"];
inline int Module::_internal_init_genesis_size() const {
  return _impl_.init_genesis_.size();
}
inline int Module::init_genesis_size() const {
  return _internal_init_genesis_size();
}
inline void Module::clear_init_genesis() {
  _internal_mutable_init_genesis()->Clear();
}
inline std::string* Module::add_init_genesis() {
  std::string* _s = _internal_add_init_genesis();
  // @@protoc_insertion_point(field_add_mutable:cosmos.app.runtime.v1alpha1.Module.init_genesis)
  return _s;
}
inline const std::string& Module::init_genesis(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.app.runtime.v1alpha1.Module.init_genesis)
  return _internal_init_genesis(index);
}
inline std::string* Module::mutable_init_genesis(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.app.runtime.v1alpha1.Module.init_genesis)
  return _internal_mutable_init_genesis()->Mutable(index);
}
inline void Module::set_init_genesis(int index, const std::string& value) {
  _internal_mutable_init_genesis()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::set_init_genesis(int index, std::string&& value) {
  _internal_mutable_init_genesis()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::set_init_genesis(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_init_genesis()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::set_init_genesis(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_init_genesis()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::set_init_genesis(int index, absl::string_view value) {
  _internal_mutable_init_genesis()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::add_init_genesis(const std::string& value) {
  _internal_mutable_init_genesis()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::add_init_genesis(std::string&& value) {
  _internal_mutable_init_genesis()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::add_init_genesis(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_init_genesis()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::add_init_genesis(const char* value, std::size_t size) {
  _internal_mutable_init_genesis()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline void Module::add_init_genesis(absl::string_view value) {
  _internal_mutable_init_genesis()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.app.runtime.v1alpha1.Module.init_genesis)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::init_genesis() const {
  // @@protoc_insertion_point(field_list:cosmos.app.runtime.v1alpha1.Module.init_genesis)
  return _internal_init_genesis();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Module::mutable_init_genesis() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.app.runtime.v1alpha1.Module.init_genesis)
  return _internal_mutable_init_genesis();
}
inline const std::string& Module::_internal_init_genesis(int index) const {
  return _internal_init_genesis().Get(index);
}
inline std::string* Module::_internal_add_init_genesis() {
  return _internal_mutable_init_genesis()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::_internal_init_genesis() const {
  return _impl_.init_genesis_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Module::_internal_mutable_init_genesis() {
  return &_impl_.init_genesis_;
}

// repeated string export_genesis = 5 [json_name = "exportGenesis"];
inline int Module::_internal_export_genesis_size() const {
  return _impl_.export_genesis_.size();
}
inline int Module::export_genesis_size() const {
  return _internal_export_genesis_size();
}
inline void Module::clear_export_genesis() {
  _internal_mutable_export_genesis()->Clear();
}
inline std::string* Module::add_export_genesis() {
  std::string* _s = _internal_add_export_genesis();
  // @@protoc_insertion_point(field_add_mutable:cosmos.app.runtime.v1alpha1.Module.export_genesis)
  return _s;
}
inline const std::string& Module::export_genesis(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.app.runtime.v1alpha1.Module.export_genesis)
  return _internal_export_genesis(index);
}
inline std::string* Module::mutable_export_genesis(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.app.runtime.v1alpha1.Module.export_genesis)
  return _internal_mutable_export_genesis()->Mutable(index);
}
inline void Module::set_export_genesis(int index, const std::string& value) {
  _internal_mutable_export_genesis()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::set_export_genesis(int index, std::string&& value) {
  _internal_mutable_export_genesis()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::set_export_genesis(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_export_genesis()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::set_export_genesis(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_export_genesis()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::set_export_genesis(int index, absl::string_view value) {
  _internal_mutable_export_genesis()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::add_export_genesis(const std::string& value) {
  _internal_mutable_export_genesis()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::add_export_genesis(std::string&& value) {
  _internal_mutable_export_genesis()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::add_export_genesis(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_export_genesis()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::add_export_genesis(const char* value, std::size_t size) {
  _internal_mutable_export_genesis()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline void Module::add_export_genesis(absl::string_view value) {
  _internal_mutable_export_genesis()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.app.runtime.v1alpha1.Module.export_genesis)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::export_genesis() const {
  // @@protoc_insertion_point(field_list:cosmos.app.runtime.v1alpha1.Module.export_genesis)
  return _internal_export_genesis();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Module::mutable_export_genesis() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.app.runtime.v1alpha1.Module.export_genesis)
  return _internal_mutable_export_genesis();
}
inline const std::string& Module::_internal_export_genesis(int index) const {
  return _internal_export_genesis().Get(index);
}
inline std::string* Module::_internal_add_export_genesis() {
  return _internal_mutable_export_genesis()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Module::_internal_export_genesis() const {
  return _impl_.export_genesis_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Module::_internal_mutable_export_genesis() {
  return &_impl_.export_genesis_;
}

// repeated .cosmos.app.runtime.v1alpha1.StoreKeyConfig override_store_keys = 6 [json_name = "overrideStoreKeys"];
inline int Module::_internal_override_store_keys_size() const {
  return _impl_.override_store_keys_.size();
}
inline int Module::override_store_keys_size() const {
  return _internal_override_store_keys_size();
}
inline void Module::clear_override_store_keys() {
  _internal_mutable_override_store_keys()->Clear();
}
inline ::cosmos::app::runtime::v1alpha1::StoreKeyConfig* Module::mutable_override_store_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.app.runtime.v1alpha1.Module.override_store_keys)
  return _internal_mutable_override_store_keys()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::runtime::v1alpha1::StoreKeyConfig >*
Module::mutable_override_store_keys() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.app.runtime.v1alpha1.Module.override_store_keys)
  return _internal_mutable_override_store_keys();
}
inline const ::cosmos::app::runtime::v1alpha1::StoreKeyConfig& Module::_internal_override_store_keys(int index) const {
  return _internal_override_store_keys().Get(index);
}
inline const ::cosmos::app::runtime::v1alpha1::StoreKeyConfig& Module::override_store_keys(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.app.runtime.v1alpha1.Module.override_store_keys)
  return _internal_override_store_keys(index);
}
inline ::cosmos::app::runtime::v1alpha1::StoreKeyConfig* Module::_internal_add_override_store_keys() {
  return _internal_mutable_override_store_keys()->Add();
}
inline ::cosmos::app::runtime::v1alpha1::StoreKeyConfig* Module::add_override_store_keys() {
  ::cosmos::app::runtime::v1alpha1::StoreKeyConfig* _add = _internal_add_override_store_keys();
  // @@protoc_insertion_point(field_add:cosmos.app.runtime.v1alpha1.Module.override_store_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::app::runtime::v1alpha1::StoreKeyConfig >&
Module::override_store_keys() const {
  // @@protoc_insertion_point(field_list:cosmos.app.runtime.v1alpha1.Module.override_store_keys)
  return _internal_override_store_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::runtime::v1alpha1::StoreKeyConfig>&
Module::_internal_override_store_keys() const {
  return _impl_.override_store_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::app::runtime::v1alpha1::StoreKeyConfig>*
Module::_internal_mutable_override_store_keys() {
  return &_impl_.override_store_keys_;
}

// -------------------------------------------------------------------

// StoreKeyConfig

// string module_name = 1 [json_name = "moduleName"];
inline void StoreKeyConfig::clear_module_name() {
  _impl_.module_name_.ClearToEmpty();
}
inline const std::string& StoreKeyConfig::module_name() const {
  // @@protoc_insertion_point(field_get:cosmos.app.runtime.v1alpha1.StoreKeyConfig.module_name)
  return _internal_module_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreKeyConfig::set_module_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.module_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.StoreKeyConfig.module_name)
}
inline std::string* StoreKeyConfig::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:cosmos.app.runtime.v1alpha1.StoreKeyConfig.module_name)
  return _s;
}
inline const std::string& StoreKeyConfig::_internal_module_name() const {
  return _impl_.module_name_.Get();
}
inline void StoreKeyConfig::_internal_set_module_name(const std::string& value) {
  ;


  _impl_.module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreKeyConfig::_internal_mutable_module_name() {
  ;
  return _impl_.module_name_.Mutable( GetArenaForAllocation());
}
inline std::string* StoreKeyConfig::release_module_name() {
  // @@protoc_insertion_point(field_release:cosmos.app.runtime.v1alpha1.StoreKeyConfig.module_name)
  return _impl_.module_name_.Release();
}
inline void StoreKeyConfig::set_allocated_module_name(std::string* value) {
  _impl_.module_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_name_.IsDefault()) {
          _impl_.module_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.app.runtime.v1alpha1.StoreKeyConfig.module_name)
}

// string kv_store_key = 2 [json_name = "kvStoreKey"];
inline void StoreKeyConfig::clear_kv_store_key() {
  _impl_.kv_store_key_.ClearToEmpty();
}
inline const std::string& StoreKeyConfig::kv_store_key() const {
  // @@protoc_insertion_point(field_get:cosmos.app.runtime.v1alpha1.StoreKeyConfig.kv_store_key)
  return _internal_kv_store_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreKeyConfig::set_kv_store_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.kv_store_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.app.runtime.v1alpha1.StoreKeyConfig.kv_store_key)
}
inline std::string* StoreKeyConfig::mutable_kv_store_key() {
  std::string* _s = _internal_mutable_kv_store_key();
  // @@protoc_insertion_point(field_mutable:cosmos.app.runtime.v1alpha1.StoreKeyConfig.kv_store_key)
  return _s;
}
inline const std::string& StoreKeyConfig::_internal_kv_store_key() const {
  return _impl_.kv_store_key_.Get();
}
inline void StoreKeyConfig::_internal_set_kv_store_key(const std::string& value) {
  ;


  _impl_.kv_store_key_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreKeyConfig::_internal_mutable_kv_store_key() {
  ;
  return _impl_.kv_store_key_.Mutable( GetArenaForAllocation());
}
inline std::string* StoreKeyConfig::release_kv_store_key() {
  // @@protoc_insertion_point(field_release:cosmos.app.runtime.v1alpha1.StoreKeyConfig.kv_store_key)
  return _impl_.kv_store_key_.Release();
}
inline void StoreKeyConfig::set_allocated_kv_store_key(std::string* value) {
  _impl_.kv_store_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.kv_store_key_.IsDefault()) {
          _impl_.kv_store_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.app.runtime.v1alpha1.StoreKeyConfig.kv_store_key)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace app
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fapp_2fruntime_2fv1alpha1_2fmodule_2eproto_2epb_2eh

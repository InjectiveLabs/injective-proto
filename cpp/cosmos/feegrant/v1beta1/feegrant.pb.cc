// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/feegrant/v1beta1/feegrant.proto

#include "cosmos/feegrant/v1beta1/feegrant.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace feegrant {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR BasicAllowance::BasicAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spend_limit_)*/{}
  , /*decltype(_impl_.expiration_)*/nullptr} {}
struct BasicAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BasicAllowanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BasicAllowanceDefaultTypeInternal() {}
  union {
    BasicAllowance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BasicAllowanceDefaultTypeInternal _BasicAllowance_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PeriodicAllowance::PeriodicAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.period_spend_limit_)*/{}
  , /*decltype(_impl_.period_can_spend_)*/{}
  , /*decltype(_impl_.basic_)*/nullptr
  , /*decltype(_impl_.period_)*/nullptr
  , /*decltype(_impl_.period_reset_)*/nullptr} {}
struct PeriodicAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeriodicAllowanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeriodicAllowanceDefaultTypeInternal() {}
  union {
    PeriodicAllowance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeriodicAllowanceDefaultTypeInternal _PeriodicAllowance_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AllowedMsgAllowance::AllowedMsgAllowance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allowed_messages_)*/{}
  , /*decltype(_impl_.allowance_)*/nullptr} {}
struct AllowedMsgAllowanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllowedMsgAllowanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllowedMsgAllowanceDefaultTypeInternal() {}
  union {
    AllowedMsgAllowance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllowedMsgAllowanceDefaultTypeInternal _AllowedMsgAllowance_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Grant::Grant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.granter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.grantee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.allowance_)*/nullptr} {}
struct GrantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GrantDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GrantDefaultTypeInternal() {}
  union {
    Grant _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GrantDefaultTypeInternal _Grant_default_instance_;
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::BasicAllowance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::BasicAllowance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::BasicAllowance, _impl_.spend_limit_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::BasicAllowance, _impl_.expiration_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.basic_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.period_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.period_spend_limit_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.period_can_spend_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::PeriodicAllowance, _impl_.period_reset_),
    0,
    1,
    ~0u,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::AllowedMsgAllowance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::AllowedMsgAllowance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::AllowedMsgAllowance, _impl_.allowance_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::AllowedMsgAllowance, _impl_.allowed_messages_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _impl_.granter_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _impl_.grantee_),
    PROTOBUF_FIELD_OFFSET(::cosmos::feegrant::v1beta1::Grant, _impl_.allowance_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cosmos::feegrant::v1beta1::BasicAllowance)},
        { 12, 25, -1, sizeof(::cosmos::feegrant::v1beta1::PeriodicAllowance)},
        { 30, 40, -1, sizeof(::cosmos::feegrant::v1beta1::AllowedMsgAllowance)},
        { 42, 53, -1, sizeof(::cosmos::feegrant::v1beta1::Grant)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::feegrant::v1beta1::_BasicAllowance_default_instance_._instance,
    &::cosmos::feegrant::v1beta1::_PeriodicAllowance_default_instance_._instance,
    &::cosmos::feegrant::v1beta1::_AllowedMsgAllowance_default_instance_._instance,
    &::cosmos::feegrant::v1beta1::_Grant_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&cosmos/feegrant/v1beta1/feegrant.proto"
    "\022\027cosmos.feegrant.v1beta1\032\024gogoproto/gog"
    "o.proto\032\031google/protobuf/any.proto\032\031cosm"
    "os_proto/cosmos.proto\032\036cosmos/base/v1bet"
    "a1/coin.proto\032\021amino/amino.proto\032\037google"
    "/protobuf/timestamp.proto\032\036google/protob"
    "uf/duration.proto\"\216\002\n\016BasicAllowance\022q\n\013"
    "spend_limit\030\001 \003(\0132\031.cosmos.base.v1beta1."
    "CoinB5\310\336\037\000\252\337\037(github.com/cosmos/cosmos-s"
    "dk/types.Coins\250\347\260*\001R\nspendLimit\022@\n\nexpir"
    "ation\030\002 \001(\0132\032.google.protobuf.TimestampB"
    "\004\220\337\037\001R\nexpiration:G\312\264-%cosmos.feegrant.v"
    "1beta1.FeeAllowanceI\212\347\260*\031cosmos-sdk/Basi"
    "cAllowance\"\265\004\n\021PeriodicAllowance\022H\n\005basi"
    "c\030\001 \001(\0132\'.cosmos.feegrant.v1beta1.BasicA"
    "llowanceB\t\310\336\037\000\250\347\260*\001R\005basic\022@\n\006period\030\002 \001"
    "(\0132\031.google.protobuf.DurationB\r\310\336\037\000\230\337\037\001\250"
    "\347\260*\001R\006period\022~\n\022period_spend_limit\030\003 \003(\013"
    "2\031.cosmos.base.v1beta1.CoinB5\310\336\037\000\252\337\037(git"
    "hub.com/cosmos/cosmos-sdk/types.Coins\250\347\260"
    "*\001R\020periodSpendLimit\022z\n\020period_can_spend"
    "\030\004 \003(\0132\031.cosmos.base.v1beta1.CoinB5\310\336\037\000\252"
    "\337\037(github.com/cosmos/cosmos-sdk/types.Co"
    "ins\250\347\260*\001R\016periodCanSpend\022L\n\014period_reset"
    "\030\005 \001(\0132\032.google.protobuf.TimestampB\r\310\336\037\000"
    "\220\337\037\001\250\347\260*\001R\013periodReset:J\312\264-%cosmos.feegr"
    "ant.v1beta1.FeeAllowanceI\212\347\260*\034cosmos-sdk"
    "/PeriodicAllowance\"\361\001\n\023AllowedMsgAllowan"
    "ce\022]\n\tallowance\030\001 \001(\0132\024.google.protobuf."
    "AnyB)\312\264-%cosmos.feegrant.v1beta1.FeeAllo"
    "wanceIR\tallowance\022)\n\020allowed_messages\030\002 "
    "\003(\tR\017allowedMessages:P\210\240\037\000\312\264-%cosmos.fee"
    "grant.v1beta1.FeeAllowanceI\212\347\260*\036cosmos-s"
    "dk/AllowedMsgAllowance\"\316\001\n\005Grant\0222\n\007gran"
    "ter\030\001 \001(\tB\030\322\264-\024cosmos.AddressStringR\007gra"
    "nter\0222\n\007grantee\030\002 \001(\tB\030\322\264-\024cosmos.Addres"
    "sStringR\007grantee\022]\n\tallowance\030\003 \001(\0132\024.go"
    "ogle.protobuf.AnyB)\312\264-%cosmos.feegrant.v"
    "1beta1.FeeAllowanceIR\tallowanceB\323\001\n\033com."
    "cosmos.feegrant.v1beta1B\rFeegrantProtoP\001"
    "Z\'github.com/cosmos/cosmos-sdk/x/feegran"
    "t\242\002\003CFX\252\002\027Cosmos.Feegrant.V1beta1\312\002\027Cosm"
    "os\\Feegrant\\V1beta1\342\002#Cosmos\\Feegrant\\V1"
    "beta1\\GPBMetadata\352\002\031Cosmos::Feegrant::V1"
    "beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_deps[7] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto = {
    false,
    false,
    1773,
    descriptor_table_protodef_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    "cosmos/feegrant/v1beta1/feegrant.proto",
    &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_once,
    descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_deps,
    7,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto::offsets,
    file_level_metadata_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    file_level_enum_descriptors_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
    file_level_service_descriptors_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_getter() {
  return &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto(&descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto);
namespace cosmos {
namespace feegrant {
namespace v1beta1 {
// ===================================================================

class BasicAllowance::_Internal {
 public:
  using HasBits = decltype(std::declval<BasicAllowance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BasicAllowance, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration(const BasicAllowance* msg);
  static void set_has_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BasicAllowance::_Internal::expiration(const BasicAllowance* msg) {
  return *msg->_impl_.expiration_;
}
void BasicAllowance::clear_spend_limit() {
  _internal_mutable_spend_limit()->Clear();
}
void BasicAllowance::clear_expiration() {
  if (_impl_.expiration_ != nullptr) _impl_.expiration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BasicAllowance::BasicAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.feegrant.v1beta1.BasicAllowance)
}
BasicAllowance::BasicAllowance(const BasicAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BasicAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spend_limit_){from._impl_.spend_limit_}
    , decltype(_impl_.expiration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.expiration_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expiration_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.feegrant.v1beta1.BasicAllowance)
}

inline void BasicAllowance::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spend_limit_){arena}
    , decltype(_impl_.expiration_){nullptr}
  };
}

BasicAllowance::~BasicAllowance() {
  // @@protoc_insertion_point(destructor:cosmos.feegrant.v1beta1.BasicAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BasicAllowance::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_spend_limit()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.expiration_;
}

void BasicAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BasicAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.feegrant.v1beta1.BasicAllowance)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_spend_limit()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.expiration_ != nullptr);
    _impl_.expiration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BasicAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spend_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BasicAllowance::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.feegrant.v1beta1.BasicAllowance)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spend_limit_size()); i < n; i++) {
    const auto& repfield = this->_internal_spend_limit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::expiration(this),
        _Internal::expiration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.feegrant.v1beta1.BasicAllowance)
  return target;
}

::size_t BasicAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.feegrant.v1beta1.BasicAllowance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_spend_limit_size();
  for (const auto& msg : this->_internal_spend_limit()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BasicAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BasicAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BasicAllowance::GetClassData() const { return &_class_data_; }


void BasicAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BasicAllowance*>(&to_msg);
  auto& from = static_cast<const BasicAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.feegrant.v1beta1.BasicAllowance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_spend_limit()->MergeFrom(from._internal_spend_limit());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_expiration()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expiration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BasicAllowance::CopyFrom(const BasicAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.feegrant.v1beta1.BasicAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicAllowance::IsInitialized() const {
  return true;
}

void BasicAllowance::InternalSwap(BasicAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_spend_limit()->InternalSwap(other->_internal_mutable_spend_limit());
  swap(_impl_.expiration_, other->_impl_.expiration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_getter, &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_once,
      file_level_metadata_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto[0]);
}
// ===================================================================

class PeriodicAllowance::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodicAllowance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_._has_bits_);
  static const ::cosmos::feegrant::v1beta1::BasicAllowance& basic(const PeriodicAllowance* msg);
  static void set_has_basic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& period(const PeriodicAllowance* msg);
  static void set_has_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& period_reset(const PeriodicAllowance* msg);
  static void set_has_period_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::cosmos::feegrant::v1beta1::BasicAllowance&
PeriodicAllowance::_Internal::basic(const PeriodicAllowance* msg) {
  return *msg->_impl_.basic_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
PeriodicAllowance::_Internal::period(const PeriodicAllowance* msg) {
  return *msg->_impl_.period_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PeriodicAllowance::_Internal::period_reset(const PeriodicAllowance* msg) {
  return *msg->_impl_.period_reset_;
}
void PeriodicAllowance::clear_period() {
  if (_impl_.period_ != nullptr) _impl_.period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PeriodicAllowance::clear_period_spend_limit() {
  _internal_mutable_period_spend_limit()->Clear();
}
void PeriodicAllowance::clear_period_can_spend() {
  _internal_mutable_period_can_spend()->Clear();
}
void PeriodicAllowance::clear_period_reset() {
  if (_impl_.period_reset_ != nullptr) _impl_.period_reset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
PeriodicAllowance::PeriodicAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.feegrant.v1beta1.PeriodicAllowance)
}
PeriodicAllowance::PeriodicAllowance(const PeriodicAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeriodicAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.period_spend_limit_){from._impl_.period_spend_limit_}
    , decltype(_impl_.period_can_spend_){from._impl_.period_can_spend_}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.period_){nullptr}
    , decltype(_impl_.period_reset_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.basic_ = new ::cosmos::feegrant::v1beta1::BasicAllowance(*from._impl_.basic_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.period_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.period_reset_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.period_reset_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.feegrant.v1beta1.PeriodicAllowance)
}

inline void PeriodicAllowance::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.period_spend_limit_){arena}
    , decltype(_impl_.period_can_spend_){arena}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.period_){nullptr}
    , decltype(_impl_.period_reset_){nullptr}
  };
}

PeriodicAllowance::~PeriodicAllowance() {
  // @@protoc_insertion_point(destructor:cosmos.feegrant.v1beta1.PeriodicAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeriodicAllowance::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_period_spend_limit()->~RepeatedPtrField();
  _internal_mutable_period_can_spend()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.basic_;
  if (this != internal_default_instance()) delete _impl_.period_;
  if (this != internal_default_instance()) delete _impl_.period_reset_;
}

void PeriodicAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeriodicAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_period_spend_limit()->Clear();
  _internal_mutable_period_can_spend()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.basic_ != nullptr);
      _impl_.basic_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.period_ != nullptr);
      _impl_.period_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.period_reset_ != nullptr);
      _impl_.period_reset_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeriodicAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_period_spend_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_period_can_spend(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_period_reset(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PeriodicAllowance::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::basic(this),
        _Internal::basic(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::period(this),
        _Internal::period(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_period_spend_limit_size()); i < n; i++) {
    const auto& repfield = this->_internal_period_spend_limit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_period_can_spend_size()); i < n; i++) {
    const auto& repfield = this->_internal_period_can_spend(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::period_reset(this),
        _Internal::period_reset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.feegrant.v1beta1.PeriodicAllowance)
  return target;
}

::size_t PeriodicAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_period_spend_limit_size();
  for (const auto& msg : this->_internal_period_spend_limit()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_period_can_spend_size();
  for (const auto& msg : this->_internal_period_can_spend()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.basic_);
    }

    // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.period_);
    }

    // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.period_reset_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeriodicAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeriodicAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeriodicAllowance::GetClassData() const { return &_class_data_; }


void PeriodicAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeriodicAllowance*>(&to_msg);
  auto& from = static_cast<const PeriodicAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_period_spend_limit()->MergeFrom(from._internal_period_spend_limit());
  _this->_internal_mutable_period_can_spend()->MergeFrom(from._internal_period_can_spend());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_basic()->::cosmos::feegrant::v1beta1::BasicAllowance::MergeFrom(
          from._internal_basic());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_period());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_period_reset()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_period_reset());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeriodicAllowance::CopyFrom(const PeriodicAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.feegrant.v1beta1.PeriodicAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodicAllowance::IsInitialized() const {
  return true;
}

void PeriodicAllowance::InternalSwap(PeriodicAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_period_spend_limit()->InternalSwap(other->_internal_mutable_period_spend_limit());
  _internal_mutable_period_can_spend()->InternalSwap(other->_internal_mutable_period_can_spend());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.period_reset_)
      + sizeof(PeriodicAllowance::_impl_.period_reset_)
      - PROTOBUF_FIELD_OFFSET(PeriodicAllowance, _impl_.basic_)>(
          reinterpret_cast<char*>(&_impl_.basic_),
          reinterpret_cast<char*>(&other->_impl_.basic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeriodicAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_getter, &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_once,
      file_level_metadata_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto[1]);
}
// ===================================================================

class AllowedMsgAllowance::_Internal {
 public:
  using HasBits = decltype(std::declval<AllowedMsgAllowance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AllowedMsgAllowance, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& allowance(const AllowedMsgAllowance* msg);
  static void set_has_allowance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
AllowedMsgAllowance::_Internal::allowance(const AllowedMsgAllowance* msg) {
  return *msg->_impl_.allowance_;
}
void AllowedMsgAllowance::clear_allowance() {
  if (_impl_.allowance_ != nullptr) _impl_.allowance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AllowedMsgAllowance::AllowedMsgAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
}
AllowedMsgAllowance::AllowedMsgAllowance(const AllowedMsgAllowance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllowedMsgAllowance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allowed_messages_){from._impl_.allowed_messages_}
    , decltype(_impl_.allowance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.allowance_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.allowance_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
}

inline void AllowedMsgAllowance::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allowed_messages_){arena}
    , decltype(_impl_.allowance_){nullptr}
  };
}

AllowedMsgAllowance::~AllowedMsgAllowance() {
  // @@protoc_insertion_point(destructor:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllowedMsgAllowance::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_allowed_messages()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.allowance_;
}

void AllowedMsgAllowance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllowedMsgAllowance::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_allowed_messages()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.allowance_ != nullptr);
    _impl_.allowance_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllowedMsgAllowance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_messages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AllowedMsgAllowance::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::allowance(this),
        _Internal::allowance(this).GetCachedSize(), target, stream);
  }

  // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
  for (int i = 0, n = this->_internal_allowed_messages_size(); i < n; ++i) {
    const auto& s = this->_internal_allowed_messages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  return target;
}

::size_t AllowedMsgAllowance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_allowed_messages().size());
  for (int i = 0, n = _internal_allowed_messages().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_allowed_messages().Get(i));
  }

  // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allowance_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllowedMsgAllowance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllowedMsgAllowance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllowedMsgAllowance::GetClassData() const { return &_class_data_; }


void AllowedMsgAllowance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllowedMsgAllowance*>(&to_msg);
  auto& from = static_cast<const AllowedMsgAllowance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_allowed_messages()->MergeFrom(from._internal_allowed_messages());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_allowance()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_allowance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllowedMsgAllowance::CopyFrom(const AllowedMsgAllowance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowedMsgAllowance::IsInitialized() const {
  return true;
}

void AllowedMsgAllowance::InternalSwap(AllowedMsgAllowance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_allowed_messages()->InternalSwap(
      other->_internal_mutable_allowed_messages());
  swap(_impl_.allowance_, other->_impl_.allowance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllowedMsgAllowance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_getter, &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_once,
      file_level_metadata_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto[2]);
}
// ===================================================================

class Grant::_Internal {
 public:
  using HasBits = decltype(std::declval<Grant>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Grant, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& allowance(const Grant* msg);
  static void set_has_allowance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Grant::_Internal::allowance(const Grant* msg) {
  return *msg->_impl_.allowance_;
}
void Grant::clear_allowance() {
  if (_impl_.allowance_ != nullptr) _impl_.allowance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Grant::Grant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.feegrant.v1beta1.Grant)
}
Grant::Grant(const Grant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Grant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.granter_) {}

    , decltype(_impl_.grantee_) {}

    , decltype(_impl_.allowance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.granter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.granter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_granter().empty()) {
    _this->_impl_.granter_.Set(from._internal_granter(), _this->GetArenaForAllocation());
  }
  _impl_.grantee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.grantee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_grantee().empty()) {
    _this->_impl_.grantee_.Set(from._internal_grantee(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.allowance_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.allowance_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.feegrant.v1beta1.Grant)
}

inline void Grant::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.granter_) {}

    , decltype(_impl_.grantee_) {}

    , decltype(_impl_.allowance_){nullptr}
  };
  _impl_.granter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.granter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.grantee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.grantee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Grant::~Grant() {
  // @@protoc_insertion_point(destructor:cosmos.feegrant.v1beta1.Grant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Grant::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.granter_.Destroy();
  _impl_.grantee_.Destroy();
  if (this != internal_default_instance()) delete _impl_.allowance_;
}

void Grant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Grant::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.feegrant.v1beta1.Grant)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.granter_.ClearToEmpty();
  _impl_.grantee_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.allowance_ != nullptr);
    _impl_.allowance_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Grant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_granter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.feegrant.v1beta1.Grant.granter"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_grantee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.feegrant.v1beta1.Grant.grantee"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Grant::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.feegrant.v1beta1.Grant)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_granter().empty()) {
    const std::string& _s = this->_internal_granter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.feegrant.v1beta1.Grant.granter");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_grantee().empty()) {
    const std::string& _s = this->_internal_grantee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.feegrant.v1beta1.Grant.grantee");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::allowance(this),
        _Internal::allowance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.feegrant.v1beta1.Grant)
  return target;
}

::size_t Grant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.feegrant.v1beta1.Grant)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_granter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_granter());
  }

  // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_grantee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_grantee());
  }

  // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allowance_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Grant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Grant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Grant::GetClassData() const { return &_class_data_; }


void Grant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Grant*>(&to_msg);
  auto& from = static_cast<const Grant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.feegrant.v1beta1.Grant)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_granter().empty()) {
    _this->_internal_set_granter(from._internal_granter());
  }
  if (!from._internal_grantee().empty()) {
    _this->_internal_set_grantee(from._internal_grantee());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_allowance()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_allowance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Grant::CopyFrom(const Grant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.feegrant.v1beta1.Grant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grant::IsInitialized() const {
  return true;
}

void Grant::InternalSwap(Grant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.granter_, lhs_arena,
                                       &other->_impl_.granter_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.grantee_, lhs_arena,
                                       &other->_impl_.grantee_, rhs_arena);
  swap(_impl_.allowance_, other->_impl_.allowance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_getter, &descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_once,
      file_level_metadata_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::feegrant::v1beta1::BasicAllowance*
Arena::CreateMaybeMessage< ::cosmos::feegrant::v1beta1::BasicAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::feegrant::v1beta1::BasicAllowance >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::feegrant::v1beta1::PeriodicAllowance*
Arena::CreateMaybeMessage< ::cosmos::feegrant::v1beta1::PeriodicAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::feegrant::v1beta1::PeriodicAllowance >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::feegrant::v1beta1::AllowedMsgAllowance*
Arena::CreateMaybeMessage< ::cosmos::feegrant::v1beta1::AllowedMsgAllowance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::feegrant::v1beta1::AllowedMsgAllowance >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::feegrant::v1beta1::Grant*
Arena::CreateMaybeMessage< ::cosmos::feegrant::v1beta1::Grant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::feegrant::v1beta1::Grant >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

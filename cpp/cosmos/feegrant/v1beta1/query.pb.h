// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/feegrant/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/feegrant/v1beta1/feegrant.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace feegrant {
namespace v1beta1 {
class QueryAllowanceRequest;
struct QueryAllowanceRequestDefaultTypeInternal;
extern QueryAllowanceRequestDefaultTypeInternal _QueryAllowanceRequest_default_instance_;
class QueryAllowanceResponse;
struct QueryAllowanceResponseDefaultTypeInternal;
extern QueryAllowanceResponseDefaultTypeInternal _QueryAllowanceResponse_default_instance_;
class QueryAllowancesByGranterRequest;
struct QueryAllowancesByGranterRequestDefaultTypeInternal;
extern QueryAllowancesByGranterRequestDefaultTypeInternal _QueryAllowancesByGranterRequest_default_instance_;
class QueryAllowancesByGranterResponse;
struct QueryAllowancesByGranterResponseDefaultTypeInternal;
extern QueryAllowancesByGranterResponseDefaultTypeInternal _QueryAllowancesByGranterResponse_default_instance_;
class QueryAllowancesRequest;
struct QueryAllowancesRequestDefaultTypeInternal;
extern QueryAllowancesRequestDefaultTypeInternal _QueryAllowancesRequest_default_instance_;
class QueryAllowancesResponse;
struct QueryAllowancesResponseDefaultTypeInternal;
extern QueryAllowancesResponseDefaultTypeInternal _QueryAllowancesResponse_default_instance_;
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::feegrant::v1beta1::QueryAllowanceRequest* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::QueryAllowanceRequest>(Arena*);
template <>
::cosmos::feegrant::v1beta1::QueryAllowanceResponse* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::QueryAllowanceResponse>(Arena*);
template <>
::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest>(Arena*);
template <>
::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>(Arena*);
template <>
::cosmos::feegrant::v1beta1::QueryAllowancesRequest* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::QueryAllowancesRequest>(Arena*);
template <>
::cosmos::feegrant::v1beta1::QueryAllowancesResponse* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::QueryAllowancesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace feegrant {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryAllowanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.QueryAllowanceRequest) */ {
 public:
  inline QueryAllowanceRequest() : QueryAllowanceRequest(nullptr) {}
  ~QueryAllowanceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllowanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllowanceRequest(const QueryAllowanceRequest& from);
  QueryAllowanceRequest(QueryAllowanceRequest&& from) noexcept
    : QueryAllowanceRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllowanceRequest& operator=(const QueryAllowanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllowanceRequest& operator=(QueryAllowanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllowanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllowanceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllowanceRequest*>(
               &_QueryAllowanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryAllowanceRequest& a, QueryAllowanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllowanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllowanceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllowanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllowanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllowanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllowanceRequest& from) {
    QueryAllowanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllowanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.QueryAllowanceRequest";
  }
  protected:
  explicit QueryAllowanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranterFieldNumber = 1,
    kGranteeFieldNumber = 2,
  };
  // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_granter() ;
  const std::string& granter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter(Arg_&& arg, Args_... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* ptr);

  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(
      const std::string& value);
  std::string* _internal_mutable_granter();

  public:
  // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_grantee() ;
  const std::string& grantee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_grantee(Arg_&& arg, Args_... args);
  std::string* mutable_grantee();
  PROTOBUF_NODISCARD std::string* release_grantee();
  void set_allocated_grantee(std::string* ptr);

  private:
  const std::string& _internal_grantee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grantee(
      const std::string& value);
  std::string* _internal_mutable_grantee();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.QueryAllowanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grantee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllowanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.QueryAllowanceResponse) */ {
 public:
  inline QueryAllowanceResponse() : QueryAllowanceResponse(nullptr) {}
  ~QueryAllowanceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllowanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllowanceResponse(const QueryAllowanceResponse& from);
  QueryAllowanceResponse(QueryAllowanceResponse&& from) noexcept
    : QueryAllowanceResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllowanceResponse& operator=(const QueryAllowanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllowanceResponse& operator=(QueryAllowanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllowanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllowanceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllowanceResponse*>(
               &_QueryAllowanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryAllowanceResponse& a, QueryAllowanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllowanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllowanceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllowanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllowanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllowanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllowanceResponse& from) {
    QueryAllowanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllowanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.QueryAllowanceResponse";
  }
  protected:
  explicit QueryAllowanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowanceFieldNumber = 1,
  };
  // .cosmos.feegrant.v1beta1.Grant allowance = 1 [json_name = "allowance"];
  bool has_allowance() const;
  void clear_allowance() ;
  const ::cosmos::feegrant::v1beta1::Grant& allowance() const;
  PROTOBUF_NODISCARD ::cosmos::feegrant::v1beta1::Grant* release_allowance();
  ::cosmos::feegrant::v1beta1::Grant* mutable_allowance();
  void set_allocated_allowance(::cosmos::feegrant::v1beta1::Grant* allowance);
  private:
  const ::cosmos::feegrant::v1beta1::Grant& _internal_allowance() const;
  ::cosmos::feegrant::v1beta1::Grant* _internal_mutable_allowance();
  public:
  void unsafe_arena_set_allocated_allowance(
      ::cosmos::feegrant::v1beta1::Grant* allowance);
  ::cosmos::feegrant::v1beta1::Grant* unsafe_arena_release_allowance();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.QueryAllowanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::feegrant::v1beta1::Grant* allowance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllowancesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.QueryAllowancesRequest) */ {
 public:
  inline QueryAllowancesRequest() : QueryAllowancesRequest(nullptr) {}
  ~QueryAllowancesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllowancesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllowancesRequest(const QueryAllowancesRequest& from);
  QueryAllowancesRequest(QueryAllowancesRequest&& from) noexcept
    : QueryAllowancesRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllowancesRequest& operator=(const QueryAllowancesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllowancesRequest& operator=(QueryAllowancesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllowancesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllowancesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllowancesRequest*>(
               &_QueryAllowancesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAllowancesRequest& a, QueryAllowancesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllowancesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllowancesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllowancesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllowancesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllowancesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllowancesRequest& from) {
    QueryAllowancesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllowancesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.QueryAllowancesRequest";
  }
  protected:
  explicit QueryAllowancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranteeFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string grantee = 1 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_grantee() ;
  const std::string& grantee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_grantee(Arg_&& arg, Args_... args);
  std::string* mutable_grantee();
  PROTOBUF_NODISCARD std::string* release_grantee();
  void set_allocated_grantee(std::string* ptr);

  private:
  const std::string& _internal_grantee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grantee(
      const std::string& value);
  std::string* _internal_mutable_grantee();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.QueryAllowancesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grantee_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllowancesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.QueryAllowancesResponse) */ {
 public:
  inline QueryAllowancesResponse() : QueryAllowancesResponse(nullptr) {}
  ~QueryAllowancesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllowancesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllowancesResponse(const QueryAllowancesResponse& from);
  QueryAllowancesResponse(QueryAllowancesResponse&& from) noexcept
    : QueryAllowancesResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllowancesResponse& operator=(const QueryAllowancesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllowancesResponse& operator=(QueryAllowancesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllowancesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllowancesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllowancesResponse*>(
               &_QueryAllowancesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryAllowancesResponse& a, QueryAllowancesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllowancesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllowancesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllowancesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllowancesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllowancesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllowancesResponse& from) {
    QueryAllowancesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllowancesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.QueryAllowancesResponse";
  }
  protected:
  explicit QueryAllowancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowancesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.feegrant.v1beta1.Grant allowances = 1 [json_name = "allowances"];
  int allowances_size() const;
  private:
  int _internal_allowances_size() const;

  public:
  void clear_allowances() ;
  ::cosmos::feegrant::v1beta1::Grant* mutable_allowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant >*
      mutable_allowances();
  private:
  const ::cosmos::feegrant::v1beta1::Grant& _internal_allowances(int index) const;
  ::cosmos::feegrant::v1beta1::Grant* _internal_add_allowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::feegrant::v1beta1::Grant>& _internal_allowances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::feegrant::v1beta1::Grant>* _internal_mutable_allowances();
  public:
  const ::cosmos::feegrant::v1beta1::Grant& allowances(int index) const;
  ::cosmos::feegrant::v1beta1::Grant* add_allowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant >&
      allowances() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.QueryAllowancesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant > allowances_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllowancesByGranterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest) */ {
 public:
  inline QueryAllowancesByGranterRequest() : QueryAllowancesByGranterRequest(nullptr) {}
  ~QueryAllowancesByGranterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllowancesByGranterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllowancesByGranterRequest(const QueryAllowancesByGranterRequest& from);
  QueryAllowancesByGranterRequest(QueryAllowancesByGranterRequest&& from) noexcept
    : QueryAllowancesByGranterRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllowancesByGranterRequest& operator=(const QueryAllowancesByGranterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllowancesByGranterRequest& operator=(QueryAllowancesByGranterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllowancesByGranterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllowancesByGranterRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllowancesByGranterRequest*>(
               &_QueryAllowancesByGranterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryAllowancesByGranterRequest& a, QueryAllowancesByGranterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllowancesByGranterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllowancesByGranterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllowancesByGranterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllowancesByGranterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllowancesByGranterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllowancesByGranterRequest& from) {
    QueryAllowancesByGranterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllowancesByGranterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest";
  }
  protected:
  explicit QueryAllowancesByGranterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranterFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_granter() ;
  const std::string& granter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter(Arg_&& arg, Args_... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* ptr);

  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(
      const std::string& value);
  std::string* _internal_mutable_granter();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllowancesByGranterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse) */ {
 public:
  inline QueryAllowancesByGranterResponse() : QueryAllowancesByGranterResponse(nullptr) {}
  ~QueryAllowancesByGranterResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllowancesByGranterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllowancesByGranterResponse(const QueryAllowancesByGranterResponse& from);
  QueryAllowancesByGranterResponse(QueryAllowancesByGranterResponse&& from) noexcept
    : QueryAllowancesByGranterResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllowancesByGranterResponse& operator=(const QueryAllowancesByGranterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllowancesByGranterResponse& operator=(QueryAllowancesByGranterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllowancesByGranterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllowancesByGranterResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllowancesByGranterResponse*>(
               &_QueryAllowancesByGranterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryAllowancesByGranterResponse& a, QueryAllowancesByGranterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllowancesByGranterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllowancesByGranterResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllowancesByGranterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllowancesByGranterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllowancesByGranterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllowancesByGranterResponse& from) {
    QueryAllowancesByGranterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllowancesByGranterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse";
  }
  protected:
  explicit QueryAllowancesByGranterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowancesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.feegrant.v1beta1.Grant allowances = 1 [json_name = "allowances"];
  int allowances_size() const;
  private:
  int _internal_allowances_size() const;

  public:
  void clear_allowances() ;
  ::cosmos::feegrant::v1beta1::Grant* mutable_allowances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant >*
      mutable_allowances();
  private:
  const ::cosmos::feegrant::v1beta1::Grant& _internal_allowances(int index) const;
  ::cosmos::feegrant::v1beta1::Grant* _internal_add_allowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::feegrant::v1beta1::Grant>& _internal_allowances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::feegrant::v1beta1::Grant>* _internal_mutable_allowances();
  public:
  const ::cosmos::feegrant::v1beta1::Grant& allowances(int index) const;
  ::cosmos::feegrant::v1beta1::Grant* add_allowances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant >&
      allowances() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant > allowances_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryAllowanceRequest

// string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryAllowanceRequest::clear_granter() {
  _impl_.granter_.ClearToEmpty();
}
inline const std::string& QueryAllowanceRequest::granter() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowanceRequest.granter)
  return _internal_granter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAllowanceRequest::set_granter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.granter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.QueryAllowanceRequest.granter)
}
inline std::string* QueryAllowanceRequest::mutable_granter() {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowanceRequest.granter)
  return _s;
}
inline const std::string& QueryAllowanceRequest::_internal_granter() const {
  return _impl_.granter_.Get();
}
inline void QueryAllowanceRequest::_internal_set_granter(const std::string& value) {
  ;


  _impl_.granter_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAllowanceRequest::_internal_mutable_granter() {
  ;
  return _impl_.granter_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAllowanceRequest::release_granter() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowanceRequest.granter)
  return _impl_.granter_.Release();
}
inline void QueryAllowanceRequest::set_allocated_granter(std::string* value) {
  _impl_.granter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.granter_.IsDefault()) {
          _impl_.granter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowanceRequest.granter)
}

// string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryAllowanceRequest::clear_grantee() {
  _impl_.grantee_.ClearToEmpty();
}
inline const std::string& QueryAllowanceRequest::grantee() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowanceRequest.grantee)
  return _internal_grantee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAllowanceRequest::set_grantee(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.grantee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.QueryAllowanceRequest.grantee)
}
inline std::string* QueryAllowanceRequest::mutable_grantee() {
  std::string* _s = _internal_mutable_grantee();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowanceRequest.grantee)
  return _s;
}
inline const std::string& QueryAllowanceRequest::_internal_grantee() const {
  return _impl_.grantee_.Get();
}
inline void QueryAllowanceRequest::_internal_set_grantee(const std::string& value) {
  ;


  _impl_.grantee_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAllowanceRequest::_internal_mutable_grantee() {
  ;
  return _impl_.grantee_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAllowanceRequest::release_grantee() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowanceRequest.grantee)
  return _impl_.grantee_.Release();
}
inline void QueryAllowanceRequest::set_allocated_grantee(std::string* value) {
  _impl_.grantee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.grantee_.IsDefault()) {
          _impl_.grantee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowanceRequest.grantee)
}

// -------------------------------------------------------------------

// QueryAllowanceResponse

// .cosmos.feegrant.v1beta1.Grant allowance = 1 [json_name = "allowance"];
inline bool QueryAllowanceResponse::has_allowance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowance_ != nullptr);
  return value;
}
inline const ::cosmos::feegrant::v1beta1::Grant& QueryAllowanceResponse::_internal_allowance() const {
  const ::cosmos::feegrant::v1beta1::Grant* p = _impl_.allowance_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::feegrant::v1beta1::Grant&>(
      ::cosmos::feegrant::v1beta1::_Grant_default_instance_);
}
inline const ::cosmos::feegrant::v1beta1::Grant& QueryAllowanceResponse::allowance() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowanceResponse.allowance)
  return _internal_allowance();
}
inline void QueryAllowanceResponse::unsafe_arena_set_allocated_allowance(
    ::cosmos::feegrant::v1beta1::Grant* allowance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allowance_);
  }
  _impl_.allowance_ = allowance;
  if (allowance) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.QueryAllowanceResponse.allowance)
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowanceResponse::release_allowance() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::feegrant::v1beta1::Grant* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowanceResponse::unsafe_arena_release_allowance() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowanceResponse.allowance)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::feegrant::v1beta1::Grant* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  return temp;
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowanceResponse::_internal_mutable_allowance() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.allowance_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::feegrant::v1beta1::Grant>(GetArenaForAllocation());
    _impl_.allowance_ = p;
  }
  return _impl_.allowance_;
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowanceResponse::mutable_allowance() {
  ::cosmos::feegrant::v1beta1::Grant* _msg = _internal_mutable_allowance();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowanceResponse.allowance)
  return _msg;
}
inline void QueryAllowanceResponse::set_allocated_allowance(::cosmos::feegrant::v1beta1::Grant* allowance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allowance_);
  }
  if (allowance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowance));
    if (message_arena != submessage_arena) {
      allowance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.allowance_ = allowance;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowanceResponse.allowance)
}

// -------------------------------------------------------------------

// QueryAllowancesRequest

// string grantee = 1 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryAllowancesRequest::clear_grantee() {
  _impl_.grantee_.ClearToEmpty();
}
inline const std::string& QueryAllowancesRequest::grantee() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowancesRequest.grantee)
  return _internal_grantee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAllowancesRequest::set_grantee(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.grantee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.QueryAllowancesRequest.grantee)
}
inline std::string* QueryAllowancesRequest::mutable_grantee() {
  std::string* _s = _internal_mutable_grantee();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowancesRequest.grantee)
  return _s;
}
inline const std::string& QueryAllowancesRequest::_internal_grantee() const {
  return _impl_.grantee_.Get();
}
inline void QueryAllowancesRequest::_internal_set_grantee(const std::string& value) {
  ;


  _impl_.grantee_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAllowancesRequest::_internal_mutable_grantee() {
  ;
  return _impl_.grantee_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAllowancesRequest::release_grantee() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowancesRequest.grantee)
  return _impl_.grantee_.Release();
}
inline void QueryAllowancesRequest::set_allocated_grantee(std::string* value) {
  _impl_.grantee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.grantee_.IsDefault()) {
          _impl_.grantee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesRequest.grantee)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryAllowancesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllowancesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllowancesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowancesRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllowancesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllowancesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllowancesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowancesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllowancesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllowancesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowancesRequest.pagination)
  return _msg;
}
inline void QueryAllowancesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAllowancesResponse

// repeated .cosmos.feegrant.v1beta1.Grant allowances = 1 [json_name = "allowances"];
inline int QueryAllowancesResponse::_internal_allowances_size() const {
  return _impl_.allowances_.size();
}
inline int QueryAllowancesResponse::allowances_size() const {
  return _internal_allowances_size();
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowancesResponse::mutable_allowances(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowancesResponse.allowances)
  return _internal_mutable_allowances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant >*
QueryAllowancesResponse::mutable_allowances() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.QueryAllowancesResponse.allowances)
  return _internal_mutable_allowances();
}
inline const ::cosmos::feegrant::v1beta1::Grant& QueryAllowancesResponse::_internal_allowances(int index) const {
  return _internal_allowances().Get(index);
}
inline const ::cosmos::feegrant::v1beta1::Grant& QueryAllowancesResponse::allowances(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowancesResponse.allowances)
  return _internal_allowances(index);
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowancesResponse::_internal_add_allowances() {
  return _internal_mutable_allowances()->Add();
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowancesResponse::add_allowances() {
  ::cosmos::feegrant::v1beta1::Grant* _add = _internal_add_allowances();
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.QueryAllowancesResponse.allowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant >&
QueryAllowancesResponse::allowances() const {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.QueryAllowancesResponse.allowances)
  return _internal_allowances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::feegrant::v1beta1::Grant>&
QueryAllowancesResponse::_internal_allowances() const {
  return _impl_.allowances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::feegrant::v1beta1::Grant>*
QueryAllowancesResponse::_internal_mutable_allowances() {
  return &_impl_.allowances_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryAllowancesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllowancesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllowancesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowancesResponse.pagination)
  return _internal_pagination();
}
inline void QueryAllowancesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllowancesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllowancesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowancesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllowancesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllowancesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowancesResponse.pagination)
  return _msg;
}
inline void QueryAllowancesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesResponse.pagination)
}

// -------------------------------------------------------------------

// QueryAllowancesByGranterRequest

// string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryAllowancesByGranterRequest::clear_granter() {
  _impl_.granter_.ClearToEmpty();
}
inline const std::string& QueryAllowancesByGranterRequest::granter() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.granter)
  return _internal_granter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAllowancesByGranterRequest::set_granter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.granter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.granter)
}
inline std::string* QueryAllowancesByGranterRequest::mutable_granter() {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.granter)
  return _s;
}
inline const std::string& QueryAllowancesByGranterRequest::_internal_granter() const {
  return _impl_.granter_.Get();
}
inline void QueryAllowancesByGranterRequest::_internal_set_granter(const std::string& value) {
  ;


  _impl_.granter_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAllowancesByGranterRequest::_internal_mutable_granter() {
  ;
  return _impl_.granter_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAllowancesByGranterRequest::release_granter() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.granter)
  return _impl_.granter_.Release();
}
inline void QueryAllowancesByGranterRequest::set_allocated_granter(std::string* value) {
  _impl_.granter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.granter_.IsDefault()) {
          _impl_.granter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.granter)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryAllowancesByGranterRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllowancesByGranterRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllowancesByGranterRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllowancesByGranterRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllowancesByGranterRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllowancesByGranterRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllowancesByGranterRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllowancesByGranterRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.pagination)
  return _msg;
}
inline void QueryAllowancesByGranterRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesByGranterRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAllowancesByGranterResponse

// repeated .cosmos.feegrant.v1beta1.Grant allowances = 1 [json_name = "allowances"];
inline int QueryAllowancesByGranterResponse::_internal_allowances_size() const {
  return _impl_.allowances_.size();
}
inline int QueryAllowancesByGranterResponse::allowances_size() const {
  return _internal_allowances_size();
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowancesByGranterResponse::mutable_allowances(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.allowances)
  return _internal_mutable_allowances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant >*
QueryAllowancesByGranterResponse::mutable_allowances() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.allowances)
  return _internal_mutable_allowances();
}
inline const ::cosmos::feegrant::v1beta1::Grant& QueryAllowancesByGranterResponse::_internal_allowances(int index) const {
  return _internal_allowances().Get(index);
}
inline const ::cosmos::feegrant::v1beta1::Grant& QueryAllowancesByGranterResponse::allowances(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.allowances)
  return _internal_allowances(index);
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowancesByGranterResponse::_internal_add_allowances() {
  return _internal_mutable_allowances()->Add();
}
inline ::cosmos::feegrant::v1beta1::Grant* QueryAllowancesByGranterResponse::add_allowances() {
  ::cosmos::feegrant::v1beta1::Grant* _add = _internal_add_allowances();
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.allowances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::feegrant::v1beta1::Grant >&
QueryAllowancesByGranterResponse::allowances() const {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.allowances)
  return _internal_allowances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::feegrant::v1beta1::Grant>&
QueryAllowancesByGranterResponse::_internal_allowances() const {
  return _impl_.allowances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::feegrant::v1beta1::Grant>*
QueryAllowancesByGranterResponse::_internal_mutable_allowances() {
  return &_impl_.allowances_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryAllowancesByGranterResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllowancesByGranterResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllowancesByGranterResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.pagination)
  return _internal_pagination();
}
inline void QueryAllowancesByGranterResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllowancesByGranterResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllowancesByGranterResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllowancesByGranterResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllowancesByGranterResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.pagination)
  return _msg;
}
inline void QueryAllowancesByGranterResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto_2epb_2eh

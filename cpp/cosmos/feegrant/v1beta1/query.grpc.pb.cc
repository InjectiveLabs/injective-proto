// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/feegrant/v1beta1/query.proto

#include "cosmos/feegrant/v1beta1/query.pb.h"
#include "cosmos/feegrant/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace feegrant {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/cosmos.feegrant.v1beta1.Query/Allowance",
  "/cosmos.feegrant.v1beta1.Query/Allowances",
  "/cosmos.feegrant.v1beta1.Query/AllowancesByGranter",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Allowance_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Allowances_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllowancesByGranter_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Allowance_, context, request, response);
}

void Query::Stub::async::Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Allowance_, context, request, response, std::move(f));
}

void Query::Stub::async::Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Allowance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* Query::Stub::PrepareAsyncAllowanceRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse, ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Allowance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* Query::Stub::AsyncAllowanceRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllowanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Allowances_, context, request, response);
}

void Query::Stub::async::Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Allowances_, context, request, response, std::move(f));
}

void Query::Stub::async::Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Allowances_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* Query::Stub::PrepareAsyncAllowancesRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse, ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Allowances_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* Query::Stub::AsyncAllowancesRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllowancesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllowancesByGranter_, context, request, response);
}

void Query::Stub::async::AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllowancesByGranter_, context, request, response, std::move(f));
}

void Query::Stub::async::AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllowancesByGranter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* Query::Stub::PrepareAsyncAllowancesByGranterRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllowancesByGranter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* Query::Stub::AsyncAllowancesByGranterRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllowancesByGranterRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* req,
             ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* resp) {
               return service->Allowance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* req,
             ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* resp) {
               return service->Allowances(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* req,
             ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* resp) {
               return service->AllowancesByGranter(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Allowance(::grpc::ServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Allowances(::grpc::ServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AllowancesByGranter(::grpc::ServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace feegrant
}  // namespace v1beta1


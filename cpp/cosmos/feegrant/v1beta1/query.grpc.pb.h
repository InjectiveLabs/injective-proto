// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/feegrant/v1beta1/query.proto
// Original file comments:
// Since: cosmos-sdk 0.43
#ifndef GRPC_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/feegrant/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace feegrant {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.feegrant.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Allowance returns fee granted to the grantee by the granter.
    virtual ::grpc::Status Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>> AsyncAllowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>>(AsyncAllowanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>> PrepareAsyncAllowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>>(PrepareAsyncAllowanceRaw(context, request, cq));
    }
    // Allowances returns all the grants for address.
    virtual ::grpc::Status Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>> AsyncAllowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>>(AsyncAllowancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>> PrepareAsyncAllowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>>(PrepareAsyncAllowancesRaw(context, request, cq));
    }
    // AllowancesByGranter returns all the grants given by an address
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>> AsyncAllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>>(AsyncAllowancesByGranterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>> PrepareAsyncAllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>>(PrepareAsyncAllowancesByGranterRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Allowance returns fee granted to the grantee by the granter.
      virtual void Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Allowances returns all the grants for address.
      virtual void Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AllowancesByGranter returns all the grants given by an address
      //
      // Since: cosmos-sdk 0.46
      virtual void AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* AsyncAllowanceRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* PrepareAsyncAllowanceRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* AsyncAllowancesRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* PrepareAsyncAllowancesRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* AsyncAllowancesByGranterRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* PrepareAsyncAllowancesByGranterRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>> AsyncAllowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>>(AsyncAllowanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>> PrepareAsyncAllowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>>(PrepareAsyncAllowanceRaw(context, request, cq));
    }
    ::grpc::Status Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>> AsyncAllowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>>(AsyncAllowancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>> PrepareAsyncAllowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>>(PrepareAsyncAllowancesRaw(context, request, cq));
    }
    ::grpc::Status AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>> AsyncAllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>>(AsyncAllowancesByGranterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>> PrepareAsyncAllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>>(PrepareAsyncAllowancesByGranterRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response, std::function<void(::grpc::Status)>) override;
      void Allowance(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response, std::function<void(::grpc::Status)>) override;
      void Allowances(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response, std::function<void(::grpc::Status)>) override;
      void AllowancesByGranter(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* AsyncAllowanceRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* PrepareAsyncAllowanceRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* AsyncAllowancesRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* PrepareAsyncAllowancesRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* AsyncAllowancesByGranterRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* PrepareAsyncAllowancesByGranterRaw(::grpc::ClientContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Allowance_;
    const ::grpc::internal::RpcMethod rpcmethod_Allowances_;
    const ::grpc::internal::RpcMethod rpcmethod_AllowancesByGranter_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Allowance returns fee granted to the grantee by the granter.
    virtual ::grpc::Status Allowance(::grpc::ServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response);
    // Allowances returns all the grants for address.
    virtual ::grpc::Status Allowances(::grpc::ServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response);
    // AllowancesByGranter returns all the grants given by an address
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status AllowancesByGranter(::grpc::ServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Allowance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Allowance() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Allowance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowance(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllowance(::grpc::ServerContext* context, ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Allowances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Allowances() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Allowances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowances(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllowances(::grpc::ServerContext* context, ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllowancesByGranter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AllowancesByGranter() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AllowancesByGranter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllowancesByGranter(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllowancesByGranter(::grpc::ServerContext* context, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Allowance<WithAsyncMethod_Allowances<WithAsyncMethod_AllowancesByGranter<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Allowance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Allowance() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* response) { return this->Allowance(context, request, response); }));}
    void SetMessageAllocatorFor_Allowance(
        ::grpc::MessageAllocator< ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Allowance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowance(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Allowance(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Allowances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Allowances() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* response) { return this->Allowances(context, request, response); }));}
    void SetMessageAllocatorFor_Allowances(
        ::grpc::MessageAllocator< ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Allowances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowances(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Allowances(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AllowancesByGranter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AllowancesByGranter() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* request, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* response) { return this->AllowancesByGranter(context, request, response); }));}
    void SetMessageAllocatorFor_AllowancesByGranter(
        ::grpc::MessageAllocator< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AllowancesByGranter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllowancesByGranter(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllowancesByGranter(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Allowance<WithCallbackMethod_Allowances<WithCallbackMethod_AllowancesByGranter<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Allowance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Allowance() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Allowance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowance(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Allowances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Allowances() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Allowances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowances(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllowancesByGranter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AllowancesByGranter() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AllowancesByGranter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllowancesByGranter(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Allowance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Allowance() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Allowance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowance(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllowance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Allowances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Allowances() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Allowances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowances(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllowances(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllowancesByGranter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AllowancesByGranter() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AllowancesByGranter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllowancesByGranter(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllowancesByGranter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Allowance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Allowance() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Allowance(context, request, response); }));
    }
    ~WithRawCallbackMethod_Allowance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowance(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Allowance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Allowances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Allowances() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Allowances(context, request, response); }));
    }
    ~WithRawCallbackMethod_Allowances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Allowances(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Allowances(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AllowancesByGranter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AllowancesByGranter() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AllowancesByGranter(context, request, response); }));
    }
    ~WithRawCallbackMethod_AllowancesByGranter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllowancesByGranter(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllowancesByGranter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Allowance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Allowance() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::feegrant::v1beta1::QueryAllowanceRequest, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* streamer) {
                       return this->StreamedAllowance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Allowance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Allowance(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowanceRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllowance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::feegrant::v1beta1::QueryAllowanceRequest,::cosmos::feegrant::v1beta1::QueryAllowanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Allowances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Allowances() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::feegrant::v1beta1::QueryAllowancesRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* streamer) {
                       return this->StreamedAllowances(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Allowances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Allowances(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllowances(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::feegrant::v1beta1::QueryAllowancesRequest,::cosmos::feegrant::v1beta1::QueryAllowancesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllowancesByGranter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AllowancesByGranter() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* streamer) {
                       return this->StreamedAllowancesByGranter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AllowancesByGranter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllowancesByGranter(::grpc::ServerContext* /*context*/, const ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest* /*request*/, ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllowancesByGranter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::feegrant::v1beta1::QueryAllowancesByGranterRequest,::cosmos::feegrant::v1beta1::QueryAllowancesByGranterResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Allowance<WithStreamedUnaryMethod_Allowances<WithStreamedUnaryMethod_AllowancesByGranter<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Allowance<WithStreamedUnaryMethod_Allowances<WithStreamedUnaryMethod_AllowancesByGranter<Service > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos


#endif  // GRPC_cosmos_2ffeegrant_2fv1beta1_2fquery_2eproto__INCLUDED

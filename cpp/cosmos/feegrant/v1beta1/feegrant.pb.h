// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/feegrant/v1beta1/feegrant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "amino/amino.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
namespace cosmos {
namespace feegrant {
namespace v1beta1 {
class AllowedMsgAllowance;
struct AllowedMsgAllowanceDefaultTypeInternal;
extern AllowedMsgAllowanceDefaultTypeInternal _AllowedMsgAllowance_default_instance_;
class BasicAllowance;
struct BasicAllowanceDefaultTypeInternal;
extern BasicAllowanceDefaultTypeInternal _BasicAllowance_default_instance_;
class Grant;
struct GrantDefaultTypeInternal;
extern GrantDefaultTypeInternal _Grant_default_instance_;
class PeriodicAllowance;
struct PeriodicAllowanceDefaultTypeInternal;
extern PeriodicAllowanceDefaultTypeInternal _PeriodicAllowance_default_instance_;
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::feegrant::v1beta1::AllowedMsgAllowance* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::AllowedMsgAllowance>(Arena*);
template <>
::cosmos::feegrant::v1beta1::BasicAllowance* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::BasicAllowance>(Arena*);
template <>
::cosmos::feegrant::v1beta1::Grant* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::Grant>(Arena*);
template <>
::cosmos::feegrant::v1beta1::PeriodicAllowance* Arena::CreateMaybeMessage<::cosmos::feegrant::v1beta1::PeriodicAllowance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace feegrant {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class BasicAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.BasicAllowance) */ {
 public:
  inline BasicAllowance() : BasicAllowance(nullptr) {}
  ~BasicAllowance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BasicAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicAllowance(const BasicAllowance& from);
  BasicAllowance(BasicAllowance&& from) noexcept
    : BasicAllowance() {
    *this = ::std::move(from);
  }

  inline BasicAllowance& operator=(const BasicAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicAllowance& operator=(BasicAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BasicAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicAllowance* internal_default_instance() {
    return reinterpret_cast<const BasicAllowance*>(
               &_BasicAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BasicAllowance& a, BasicAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BasicAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BasicAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BasicAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BasicAllowance& from) {
    BasicAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.BasicAllowance";
  }
  protected:
  explicit BasicAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpendLimitFieldNumber = 1,
    kExpirationFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int spend_limit_size() const;
  private:
  int _internal_spend_limit_size() const;

  public:
  void clear_spend_limit() ;
  ::cosmos::base::v1beta1::Coin* mutable_spend_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_spend_limit();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_spend_limit(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_spend_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_spend_limit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_spend_limit();
  public:
  const ::cosmos::base::v1beta1::Coin& spend_limit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_spend_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      spend_limit() const;
  // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
  bool has_expiration() const;
  void clear_expiration() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration();
  void set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration();
  public:
  void unsafe_arena_set_allocated_expiration(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.BasicAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > spend_limit_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
};// -------------------------------------------------------------------

class PeriodicAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.PeriodicAllowance) */ {
 public:
  inline PeriodicAllowance() : PeriodicAllowance(nullptr) {}
  ~PeriodicAllowance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PeriodicAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeriodicAllowance(const PeriodicAllowance& from);
  PeriodicAllowance(PeriodicAllowance&& from) noexcept
    : PeriodicAllowance() {
    *this = ::std::move(from);
  }

  inline PeriodicAllowance& operator=(const PeriodicAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodicAllowance& operator=(PeriodicAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeriodicAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeriodicAllowance* internal_default_instance() {
    return reinterpret_cast<const PeriodicAllowance*>(
               &_PeriodicAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PeriodicAllowance& a, PeriodicAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(PeriodicAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeriodicAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeriodicAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeriodicAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeriodicAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeriodicAllowance& from) {
    PeriodicAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeriodicAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.PeriodicAllowance";
  }
  protected:
  explicit PeriodicAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodSpendLimitFieldNumber = 3,
    kPeriodCanSpendFieldNumber = 4,
    kBasicFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kPeriodResetFieldNumber = 5,
  };
  // repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int period_spend_limit_size() const;
  private:
  int _internal_period_spend_limit_size() const;

  public:
  void clear_period_spend_limit() ;
  ::cosmos::base::v1beta1::Coin* mutable_period_spend_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_period_spend_limit();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_period_spend_limit(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_period_spend_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_period_spend_limit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_period_spend_limit();
  public:
  const ::cosmos::base::v1beta1::Coin& period_spend_limit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_period_spend_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      period_spend_limit() const;
  // repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int period_can_spend_size() const;
  private:
  int _internal_period_can_spend_size() const;

  public:
  void clear_period_can_spend() ;
  ::cosmos::base::v1beta1::Coin* mutable_period_can_spend(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_period_can_spend();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_period_can_spend(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_period_can_spend();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_period_can_spend() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_period_can_spend();
  public:
  const ::cosmos::base::v1beta1::Coin& period_can_spend(int index) const;
  ::cosmos::base::v1beta1::Coin* add_period_can_spend();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      period_can_spend() const;
  // .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_basic() const;
  void clear_basic() ;
  const ::cosmos::feegrant::v1beta1::BasicAllowance& basic() const;
  PROTOBUF_NODISCARD ::cosmos::feegrant::v1beta1::BasicAllowance* release_basic();
  ::cosmos::feegrant::v1beta1::BasicAllowance* mutable_basic();
  void set_allocated_basic(::cosmos::feegrant::v1beta1::BasicAllowance* basic);
  private:
  const ::cosmos::feegrant::v1beta1::BasicAllowance& _internal_basic() const;
  ::cosmos::feegrant::v1beta1::BasicAllowance* _internal_mutable_basic();
  public:
  void unsafe_arena_set_allocated_basic(
      ::cosmos::feegrant::v1beta1::BasicAllowance* basic);
  ::cosmos::feegrant::v1beta1::BasicAllowance* unsafe_arena_release_basic();
  // .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  bool has_period() const;
  void clear_period() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_period();
  void set_allocated_period(::PROTOBUF_NAMESPACE_ID::Duration* period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_period();
  public:
  void unsafe_arena_set_allocated_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_period();
  // .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_period_reset() const;
  void clear_period_reset() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& period_reset() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_period_reset();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_period_reset();
  void set_allocated_period_reset(::PROTOBUF_NAMESPACE_ID::Timestamp* period_reset);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_period_reset() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_period_reset();
  public:
  void unsafe_arena_set_allocated_period_reset(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* period_reset);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_period_reset();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.PeriodicAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > period_spend_limit_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > period_can_spend_;
    ::cosmos::feegrant::v1beta1::BasicAllowance* basic_;
    ::PROTOBUF_NAMESPACE_ID::Duration* period_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* period_reset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
};// -------------------------------------------------------------------

class AllowedMsgAllowance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.AllowedMsgAllowance) */ {
 public:
  inline AllowedMsgAllowance() : AllowedMsgAllowance(nullptr) {}
  ~AllowedMsgAllowance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AllowedMsgAllowance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllowedMsgAllowance(const AllowedMsgAllowance& from);
  AllowedMsgAllowance(AllowedMsgAllowance&& from) noexcept
    : AllowedMsgAllowance() {
    *this = ::std::move(from);
  }

  inline AllowedMsgAllowance& operator=(const AllowedMsgAllowance& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllowedMsgAllowance& operator=(AllowedMsgAllowance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllowedMsgAllowance& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllowedMsgAllowance* internal_default_instance() {
    return reinterpret_cast<const AllowedMsgAllowance*>(
               &_AllowedMsgAllowance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AllowedMsgAllowance& a, AllowedMsgAllowance& b) {
    a.Swap(&b);
  }
  inline void Swap(AllowedMsgAllowance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllowedMsgAllowance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllowedMsgAllowance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllowedMsgAllowance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllowedMsgAllowance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllowedMsgAllowance& from) {
    AllowedMsgAllowance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllowedMsgAllowance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.AllowedMsgAllowance";
  }
  protected:
  explicit AllowedMsgAllowance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedMessagesFieldNumber = 2,
    kAllowanceFieldNumber = 1,
  };
  // repeated string allowed_messages = 2 [json_name = "allowedMessages"];
  int allowed_messages_size() const;
  private:
  int _internal_allowed_messages_size() const;

  public:
  void clear_allowed_messages() ;
  const std::string& allowed_messages(int index) const;
  std::string* mutable_allowed_messages(int index);
  void set_allowed_messages(int index, const std::string& value);
  void set_allowed_messages(int index, std::string&& value);
  void set_allowed_messages(int index, const char* value);
  void set_allowed_messages(int index, const char* value, std::size_t size);
  void set_allowed_messages(int index, absl::string_view value);
  std::string* add_allowed_messages();
  void add_allowed_messages(const std::string& value);
  void add_allowed_messages(std::string&& value);
  void add_allowed_messages(const char* value);
  void add_allowed_messages(const char* value, std::size_t size);
  void add_allowed_messages(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_messages();

  private:
  const std::string& _internal_allowed_messages(int index) const;
  std::string* _internal_add_allowed_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_allowed_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_allowed_messages();

  public:
  // .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  bool has_allowance() const;
  void clear_allowance() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& allowance() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_allowance();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_allowance();
  void set_allocated_allowance(::PROTOBUF_NAMESPACE_ID::Any* allowance);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_allowance() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_allowance();
  public:
  void unsafe_arena_set_allocated_allowance(
      ::PROTOBUF_NAMESPACE_ID::Any* allowance);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_allowance();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.AllowedMsgAllowance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_messages_;
    ::PROTOBUF_NAMESPACE_ID::Any* allowance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
};// -------------------------------------------------------------------

class Grant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.feegrant.v1beta1.Grant) */ {
 public:
  inline Grant() : Grant(nullptr) {}
  ~Grant() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Grant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grant(const Grant& from);
  Grant(Grant&& from) noexcept
    : Grant() {
    *this = ::std::move(from);
  }

  inline Grant& operator=(const Grant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grant& operator=(Grant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Grant& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grant* internal_default_instance() {
    return reinterpret_cast<const Grant*>(
               &_Grant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Grant& a, Grant& b) {
    a.Swap(&b);
  }
  inline void Swap(Grant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grant* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Grant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Grant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Grant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Grant& from) {
    Grant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.feegrant.v1beta1.Grant";
  }
  protected:
  explicit Grant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranterFieldNumber = 1,
    kGranteeFieldNumber = 2,
    kAllowanceFieldNumber = 3,
  };
  // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_granter() ;
  const std::string& granter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter(Arg_&& arg, Args_... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* ptr);

  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(
      const std::string& value);
  std::string* _internal_mutable_granter();

  public:
  // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_grantee() ;
  const std::string& grantee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_grantee(Arg_&& arg, Args_... args);
  std::string* mutable_grantee();
  PROTOBUF_NODISCARD std::string* release_grantee();
  void set_allocated_grantee(std::string* ptr);

  private:
  const std::string& _internal_grantee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grantee(
      const std::string& value);
  std::string* _internal_mutable_grantee();

  public:
  // .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
  bool has_allowance() const;
  void clear_allowance() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& allowance() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_allowance();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_allowance();
  void set_allocated_allowance(::PROTOBUF_NAMESPACE_ID::Any* allowance);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_allowance() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_allowance();
  public:
  void unsafe_arena_set_allocated_allowance(
      ::PROTOBUF_NAMESPACE_ID::Any* allowance);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_allowance();
  // @@protoc_insertion_point(class_scope:cosmos.feegrant.v1beta1.Grant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grantee_;
    ::PROTOBUF_NAMESPACE_ID::Any* allowance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BasicAllowance

// repeated .cosmos.base.v1beta1.Coin spend_limit = 1 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int BasicAllowance::_internal_spend_limit_size() const {
  return _impl_.spend_limit_.size();
}
inline int BasicAllowance::spend_limit_size() const {
  return _internal_spend_limit_size();
}
inline ::cosmos::base::v1beta1::Coin* BasicAllowance::mutable_spend_limit(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _internal_mutable_spend_limit()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
BasicAllowance::mutable_spend_limit() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _internal_mutable_spend_limit();
}
inline const ::cosmos::base::v1beta1::Coin& BasicAllowance::_internal_spend_limit(int index) const {
  return _internal_spend_limit().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& BasicAllowance::spend_limit(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _internal_spend_limit(index);
}
inline ::cosmos::base::v1beta1::Coin* BasicAllowance::_internal_add_spend_limit() {
  return _internal_mutable_spend_limit()->Add();
}
inline ::cosmos::base::v1beta1::Coin* BasicAllowance::add_spend_limit() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_spend_limit();
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
BasicAllowance::spend_limit() const {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.BasicAllowance.spend_limit)
  return _internal_spend_limit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
BasicAllowance::_internal_spend_limit() const {
  return _impl_.spend_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
BasicAllowance::_internal_mutable_spend_limit() {
  return &_impl_.spend_limit_;
}

// .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.stdtime) = true];
inline bool BasicAllowance::has_expiration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BasicAllowance::_internal_expiration() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expiration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BasicAllowance::expiration() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
  return _internal_expiration();
}
inline void BasicAllowance::unsafe_arena_set_allocated_expiration(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_);
  }
  _impl_.expiration_ = expiration;
  if (expiration) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BasicAllowance::release_expiration() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BasicAllowance::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BasicAllowance::_internal_mutable_expiration() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expiration_ = p;
  }
  return _impl_.expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BasicAllowance::mutable_expiration() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
  return _msg;
}
inline void BasicAllowance::set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration));
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.BasicAllowance.expiration)
}

// -------------------------------------------------------------------

// PeriodicAllowance

// .cosmos.feegrant.v1beta1.BasicAllowance basic = 1 [json_name = "basic", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool PeriodicAllowance::has_basic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.basic_ != nullptr);
  return value;
}
inline void PeriodicAllowance::clear_basic() {
  if (_impl_.basic_ != nullptr) _impl_.basic_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::feegrant::v1beta1::BasicAllowance& PeriodicAllowance::_internal_basic() const {
  const ::cosmos::feegrant::v1beta1::BasicAllowance* p = _impl_.basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::feegrant::v1beta1::BasicAllowance&>(
      ::cosmos::feegrant::v1beta1::_BasicAllowance_default_instance_);
}
inline const ::cosmos::feegrant::v1beta1::BasicAllowance& PeriodicAllowance::basic() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
  return _internal_basic();
}
inline void PeriodicAllowance::unsafe_arena_set_allocated_basic(
    ::cosmos::feegrant::v1beta1::BasicAllowance* basic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basic_);
  }
  _impl_.basic_ = basic;
  if (basic) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
}
inline ::cosmos::feegrant::v1beta1::BasicAllowance* PeriodicAllowance::release_basic() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::feegrant::v1beta1::BasicAllowance* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::feegrant::v1beta1::BasicAllowance* PeriodicAllowance::unsafe_arena_release_basic() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::feegrant::v1beta1::BasicAllowance* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
  return temp;
}
inline ::cosmos::feegrant::v1beta1::BasicAllowance* PeriodicAllowance::_internal_mutable_basic() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::feegrant::v1beta1::BasicAllowance>(GetArenaForAllocation());
    _impl_.basic_ = p;
  }
  return _impl_.basic_;
}
inline ::cosmos::feegrant::v1beta1::BasicAllowance* PeriodicAllowance::mutable_basic() {
  ::cosmos::feegrant::v1beta1::BasicAllowance* _msg = _internal_mutable_basic();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
  return _msg;
}
inline void PeriodicAllowance::set_allocated_basic(::cosmos::feegrant::v1beta1::BasicAllowance* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.basic_;
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(basic);
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.basic)
}

// .google.protobuf.Duration period = 2 [json_name = "period", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
inline bool PeriodicAllowance::has_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.period_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& PeriodicAllowance::_internal_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& PeriodicAllowance::period() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
  return _internal_period();
}
inline void PeriodicAllowance::unsafe_arena_set_allocated_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.period_);
  }
  _impl_.period_ = period;
  if (period) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PeriodicAllowance::release_period() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.period_;
  _impl_.period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PeriodicAllowance::unsafe_arena_release_period() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.period_;
  _impl_.period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PeriodicAllowance::_internal_mutable_period() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.period_ = p;
  }
  return _impl_.period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PeriodicAllowance::mutable_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_period();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
  return _msg;
}
inline void PeriodicAllowance::set_allocated_period(::PROTOBUF_NAMESPACE_ID::Duration* period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.period_);
  }
  if (period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period));
    if (message_arena != submessage_arena) {
      period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.period_ = period;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.period)
}

// repeated .cosmos.base.v1beta1.Coin period_spend_limit = 3 [json_name = "periodSpendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int PeriodicAllowance::_internal_period_spend_limit_size() const {
  return _impl_.period_spend_limit_.size();
}
inline int PeriodicAllowance::period_spend_limit_size() const {
  return _internal_period_spend_limit_size();
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::mutable_period_spend_limit(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _internal_mutable_period_spend_limit()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
PeriodicAllowance::mutable_period_spend_limit() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _internal_mutable_period_spend_limit();
}
inline const ::cosmos::base::v1beta1::Coin& PeriodicAllowance::_internal_period_spend_limit(int index) const {
  return _internal_period_spend_limit().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& PeriodicAllowance::period_spend_limit(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _internal_period_spend_limit(index);
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::_internal_add_period_spend_limit() {
  return _internal_mutable_period_spend_limit()->Add();
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::add_period_spend_limit() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_period_spend_limit();
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
PeriodicAllowance::period_spend_limit() const {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.PeriodicAllowance.period_spend_limit)
  return _internal_period_spend_limit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
PeriodicAllowance::_internal_period_spend_limit() const {
  return _impl_.period_spend_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
PeriodicAllowance::_internal_mutable_period_spend_limit() {
  return &_impl_.period_spend_limit_;
}

// repeated .cosmos.base.v1beta1.Coin period_can_spend = 4 [json_name = "periodCanSpend", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int PeriodicAllowance::_internal_period_can_spend_size() const {
  return _impl_.period_can_spend_.size();
}
inline int PeriodicAllowance::period_can_spend_size() const {
  return _internal_period_can_spend_size();
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::mutable_period_can_spend(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _internal_mutable_period_can_spend()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
PeriodicAllowance::mutable_period_can_spend() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _internal_mutable_period_can_spend();
}
inline const ::cosmos::base::v1beta1::Coin& PeriodicAllowance::_internal_period_can_spend(int index) const {
  return _internal_period_can_spend().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& PeriodicAllowance::period_can_spend(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _internal_period_can_spend(index);
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::_internal_add_period_can_spend() {
  return _internal_mutable_period_can_spend()->Add();
}
inline ::cosmos::base::v1beta1::Coin* PeriodicAllowance::add_period_can_spend() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_period_can_spend();
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
PeriodicAllowance::period_can_spend() const {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.PeriodicAllowance.period_can_spend)
  return _internal_period_can_spend();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
PeriodicAllowance::_internal_period_can_spend() const {
  return _impl_.period_can_spend_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
PeriodicAllowance::_internal_mutable_period_can_spend() {
  return &_impl_.period_can_spend_;
}

// .google.protobuf.Timestamp period_reset = 5 [json_name = "periodReset", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool PeriodicAllowance::has_period_reset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.period_reset_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PeriodicAllowance::_internal_period_reset() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.period_reset_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PeriodicAllowance::period_reset() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
  return _internal_period_reset();
}
inline void PeriodicAllowance::unsafe_arena_set_allocated_period_reset(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* period_reset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.period_reset_);
  }
  _impl_.period_reset_ = period_reset;
  if (period_reset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PeriodicAllowance::release_period_reset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.period_reset_;
  _impl_.period_reset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PeriodicAllowance::unsafe_arena_release_period_reset() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.period_reset_;
  _impl_.period_reset_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PeriodicAllowance::_internal_mutable_period_reset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.period_reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.period_reset_ = p;
  }
  return _impl_.period_reset_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PeriodicAllowance::mutable_period_reset() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_period_reset();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
  return _msg;
}
inline void PeriodicAllowance::set_allocated_period_reset(::PROTOBUF_NAMESPACE_ID::Timestamp* period_reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.period_reset_);
  }
  if (period_reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(period_reset));
    if (message_arena != submessage_arena) {
      period_reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, period_reset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.period_reset_ = period_reset;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.PeriodicAllowance.period_reset)
}

// -------------------------------------------------------------------

// AllowedMsgAllowance

// .google.protobuf.Any allowance = 1 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
inline bool AllowedMsgAllowance::has_allowance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowance_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AllowedMsgAllowance::_internal_allowance() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.allowance_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& AllowedMsgAllowance::allowance() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
  return _internal_allowance();
}
inline void AllowedMsgAllowance::unsafe_arena_set_allocated_allowance(
    ::PROTOBUF_NAMESPACE_ID::Any* allowance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allowance_);
  }
  _impl_.allowance_ = allowance;
  if (allowance) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AllowedMsgAllowance::release_allowance() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AllowedMsgAllowance::unsafe_arena_release_allowance() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AllowedMsgAllowance::_internal_mutable_allowance() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.allowance_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.allowance_ = p;
  }
  return _impl_.allowance_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* AllowedMsgAllowance::mutable_allowance() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_allowance();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
  return _msg;
}
inline void AllowedMsgAllowance::set_allocated_allowance(::PROTOBUF_NAMESPACE_ID::Any* allowance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allowance_);
  }
  if (allowance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowance));
    if (message_arena != submessage_arena) {
      allowance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.allowance_ = allowance;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowance)
}

// repeated string allowed_messages = 2 [json_name = "allowedMessages"];
inline int AllowedMsgAllowance::_internal_allowed_messages_size() const {
  return _impl_.allowed_messages_.size();
}
inline int AllowedMsgAllowance::allowed_messages_size() const {
  return _internal_allowed_messages_size();
}
inline void AllowedMsgAllowance::clear_allowed_messages() {
  _internal_mutable_allowed_messages()->Clear();
}
inline std::string* AllowedMsgAllowance::add_allowed_messages() {
  std::string* _s = _internal_add_allowed_messages();
  // @@protoc_insertion_point(field_add_mutable:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _s;
}
inline const std::string& AllowedMsgAllowance::allowed_messages(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _internal_allowed_messages(index);
}
inline std::string* AllowedMsgAllowance::mutable_allowed_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _internal_mutable_allowed_messages()->Mutable(index);
}
inline void AllowedMsgAllowance::set_allowed_messages(int index, const std::string& value) {
  _internal_mutable_allowed_messages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::set_allowed_messages(int index, std::string&& value) {
  _internal_mutable_allowed_messages()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::set_allowed_messages(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_allowed_messages()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::set_allowed_messages(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_allowed_messages()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::set_allowed_messages(int index, absl::string_view value) {
  _internal_mutable_allowed_messages()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::add_allowed_messages(const std::string& value) {
  _internal_mutable_allowed_messages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::add_allowed_messages(std::string&& value) {
  _internal_mutable_allowed_messages()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::add_allowed_messages(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_allowed_messages()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::add_allowed_messages(const char* value, std::size_t size) {
  _internal_mutable_allowed_messages()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline void AllowedMsgAllowance::add_allowed_messages(absl::string_view value) {
  _internal_mutable_allowed_messages()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AllowedMsgAllowance::allowed_messages() const {
  // @@protoc_insertion_point(field_list:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _internal_allowed_messages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* AllowedMsgAllowance::mutable_allowed_messages() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.feegrant.v1beta1.AllowedMsgAllowance.allowed_messages)
  return _internal_mutable_allowed_messages();
}
inline const std::string& AllowedMsgAllowance::_internal_allowed_messages(int index) const {
  return _internal_allowed_messages().Get(index);
}
inline std::string* AllowedMsgAllowance::_internal_add_allowed_messages() {
  return _internal_mutable_allowed_messages()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AllowedMsgAllowance::_internal_allowed_messages() const {
  return _impl_.allowed_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AllowedMsgAllowance::_internal_mutable_allowed_messages() {
  return &_impl_.allowed_messages_;
}

// -------------------------------------------------------------------

// Grant

// string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Grant::clear_granter() {
  _impl_.granter_.ClearToEmpty();
}
inline const std::string& Grant::granter() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.Grant.granter)
  return _internal_granter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Grant::set_granter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.granter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.Grant.granter)
}
inline std::string* Grant::mutable_granter() {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.Grant.granter)
  return _s;
}
inline const std::string& Grant::_internal_granter() const {
  return _impl_.granter_.Get();
}
inline void Grant::_internal_set_granter(const std::string& value) {
  ;


  _impl_.granter_.Set(value, GetArenaForAllocation());
}
inline std::string* Grant::_internal_mutable_granter() {
  ;
  return _impl_.granter_.Mutable( GetArenaForAllocation());
}
inline std::string* Grant::release_granter() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.Grant.granter)
  return _impl_.granter_.Release();
}
inline void Grant::set_allocated_granter(std::string* value) {
  _impl_.granter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.granter_.IsDefault()) {
          _impl_.granter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.Grant.granter)
}

// string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Grant::clear_grantee() {
  _impl_.grantee_.ClearToEmpty();
}
inline const std::string& Grant::grantee() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.Grant.grantee)
  return _internal_grantee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Grant::set_grantee(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.grantee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.feegrant.v1beta1.Grant.grantee)
}
inline std::string* Grant::mutable_grantee() {
  std::string* _s = _internal_mutable_grantee();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.Grant.grantee)
  return _s;
}
inline const std::string& Grant::_internal_grantee() const {
  return _impl_.grantee_.Get();
}
inline void Grant::_internal_set_grantee(const std::string& value) {
  ;


  _impl_.grantee_.Set(value, GetArenaForAllocation());
}
inline std::string* Grant::_internal_mutable_grantee() {
  ;
  return _impl_.grantee_.Mutable( GetArenaForAllocation());
}
inline std::string* Grant::release_grantee() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.Grant.grantee)
  return _impl_.grantee_.Release();
}
inline void Grant::set_allocated_grantee(std::string* value) {
  _impl_.grantee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.grantee_.IsDefault()) {
          _impl_.grantee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.Grant.grantee)
}

// .google.protobuf.Any allowance = 3 [json_name = "allowance", (.cosmos_proto.accepts_interface) = "cosmos.feegrant.v1beta1.FeeAllowanceI"];
inline bool Grant::has_allowance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.allowance_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Grant::_internal_allowance() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.allowance_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Grant::allowance() const {
  // @@protoc_insertion_point(field_get:cosmos.feegrant.v1beta1.Grant.allowance)
  return _internal_allowance();
}
inline void Grant::unsafe_arena_set_allocated_allowance(
    ::PROTOBUF_NAMESPACE_ID::Any* allowance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allowance_);
  }
  _impl_.allowance_ = allowance;
  if (allowance) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.feegrant.v1beta1.Grant.allowance)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::release_allowance() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::unsafe_arena_release_allowance() {
  // @@protoc_insertion_point(field_release:cosmos.feegrant.v1beta1.Grant.allowance)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.allowance_;
  _impl_.allowance_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::_internal_mutable_allowance() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.allowance_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.allowance_ = p;
  }
  return _impl_.allowance_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::mutable_allowance() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_allowance();
  // @@protoc_insertion_point(field_mutable:cosmos.feegrant.v1beta1.Grant.allowance)
  return _msg;
}
inline void Grant::set_allocated_allowance(::PROTOBUF_NAMESPACE_ID::Any* allowance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allowance_);
  }
  if (allowance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowance));
    if (message_arena != submessage_arena) {
      allowance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.allowance_ = allowance;
  // @@protoc_insertion_point(field_set_allocated:cosmos.feegrant.v1beta1.Grant.allowance)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace feegrant
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2ffeegrant_2fv1beta1_2ffeegrant_2eproto_2epb_2eh

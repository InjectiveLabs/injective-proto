// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/upgrade/v1beta1/upgrade.proto

#include "cosmos/upgrade/v1beta1/upgrade.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace upgrade {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Plan::Plan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.info_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.upgraded_client_state_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}
} {}
struct PlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanDefaultTypeInternal() {}
  union {
    Plan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanDefaultTypeInternal _Plan_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SoftwareUpgradeProposal::SoftwareUpgradeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.plan_)*/nullptr} {}
struct SoftwareUpgradeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftwareUpgradeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftwareUpgradeProposalDefaultTypeInternal() {}
  union {
    SoftwareUpgradeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftwareUpgradeProposalDefaultTypeInternal _SoftwareUpgradeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CancelSoftwareUpgradeProposal::CancelSoftwareUpgradeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelSoftwareUpgradeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelSoftwareUpgradeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelSoftwareUpgradeProposalDefaultTypeInternal() {}
  union {
    CancelSoftwareUpgradeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelSoftwareUpgradeProposalDefaultTypeInternal _CancelSoftwareUpgradeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ModuleVersion::ModuleVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleVersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleVersionDefaultTypeInternal() {}
  union {
    ModuleVersion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleVersionDefaultTypeInternal _ModuleVersion_default_instance_;
}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::Plan, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::Plan, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::Plan, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::Plan, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::Plan, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::Plan, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::Plan, _impl_.upgraded_client_state_),
    ~0u,
    0,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal, _impl_.plan_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal, _impl_.description_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::ModuleVersion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::ModuleVersion, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::upgrade::v1beta1::ModuleVersion, _impl_.version_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::cosmos::upgrade::v1beta1::Plan)},
        { 18, 29, -1, sizeof(::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal)},
        { 32, -1, -1, sizeof(::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal)},
        { 42, -1, -1, sizeof(::cosmos::upgrade::v1beta1::ModuleVersion)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::upgrade::v1beta1::_Plan_default_instance_._instance,
    &::cosmos::upgrade::v1beta1::_SoftwareUpgradeProposal_default_instance_._instance,
    &::cosmos::upgrade::v1beta1::_CancelSoftwareUpgradeProposal_default_instance_._instance,
    &::cosmos::upgrade::v1beta1::_ModuleVersion_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$cosmos/upgrade/v1beta1/upgrade.proto\022\026"
    "cosmos.upgrade.v1beta1\032\031google/protobuf/"
    "any.proto\032\024gogoproto/gogo.proto\032\037google/"
    "protobuf/timestamp.proto\032\031cosmos_proto/c"
    "osmos.proto\032\021amino/amino.proto\"\363\001\n\004Plan\022"
    "\022\n\004name\030\001 \001(\tR\004name\022\?\n\004time\030\002 \001(\0132\032.goog"
    "le.protobuf.TimestampB\017\030\001\310\336\037\000\220\337\037\001\250\347\260*\001R\004"
    "time\022\026\n\006height\030\003 \001(\003R\006height\022\022\n\004info\030\004 \001"
    "(\tR\004info\022L\n\025upgraded_client_state\030\005 \001(\0132"
    "\024.google.protobuf.AnyB\002\030\001R\023upgradedClien"
    "tState:\034\230\240\037\000\350\240\037\001\212\347\260*\017cosmos-sdk/Plan\"\337\001\n"
    "\027SoftwareUpgradeProposal\022\024\n\005title\030\001 \001(\tR"
    "\005title\022 \n\013description\030\002 \001(\tR\013description"
    "\022;\n\004plan\030\003 \001(\0132\034.cosmos.upgrade.v1beta1."
    "PlanB\t\310\336\037\000\250\347\260*\001R\004plan:O\030\001\230\240\037\000\350\240\037\001\312\264-\032cos"
    "mos.gov.v1beta1.Content\212\347\260*\"cosmos-sdk/S"
    "oftwareUpgradeProposal\"\256\001\n\035CancelSoftwar"
    "eUpgradeProposal\022\024\n\005title\030\001 \001(\tR\005title\022 "
    "\n\013description\030\002 \001(\tR\013description:U\030\001\230\240\037\000"
    "\350\240\037\001\312\264-\032cosmos.gov.v1beta1.Content\212\347\260*(c"
    "osmos-sdk/CancelSoftwareUpgradeProposal\""
    "G\n\rModuleVersion\022\022\n\004name\030\001 \001(\tR\004name\022\030\n\007"
    "version\030\002 \001(\004R\007version:\010\230\240\037\001\350\240\037\001B\326\001\n\032com"
    ".cosmos.upgrade.v1beta1B\014UpgradeProtoP\001Z"
    ",github.com/cosmos/cosmos-sdk/x/upgrade/"
    "types\242\002\003CUX\252\002\026Cosmos.Upgrade.V1beta1\312\002\026C"
    "osmos\\Upgrade\\V1beta1\342\002\"Cosmos\\Upgrade\\V"
    "1beta1\\GPBMetadata\352\002\030Cosmos::Upgrade::V1"
    "beta1\310\341\036\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_deps[5] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto = {
    false,
    false,
    1137,
    descriptor_table_protodef_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto,
    "cosmos/upgrade/v1beta1/upgrade.proto",
    &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_once,
    descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_deps,
    5,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto::offsets,
    file_level_metadata_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto,
    file_level_enum_descriptors_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto,
    file_level_service_descriptors_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_getter() {
  return &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto(&descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto);
namespace cosmos {
namespace upgrade {
namespace v1beta1 {
// ===================================================================

class Plan::_Internal {
 public:
  using HasBits = decltype(std::declval<Plan>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Plan, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Plan* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& upgraded_client_state(const Plan* msg);
  static void set_has_upgraded_client_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Plan::_Internal::time(const Plan* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
Plan::_Internal::upgraded_client_state(const Plan* msg) {
  return *msg->_impl_.upgraded_client_state_;
}
void Plan::clear_time() {
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Plan::clear_upgraded_client_state() {
  if (_impl_.upgraded_client_state_ != nullptr) _impl_.upgraded_client_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Plan::Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.upgrade.v1beta1.Plan)
}
Plan::Plan(const Plan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Plan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.info_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.upgraded_client_state_){nullptr}
    , decltype(_impl_.height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.info_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.upgraded_client_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.upgraded_client_state_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:cosmos.upgrade.v1beta1.Plan)
}

inline void Plan::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.info_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.upgraded_client_state_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.info_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:cosmos.upgrade.v1beta1.Plan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Plan::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.info_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.upgraded_client_state_;
}

void Plan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.upgrade.v1beta1.Plan)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.upgraded_client_state_ != nullptr);
      _impl_.upgraded_client_state_->Clear();
    }
  }
  _impl_.height_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.upgrade.v1beta1.Plan.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 2 [json_name = "time", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string info = 4 [json_name = "info"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.upgrade.v1beta1.Plan.info"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any upgraded_client_state = 5 [json_name = "upgradedClientState", deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgraded_client_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Plan::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.upgrade.v1beta1.Plan)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.upgrade.v1beta1.Plan.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp time = 2 [json_name = "time", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // int64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_height(), target);
  }

  // string info = 4 [json_name = "info"];
  if (!this->_internal_info().empty()) {
    const std::string& _s = this->_internal_info();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.upgrade.v1beta1.Plan.info");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .google.protobuf.Any upgraded_client_state = 5 [json_name = "upgradedClientState", deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::upgraded_client_state(this),
        _Internal::upgraded_client_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.upgrade.v1beta1.Plan)
  return target;
}

::size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.upgrade.v1beta1.Plan)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string info = 4 [json_name = "info"];
  if (!this->_internal_info().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_info());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp time = 2 [json_name = "time", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_);
    }

    // .google.protobuf.Any upgraded_client_state = 5 [json_name = "upgradedClientState", deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upgraded_client_state_);
    }

  }
  // int64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Plan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Plan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Plan::GetClassData() const { return &_class_data_; }


void Plan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Plan*>(&to_msg);
  auto& from = static_cast<const Plan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.upgrade.v1beta1.Plan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_upgraded_client_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_upgraded_client_state());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.upgrade.v1beta1.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.info_, lhs_arena,
                                       &other->_impl_.info_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plan, _impl_.height_)
      + sizeof(Plan::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Plan, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Plan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_getter, &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_once,
      file_level_metadata_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto[0]);
}
// ===================================================================

class SoftwareUpgradeProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftwareUpgradeProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SoftwareUpgradeProposal, _impl_._has_bits_);
  static const ::cosmos::upgrade::v1beta1::Plan& plan(const SoftwareUpgradeProposal* msg);
  static void set_has_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::upgrade::v1beta1::Plan&
SoftwareUpgradeProposal::_Internal::plan(const SoftwareUpgradeProposal* msg) {
  return *msg->_impl_.plan_;
}
SoftwareUpgradeProposal::SoftwareUpgradeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
}
SoftwareUpgradeProposal::SoftwareUpgradeProposal(const SoftwareUpgradeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SoftwareUpgradeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.plan_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.plan_ = new ::cosmos::upgrade::v1beta1::Plan(*from._impl_.plan_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
}

inline void SoftwareUpgradeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.plan_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SoftwareUpgradeProposal::~SoftwareUpgradeProposal() {
  // @@protoc_insertion_point(destructor:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SoftwareUpgradeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.plan_;
}

void SoftwareUpgradeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SoftwareUpgradeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.plan_ != nullptr);
    _impl_.plan_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareUpgradeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SoftwareUpgradeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::plan(this),
        _Internal::plan(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
  return target;
}

::size_t SoftwareUpgradeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plan_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SoftwareUpgradeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SoftwareUpgradeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SoftwareUpgradeProposal::GetClassData() const { return &_class_data_; }


void SoftwareUpgradeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SoftwareUpgradeProposal*>(&to_msg);
  auto& from = static_cast<const SoftwareUpgradeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_plan()->::cosmos::upgrade::v1beta1::Plan::MergeFrom(
        from._internal_plan());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SoftwareUpgradeProposal::CopyFrom(const SoftwareUpgradeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareUpgradeProposal::IsInitialized() const {
  return true;
}

void SoftwareUpgradeProposal::InternalSwap(SoftwareUpgradeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  swap(_impl_.plan_, other->_impl_.plan_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareUpgradeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_getter, &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_once,
      file_level_metadata_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto[1]);
}
// ===================================================================

class CancelSoftwareUpgradeProposal::_Internal {
 public:
};

CancelSoftwareUpgradeProposal::CancelSoftwareUpgradeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
}
CancelSoftwareUpgradeProposal::CancelSoftwareUpgradeProposal(const CancelSoftwareUpgradeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelSoftwareUpgradeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
}

inline void CancelSoftwareUpgradeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelSoftwareUpgradeProposal::~CancelSoftwareUpgradeProposal() {
  // @@protoc_insertion_point(destructor:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelSoftwareUpgradeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
}

void CancelSoftwareUpgradeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelSoftwareUpgradeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelSoftwareUpgradeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CancelSoftwareUpgradeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
  return target;
}

::size_t CancelSoftwareUpgradeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelSoftwareUpgradeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelSoftwareUpgradeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelSoftwareUpgradeProposal::GetClassData() const { return &_class_data_; }


void CancelSoftwareUpgradeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelSoftwareUpgradeProposal*>(&to_msg);
  auto& from = static_cast<const CancelSoftwareUpgradeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelSoftwareUpgradeProposal::CopyFrom(const CancelSoftwareUpgradeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelSoftwareUpgradeProposal::IsInitialized() const {
  return true;
}

void CancelSoftwareUpgradeProposal::InternalSwap(CancelSoftwareUpgradeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelSoftwareUpgradeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_getter, &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_once,
      file_level_metadata_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto[2]);
}
// ===================================================================

class ModuleVersion::_Internal {
 public:
};

ModuleVersion::ModuleVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.upgrade.v1beta1.ModuleVersion)
}
ModuleVersion::ModuleVersion(const ModuleVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:cosmos.upgrade.v1beta1.ModuleVersion)
}

inline void ModuleVersion::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.version_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleVersion::~ModuleVersion() {
  // @@protoc_insertion_point(destructor:cosmos.upgrade.v1beta1.ModuleVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleVersion::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ModuleVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.upgrade.v1beta1.ModuleVersion)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.version_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.upgrade.v1beta1.ModuleVersion.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 version = 2 [json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModuleVersion::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.upgrade.v1beta1.ModuleVersion)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.upgrade.v1beta1.ModuleVersion.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 version = 2 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.upgrade.v1beta1.ModuleVersion)
  return target;
}

::size_t ModuleVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.upgrade.v1beta1.ModuleVersion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // uint64 version = 2 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleVersion::GetClassData() const { return &_class_data_; }


void ModuleVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleVersion*>(&to_msg);
  auto& from = static_cast<const ModuleVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.upgrade.v1beta1.ModuleVersion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleVersion::CopyFrom(const ModuleVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.upgrade.v1beta1.ModuleVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleVersion::IsInitialized() const {
  return true;
}

void ModuleVersion::InternalSwap(ModuleVersion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_getter, &descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_once,
      file_level_metadata_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::upgrade::v1beta1::Plan*
Arena::CreateMaybeMessage< ::cosmos::upgrade::v1beta1::Plan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::upgrade::v1beta1::Plan >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal*
Arena::CreateMaybeMessage< ::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal*
Arena::CreateMaybeMessage< ::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::upgrade::v1beta1::ModuleVersion*
Arena::CreateMaybeMessage< ::cosmos::upgrade::v1beta1::ModuleVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::upgrade::v1beta1::ModuleVersion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/upgrade/v1beta1/upgrade.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto;
namespace cosmos {
namespace upgrade {
namespace v1beta1 {
class CancelSoftwareUpgradeProposal;
struct CancelSoftwareUpgradeProposalDefaultTypeInternal;
extern CancelSoftwareUpgradeProposalDefaultTypeInternal _CancelSoftwareUpgradeProposal_default_instance_;
class ModuleVersion;
struct ModuleVersionDefaultTypeInternal;
extern ModuleVersionDefaultTypeInternal _ModuleVersion_default_instance_;
class Plan;
struct PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class SoftwareUpgradeProposal;
struct SoftwareUpgradeProposalDefaultTypeInternal;
extern SoftwareUpgradeProposalDefaultTypeInternal _SoftwareUpgradeProposal_default_instance_;
}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::CancelSoftwareUpgradeProposal>(Arena*);
template <>
::cosmos::upgrade::v1beta1::ModuleVersion* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::ModuleVersion>(Arena*);
template <>
::cosmos::upgrade::v1beta1::Plan* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::Plan>(Arena*);
template <>
::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::SoftwareUpgradeProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace upgrade {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Plan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {}
  ~Plan() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Plan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Plan(const Plan& from);
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plan& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }
  inline void Swap(Plan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Plan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Plan& from) {
    Plan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.Plan";
  }
  protected:
  explicit Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInfoFieldNumber = 4,
    kTimeFieldNumber = 2,
    kUpgradedClientStateFieldNumber = 5,
    kHeightFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string info = 4 [json_name = "info"];
  void clear_info() ;
  const std::string& info() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* ptr);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // .google.protobuf.Timestamp time = 2 [json_name = "time", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  [[deprecated]]  bool has_time() const;
  [[deprecated]]  void clear_time() ;
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  [[deprecated]] PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  [[deprecated]] void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  [[deprecated]] void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .google.protobuf.Any upgraded_client_state = 5 [json_name = "upgradedClientState", deprecated = true];
  [[deprecated]]  bool has_upgraded_client_state() const;
  [[deprecated]]  void clear_upgraded_client_state() ;
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::Any& upgraded_client_state() const;
  [[deprecated]] PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_upgraded_client_state();
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::Any* mutable_upgraded_client_state();
  [[deprecated]] void set_allocated_upgraded_client_state(::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_upgraded_client_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_upgraded_client_state();
  public:
  [[deprecated]] void unsafe_arena_set_allocated_upgraded_client_state(
      ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_upgraded_client_state();
  // int64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.Plan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state_;
    ::int64_t height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto;
};// -------------------------------------------------------------------

class SoftwareUpgradeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal) */ {
 public:
  inline SoftwareUpgradeProposal() : SoftwareUpgradeProposal(nullptr) {}
  ~SoftwareUpgradeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SoftwareUpgradeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SoftwareUpgradeProposal(const SoftwareUpgradeProposal& from);
  SoftwareUpgradeProposal(SoftwareUpgradeProposal&& from) noexcept
    : SoftwareUpgradeProposal() {
    *this = ::std::move(from);
  }

  inline SoftwareUpgradeProposal& operator=(const SoftwareUpgradeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftwareUpgradeProposal& operator=(SoftwareUpgradeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftwareUpgradeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftwareUpgradeProposal* internal_default_instance() {
    return reinterpret_cast<const SoftwareUpgradeProposal*>(
               &_SoftwareUpgradeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoftwareUpgradeProposal& a, SoftwareUpgradeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftwareUpgradeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftwareUpgradeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftwareUpgradeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoftwareUpgradeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SoftwareUpgradeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SoftwareUpgradeProposal& from) {
    SoftwareUpgradeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftwareUpgradeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.SoftwareUpgradeProposal";
  }
  protected:
  explicit SoftwareUpgradeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kPlanFieldNumber = 3,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_plan() const;
  void clear_plan() ;
  const ::cosmos::upgrade::v1beta1::Plan& plan() const;
  PROTOBUF_NODISCARD ::cosmos::upgrade::v1beta1::Plan* release_plan();
  ::cosmos::upgrade::v1beta1::Plan* mutable_plan();
  void set_allocated_plan(::cosmos::upgrade::v1beta1::Plan* plan);
  private:
  const ::cosmos::upgrade::v1beta1::Plan& _internal_plan() const;
  ::cosmos::upgrade::v1beta1::Plan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::cosmos::upgrade::v1beta1::Plan* plan);
  ::cosmos::upgrade::v1beta1::Plan* unsafe_arena_release_plan();
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::cosmos::upgrade::v1beta1::Plan* plan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto;
};// -------------------------------------------------------------------

class CancelSoftwareUpgradeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal) */ {
 public:
  inline CancelSoftwareUpgradeProposal() : CancelSoftwareUpgradeProposal(nullptr) {}
  ~CancelSoftwareUpgradeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CancelSoftwareUpgradeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelSoftwareUpgradeProposal(const CancelSoftwareUpgradeProposal& from);
  CancelSoftwareUpgradeProposal(CancelSoftwareUpgradeProposal&& from) noexcept
    : CancelSoftwareUpgradeProposal() {
    *this = ::std::move(from);
  }

  inline CancelSoftwareUpgradeProposal& operator=(const CancelSoftwareUpgradeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelSoftwareUpgradeProposal& operator=(CancelSoftwareUpgradeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelSoftwareUpgradeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelSoftwareUpgradeProposal* internal_default_instance() {
    return reinterpret_cast<const CancelSoftwareUpgradeProposal*>(
               &_CancelSoftwareUpgradeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CancelSoftwareUpgradeProposal& a, CancelSoftwareUpgradeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelSoftwareUpgradeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelSoftwareUpgradeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelSoftwareUpgradeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelSoftwareUpgradeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelSoftwareUpgradeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CancelSoftwareUpgradeProposal& from) {
    CancelSoftwareUpgradeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelSoftwareUpgradeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal";
  }
  protected:
  explicit CancelSoftwareUpgradeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto;
};// -------------------------------------------------------------------

class ModuleVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.ModuleVersion) */ {
 public:
  inline ModuleVersion() : ModuleVersion(nullptr) {}
  ~ModuleVersion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleVersion(const ModuleVersion& from);
  ModuleVersion(ModuleVersion&& from) noexcept
    : ModuleVersion() {
    *this = ::std::move(from);
  }

  inline ModuleVersion& operator=(const ModuleVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleVersion& operator=(ModuleVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleVersion* internal_default_instance() {
    return reinterpret_cast<const ModuleVersion*>(
               &_ModuleVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModuleVersion& a, ModuleVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleVersion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModuleVersion& from) {
    ModuleVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.ModuleVersion";
  }
  protected:
  explicit ModuleVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint64 version = 2 [json_name = "version"];
  void clear_version() ;
  ::uint64_t version() const;
  void set_version(::uint64_t value);

  private:
  ::uint64_t _internal_version() const;
  void _internal_set_version(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.ModuleVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Plan

// string name = 1 [json_name = "name"];
inline void Plan::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Plan::name() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.Plan.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plan::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.Plan.name)
}
inline std::string* Plan::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.Plan.name)
  return _s;
}
inline const std::string& Plan::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Plan::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Plan::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Plan::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.Plan.name)
  return _impl_.name_.Release();
}
inline void Plan::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.Plan.name)
}

// .google.protobuf.Timestamp time = 2 [json_name = "time", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool Plan::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Plan::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Plan::time() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.Plan.time)
  return _internal_time();
}
inline void Plan::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.upgrade.v1beta1.Plan.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Plan::release_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Plan::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.Plan.time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Plan::_internal_mutable_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Plan::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.Plan.time)
  return _msg;
}
inline void Plan::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.Plan.time)
}

// int64 height = 3 [json_name = "height"];
inline void Plan::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t Plan::height() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.Plan.height)
  return _internal_height();
}
inline void Plan::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.Plan.height)
}
inline ::int64_t Plan::_internal_height() const {
  return _impl_.height_;
}
inline void Plan::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// string info = 4 [json_name = "info"];
inline void Plan::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& Plan::info() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.Plan.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Plan::set_info(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.Plan.info)
}
inline std::string* Plan::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.Plan.info)
  return _s;
}
inline const std::string& Plan::_internal_info() const {
  return _impl_.info_.Get();
}
inline void Plan::_internal_set_info(const std::string& value) {
  ;


  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* Plan::_internal_mutable_info() {
  ;
  return _impl_.info_.Mutable( GetArenaForAllocation());
}
inline std::string* Plan::release_info() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.Plan.info)
  return _impl_.info_.Release();
}
inline void Plan::set_allocated_info(std::string* value) {
  _impl_.info_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.info_.IsDefault()) {
          _impl_.info_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.Plan.info)
}

// .google.protobuf.Any upgraded_client_state = 5 [json_name = "upgradedClientState", deprecated = true];
inline bool Plan::has_upgraded_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upgraded_client_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Plan::_internal_upgraded_client_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.upgraded_client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Plan::upgraded_client_state() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.Plan.upgraded_client_state)
  return _internal_upgraded_client_state();
}
inline void Plan::unsafe_arena_set_allocated_upgraded_client_state(
    ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgraded_client_state_);
  }
  _impl_.upgraded_client_state_ = upgraded_client_state;
  if (upgraded_client_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.upgrade.v1beta1.Plan.upgraded_client_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Plan::release_upgraded_client_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.upgraded_client_state_;
  _impl_.upgraded_client_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Plan::unsafe_arena_release_upgraded_client_state() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.Plan.upgraded_client_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.upgraded_client_state_;
  _impl_.upgraded_client_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Plan::_internal_mutable_upgraded_client_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.upgraded_client_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.upgraded_client_state_ = p;
  }
  return _impl_.upgraded_client_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Plan::mutable_upgraded_client_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_upgraded_client_state();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.Plan.upgraded_client_state)
  return _msg;
}
inline void Plan::set_allocated_upgraded_client_state(::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgraded_client_state_);
  }
  if (upgraded_client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgraded_client_state));
    if (message_arena != submessage_arena) {
      upgraded_client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgraded_client_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.upgraded_client_state_ = upgraded_client_state;
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.Plan.upgraded_client_state)
}

// -------------------------------------------------------------------

// SoftwareUpgradeProposal

// string title = 1 [json_name = "title"];
inline void SoftwareUpgradeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SoftwareUpgradeProposal::title() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoftwareUpgradeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.title)
}
inline std::string* SoftwareUpgradeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.title)
  return _s;
}
inline const std::string& SoftwareUpgradeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SoftwareUpgradeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SoftwareUpgradeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* SoftwareUpgradeProposal::release_title() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.title)
  return _impl_.title_.Release();
}
inline void SoftwareUpgradeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void SoftwareUpgradeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& SoftwareUpgradeProposal::description() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoftwareUpgradeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.description)
}
inline std::string* SoftwareUpgradeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.description)
  return _s;
}
inline const std::string& SoftwareUpgradeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SoftwareUpgradeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SoftwareUpgradeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* SoftwareUpgradeProposal::release_description() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.description)
  return _impl_.description_.Release();
}
inline void SoftwareUpgradeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.description)
}

// .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool SoftwareUpgradeProposal::has_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plan_ != nullptr);
  return value;
}
inline void SoftwareUpgradeProposal::clear_plan() {
  if (_impl_.plan_ != nullptr) _impl_.plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::upgrade::v1beta1::Plan& SoftwareUpgradeProposal::_internal_plan() const {
  const ::cosmos::upgrade::v1beta1::Plan* p = _impl_.plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::upgrade::v1beta1::Plan&>(
      ::cosmos::upgrade::v1beta1::_Plan_default_instance_);
}
inline const ::cosmos::upgrade::v1beta1::Plan& SoftwareUpgradeProposal::plan() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.plan)
  return _internal_plan();
}
inline void SoftwareUpgradeProposal::unsafe_arena_set_allocated_plan(
    ::cosmos::upgrade::v1beta1::Plan* plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plan_);
  }
  _impl_.plan_ = plan;
  if (plan) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.plan)
}
inline ::cosmos::upgrade::v1beta1::Plan* SoftwareUpgradeProposal::release_plan() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::upgrade::v1beta1::Plan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::upgrade::v1beta1::Plan* SoftwareUpgradeProposal::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.plan)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::upgrade::v1beta1::Plan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
  return temp;
}
inline ::cosmos::upgrade::v1beta1::Plan* SoftwareUpgradeProposal::_internal_mutable_plan() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::upgrade::v1beta1::Plan>(GetArenaForAllocation());
    _impl_.plan_ = p;
  }
  return _impl_.plan_;
}
inline ::cosmos::upgrade::v1beta1::Plan* SoftwareUpgradeProposal::mutable_plan() {
  ::cosmos::upgrade::v1beta1::Plan* _msg = _internal_mutable_plan();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.plan)
  return _msg;
}
inline void SoftwareUpgradeProposal::set_allocated_plan(::cosmos::upgrade::v1beta1::Plan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.plan_;
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(plan);
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.plan)
}

// -------------------------------------------------------------------

// CancelSoftwareUpgradeProposal

// string title = 1 [json_name = "title"];
inline void CancelSoftwareUpgradeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& CancelSoftwareUpgradeProposal::title() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelSoftwareUpgradeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.title)
}
inline std::string* CancelSoftwareUpgradeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.title)
  return _s;
}
inline const std::string& CancelSoftwareUpgradeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void CancelSoftwareUpgradeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelSoftwareUpgradeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* CancelSoftwareUpgradeProposal::release_title() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.title)
  return _impl_.title_.Release();
}
inline void CancelSoftwareUpgradeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void CancelSoftwareUpgradeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& CancelSoftwareUpgradeProposal::description() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CancelSoftwareUpgradeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.description)
}
inline std::string* CancelSoftwareUpgradeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.description)
  return _s;
}
inline const std::string& CancelSoftwareUpgradeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void CancelSoftwareUpgradeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelSoftwareUpgradeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* CancelSoftwareUpgradeProposal::release_description() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.description)
  return _impl_.description_.Release();
}
inline void CancelSoftwareUpgradeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.description)
}

// -------------------------------------------------------------------

// ModuleVersion

// string name = 1 [json_name = "name"];
inline void ModuleVersion::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ModuleVersion::name() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.ModuleVersion.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModuleVersion::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.ModuleVersion.name)
}
inline std::string* ModuleVersion::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.ModuleVersion.name)
  return _s;
}
inline const std::string& ModuleVersion::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModuleVersion::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleVersion::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ModuleVersion::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.ModuleVersion.name)
  return _impl_.name_.Release();
}
inline void ModuleVersion::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.ModuleVersion.name)
}

// uint64 version = 2 [json_name = "version"];
inline void ModuleVersion::clear_version() {
  _impl_.version_ = ::uint64_t{0u};
}
inline ::uint64_t ModuleVersion::version() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.ModuleVersion.version)
  return _internal_version();
}
inline void ModuleVersion::set_version(::uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.ModuleVersion.version)
}
inline ::uint64_t ModuleVersion::_internal_version() const {
  return _impl_.version_;
}
inline void ModuleVersion::_internal_set_version(::uint64_t value) {
  ;
  _impl_.version_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto_2epb_2eh

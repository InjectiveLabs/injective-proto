// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/upgrade/v1beta1/query.proto
#ifndef GRPC_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/upgrade/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace upgrade {
namespace v1beta1 {

// Query defines the gRPC upgrade querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.upgrade.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CurrentPlan queries the current upgrade plan.
    virtual ::grpc::Status CurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>> AsyncCurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>>(AsyncCurrentPlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>> PrepareAsyncCurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>>(PrepareAsyncCurrentPlanRaw(context, request, cq));
    }
    // AppliedPlan queries a previously applied upgrade plan by its name.
    virtual ::grpc::Status AppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>> AsyncAppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>>(AsyncAppliedPlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>> PrepareAsyncAppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>>(PrepareAsyncAppliedPlanRaw(context, request, cq));
    }
    // UpgradedConsensusState queries the consensus state that will serve
    // as a trusted kernel for the next version of this chain. It will only be
    // stored at the last height of this chain.
    // UpgradedConsensusState RPC not supported with legacy querier
    // This rpc is deprecated now that IBC has its own replacement
    // (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
    virtual ::grpc::Status UpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>> AsyncUpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>>(AsyncUpgradedConsensusStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>> PrepareAsyncUpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>>(PrepareAsyncUpgradedConsensusStateRaw(context, request, cq));
    }
    // ModuleVersions queries the list of module versions from state.
    //
    // Since: cosmos-sdk 0.43
    virtual ::grpc::Status ModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>> AsyncModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>>(AsyncModuleVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>> PrepareAsyncModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>>(PrepareAsyncModuleVersionsRaw(context, request, cq));
    }
    // Returns the account with authority to conduct upgrades
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status Authority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>> AsyncAuthority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>>(AsyncAuthorityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>> PrepareAsyncAuthority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>>(PrepareAsyncAuthorityRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // CurrentPlan queries the current upgrade plan.
      virtual void CurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AppliedPlan queries a previously applied upgrade plan by its name.
      virtual void AppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpgradedConsensusState queries the consensus state that will serve
      // as a trusted kernel for the next version of this chain. It will only be
      // stored at the last height of this chain.
      // UpgradedConsensusState RPC not supported with legacy querier
      // This rpc is deprecated now that IBC has its own replacement
      // (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
      virtual void UpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* request, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* request, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ModuleVersions queries the list of module versions from state.
      //
      // Since: cosmos-sdk 0.43
      virtual void ModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* request, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* request, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns the account with authority to conduct upgrades
      //
      // Since: cosmos-sdk 0.46
      virtual void Authority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* request, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Authority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* request, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>* AsyncCurrentPlanRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>* PrepareAsyncCurrentPlanRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>* AsyncAppliedPlanRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>* PrepareAsyncAppliedPlanRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>* AsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>* PrepareAsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>* AsyncModuleVersionsRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>* PrepareAsyncModuleVersionsRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>* AsyncAuthorityRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>* PrepareAsyncAuthorityRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>> AsyncCurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>>(AsyncCurrentPlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>> PrepareAsyncCurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>>(PrepareAsyncCurrentPlanRaw(context, request, cq));
    }
    ::grpc::Status AppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>> AsyncAppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>>(AsyncAppliedPlanRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>> PrepareAsyncAppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>>(PrepareAsyncAppliedPlanRaw(context, request, cq));
    }
    ::grpc::Status UpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>> AsyncUpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>>(AsyncUpgradedConsensusStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>> PrepareAsyncUpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>>(PrepareAsyncUpgradedConsensusStateRaw(context, request, cq));
    }
    ::grpc::Status ModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>> AsyncModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>>(AsyncModuleVersionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>> PrepareAsyncModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>>(PrepareAsyncModuleVersionsRaw(context, request, cq));
    }
    ::grpc::Status Authority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>> AsyncAuthority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>>(AsyncAuthorityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>> PrepareAsyncAuthority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>>(PrepareAsyncAuthorityRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* response, std::function<void(::grpc::Status)>) override;
      void CurrentPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* response, std::function<void(::grpc::Status)>) override;
      void AppliedPlan(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* request, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpgradedConsensusState(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* request, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* request, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* response, std::function<void(::grpc::Status)>) override;
      void ModuleVersions(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* request, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Authority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* request, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* response, std::function<void(::grpc::Status)>) override;
      void Authority(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* request, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>* AsyncCurrentPlanRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>* PrepareAsyncCurrentPlanRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>* AsyncAppliedPlanRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>* PrepareAsyncAppliedPlanRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>* AsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>* PrepareAsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>* AsyncModuleVersionsRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>* PrepareAsyncModuleVersionsRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>* AsyncAuthorityRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>* PrepareAsyncAuthorityRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CurrentPlan_;
    const ::grpc::internal::RpcMethod rpcmethod_AppliedPlan_;
    const ::grpc::internal::RpcMethod rpcmethod_UpgradedConsensusState_;
    const ::grpc::internal::RpcMethod rpcmethod_ModuleVersions_;
    const ::grpc::internal::RpcMethod rpcmethod_Authority_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CurrentPlan queries the current upgrade plan.
    virtual ::grpc::Status CurrentPlan(::grpc::ServerContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* response);
    // AppliedPlan queries a previously applied upgrade plan by its name.
    virtual ::grpc::Status AppliedPlan(::grpc::ServerContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* response);
    // UpgradedConsensusState queries the consensus state that will serve
    // as a trusted kernel for the next version of this chain. It will only be
    // stored at the last height of this chain.
    // UpgradedConsensusState RPC not supported with legacy querier
    // This rpc is deprecated now that IBC has its own replacement
    // (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
    virtual ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* request, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* response);
    // ModuleVersions queries the list of module versions from state.
    //
    // Since: cosmos-sdk 0.43
    virtual ::grpc::Status ModuleVersions(::grpc::ServerContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* request, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* response);
    // Returns the account with authority to conduct upgrades
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status Authority(::grpc::ServerContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* request, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CurrentPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CurrentPlan() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CurrentPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurrentPlan(::grpc::ServerContext* context, ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppliedPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AppliedPlan() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AppliedPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppliedPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppliedPlan(::grpc::ServerContext* context, ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpgradedConsensusState(::grpc::ServerContext* context, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModuleVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModuleVersions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ModuleVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleVersions(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModuleVersions(::grpc::ServerContext* context, ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Authority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Authority() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Authority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authority(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthority(::grpc::ServerContext* context, ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CurrentPlan<WithAsyncMethod_AppliedPlan<WithAsyncMethod_UpgradedConsensusState<WithAsyncMethod_ModuleVersions<WithAsyncMethod_Authority<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CurrentPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CurrentPlan() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* response) { return this->CurrentPlan(context, request, response); }));}
    void SetMessageAllocatorFor_CurrentPlan(
        ::grpc::MessageAllocator< ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CurrentPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurrentPlan(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AppliedPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AppliedPlan() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* request, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* response) { return this->AppliedPlan(context, request, response); }));}
    void SetMessageAllocatorFor_AppliedPlan(
        ::grpc::MessageAllocator< ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AppliedPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppliedPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppliedPlan(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* request, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* response) { return this->UpgradedConsensusState(context, request, response); }));}
    void SetMessageAllocatorFor_UpgradedConsensusState(
        ::grpc::MessageAllocator< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpgradedConsensusState(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModuleVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModuleVersions() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* request, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* response) { return this->ModuleVersions(context, request, response); }));}
    void SetMessageAllocatorFor_ModuleVersions(
        ::grpc::MessageAllocator< ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModuleVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleVersions(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModuleVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Authority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Authority() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryAuthorityRequest, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* request, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* response) { return this->Authority(context, request, response); }));}
    void SetMessageAllocatorFor_Authority(
        ::grpc::MessageAllocator< ::cosmos::upgrade::v1beta1::QueryAuthorityRequest, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::QueryAuthorityRequest, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Authority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authority(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Authority(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CurrentPlan<WithCallbackMethod_AppliedPlan<WithCallbackMethod_UpgradedConsensusState<WithCallbackMethod_ModuleVersions<WithCallbackMethod_Authority<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CurrentPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CurrentPlan() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CurrentPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppliedPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AppliedPlan() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AppliedPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppliedPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModuleVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModuleVersions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ModuleVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleVersions(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Authority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Authority() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Authority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authority(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CurrentPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CurrentPlan() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CurrentPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCurrentPlan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AppliedPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AppliedPlan() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AppliedPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppliedPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppliedPlan(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpgradedConsensusState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModuleVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModuleVersions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ModuleVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleVersions(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModuleVersions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Authority() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Authority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authority(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthority(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CurrentPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CurrentPlan() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CurrentPlan(context, request, response); }));
    }
    ~WithRawCallbackMethod_CurrentPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CurrentPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CurrentPlan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AppliedPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AppliedPlan() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AppliedPlan(context, request, response); }));
    }
    ~WithRawCallbackMethod_AppliedPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppliedPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AppliedPlan(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpgradedConsensusState(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpgradedConsensusState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModuleVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModuleVersions() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModuleVersions(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModuleVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleVersions(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModuleVersions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Authority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Authority() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Authority(context, request, response); }));
    }
    ~WithRawCallbackMethod_Authority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authority(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Authority(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CurrentPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CurrentPlan() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>* streamer) {
                       return this->StreamedCurrentPlan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CurrentPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CurrentPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCurrentPlan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest,::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppliedPlan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AppliedPlan() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>* streamer) {
                       return this->StreamedAppliedPlan(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AppliedPlan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppliedPlan(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppliedPlan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest,::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>* streamer) {
                       return this->StreamedUpgradedConsensusState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpgradedConsensusState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest,::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModuleVersions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModuleVersions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>* streamer) {
                       return this->StreamedModuleVersions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModuleVersions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModuleVersions(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModuleVersions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest,::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authority : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Authority() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::upgrade::v1beta1::QueryAuthorityRequest, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::upgrade::v1beta1::QueryAuthorityRequest, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse>* streamer) {
                       return this->StreamedAuthority(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Authority() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authority(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::QueryAuthorityRequest* /*request*/, ::cosmos::upgrade::v1beta1::QueryAuthorityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthority(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::upgrade::v1beta1::QueryAuthorityRequest,::cosmos::upgrade::v1beta1::QueryAuthorityResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CurrentPlan<WithStreamedUnaryMethod_AppliedPlan<WithStreamedUnaryMethod_UpgradedConsensusState<WithStreamedUnaryMethod_ModuleVersions<WithStreamedUnaryMethod_Authority<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CurrentPlan<WithStreamedUnaryMethod_AppliedPlan<WithStreamedUnaryMethod_UpgradedConsensusState<WithStreamedUnaryMethod_ModuleVersions<WithStreamedUnaryMethod_Authority<Service > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos


#endif  // GRPC_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto__INCLUDED

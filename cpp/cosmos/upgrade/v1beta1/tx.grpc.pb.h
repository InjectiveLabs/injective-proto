// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/upgrade/v1beta1/tx.proto
// Original file comments:
// Since: cosmos-sdk 0.46
#ifndef GRPC_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto__INCLUDED

#include "cosmos/upgrade/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace upgrade {
namespace v1beta1 {

// Msg defines the upgrade Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.upgrade.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // SoftwareUpgrade is a governance operation for initiating a software upgrade.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status SoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>> AsyncSoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>>(AsyncSoftwareUpgradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>> PrepareAsyncSoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>>(PrepareAsyncSoftwareUpgradeRaw(context, request, cq));
    }
    // CancelUpgrade is a governance operation for cancelling a previously
    // approved software upgrade.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status CancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>> AsyncCancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>>(AsyncCancelUpgradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>> PrepareAsyncCancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>>(PrepareAsyncCancelUpgradeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // SoftwareUpgrade is a governance operation for initiating a software upgrade.
      //
      // Since: cosmos-sdk 0.46
      virtual void SoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* request, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* request, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CancelUpgrade is a governance operation for cancelling a previously
      // approved software upgrade.
      //
      // Since: cosmos-sdk 0.46
      virtual void CancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* request, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* request, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>* AsyncSoftwareUpgradeRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>* PrepareAsyncSoftwareUpgradeRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>* AsyncCancelUpgradeRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>* PrepareAsyncCancelUpgradeRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>> AsyncSoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>>(AsyncSoftwareUpgradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>> PrepareAsyncSoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>>(PrepareAsyncSoftwareUpgradeRaw(context, request, cq));
    }
    ::grpc::Status CancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>> AsyncCancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>>(AsyncCancelUpgradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>> PrepareAsyncCancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>>(PrepareAsyncCancelUpgradeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* request, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* response, std::function<void(::grpc::Status)>) override;
      void SoftwareUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* request, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* request, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelUpgrade(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* request, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>* AsyncSoftwareUpgradeRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>* PrepareAsyncSoftwareUpgradeRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>* AsyncCancelUpgradeRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>* PrepareAsyncCancelUpgradeRaw(::grpc::ClientContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SoftwareUpgrade_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelUpgrade_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // SoftwareUpgrade is a governance operation for initiating a software upgrade.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status SoftwareUpgrade(::grpc::ServerContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* request, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* response);
    // CancelUpgrade is a governance operation for cancelling a previously
    // approved software upgrade.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status CancelUpgrade(::grpc::ServerContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* request, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SoftwareUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SoftwareUpgrade() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SoftwareUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftwareUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSoftwareUpgrade(::grpc::ServerContext* context, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelUpgrade() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CancelUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelUpgrade(::grpc::ServerContext* context, ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SoftwareUpgrade<WithAsyncMethod_CancelUpgrade<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SoftwareUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SoftwareUpgrade() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* request, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* response) { return this->SoftwareUpgrade(context, request, response); }));}
    void SetMessageAllocatorFor_SoftwareUpgrade(
        ::grpc::MessageAllocator< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SoftwareUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftwareUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SoftwareUpgrade(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelUpgrade() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::MsgCancelUpgrade, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* request, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* response) { return this->CancelUpgrade(context, request, response); }));}
    void SetMessageAllocatorFor_CancelUpgrade(
        ::grpc::MessageAllocator< ::cosmos::upgrade::v1beta1::MsgCancelUpgrade, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::upgrade::v1beta1::MsgCancelUpgrade, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelUpgrade(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SoftwareUpgrade<WithCallbackMethod_CancelUpgrade<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SoftwareUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SoftwareUpgrade() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SoftwareUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftwareUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelUpgrade() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CancelUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SoftwareUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SoftwareUpgrade() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SoftwareUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftwareUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSoftwareUpgrade(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelUpgrade() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CancelUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelUpgrade(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SoftwareUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SoftwareUpgrade() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SoftwareUpgrade(context, request, response); }));
    }
    ~WithRawCallbackMethod_SoftwareUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SoftwareUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SoftwareUpgrade(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelUpgrade() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelUpgrade(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelUpgrade(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SoftwareUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SoftwareUpgrade() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>* streamer) {
                       return this->StreamedSoftwareUpgrade(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SoftwareUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SoftwareUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSoftwareUpgrade(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade,::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelUpgrade() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::upgrade::v1beta1::MsgCancelUpgrade, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::upgrade::v1beta1::MsgCancelUpgrade, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>* streamer) {
                       return this->StreamedCancelUpgrade(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelUpgrade(::grpc::ServerContext* /*context*/, const ::cosmos::upgrade::v1beta1::MsgCancelUpgrade* /*request*/, ::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelUpgrade(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::upgrade::v1beta1::MsgCancelUpgrade,::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SoftwareUpgrade<WithStreamedUnaryMethod_CancelUpgrade<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SoftwareUpgrade<WithStreamedUnaryMethod_CancelUpgrade<Service > > StreamedService;
};

}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos


#endif  // GRPC_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto__INCLUDED

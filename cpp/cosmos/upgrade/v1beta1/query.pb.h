// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/upgrade/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "cosmos/upgrade/v1beta1/upgrade.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace upgrade {
namespace v1beta1 {
class QueryAppliedPlanRequest;
struct QueryAppliedPlanRequestDefaultTypeInternal;
extern QueryAppliedPlanRequestDefaultTypeInternal _QueryAppliedPlanRequest_default_instance_;
class QueryAppliedPlanResponse;
struct QueryAppliedPlanResponseDefaultTypeInternal;
extern QueryAppliedPlanResponseDefaultTypeInternal _QueryAppliedPlanResponse_default_instance_;
class QueryAuthorityRequest;
struct QueryAuthorityRequestDefaultTypeInternal;
extern QueryAuthorityRequestDefaultTypeInternal _QueryAuthorityRequest_default_instance_;
class QueryAuthorityResponse;
struct QueryAuthorityResponseDefaultTypeInternal;
extern QueryAuthorityResponseDefaultTypeInternal _QueryAuthorityResponse_default_instance_;
class QueryCurrentPlanRequest;
struct QueryCurrentPlanRequestDefaultTypeInternal;
extern QueryCurrentPlanRequestDefaultTypeInternal _QueryCurrentPlanRequest_default_instance_;
class QueryCurrentPlanResponse;
struct QueryCurrentPlanResponseDefaultTypeInternal;
extern QueryCurrentPlanResponseDefaultTypeInternal _QueryCurrentPlanResponse_default_instance_;
class QueryModuleVersionsRequest;
struct QueryModuleVersionsRequestDefaultTypeInternal;
extern QueryModuleVersionsRequestDefaultTypeInternal _QueryModuleVersionsRequest_default_instance_;
class QueryModuleVersionsResponse;
struct QueryModuleVersionsResponseDefaultTypeInternal;
extern QueryModuleVersionsResponseDefaultTypeInternal _QueryModuleVersionsResponse_default_instance_;
class QueryUpgradedConsensusStateRequest;
struct QueryUpgradedConsensusStateRequestDefaultTypeInternal;
extern QueryUpgradedConsensusStateRequestDefaultTypeInternal _QueryUpgradedConsensusStateRequest_default_instance_;
class QueryUpgradedConsensusStateResponse;
struct QueryUpgradedConsensusStateResponseDefaultTypeInternal;
extern QueryUpgradedConsensusStateResponseDefaultTypeInternal _QueryUpgradedConsensusStateResponse_default_instance_;
}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryAppliedPlanRequest>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryAppliedPlanResponse>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryAuthorityRequest* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryAuthorityRequest>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryAuthorityResponse* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryAuthorityResponse>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryCurrentPlanRequest>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryCurrentPlanResponse>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryModuleVersionsRequest>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryModuleVersionsResponse>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateRequest>(Arena*);
template <>
::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::QueryUpgradedConsensusStateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace upgrade {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryCurrentPlanRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryCurrentPlanRequest) */ {
 public:
  inline QueryCurrentPlanRequest() : QueryCurrentPlanRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCurrentPlanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCurrentPlanRequest(const QueryCurrentPlanRequest& from);
  QueryCurrentPlanRequest(QueryCurrentPlanRequest&& from) noexcept
    : QueryCurrentPlanRequest() {
    *this = ::std::move(from);
  }

  inline QueryCurrentPlanRequest& operator=(const QueryCurrentPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCurrentPlanRequest& operator=(QueryCurrentPlanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCurrentPlanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCurrentPlanRequest* internal_default_instance() {
    return reinterpret_cast<const QueryCurrentPlanRequest*>(
               &_QueryCurrentPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryCurrentPlanRequest& a, QueryCurrentPlanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCurrentPlanRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCurrentPlanRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCurrentPlanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCurrentPlanRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryCurrentPlanRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryCurrentPlanRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryCurrentPlanRequest";
  }
  protected:
  explicit QueryCurrentPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryCurrentPlanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCurrentPlanResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryCurrentPlanResponse) */ {
 public:
  inline QueryCurrentPlanResponse() : QueryCurrentPlanResponse(nullptr) {}
  ~QueryCurrentPlanResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCurrentPlanResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCurrentPlanResponse(const QueryCurrentPlanResponse& from);
  QueryCurrentPlanResponse(QueryCurrentPlanResponse&& from) noexcept
    : QueryCurrentPlanResponse() {
    *this = ::std::move(from);
  }

  inline QueryCurrentPlanResponse& operator=(const QueryCurrentPlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCurrentPlanResponse& operator=(QueryCurrentPlanResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCurrentPlanResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCurrentPlanResponse* internal_default_instance() {
    return reinterpret_cast<const QueryCurrentPlanResponse*>(
               &_QueryCurrentPlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryCurrentPlanResponse& a, QueryCurrentPlanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCurrentPlanResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCurrentPlanResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCurrentPlanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCurrentPlanResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCurrentPlanResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCurrentPlanResponse& from) {
    QueryCurrentPlanResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCurrentPlanResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryCurrentPlanResponse";
  }
  protected:
  explicit QueryCurrentPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlanFieldNumber = 1,
  };
  // .cosmos.upgrade.v1beta1.Plan plan = 1 [json_name = "plan"];
  bool has_plan() const;
  void clear_plan() ;
  const ::cosmos::upgrade::v1beta1::Plan& plan() const;
  PROTOBUF_NODISCARD ::cosmos::upgrade::v1beta1::Plan* release_plan();
  ::cosmos::upgrade::v1beta1::Plan* mutable_plan();
  void set_allocated_plan(::cosmos::upgrade::v1beta1::Plan* plan);
  private:
  const ::cosmos::upgrade::v1beta1::Plan& _internal_plan() const;
  ::cosmos::upgrade::v1beta1::Plan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::cosmos::upgrade::v1beta1::Plan* plan);
  ::cosmos::upgrade::v1beta1::Plan* unsafe_arena_release_plan();
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryCurrentPlanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::upgrade::v1beta1::Plan* plan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAppliedPlanRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryAppliedPlanRequest) */ {
 public:
  inline QueryAppliedPlanRequest() : QueryAppliedPlanRequest(nullptr) {}
  ~QueryAppliedPlanRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAppliedPlanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAppliedPlanRequest(const QueryAppliedPlanRequest& from);
  QueryAppliedPlanRequest(QueryAppliedPlanRequest&& from) noexcept
    : QueryAppliedPlanRequest() {
    *this = ::std::move(from);
  }

  inline QueryAppliedPlanRequest& operator=(const QueryAppliedPlanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAppliedPlanRequest& operator=(QueryAppliedPlanRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAppliedPlanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAppliedPlanRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAppliedPlanRequest*>(
               &_QueryAppliedPlanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAppliedPlanRequest& a, QueryAppliedPlanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAppliedPlanRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAppliedPlanRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAppliedPlanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAppliedPlanRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAppliedPlanRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAppliedPlanRequest& from) {
    QueryAppliedPlanRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAppliedPlanRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryAppliedPlanRequest";
  }
  protected:
  explicit QueryAppliedPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryAppliedPlanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAppliedPlanResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryAppliedPlanResponse) */ {
 public:
  inline QueryAppliedPlanResponse() : QueryAppliedPlanResponse(nullptr) {}
  ~QueryAppliedPlanResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAppliedPlanResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAppliedPlanResponse(const QueryAppliedPlanResponse& from);
  QueryAppliedPlanResponse(QueryAppliedPlanResponse&& from) noexcept
    : QueryAppliedPlanResponse() {
    *this = ::std::move(from);
  }

  inline QueryAppliedPlanResponse& operator=(const QueryAppliedPlanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAppliedPlanResponse& operator=(QueryAppliedPlanResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAppliedPlanResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAppliedPlanResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAppliedPlanResponse*>(
               &_QueryAppliedPlanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryAppliedPlanResponse& a, QueryAppliedPlanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAppliedPlanResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAppliedPlanResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAppliedPlanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAppliedPlanResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAppliedPlanResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAppliedPlanResponse& from) {
    QueryAppliedPlanResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAppliedPlanResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryAppliedPlanResponse";
  }
  protected:
  explicit QueryAppliedPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryAppliedPlanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUpgradedConsensusStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest) */ {
 public:
  inline QueryUpgradedConsensusStateRequest() : QueryUpgradedConsensusStateRequest(nullptr) {}
  ~QueryUpgradedConsensusStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUpgradedConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUpgradedConsensusStateRequest(const QueryUpgradedConsensusStateRequest& from);
  QueryUpgradedConsensusStateRequest(QueryUpgradedConsensusStateRequest&& from) noexcept
    : QueryUpgradedConsensusStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryUpgradedConsensusStateRequest& operator=(const QueryUpgradedConsensusStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUpgradedConsensusStateRequest& operator=(QueryUpgradedConsensusStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUpgradedConsensusStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUpgradedConsensusStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUpgradedConsensusStateRequest*>(
               &_QueryUpgradedConsensusStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryUpgradedConsensusStateRequest& a, QueryUpgradedConsensusStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUpgradedConsensusStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUpgradedConsensusStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUpgradedConsensusStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUpgradedConsensusStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUpgradedConsensusStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUpgradedConsensusStateRequest& from) {
    QueryUpgradedConsensusStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUpgradedConsensusStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest";
  }
  protected:
  explicit QueryUpgradedConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastHeightFieldNumber = 1,
  };
  // int64 last_height = 1 [json_name = "lastHeight"];
  void clear_last_height() ;
  ::int64_t last_height() const;
  void set_last_height(::int64_t value);

  private:
  ::int64_t _internal_last_height() const;
  void _internal_set_last_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t last_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUpgradedConsensusStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse) */ {
 public:
  inline QueryUpgradedConsensusStateResponse() : QueryUpgradedConsensusStateResponse(nullptr) {}
  ~QueryUpgradedConsensusStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUpgradedConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUpgradedConsensusStateResponse(const QueryUpgradedConsensusStateResponse& from);
  QueryUpgradedConsensusStateResponse(QueryUpgradedConsensusStateResponse&& from) noexcept
    : QueryUpgradedConsensusStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryUpgradedConsensusStateResponse& operator=(const QueryUpgradedConsensusStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUpgradedConsensusStateResponse& operator=(QueryUpgradedConsensusStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUpgradedConsensusStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUpgradedConsensusStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUpgradedConsensusStateResponse*>(
               &_QueryUpgradedConsensusStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryUpgradedConsensusStateResponse& a, QueryUpgradedConsensusStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUpgradedConsensusStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUpgradedConsensusStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUpgradedConsensusStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUpgradedConsensusStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUpgradedConsensusStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUpgradedConsensusStateResponse& from) {
    QueryUpgradedConsensusStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUpgradedConsensusStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse";
  }
  protected:
  explicit QueryUpgradedConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpgradedConsensusStateFieldNumber = 2,
  };
  // bytes upgraded_consensus_state = 2 [json_name = "upgradedConsensusState"];
  void clear_upgraded_consensus_state() ;
  const std::string& upgraded_consensus_state() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_upgraded_consensus_state(Arg_&& arg, Args_... args);
  std::string* mutable_upgraded_consensus_state();
  PROTOBUF_NODISCARD std::string* release_upgraded_consensus_state();
  void set_allocated_upgraded_consensus_state(std::string* ptr);

  private:
  const std::string& _internal_upgraded_consensus_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_upgraded_consensus_state(
      const std::string& value);
  std::string* _internal_mutable_upgraded_consensus_state();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upgraded_consensus_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleVersionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryModuleVersionsRequest) */ {
 public:
  inline QueryModuleVersionsRequest() : QueryModuleVersionsRequest(nullptr) {}
  ~QueryModuleVersionsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleVersionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleVersionsRequest(const QueryModuleVersionsRequest& from);
  QueryModuleVersionsRequest(QueryModuleVersionsRequest&& from) noexcept
    : QueryModuleVersionsRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleVersionsRequest& operator=(const QueryModuleVersionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleVersionsRequest& operator=(QueryModuleVersionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleVersionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleVersionsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleVersionsRequest*>(
               &_QueryModuleVersionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryModuleVersionsRequest& a, QueryModuleVersionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleVersionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleVersionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleVersionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleVersionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleVersionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleVersionsRequest& from) {
    QueryModuleVersionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleVersionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryModuleVersionsRequest";
  }
  protected:
  explicit QueryModuleVersionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
  };
  // string module_name = 1 [json_name = "moduleName"];
  void clear_module_name() ;
  const std::string& module_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module_name(Arg_&& arg, Args_... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* ptr);

  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(
      const std::string& value);
  std::string* _internal_mutable_module_name();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryModuleVersionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleVersionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryModuleVersionsResponse) */ {
 public:
  inline QueryModuleVersionsResponse() : QueryModuleVersionsResponse(nullptr) {}
  ~QueryModuleVersionsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleVersionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleVersionsResponse(const QueryModuleVersionsResponse& from);
  QueryModuleVersionsResponse(QueryModuleVersionsResponse&& from) noexcept
    : QueryModuleVersionsResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleVersionsResponse& operator=(const QueryModuleVersionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleVersionsResponse& operator=(QueryModuleVersionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleVersionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleVersionsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleVersionsResponse*>(
               &_QueryModuleVersionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryModuleVersionsResponse& a, QueryModuleVersionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleVersionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleVersionsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleVersionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleVersionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleVersionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleVersionsResponse& from) {
    QueryModuleVersionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleVersionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryModuleVersionsResponse";
  }
  protected:
  explicit QueryModuleVersionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleVersionsFieldNumber = 1,
  };
  // repeated .cosmos.upgrade.v1beta1.ModuleVersion module_versions = 1 [json_name = "moduleVersions"];
  int module_versions_size() const;
  private:
  int _internal_module_versions_size() const;

  public:
  void clear_module_versions() ;
  ::cosmos::upgrade::v1beta1::ModuleVersion* mutable_module_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::upgrade::v1beta1::ModuleVersion >*
      mutable_module_versions();
  private:
  const ::cosmos::upgrade::v1beta1::ModuleVersion& _internal_module_versions(int index) const;
  ::cosmos::upgrade::v1beta1::ModuleVersion* _internal_add_module_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::upgrade::v1beta1::ModuleVersion>& _internal_module_versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::upgrade::v1beta1::ModuleVersion>* _internal_mutable_module_versions();
  public:
  const ::cosmos::upgrade::v1beta1::ModuleVersion& module_versions(int index) const;
  ::cosmos::upgrade::v1beta1::ModuleVersion* add_module_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::upgrade::v1beta1::ModuleVersion >&
      module_versions() const;
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryModuleVersionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::upgrade::v1beta1::ModuleVersion > module_versions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAuthorityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryAuthorityRequest) */ {
 public:
  inline QueryAuthorityRequest() : QueryAuthorityRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAuthorityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAuthorityRequest(const QueryAuthorityRequest& from);
  QueryAuthorityRequest(QueryAuthorityRequest&& from) noexcept
    : QueryAuthorityRequest() {
    *this = ::std::move(from);
  }

  inline QueryAuthorityRequest& operator=(const QueryAuthorityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAuthorityRequest& operator=(QueryAuthorityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAuthorityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAuthorityRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAuthorityRequest*>(
               &_QueryAuthorityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryAuthorityRequest& a, QueryAuthorityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAuthorityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAuthorityRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAuthorityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAuthorityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryAuthorityRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryAuthorityRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryAuthorityRequest";
  }
  protected:
  explicit QueryAuthorityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryAuthorityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAuthorityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.QueryAuthorityResponse) */ {
 public:
  inline QueryAuthorityResponse() : QueryAuthorityResponse(nullptr) {}
  ~QueryAuthorityResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAuthorityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAuthorityResponse(const QueryAuthorityResponse& from);
  QueryAuthorityResponse(QueryAuthorityResponse&& from) noexcept
    : QueryAuthorityResponse() {
    *this = ::std::move(from);
  }

  inline QueryAuthorityResponse& operator=(const QueryAuthorityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAuthorityResponse& operator=(QueryAuthorityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAuthorityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAuthorityResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAuthorityResponse*>(
               &_QueryAuthorityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryAuthorityResponse& a, QueryAuthorityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAuthorityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAuthorityResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAuthorityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAuthorityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAuthorityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAuthorityResponse& from) {
    QueryAuthorityResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAuthorityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.QueryAuthorityResponse";
  }
  protected:
  explicit QueryAuthorityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.QueryAuthorityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryCurrentPlanRequest

// -------------------------------------------------------------------

// QueryCurrentPlanResponse

// .cosmos.upgrade.v1beta1.Plan plan = 1 [json_name = "plan"];
inline bool QueryCurrentPlanResponse::has_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plan_ != nullptr);
  return value;
}
inline const ::cosmos::upgrade::v1beta1::Plan& QueryCurrentPlanResponse::_internal_plan() const {
  const ::cosmos::upgrade::v1beta1::Plan* p = _impl_.plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::upgrade::v1beta1::Plan&>(
      ::cosmos::upgrade::v1beta1::_Plan_default_instance_);
}
inline const ::cosmos::upgrade::v1beta1::Plan& QueryCurrentPlanResponse::plan() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.QueryCurrentPlanResponse.plan)
  return _internal_plan();
}
inline void QueryCurrentPlanResponse::unsafe_arena_set_allocated_plan(
    ::cosmos::upgrade::v1beta1::Plan* plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plan_);
  }
  _impl_.plan_ = plan;
  if (plan) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.upgrade.v1beta1.QueryCurrentPlanResponse.plan)
}
inline ::cosmos::upgrade::v1beta1::Plan* QueryCurrentPlanResponse::release_plan() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::upgrade::v1beta1::Plan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::upgrade::v1beta1::Plan* QueryCurrentPlanResponse::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.QueryCurrentPlanResponse.plan)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::upgrade::v1beta1::Plan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
  return temp;
}
inline ::cosmos::upgrade::v1beta1::Plan* QueryCurrentPlanResponse::_internal_mutable_plan() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::upgrade::v1beta1::Plan>(GetArenaForAllocation());
    _impl_.plan_ = p;
  }
  return _impl_.plan_;
}
inline ::cosmos::upgrade::v1beta1::Plan* QueryCurrentPlanResponse::mutable_plan() {
  ::cosmos::upgrade::v1beta1::Plan* _msg = _internal_mutable_plan();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.QueryCurrentPlanResponse.plan)
  return _msg;
}
inline void QueryCurrentPlanResponse::set_allocated_plan(::cosmos::upgrade::v1beta1::Plan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plan_);
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan));
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.QueryCurrentPlanResponse.plan)
}

// -------------------------------------------------------------------

// QueryAppliedPlanRequest

// string name = 1 [json_name = "name"];
inline void QueryAppliedPlanRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QueryAppliedPlanRequest::name() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.QueryAppliedPlanRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAppliedPlanRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.QueryAppliedPlanRequest.name)
}
inline std::string* QueryAppliedPlanRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.QueryAppliedPlanRequest.name)
  return _s;
}
inline const std::string& QueryAppliedPlanRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QueryAppliedPlanRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAppliedPlanRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAppliedPlanRequest::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.QueryAppliedPlanRequest.name)
  return _impl_.name_.Release();
}
inline void QueryAppliedPlanRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.QueryAppliedPlanRequest.name)
}

// -------------------------------------------------------------------

// QueryAppliedPlanResponse

// int64 height = 1 [json_name = "height"];
inline void QueryAppliedPlanResponse::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t QueryAppliedPlanResponse::height() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.QueryAppliedPlanResponse.height)
  return _internal_height();
}
inline void QueryAppliedPlanResponse::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.QueryAppliedPlanResponse.height)
}
inline ::int64_t QueryAppliedPlanResponse::_internal_height() const {
  return _impl_.height_;
}
inline void QueryAppliedPlanResponse::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// QueryUpgradedConsensusStateRequest

// int64 last_height = 1 [json_name = "lastHeight"];
inline void QueryUpgradedConsensusStateRequest::clear_last_height() {
  _impl_.last_height_ = ::int64_t{0};
}
inline ::int64_t QueryUpgradedConsensusStateRequest::last_height() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest.last_height)
  return _internal_last_height();
}
inline void QueryUpgradedConsensusStateRequest::set_last_height(::int64_t value) {
  _internal_set_last_height(value);
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateRequest.last_height)
}
inline ::int64_t QueryUpgradedConsensusStateRequest::_internal_last_height() const {
  return _impl_.last_height_;
}
inline void QueryUpgradedConsensusStateRequest::_internal_set_last_height(::int64_t value) {
  ;
  _impl_.last_height_ = value;
}

// -------------------------------------------------------------------

// QueryUpgradedConsensusStateResponse

// bytes upgraded_consensus_state = 2 [json_name = "upgradedConsensusState"];
inline void QueryUpgradedConsensusStateResponse::clear_upgraded_consensus_state() {
  _impl_.upgraded_consensus_state_.ClearToEmpty();
}
inline const std::string& QueryUpgradedConsensusStateResponse::upgraded_consensus_state() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
  return _internal_upgraded_consensus_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryUpgradedConsensusStateResponse::set_upgraded_consensus_state(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.upgraded_consensus_state_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
}
inline std::string* QueryUpgradedConsensusStateResponse::mutable_upgraded_consensus_state() {
  std::string* _s = _internal_mutable_upgraded_consensus_state();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
  return _s;
}
inline const std::string& QueryUpgradedConsensusStateResponse::_internal_upgraded_consensus_state() const {
  return _impl_.upgraded_consensus_state_.Get();
}
inline void QueryUpgradedConsensusStateResponse::_internal_set_upgraded_consensus_state(const std::string& value) {
  ;


  _impl_.upgraded_consensus_state_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUpgradedConsensusStateResponse::_internal_mutable_upgraded_consensus_state() {
  ;
  return _impl_.upgraded_consensus_state_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryUpgradedConsensusStateResponse::release_upgraded_consensus_state() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
  return _impl_.upgraded_consensus_state_.Release();
}
inline void QueryUpgradedConsensusStateResponse::set_allocated_upgraded_consensus_state(std::string* value) {
  _impl_.upgraded_consensus_state_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.upgraded_consensus_state_.IsDefault()) {
          _impl_.upgraded_consensus_state_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
}

// -------------------------------------------------------------------

// QueryModuleVersionsRequest

// string module_name = 1 [json_name = "moduleName"];
inline void QueryModuleVersionsRequest::clear_module_name() {
  _impl_.module_name_.ClearToEmpty();
}
inline const std::string& QueryModuleVersionsRequest::module_name() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.QueryModuleVersionsRequest.module_name)
  return _internal_module_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryModuleVersionsRequest::set_module_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.module_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.QueryModuleVersionsRequest.module_name)
}
inline std::string* QueryModuleVersionsRequest::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.QueryModuleVersionsRequest.module_name)
  return _s;
}
inline const std::string& QueryModuleVersionsRequest::_internal_module_name() const {
  return _impl_.module_name_.Get();
}
inline void QueryModuleVersionsRequest::_internal_set_module_name(const std::string& value) {
  ;


  _impl_.module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryModuleVersionsRequest::_internal_mutable_module_name() {
  ;
  return _impl_.module_name_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryModuleVersionsRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.QueryModuleVersionsRequest.module_name)
  return _impl_.module_name_.Release();
}
inline void QueryModuleVersionsRequest::set_allocated_module_name(std::string* value) {
  _impl_.module_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_name_.IsDefault()) {
          _impl_.module_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.QueryModuleVersionsRequest.module_name)
}

// -------------------------------------------------------------------

// QueryModuleVersionsResponse

// repeated .cosmos.upgrade.v1beta1.ModuleVersion module_versions = 1 [json_name = "moduleVersions"];
inline int QueryModuleVersionsResponse::_internal_module_versions_size() const {
  return _impl_.module_versions_.size();
}
inline int QueryModuleVersionsResponse::module_versions_size() const {
  return _internal_module_versions_size();
}
inline ::cosmos::upgrade::v1beta1::ModuleVersion* QueryModuleVersionsResponse::mutable_module_versions(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.QueryModuleVersionsResponse.module_versions)
  return _internal_mutable_module_versions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::upgrade::v1beta1::ModuleVersion >*
QueryModuleVersionsResponse::mutable_module_versions() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.upgrade.v1beta1.QueryModuleVersionsResponse.module_versions)
  return _internal_mutable_module_versions();
}
inline const ::cosmos::upgrade::v1beta1::ModuleVersion& QueryModuleVersionsResponse::_internal_module_versions(int index) const {
  return _internal_module_versions().Get(index);
}
inline const ::cosmos::upgrade::v1beta1::ModuleVersion& QueryModuleVersionsResponse::module_versions(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.QueryModuleVersionsResponse.module_versions)
  return _internal_module_versions(index);
}
inline ::cosmos::upgrade::v1beta1::ModuleVersion* QueryModuleVersionsResponse::_internal_add_module_versions() {
  return _internal_mutable_module_versions()->Add();
}
inline ::cosmos::upgrade::v1beta1::ModuleVersion* QueryModuleVersionsResponse::add_module_versions() {
  ::cosmos::upgrade::v1beta1::ModuleVersion* _add = _internal_add_module_versions();
  // @@protoc_insertion_point(field_add:cosmos.upgrade.v1beta1.QueryModuleVersionsResponse.module_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::upgrade::v1beta1::ModuleVersion >&
QueryModuleVersionsResponse::module_versions() const {
  // @@protoc_insertion_point(field_list:cosmos.upgrade.v1beta1.QueryModuleVersionsResponse.module_versions)
  return _internal_module_versions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::upgrade::v1beta1::ModuleVersion>&
QueryModuleVersionsResponse::_internal_module_versions() const {
  return _impl_.module_versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::upgrade::v1beta1::ModuleVersion>*
QueryModuleVersionsResponse::_internal_mutable_module_versions() {
  return &_impl_.module_versions_;
}

// -------------------------------------------------------------------

// QueryAuthorityRequest

// -------------------------------------------------------------------

// QueryAuthorityResponse

// string address = 1 [json_name = "address"];
inline void QueryAuthorityResponse::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryAuthorityResponse::address() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.QueryAuthorityResponse.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAuthorityResponse::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.QueryAuthorityResponse.address)
}
inline std::string* QueryAuthorityResponse::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.QueryAuthorityResponse.address)
  return _s;
}
inline const std::string& QueryAuthorityResponse::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryAuthorityResponse::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAuthorityResponse::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAuthorityResponse::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.QueryAuthorityResponse.address)
  return _impl_.address_.Release();
}
inline void QueryAuthorityResponse::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.QueryAuthorityResponse.address)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2fquery_2eproto_2epb_2eh

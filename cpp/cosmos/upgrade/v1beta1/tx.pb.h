// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/upgrade/v1beta1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/upgrade/v1beta1/upgrade.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto;
namespace cosmos {
namespace upgrade {
namespace v1beta1 {
class MsgCancelUpgrade;
struct MsgCancelUpgradeDefaultTypeInternal;
extern MsgCancelUpgradeDefaultTypeInternal _MsgCancelUpgrade_default_instance_;
class MsgCancelUpgradeResponse;
struct MsgCancelUpgradeResponseDefaultTypeInternal;
extern MsgCancelUpgradeResponseDefaultTypeInternal _MsgCancelUpgradeResponse_default_instance_;
class MsgSoftwareUpgrade;
struct MsgSoftwareUpgradeDefaultTypeInternal;
extern MsgSoftwareUpgradeDefaultTypeInternal _MsgSoftwareUpgrade_default_instance_;
class MsgSoftwareUpgradeResponse;
struct MsgSoftwareUpgradeResponseDefaultTypeInternal;
extern MsgSoftwareUpgradeResponseDefaultTypeInternal _MsgSoftwareUpgradeResponse_default_instance_;
}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::upgrade::v1beta1::MsgCancelUpgrade* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::MsgCancelUpgrade>(Arena*);
template <>
::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::MsgCancelUpgradeResponse>(Arena*);
template <>
::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::MsgSoftwareUpgrade>(Arena*);
template <>
::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse* Arena::CreateMaybeMessage<::cosmos::upgrade::v1beta1::MsgSoftwareUpgradeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace upgrade {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgSoftwareUpgrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade) */ {
 public:
  inline MsgSoftwareUpgrade() : MsgSoftwareUpgrade(nullptr) {}
  ~MsgSoftwareUpgrade() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSoftwareUpgrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSoftwareUpgrade(const MsgSoftwareUpgrade& from);
  MsgSoftwareUpgrade(MsgSoftwareUpgrade&& from) noexcept
    : MsgSoftwareUpgrade() {
    *this = ::std::move(from);
  }

  inline MsgSoftwareUpgrade& operator=(const MsgSoftwareUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSoftwareUpgrade& operator=(MsgSoftwareUpgrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSoftwareUpgrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSoftwareUpgrade* internal_default_instance() {
    return reinterpret_cast<const MsgSoftwareUpgrade*>(
               &_MsgSoftwareUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgSoftwareUpgrade& a, MsgSoftwareUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSoftwareUpgrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSoftwareUpgrade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSoftwareUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSoftwareUpgrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSoftwareUpgrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSoftwareUpgrade& from) {
    MsgSoftwareUpgrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSoftwareUpgrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.MsgSoftwareUpgrade";
  }
  protected:
  explicit MsgSoftwareUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kPlanFieldNumber = 2,
  };
  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .cosmos.upgrade.v1beta1.Plan plan = 2 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_plan() const;
  void clear_plan() ;
  const ::cosmos::upgrade::v1beta1::Plan& plan() const;
  PROTOBUF_NODISCARD ::cosmos::upgrade::v1beta1::Plan* release_plan();
  ::cosmos::upgrade::v1beta1::Plan* mutable_plan();
  void set_allocated_plan(::cosmos::upgrade::v1beta1::Plan* plan);
  private:
  const ::cosmos::upgrade::v1beta1::Plan& _internal_plan() const;
  ::cosmos::upgrade::v1beta1::Plan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::cosmos::upgrade::v1beta1::Plan* plan);
  ::cosmos::upgrade::v1beta1::Plan* unsafe_arena_release_plan();
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::cosmos::upgrade::v1beta1::Plan* plan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgSoftwareUpgradeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.MsgSoftwareUpgradeResponse) */ {
 public:
  inline MsgSoftwareUpgradeResponse() : MsgSoftwareUpgradeResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSoftwareUpgradeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSoftwareUpgradeResponse(const MsgSoftwareUpgradeResponse& from);
  MsgSoftwareUpgradeResponse(MsgSoftwareUpgradeResponse&& from) noexcept
    : MsgSoftwareUpgradeResponse() {
    *this = ::std::move(from);
  }

  inline MsgSoftwareUpgradeResponse& operator=(const MsgSoftwareUpgradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSoftwareUpgradeResponse& operator=(MsgSoftwareUpgradeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSoftwareUpgradeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSoftwareUpgradeResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSoftwareUpgradeResponse*>(
               &_MsgSoftwareUpgradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgSoftwareUpgradeResponse& a, MsgSoftwareUpgradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSoftwareUpgradeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSoftwareUpgradeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSoftwareUpgradeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSoftwareUpgradeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgSoftwareUpgradeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgSoftwareUpgradeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.MsgSoftwareUpgradeResponse";
  }
  protected:
  explicit MsgSoftwareUpgradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.MsgSoftwareUpgradeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCancelUpgrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.MsgCancelUpgrade) */ {
 public:
  inline MsgCancelUpgrade() : MsgCancelUpgrade(nullptr) {}
  ~MsgCancelUpgrade() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCancelUpgrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelUpgrade(const MsgCancelUpgrade& from);
  MsgCancelUpgrade(MsgCancelUpgrade&& from) noexcept
    : MsgCancelUpgrade() {
    *this = ::std::move(from);
  }

  inline MsgCancelUpgrade& operator=(const MsgCancelUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelUpgrade& operator=(MsgCancelUpgrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelUpgrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCancelUpgrade* internal_default_instance() {
    return reinterpret_cast<const MsgCancelUpgrade*>(
               &_MsgCancelUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgCancelUpgrade& a, MsgCancelUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelUpgrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelUpgrade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelUpgrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCancelUpgrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCancelUpgrade& from) {
    MsgCancelUpgrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCancelUpgrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.MsgCancelUpgrade";
  }
  protected:
  explicit MsgCancelUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
  };
  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.MsgCancelUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCancelUpgradeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.upgrade.v1beta1.MsgCancelUpgradeResponse) */ {
 public:
  inline MsgCancelUpgradeResponse() : MsgCancelUpgradeResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCancelUpgradeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelUpgradeResponse(const MsgCancelUpgradeResponse& from);
  MsgCancelUpgradeResponse(MsgCancelUpgradeResponse&& from) noexcept
    : MsgCancelUpgradeResponse() {
    *this = ::std::move(from);
  }

  inline MsgCancelUpgradeResponse& operator=(const MsgCancelUpgradeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelUpgradeResponse& operator=(MsgCancelUpgradeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelUpgradeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCancelUpgradeResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCancelUpgradeResponse*>(
               &_MsgCancelUpgradeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgCancelUpgradeResponse& a, MsgCancelUpgradeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelUpgradeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelUpgradeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelUpgradeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelUpgradeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgCancelUpgradeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgCancelUpgradeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.upgrade.v1beta1.MsgCancelUpgradeResponse";
  }
  protected:
  explicit MsgCancelUpgradeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.upgrade.v1beta1.MsgCancelUpgradeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgSoftwareUpgrade

// string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgSoftwareUpgrade::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgSoftwareUpgrade::authority() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSoftwareUpgrade::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.authority)
}
inline std::string* MsgSoftwareUpgrade::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.authority)
  return _s;
}
inline const std::string& MsgSoftwareUpgrade::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgSoftwareUpgrade::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSoftwareUpgrade::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSoftwareUpgrade::release_authority() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.authority)
  return _impl_.authority_.Release();
}
inline void MsgSoftwareUpgrade::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.authority)
}

// .cosmos.upgrade.v1beta1.Plan plan = 2 [json_name = "plan", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgSoftwareUpgrade::has_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plan_ != nullptr);
  return value;
}
inline const ::cosmos::upgrade::v1beta1::Plan& MsgSoftwareUpgrade::_internal_plan() const {
  const ::cosmos::upgrade::v1beta1::Plan* p = _impl_.plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::upgrade::v1beta1::Plan&>(
      ::cosmos::upgrade::v1beta1::_Plan_default_instance_);
}
inline const ::cosmos::upgrade::v1beta1::Plan& MsgSoftwareUpgrade::plan() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.plan)
  return _internal_plan();
}
inline void MsgSoftwareUpgrade::unsafe_arena_set_allocated_plan(
    ::cosmos::upgrade::v1beta1::Plan* plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plan_);
  }
  _impl_.plan_ = plan;
  if (plan) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.plan)
}
inline ::cosmos::upgrade::v1beta1::Plan* MsgSoftwareUpgrade::release_plan() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::upgrade::v1beta1::Plan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::upgrade::v1beta1::Plan* MsgSoftwareUpgrade::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.plan)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::upgrade::v1beta1::Plan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
  return temp;
}
inline ::cosmos::upgrade::v1beta1::Plan* MsgSoftwareUpgrade::_internal_mutable_plan() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::upgrade::v1beta1::Plan>(GetArenaForAllocation());
    _impl_.plan_ = p;
  }
  return _impl_.plan_;
}
inline ::cosmos::upgrade::v1beta1::Plan* MsgSoftwareUpgrade::mutable_plan() {
  ::cosmos::upgrade::v1beta1::Plan* _msg = _internal_mutable_plan();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.plan)
  return _msg;
}
inline void MsgSoftwareUpgrade::set_allocated_plan(::cosmos::upgrade::v1beta1::Plan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plan_);
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan));
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.MsgSoftwareUpgrade.plan)
}

// -------------------------------------------------------------------

// MsgSoftwareUpgradeResponse

// -------------------------------------------------------------------

// MsgCancelUpgrade

// string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCancelUpgrade::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgCancelUpgrade::authority() const {
  // @@protoc_insertion_point(field_get:cosmos.upgrade.v1beta1.MsgCancelUpgrade.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCancelUpgrade::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.upgrade.v1beta1.MsgCancelUpgrade.authority)
}
inline std::string* MsgCancelUpgrade::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:cosmos.upgrade.v1beta1.MsgCancelUpgrade.authority)
  return _s;
}
inline const std::string& MsgCancelUpgrade::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgCancelUpgrade::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCancelUpgrade::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCancelUpgrade::release_authority() {
  // @@protoc_insertion_point(field_release:cosmos.upgrade.v1beta1.MsgCancelUpgrade.authority)
  return _impl_.authority_.Release();
}
inline void MsgCancelUpgrade::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.upgrade.v1beta1.MsgCancelUpgrade.authority)
}

// -------------------------------------------------------------------

// MsgCancelUpgradeResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace upgrade
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fupgrade_2fv1beta1_2ftx_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/reflection/v1/reflection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2freflection_2fv1_2freflection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2freflection_2fv1_2freflection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
#include "cosmos/query/v1/query.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2freflection_2fv1_2freflection_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2freflection_2fv1_2freflection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2freflection_2fv1_2freflection_2eproto;
namespace cosmos {
namespace reflection {
namespace v1 {
class FileDescriptorsRequest;
struct FileDescriptorsRequestDefaultTypeInternal;
extern FileDescriptorsRequestDefaultTypeInternal _FileDescriptorsRequest_default_instance_;
class FileDescriptorsResponse;
struct FileDescriptorsResponseDefaultTypeInternal;
extern FileDescriptorsResponseDefaultTypeInternal _FileDescriptorsResponse_default_instance_;
}  // namespace v1
}  // namespace reflection
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::reflection::v1::FileDescriptorsRequest* Arena::CreateMaybeMessage<::cosmos::reflection::v1::FileDescriptorsRequest>(Arena*);
template <>
::cosmos::reflection::v1::FileDescriptorsResponse* Arena::CreateMaybeMessage<::cosmos::reflection::v1::FileDescriptorsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace reflection {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class FileDescriptorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.reflection.v1.FileDescriptorsRequest) */ {
 public:
  inline FileDescriptorsRequest() : FileDescriptorsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDescriptorsRequest(const FileDescriptorsRequest& from);
  FileDescriptorsRequest(FileDescriptorsRequest&& from) noexcept
    : FileDescriptorsRequest() {
    *this = ::std::move(from);
  }

  inline FileDescriptorsRequest& operator=(const FileDescriptorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDescriptorsRequest& operator=(FileDescriptorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDescriptorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDescriptorsRequest* internal_default_instance() {
    return reinterpret_cast<const FileDescriptorsRequest*>(
               &_FileDescriptorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileDescriptorsRequest& a, FileDescriptorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDescriptorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDescriptorsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDescriptorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDescriptorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FileDescriptorsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FileDescriptorsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.reflection.v1.FileDescriptorsRequest";
  }
  protected:
  explicit FileDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.reflection.v1.FileDescriptorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2freflection_2fv1_2freflection_2eproto;
};// -------------------------------------------------------------------

class FileDescriptorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.reflection.v1.FileDescriptorsResponse) */ {
 public:
  inline FileDescriptorsResponse() : FileDescriptorsResponse(nullptr) {}
  ~FileDescriptorsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileDescriptorsResponse(const FileDescriptorsResponse& from);
  FileDescriptorsResponse(FileDescriptorsResponse&& from) noexcept
    : FileDescriptorsResponse() {
    *this = ::std::move(from);
  }

  inline FileDescriptorsResponse& operator=(const FileDescriptorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDescriptorsResponse& operator=(FileDescriptorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileDescriptorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileDescriptorsResponse* internal_default_instance() {
    return reinterpret_cast<const FileDescriptorsResponse*>(
               &_FileDescriptorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileDescriptorsResponse& a, FileDescriptorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDescriptorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileDescriptorsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileDescriptorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileDescriptorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileDescriptorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileDescriptorsResponse& from) {
    FileDescriptorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDescriptorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.reflection.v1.FileDescriptorsResponse";
  }
  protected:
  explicit FileDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated .google.protobuf.FileDescriptorProto files = 1 [json_name = "files"];
  int files_size() const;
  private:
  int _internal_files_size() const;

  public:
  void clear_files() ;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto >*
      mutable_files();
  private:
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& _internal_files(int index) const;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* _internal_add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::FileDescriptorProto>& _internal_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::FileDescriptorProto>* _internal_mutable_files();
  public:
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& files(int index) const;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto >&
      files() const;
  // @@protoc_insertion_point(class_scope:cosmos.reflection.v1.FileDescriptorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto > files_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2freflection_2fv1_2freflection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileDescriptorsRequest

// -------------------------------------------------------------------

// FileDescriptorsResponse

// repeated .google.protobuf.FileDescriptorProto files = 1 [json_name = "files"];
inline int FileDescriptorsResponse::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int FileDescriptorsResponse::files_size() const {
  return _internal_files_size();
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* FileDescriptorsResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _internal_mutable_files()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto >*
FileDescriptorsResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _internal_mutable_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& FileDescriptorsResponse::_internal_files(int index) const {
  return _internal_files().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& FileDescriptorsResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _internal_files(index);
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* FileDescriptorsResponse::_internal_add_files() {
  return _internal_mutable_files()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* FileDescriptorsResponse::add_files() {
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto >&
FileDescriptorsResponse::files() const {
  // @@protoc_insertion_point(field_list:cosmos.reflection.v1.FileDescriptorsResponse.files)
  return _internal_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::FileDescriptorProto>&
FileDescriptorsResponse::_internal_files() const {
  return _impl_.files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::FileDescriptorProto>*
FileDescriptorsResponse::_internal_mutable_files() {
  return &_impl_.files_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace reflection
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2freflection_2fv1_2freflection_2eproto_2epb_2eh

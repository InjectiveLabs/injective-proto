// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/nft/v1beta1/genesis.proto

#include "cosmos/nft/v1beta1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace nft {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.classes_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Entry::Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nfts_)*/{}
  , /*decltype(_impl_.owner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntryDefaultTypeInternal() {}
  union {
    Entry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntryDefaultTypeInternal _Entry_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::GenesisState, _impl_.classes_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::GenesisState, _impl_.entries_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Entry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Entry, _impl_.owner_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Entry, _impl_.nfts_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::nft::v1beta1::GenesisState)},
        { 10, -1, -1, sizeof(::cosmos::nft::v1beta1::Entry)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::nft::v1beta1::_GenesisState_default_instance_._instance,
    &::cosmos::nft::v1beta1::_Entry_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n cosmos/nft/v1beta1/genesis.proto\022\022cosm"
    "os.nft.v1beta1\032\034cosmos/nft/v1beta1/nft.p"
    "roto\"x\n\014GenesisState\0223\n\007classes\030\001 \003(\0132\031."
    "cosmos.nft.v1beta1.ClassR\007classes\0223\n\007ent"
    "ries\030\002 \003(\0132\031.cosmos.nft.v1beta1.EntryR\007e"
    "ntries\"J\n\005Entry\022\024\n\005owner\030\001 \001(\tR\005owner\022+\n"
    "\004nfts\030\002 \003(\0132\027.cosmos.nft.v1beta1.NFTR\004nf"
    "tsB\264\001\n\026com.cosmos.nft.v1beta1B\014GenesisPr"
    "otoP\001Z\"github.com/cosmos/cosmos-sdk/x/nf"
    "t\242\002\003CNX\252\002\022Cosmos.Nft.V1beta1\312\002\022Cosmos\\Nf"
    "t\\V1beta1\342\002\036Cosmos\\Nft\\V1beta1\\GPBMetada"
    "ta\352\002\024Cosmos::Nft::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_deps[1] =
    {
        &::descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto = {
    false,
    false,
    473,
    descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto,
    "cosmos/nft/v1beta1/genesis.proto",
    &descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_once,
    descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto::offsets,
    file_level_metadata_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto,
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto,
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_getter() {
  return &descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto(&descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto);
namespace cosmos {
namespace nft {
namespace v1beta1 {
// ===================================================================

class GenesisState::_Internal {
 public:
};

void GenesisState::clear_classes() {
  _internal_mutable_classes()->Clear();
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.classes_){from._impl_.classes_}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.classes_){arena}
    , decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_classes()->~RepeatedPtrField();
  _internal_mutable_entries()->~RepeatedPtrField();
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_classes()->Clear();
  _internal_mutable_entries()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.nft.v1beta1.Entry entries = 2 [json_name = "entries"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classes_size()); i < n; i++) {
    const auto& repfield = this->_internal_classes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.nft.v1beta1.Entry entries = 2 [json_name = "entries"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
  total_size += 1UL * this->_internal_classes_size();
  for (const auto& msg : this->_internal_classes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.nft.v1beta1.Entry entries = 2 [json_name = "entries"];
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_classes()->MergeFrom(from._internal_classes());
  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_classes()->InternalSwap(other->_internal_mutable_classes());
  _internal_mutable_entries()->InternalSwap(other->_internal_mutable_entries());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto[0]);
}
// ===================================================================

class Entry::_Internal {
 public:
};

void Entry::clear_nfts() {
  _internal_mutable_nfts()->Clear();
}
Entry::Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nfts_){from._impl_.nfts_}
    , decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.Entry)
}

inline void Entry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.nfts_){arena}
    , decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_nfts()->~RepeatedPtrField();
  _impl_.owner_.Destroy();
}

void Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.Entry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_nfts()->Clear();
  _impl_.owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner = 1 [json_name = "owner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.Entry.owner"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nfts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Entry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.Entry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    const std::string& _s = this->_internal_owner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Entry.owner");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nfts_size()); i < n; i++) {
    const auto& repfield = this->_internal_nfts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.Entry)
  return target;
}

::size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.Entry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];
  total_size += 1UL * this->_internal_nfts_size();
  for (const auto& msg : this->_internal_nfts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string owner = 1 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entry::GetClassData() const { return &_class_data_; }


void Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entry*>(&to_msg);
  auto& from = static_cast<const Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.Entry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nfts()->MergeFrom(from._internal_nfts());
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_nfts()->InternalSwap(other->_internal_mutable_nfts());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, lhs_arena,
                                       &other->_impl_.owner_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::GenesisState*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::Entry*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::Entry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

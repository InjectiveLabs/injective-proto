// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/nft/v1beta1/query.proto

#include "cosmos/nft/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace nft {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR QueryBalanceRequest::QueryBalanceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.owner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBalanceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBalanceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBalanceRequestDefaultTypeInternal() {}
  union {
    QueryBalanceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBalanceRequestDefaultTypeInternal _QueryBalanceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBalanceResponse::QueryBalanceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBalanceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBalanceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBalanceResponseDefaultTypeInternal() {}
  union {
    QueryBalanceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBalanceResponseDefaultTypeInternal _QueryBalanceResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOwnerRequest::QueryOwnerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryOwnerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOwnerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOwnerRequestDefaultTypeInternal() {}
  union {
    QueryOwnerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOwnerRequestDefaultTypeInternal _QueryOwnerRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryOwnerResponse::QueryOwnerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryOwnerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryOwnerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryOwnerResponseDefaultTypeInternal() {}
  union {
    QueryOwnerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryOwnerResponseDefaultTypeInternal _QueryOwnerResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySupplyRequest::QuerySupplyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySupplyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySupplyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySupplyRequestDefaultTypeInternal() {}
  union {
    QuerySupplyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySupplyRequestDefaultTypeInternal _QuerySupplyRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySupplyResponse::QuerySupplyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySupplyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySupplyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySupplyResponseDefaultTypeInternal() {}
  union {
    QuerySupplyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySupplyResponseDefaultTypeInternal _QuerySupplyResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryNFTsRequest::QueryNFTsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.owner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryNFTsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNFTsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNFTsRequestDefaultTypeInternal() {}
  union {
    QueryNFTsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNFTsRequestDefaultTypeInternal _QueryNFTsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryNFTsResponse::QueryNFTsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nfts_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryNFTsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNFTsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNFTsResponseDefaultTypeInternal() {}
  union {
    QueryNFTsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNFTsResponseDefaultTypeInternal _QueryNFTsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryNFTRequest::QueryNFTRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryNFTRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNFTRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNFTRequestDefaultTypeInternal() {}
  union {
    QueryNFTRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNFTRequestDefaultTypeInternal _QueryNFTRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryNFTResponse::QueryNFTResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nft_)*/nullptr} {}
struct QueryNFTResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNFTResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNFTResponseDefaultTypeInternal() {}
  union {
    QueryNFTResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNFTResponseDefaultTypeInternal _QueryNFTResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryClassRequest::QueryClassRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryClassRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryClassRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryClassRequestDefaultTypeInternal() {}
  union {
    QueryClassRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryClassRequestDefaultTypeInternal _QueryClassRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryClassResponse::QueryClassResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.class__)*/nullptr} {}
struct QueryClassResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryClassResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryClassResponseDefaultTypeInternal() {}
  union {
    QueryClassResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryClassResponseDefaultTypeInternal _QueryClassResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryClassesRequest::QueryClassesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryClassesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryClassesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryClassesRequestDefaultTypeInternal() {}
  union {
    QueryClassesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryClassesRequestDefaultTypeInternal _QueryClassesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryClassesResponse::QueryClassesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.classes_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryClassesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryClassesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryClassesResponseDefaultTypeInternal() {}
  union {
    QueryClassesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryClassesResponseDefaultTypeInternal _QueryClassesResponse_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[14];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryBalanceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryBalanceRequest, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryBalanceRequest, _impl_.owner_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryBalanceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryBalanceResponse, _impl_.amount_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryOwnerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryOwnerRequest, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryOwnerRequest, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryOwnerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryOwnerResponse, _impl_.owner_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QuerySupplyRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QuerySupplyRequest, _impl_.class_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QuerySupplyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QuerySupplyResponse, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsRequest, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsRequest, _impl_.owner_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsRequest, _impl_.pagination_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsResponse, _impl_.nfts_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTsResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTRequest, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryNFTResponse, _impl_.nft_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassRequest, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassResponse, _impl_.class__),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassesRequest, _impl_.pagination_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassesResponse, _impl_.classes_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::QueryClassesResponse, _impl_.pagination_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::nft::v1beta1::QueryBalanceRequest)},
        { 10, -1, -1, sizeof(::cosmos::nft::v1beta1::QueryBalanceResponse)},
        { 19, -1, -1, sizeof(::cosmos::nft::v1beta1::QueryOwnerRequest)},
        { 29, -1, -1, sizeof(::cosmos::nft::v1beta1::QueryOwnerResponse)},
        { 38, -1, -1, sizeof(::cosmos::nft::v1beta1::QuerySupplyRequest)},
        { 47, -1, -1, sizeof(::cosmos::nft::v1beta1::QuerySupplyResponse)},
        { 56, 67, -1, sizeof(::cosmos::nft::v1beta1::QueryNFTsRequest)},
        { 70, 80, -1, sizeof(::cosmos::nft::v1beta1::QueryNFTsResponse)},
        { 82, -1, -1, sizeof(::cosmos::nft::v1beta1::QueryNFTRequest)},
        { 92, 101, -1, sizeof(::cosmos::nft::v1beta1::QueryNFTResponse)},
        { 102, -1, -1, sizeof(::cosmos::nft::v1beta1::QueryClassRequest)},
        { 111, 120, -1, sizeof(::cosmos::nft::v1beta1::QueryClassResponse)},
        { 121, 130, -1, sizeof(::cosmos::nft::v1beta1::QueryClassesRequest)},
        { 131, 141, -1, sizeof(::cosmos::nft::v1beta1::QueryClassesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::nft::v1beta1::_QueryBalanceRequest_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryBalanceResponse_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryOwnerRequest_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryOwnerResponse_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QuerySupplyRequest_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QuerySupplyResponse_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryNFTsRequest_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryNFTsResponse_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryNFTRequest_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryNFTResponse_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryClassRequest_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryClassResponse_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryClassesRequest_default_instance_._instance,
    &::cosmos::nft::v1beta1::_QueryClassesResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036cosmos/nft/v1beta1/query.proto\022\022cosmos"
    ".nft.v1beta1\032*cosmos/base/query/v1beta1/"
    "pagination.proto\032\034google/api/annotations"
    ".proto\032\034cosmos/nft/v1beta1/nft.proto\"F\n\023"
    "QueryBalanceRequest\022\031\n\010class_id\030\001 \001(\tR\007c"
    "lassId\022\024\n\005owner\030\002 \001(\tR\005owner\".\n\024QueryBal"
    "anceResponse\022\026\n\006amount\030\001 \001(\004R\006amount\">\n\021"
    "QueryOwnerRequest\022\031\n\010class_id\030\001 \001(\tR\007cla"
    "ssId\022\016\n\002id\030\002 \001(\tR\002id\"*\n\022QueryOwnerRespon"
    "se\022\024\n\005owner\030\001 \001(\tR\005owner\"/\n\022QuerySupplyR"
    "equest\022\031\n\010class_id\030\001 \001(\tR\007classId\"-\n\023Que"
    "rySupplyResponse\022\026\n\006amount\030\001 \001(\004R\006amount"
    "\"\213\001\n\020QueryNFTsRequest\022\031\n\010class_id\030\001 \001(\tR"
    "\007classId\022\024\n\005owner\030\002 \001(\tR\005owner\022F\n\npagina"
    "tion\030\003 \001(\0132&.cosmos.base.query.v1beta1.P"
    "ageRequestR\npagination\"\211\001\n\021QueryNFTsResp"
    "onse\022+\n\004nfts\030\001 \003(\0132\027.cosmos.nft.v1beta1."
    "NFTR\004nfts\022G\n\npagination\030\002 \001(\0132\'.cosmos.b"
    "ase.query.v1beta1.PageResponseR\npaginati"
    "on\"<\n\017QueryNFTRequest\022\031\n\010class_id\030\001 \001(\tR"
    "\007classId\022\016\n\002id\030\002 \001(\tR\002id\"=\n\020QueryNFTResp"
    "onse\022)\n\003nft\030\001 \001(\0132\027.cosmos.nft.v1beta1.N"
    "FTR\003nft\".\n\021QueryClassRequest\022\031\n\010class_id"
    "\030\001 \001(\tR\007classId\"E\n\022QueryClassResponse\022/\n"
    "\005class\030\001 \001(\0132\031.cosmos.nft.v1beta1.ClassR"
    "\005class\"]\n\023QueryClassesRequest\022F\n\npaginat"
    "ion\030\001 \001(\0132&.cosmos.base.query.v1beta1.Pa"
    "geRequestR\npagination\"\224\001\n\024QueryClassesRe"
    "sponse\0223\n\007classes\030\001 \003(\0132\031.cosmos.nft.v1b"
    "eta1.ClassR\007classes\022G\n\npagination\030\002 \001(\0132"
    "\'.cosmos.base.query.v1beta1.PageResponse"
    "R\npagination2\276\007\n\005Query\022\224\001\n\007Balance\022\'.cos"
    "mos.nft.v1beta1.QueryBalanceRequest\032(.co"
    "smos.nft.v1beta1.QueryBalanceResponse\"6\202"
    "\323\344\223\0020\022./cosmos/nft/v1beta1/balance/{owne"
    "r}/{class_id}\022\211\001\n\005Owner\022%.cosmos.nft.v1b"
    "eta1.QueryOwnerRequest\032&.cosmos.nft.v1be"
    "ta1.QueryOwnerResponse\"1\202\323\344\223\002+\022)/cosmos/"
    "nft/v1beta1/owner/{class_id}/{id}\022\210\001\n\006Su"
    "pply\022&.cosmos.nft.v1beta1.QuerySupplyReq"
    "uest\032\'.cosmos.nft.v1beta1.QuerySupplyRes"
    "ponse\"-\202\323\344\223\002\'\022%/cosmos/nft/v1beta1/suppl"
    "y/{class_id}\022u\n\004NFTs\022$.cosmos.nft.v1beta"
    "1.QueryNFTsRequest\032%.cosmos.nft.v1beta1."
    "QueryNFTsResponse\" \202\323\344\223\002\032\022\030/cosmos/nft/v"
    "1beta1/nfts\022\202\001\n\003NFT\022#.cosmos.nft.v1beta1"
    ".QueryNFTRequest\032$.cosmos.nft.v1beta1.Qu"
    "eryNFTResponse\"0\202\323\344\223\002*\022(/cosmos/nft/v1be"
    "ta1/nfts/{class_id}/{id}\022\206\001\n\005Class\022%.cos"
    "mos.nft.v1beta1.QueryClassRequest\032&.cosm"
    "os.nft.v1beta1.QueryClassResponse\".\202\323\344\223\002"
    "(\022&/cosmos/nft/v1beta1/classes/{class_id"
    "}\022\201\001\n\007Classes\022\'.cosmos.nft.v1beta1.Query"
    "ClassesRequest\032(.cosmos.nft.v1beta1.Quer"
    "yClassesResponse\"#\202\323\344\223\002\035\022\033/cosmos/nft/v1"
    "beta1/classesB\262\001\n\026com.cosmos.nft.v1beta1"
    "B\nQueryProtoP\001Z\"github.com/cosmos/cosmos"
    "-sdk/x/nft\242\002\003CNX\252\002\022Cosmos.Nft.V1beta1\312\002\022"
    "Cosmos\\Nft\\V1beta1\342\002\036Cosmos\\Nft\\V1beta1\\"
    "GPBMetadata\352\002\024Cosmos::Nft::V1beta1b\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    2402,
    descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fquery_2eproto,
    "cosmos/nft/v1beta1/query.proto",
    &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_deps,
    3,
    14,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fnft_2fv1beta1_2fquery_2eproto(&descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto);
namespace cosmos {
namespace nft {
namespace v1beta1 {
// ===================================================================

class QueryBalanceRequest::_Internal {
 public:
};

QueryBalanceRequest::QueryBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryBalanceRequest)
}
QueryBalanceRequest::QueryBalanceRequest(const QueryBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBalanceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryBalanceRequest)
}

inline void QueryBalanceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryBalanceRequest::~QueryBalanceRequest() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryBalanceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBalanceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
  _impl_.owner_.Destroy();
}

void QueryBalanceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryBalanceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBalanceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryBalanceRequest.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryBalanceRequest.owner"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBalanceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryBalanceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryBalanceRequest.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    const std::string& _s = this->_internal_owner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryBalanceRequest.owner");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryBalanceRequest)
  return target;
}

::size_t QueryBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryBalanceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBalanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBalanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBalanceRequest::GetClassData() const { return &_class_data_; }


void QueryBalanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBalanceRequest*>(&to_msg);
  auto& from = static_cast<const QueryBalanceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryBalanceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBalanceRequest::CopyFrom(const QueryBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceRequest::IsInitialized() const {
  return true;
}

void QueryBalanceRequest::InternalSwap(QueryBalanceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, lhs_arena,
                                       &other->_impl_.owner_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBalanceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryBalanceResponse::_Internal {
 public:
};

QueryBalanceResponse::QueryBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryBalanceResponse)
}
QueryBalanceResponse::QueryBalanceResponse(const QueryBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryBalanceResponse)
}

inline void QueryBalanceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryBalanceResponse::~QueryBalanceResponse() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryBalanceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBalanceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryBalanceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryBalanceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amount_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBalanceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 amount = 1 [json_name = "amount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBalanceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryBalanceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1 [json_name = "amount"];
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryBalanceResponse)
  return target;
}

::size_t QueryBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryBalanceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 amount = 1 [json_name = "amount"];
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBalanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBalanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBalanceResponse::GetClassData() const { return &_class_data_; }


void QueryBalanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBalanceResponse*>(&to_msg);
  auto& from = static_cast<const QueryBalanceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryBalanceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBalanceResponse::CopyFrom(const QueryBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceResponse::IsInitialized() const {
  return true;
}

void QueryBalanceResponse::InternalSwap(QueryBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBalanceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryOwnerRequest::_Internal {
 public:
};

QueryOwnerRequest::QueryOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryOwnerRequest)
}
QueryOwnerRequest::QueryOwnerRequest(const QueryOwnerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOwnerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryOwnerRequest)
}

inline void QueryOwnerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryOwnerRequest::~QueryOwnerRequest() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryOwnerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOwnerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
  _impl_.id_.Destroy();
}

void QueryOwnerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryOwnerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOwnerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryOwnerRequest.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryOwnerRequest.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOwnerRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryOwnerRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryOwnerRequest.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryOwnerRequest.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryOwnerRequest)
  return target;
}

::size_t QueryOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryOwnerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOwnerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOwnerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOwnerRequest::GetClassData() const { return &_class_data_; }


void QueryOwnerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOwnerRequest*>(&to_msg);
  auto& from = static_cast<const QueryOwnerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryOwnerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOwnerRequest::CopyFrom(const QueryOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOwnerRequest::IsInitialized() const {
  return true;
}

void QueryOwnerRequest::InternalSwap(QueryOwnerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOwnerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryOwnerResponse::_Internal {
 public:
};

QueryOwnerResponse::QueryOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryOwnerResponse)
}
QueryOwnerResponse::QueryOwnerResponse(const QueryOwnerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryOwnerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryOwnerResponse)
}

inline void QueryOwnerResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryOwnerResponse::~QueryOwnerResponse() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryOwnerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryOwnerResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_.Destroy();
}

void QueryOwnerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryOwnerResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryOwnerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner = 1 [json_name = "owner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryOwnerResponse.owner"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryOwnerResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryOwnerResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    const std::string& _s = this->_internal_owner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryOwnerResponse.owner");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryOwnerResponse)
  return target;
}

::size_t QueryOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryOwnerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryOwnerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryOwnerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryOwnerResponse::GetClassData() const { return &_class_data_; }


void QueryOwnerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryOwnerResponse*>(&to_msg);
  auto& from = static_cast<const QueryOwnerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryOwnerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryOwnerResponse::CopyFrom(const QueryOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryOwnerResponse::IsInitialized() const {
  return true;
}

void QueryOwnerResponse::InternalSwap(QueryOwnerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, lhs_arena,
                                       &other->_impl_.owner_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryOwnerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[3]);
}
// ===================================================================

class QuerySupplyRequest::_Internal {
 public:
};

QuerySupplyRequest::QuerySupplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QuerySupplyRequest)
}
QuerySupplyRequest::QuerySupplyRequest(const QuerySupplyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySupplyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QuerySupplyRequest)
}

inline void QuerySupplyRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySupplyRequest::~QuerySupplyRequest() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QuerySupplyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySupplyRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
}

void QuerySupplyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySupplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QuerySupplyRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySupplyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QuerySupplyRequest.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySupplyRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QuerySupplyRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QuerySupplyRequest.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QuerySupplyRequest)
  return target;
}

::size_t QuerySupplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QuerySupplyRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySupplyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySupplyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySupplyRequest::GetClassData() const { return &_class_data_; }


void QuerySupplyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySupplyRequest*>(&to_msg);
  auto& from = static_cast<const QuerySupplyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QuerySupplyRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySupplyRequest::CopyFrom(const QuerySupplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QuerySupplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySupplyRequest::IsInitialized() const {
  return true;
}

void QuerySupplyRequest::InternalSwap(QuerySupplyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySupplyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[4]);
}
// ===================================================================

class QuerySupplyResponse::_Internal {
 public:
};

QuerySupplyResponse::QuerySupplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QuerySupplyResponse)
}
QuerySupplyResponse::QuerySupplyResponse(const QuerySupplyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QuerySupplyResponse)
}

inline void QuerySupplyResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySupplyResponse::~QuerySupplyResponse() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QuerySupplyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySupplyResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QuerySupplyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySupplyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QuerySupplyResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.amount_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySupplyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 amount = 1 [json_name = "amount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySupplyResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QuerySupplyResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 amount = 1 [json_name = "amount"];
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QuerySupplyResponse)
  return target;
}

::size_t QuerySupplyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QuerySupplyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 amount = 1 [json_name = "amount"];
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySupplyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySupplyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySupplyResponse::GetClassData() const { return &_class_data_; }


void QuerySupplyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySupplyResponse*>(&to_msg);
  auto& from = static_cast<const QuerySupplyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QuerySupplyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySupplyResponse::CopyFrom(const QuerySupplyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QuerySupplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySupplyResponse::IsInitialized() const {
  return true;
}

void QuerySupplyResponse::InternalSwap(QuerySupplyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySupplyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[5]);
}
// ===================================================================

class QueryNFTsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryNFTsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryNFTsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryNFTsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryNFTsRequest::_Internal::pagination(const QueryNFTsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryNFTsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryNFTsRequest::QueryNFTsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryNFTsRequest)
}
QueryNFTsRequest::QueryNFTsRequest(const QueryNFTsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNFTsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_id_) {}

    , decltype(_impl_.owner_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryNFTsRequest)
}

inline void QueryNFTsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_id_) {}

    , decltype(_impl_.owner_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryNFTsRequest::~QueryNFTsRequest() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryNFTsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNFTsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
  _impl_.owner_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryNFTsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNFTsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryNFTsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNFTsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryNFTsRequest.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryNFTsRequest.owner"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryNFTsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryNFTsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryNFTsRequest.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    const std::string& _s = this->_internal_owner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryNFTsRequest.owner");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryNFTsRequest)
  return target;
}

::size_t QueryNFTsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryNFTsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNFTsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNFTsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNFTsRequest::GetClassData() const { return &_class_data_; }


void QueryNFTsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNFTsRequest*>(&to_msg);
  auto& from = static_cast<const QueryNFTsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryNFTsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNFTsRequest::CopyFrom(const QueryNFTsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryNFTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNFTsRequest::IsInitialized() const {
  return true;
}

void QueryNFTsRequest::InternalSwap(QueryNFTsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, lhs_arena,
                                       &other->_impl_.owner_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNFTsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[6]);
}
// ===================================================================

class QueryNFTsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryNFTsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryNFTsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryNFTsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryNFTsResponse::_Internal::pagination(const QueryNFTsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryNFTsResponse::clear_nfts() {
  _internal_mutable_nfts()->Clear();
}
void QueryNFTsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryNFTsResponse::QueryNFTsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryNFTsResponse)
}
QueryNFTsResponse::QueryNFTsResponse(const QueryNFTsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNFTsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nfts_){from._impl_.nfts_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryNFTsResponse)
}

inline void QueryNFTsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nfts_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryNFTsResponse::~QueryNFTsResponse() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryNFTsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNFTsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_nfts()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryNFTsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNFTsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryNFTsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_nfts()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNFTsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.nft.v1beta1.NFT nfts = 1 [json_name = "nfts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nfts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryNFTsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryNFTsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.nft.v1beta1.NFT nfts = 1 [json_name = "nfts"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nfts_size()); i < n; i++) {
    const auto& repfield = this->_internal_nfts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryNFTsResponse)
  return target;
}

::size_t QueryNFTsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryNFTsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.nft.v1beta1.NFT nfts = 1 [json_name = "nfts"];
  total_size += 1UL * this->_internal_nfts_size();
  for (const auto& msg : this->_internal_nfts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNFTsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNFTsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNFTsResponse::GetClassData() const { return &_class_data_; }


void QueryNFTsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNFTsResponse*>(&to_msg);
  auto& from = static_cast<const QueryNFTsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryNFTsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nfts()->MergeFrom(from._internal_nfts());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNFTsResponse::CopyFrom(const QueryNFTsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryNFTsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNFTsResponse::IsInitialized() const {
  return true;
}

void QueryNFTsResponse::InternalSwap(QueryNFTsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_nfts()->InternalSwap(other->_internal_mutable_nfts());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNFTsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[7]);
}
// ===================================================================

class QueryNFTRequest::_Internal {
 public:
};

QueryNFTRequest::QueryNFTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryNFTRequest)
}
QueryNFTRequest::QueryNFTRequest(const QueryNFTRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNFTRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryNFTRequest)
}

inline void QueryNFTRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryNFTRequest::~QueryNFTRequest() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryNFTRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNFTRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
  _impl_.id_.Destroy();
}

void QueryNFTRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNFTRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryNFTRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNFTRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryNFTRequest.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryNFTRequest.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryNFTRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryNFTRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryNFTRequest.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryNFTRequest.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryNFTRequest)
  return target;
}

::size_t QueryNFTRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryNFTRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNFTRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNFTRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNFTRequest::GetClassData() const { return &_class_data_; }


void QueryNFTRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNFTRequest*>(&to_msg);
  auto& from = static_cast<const QueryNFTRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryNFTRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNFTRequest::CopyFrom(const QueryNFTRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryNFTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNFTRequest::IsInitialized() const {
  return true;
}

void QueryNFTRequest::InternalSwap(QueryNFTRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNFTRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryNFTResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryNFTResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryNFTResponse, _impl_._has_bits_);
  static const ::cosmos::nft::v1beta1::NFT& nft(const QueryNFTResponse* msg);
  static void set_has_nft(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::nft::v1beta1::NFT&
QueryNFTResponse::_Internal::nft(const QueryNFTResponse* msg) {
  return *msg->_impl_.nft_;
}
void QueryNFTResponse::clear_nft() {
  if (_impl_.nft_ != nullptr) _impl_.nft_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryNFTResponse::QueryNFTResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryNFTResponse)
}
QueryNFTResponse::QueryNFTResponse(const QueryNFTResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNFTResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nft_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.nft_ = new ::cosmos::nft::v1beta1::NFT(*from._impl_.nft_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryNFTResponse)
}

inline void QueryNFTResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nft_){nullptr}
  };
}

QueryNFTResponse::~QueryNFTResponse() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryNFTResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNFTResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nft_;
}

void QueryNFTResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNFTResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryNFTResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.nft_ != nullptr);
    _impl_.nft_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNFTResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.nft.v1beta1.NFT nft = 1 [json_name = "nft"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_nft(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryNFTResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryNFTResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.nft.v1beta1.NFT nft = 1 [json_name = "nft"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::nft(this),
        _Internal::nft(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryNFTResponse)
  return target;
}

::size_t QueryNFTResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryNFTResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.nft.v1beta1.NFT nft = 1 [json_name = "nft"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nft_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNFTResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNFTResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNFTResponse::GetClassData() const { return &_class_data_; }


void QueryNFTResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNFTResponse*>(&to_msg);
  auto& from = static_cast<const QueryNFTResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryNFTResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_nft()->::cosmos::nft::v1beta1::NFT::MergeFrom(
        from._internal_nft());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNFTResponse::CopyFrom(const QueryNFTResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryNFTResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNFTResponse::IsInitialized() const {
  return true;
}

void QueryNFTResponse::InternalSwap(QueryNFTResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.nft_, other->_impl_.nft_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNFTResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[9]);
}
// ===================================================================

class QueryClassRequest::_Internal {
 public:
};

QueryClassRequest::QueryClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryClassRequest)
}
QueryClassRequest::QueryClassRequest(const QueryClassRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryClassRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryClassRequest)
}

inline void QueryClassRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryClassRequest::~QueryClassRequest() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryClassRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryClassRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
}

void QueryClassRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryClassRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryClassRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryClassRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.QueryClassRequest.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryClassRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryClassRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.QueryClassRequest.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryClassRequest)
  return target;
}

::size_t QueryClassRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryClassRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryClassRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryClassRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryClassRequest::GetClassData() const { return &_class_data_; }


void QueryClassRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryClassRequest*>(&to_msg);
  auto& from = static_cast<const QueryClassRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryClassRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryClassRequest::CopyFrom(const QueryClassRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryClassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryClassRequest::IsInitialized() const {
  return true;
}

void QueryClassRequest::InternalSwap(QueryClassRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryClassRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[10]);
}
// ===================================================================

class QueryClassResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryClassResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryClassResponse, _impl_._has_bits_);
  static const ::cosmos::nft::v1beta1::Class& class_(const QueryClassResponse* msg);
  static void set_has_class_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::nft::v1beta1::Class&
QueryClassResponse::_Internal::class_(const QueryClassResponse* msg) {
  return *msg->_impl_.class__;
}
void QueryClassResponse::clear_class_() {
  if (_impl_.class__ != nullptr) _impl_.class__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryClassResponse::QueryClassResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryClassResponse)
}
QueryClassResponse::QueryClassResponse(const QueryClassResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryClassResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class__){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.class__ = new ::cosmos::nft::v1beta1::Class(*from._impl_.class__);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryClassResponse)
}

inline void QueryClassResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class__){nullptr}
  };
}

QueryClassResponse::~QueryClassResponse() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryClassResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryClassResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.class__;
}

void QueryClassResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryClassResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryClassResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.class__ != nullptr);
    _impl_.class__->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryClassResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.nft.v1beta1.Class class = 1 [json_name = "class"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_class_(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryClassResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryClassResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.nft.v1beta1.Class class = 1 [json_name = "class"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::class_(this),
        _Internal::class_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryClassResponse)
  return target;
}

::size_t QueryClassResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryClassResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.nft.v1beta1.Class class = 1 [json_name = "class"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.class__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryClassResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryClassResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryClassResponse::GetClassData() const { return &_class_data_; }


void QueryClassResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryClassResponse*>(&to_msg);
  auto& from = static_cast<const QueryClassResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryClassResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_class_()->::cosmos::nft::v1beta1::Class::MergeFrom(
        from._internal_class_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryClassResponse::CopyFrom(const QueryClassResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryClassResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryClassResponse::IsInitialized() const {
  return true;
}

void QueryClassResponse::InternalSwap(QueryClassResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.class__, other->_impl_.class__);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryClassResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryClassesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryClassesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryClassesRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryClassesRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryClassesRequest::_Internal::pagination(const QueryClassesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryClassesRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryClassesRequest::QueryClassesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryClassesRequest)
}
QueryClassesRequest::QueryClassesRequest(const QueryClassesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryClassesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryClassesRequest)
}

inline void QueryClassesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryClassesRequest::~QueryClassesRequest() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryClassesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryClassesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryClassesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryClassesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryClassesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryClassesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryClassesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryClassesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryClassesRequest)
  return target;
}

::size_t QueryClassesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryClassesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryClassesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryClassesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryClassesRequest::GetClassData() const { return &_class_data_; }


void QueryClassesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryClassesRequest*>(&to_msg);
  auto& from = static_cast<const QueryClassesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryClassesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryClassesRequest::CopyFrom(const QueryClassesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryClassesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryClassesRequest::IsInitialized() const {
  return true;
}

void QueryClassesRequest::InternalSwap(QueryClassesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryClassesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryClassesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryClassesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryClassesResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryClassesResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryClassesResponse::_Internal::pagination(const QueryClassesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryClassesResponse::clear_classes() {
  _internal_mutable_classes()->Clear();
}
void QueryClassesResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryClassesResponse::QueryClassesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.QueryClassesResponse)
}
QueryClassesResponse::QueryClassesResponse(const QueryClassesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryClassesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classes_){from._impl_.classes_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.QueryClassesResponse)
}

inline void QueryClassesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.classes_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryClassesResponse::~QueryClassesResponse() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.QueryClassesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryClassesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_classes()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryClassesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryClassesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.QueryClassesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_classes()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryClassesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryClassesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.QueryClassesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classes_size()); i < n; i++) {
    const auto& repfield = this->_internal_classes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.QueryClassesResponse)
  return target;
}

::size_t QueryClassesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.QueryClassesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
  total_size += 1UL * this->_internal_classes_size();
  for (const auto& msg : this->_internal_classes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryClassesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryClassesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryClassesResponse::GetClassData() const { return &_class_data_; }


void QueryClassesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryClassesResponse*>(&to_msg);
  auto& from = static_cast<const QueryClassesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.QueryClassesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_classes()->MergeFrom(from._internal_classes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryClassesResponse::CopyFrom(const QueryClassesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.QueryClassesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryClassesResponse::IsInitialized() const {
  return true;
}

void QueryClassesResponse::InternalSwap(QueryClassesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_classes()->InternalSwap(other->_internal_mutable_classes());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryClassesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fquery_2eproto[13]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryBalanceRequest*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryBalanceResponse*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryOwnerRequest*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryOwnerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryOwnerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryOwnerResponse*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryOwnerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QuerySupplyRequest*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QuerySupplyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QuerySupplyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QuerySupplyResponse*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QuerySupplyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QuerySupplyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryNFTsRequest*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryNFTsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryNFTsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryNFTsResponse*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryNFTsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryNFTsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryNFTRequest*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryNFTRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryNFTRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryNFTResponse*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryNFTResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryNFTResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryClassRequest*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryClassRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryClassRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryClassResponse*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryClassResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryClassResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryClassesRequest*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryClassesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryClassesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::QueryClassesResponse*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::QueryClassesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::QueryClassesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

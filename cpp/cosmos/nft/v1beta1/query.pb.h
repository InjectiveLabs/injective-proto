// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/nft/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/nft/v1beta1/nft.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fnft_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace nft {
namespace v1beta1 {
class QueryBalanceRequest;
struct QueryBalanceRequestDefaultTypeInternal;
extern QueryBalanceRequestDefaultTypeInternal _QueryBalanceRequest_default_instance_;
class QueryBalanceResponse;
struct QueryBalanceResponseDefaultTypeInternal;
extern QueryBalanceResponseDefaultTypeInternal _QueryBalanceResponse_default_instance_;
class QueryClassRequest;
struct QueryClassRequestDefaultTypeInternal;
extern QueryClassRequestDefaultTypeInternal _QueryClassRequest_default_instance_;
class QueryClassResponse;
struct QueryClassResponseDefaultTypeInternal;
extern QueryClassResponseDefaultTypeInternal _QueryClassResponse_default_instance_;
class QueryClassesRequest;
struct QueryClassesRequestDefaultTypeInternal;
extern QueryClassesRequestDefaultTypeInternal _QueryClassesRequest_default_instance_;
class QueryClassesResponse;
struct QueryClassesResponseDefaultTypeInternal;
extern QueryClassesResponseDefaultTypeInternal _QueryClassesResponse_default_instance_;
class QueryNFTRequest;
struct QueryNFTRequestDefaultTypeInternal;
extern QueryNFTRequestDefaultTypeInternal _QueryNFTRequest_default_instance_;
class QueryNFTResponse;
struct QueryNFTResponseDefaultTypeInternal;
extern QueryNFTResponseDefaultTypeInternal _QueryNFTResponse_default_instance_;
class QueryNFTsRequest;
struct QueryNFTsRequestDefaultTypeInternal;
extern QueryNFTsRequestDefaultTypeInternal _QueryNFTsRequest_default_instance_;
class QueryNFTsResponse;
struct QueryNFTsResponseDefaultTypeInternal;
extern QueryNFTsResponseDefaultTypeInternal _QueryNFTsResponse_default_instance_;
class QueryOwnerRequest;
struct QueryOwnerRequestDefaultTypeInternal;
extern QueryOwnerRequestDefaultTypeInternal _QueryOwnerRequest_default_instance_;
class QueryOwnerResponse;
struct QueryOwnerResponseDefaultTypeInternal;
extern QueryOwnerResponseDefaultTypeInternal _QueryOwnerResponse_default_instance_;
class QuerySupplyRequest;
struct QuerySupplyRequestDefaultTypeInternal;
extern QuerySupplyRequestDefaultTypeInternal _QuerySupplyRequest_default_instance_;
class QuerySupplyResponse;
struct QuerySupplyResponseDefaultTypeInternal;
extern QuerySupplyResponseDefaultTypeInternal _QuerySupplyResponse_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::nft::v1beta1::QueryBalanceRequest* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryBalanceRequest>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryBalanceResponse* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryBalanceResponse>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryClassRequest* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryClassRequest>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryClassResponse* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryClassResponse>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryClassesRequest* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryClassesRequest>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryClassesResponse* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryClassesResponse>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryNFTRequest* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryNFTRequest>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryNFTResponse* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryNFTResponse>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryNFTsRequest* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryNFTsRequest>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryNFTsResponse* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryNFTsResponse>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryOwnerRequest* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryOwnerRequest>(Arena*);
template <>
::cosmos::nft::v1beta1::QueryOwnerResponse* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QueryOwnerResponse>(Arena*);
template <>
::cosmos::nft::v1beta1::QuerySupplyRequest* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QuerySupplyRequest>(Arena*);
template <>
::cosmos::nft::v1beta1::QuerySupplyResponse* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::QuerySupplyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace nft {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryBalanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryBalanceRequest) */ {
 public:
  inline QueryBalanceRequest() : QueryBalanceRequest(nullptr) {}
  ~QueryBalanceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBalanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBalanceRequest(const QueryBalanceRequest& from);
  QueryBalanceRequest(QueryBalanceRequest&& from) noexcept
    : QueryBalanceRequest() {
    *this = ::std::move(from);
  }

  inline QueryBalanceRequest& operator=(const QueryBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBalanceRequest& operator=(QueryBalanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBalanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryBalanceRequest*>(
               &_QueryBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryBalanceRequest& a, QueryBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBalanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBalanceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBalanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryBalanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryBalanceRequest& from) {
    QueryBalanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBalanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryBalanceRequest";
  }
  protected:
  explicit QueryBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string owner = 2 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryBalanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryBalanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryBalanceResponse) */ {
 public:
  inline QueryBalanceResponse() : QueryBalanceResponse(nullptr) {}
  ~QueryBalanceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBalanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBalanceResponse(const QueryBalanceResponse& from);
  QueryBalanceResponse(QueryBalanceResponse&& from) noexcept
    : QueryBalanceResponse() {
    *this = ::std::move(from);
  }

  inline QueryBalanceResponse& operator=(const QueryBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBalanceResponse& operator=(QueryBalanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBalanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryBalanceResponse*>(
               &_QueryBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryBalanceResponse& a, QueryBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBalanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBalanceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBalanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryBalanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryBalanceResponse& from) {
    QueryBalanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBalanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryBalanceResponse";
  }
  protected:
  explicit QueryBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // uint64 amount = 1 [json_name = "amount"];
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryBalanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOwnerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryOwnerRequest) */ {
 public:
  inline QueryOwnerRequest() : QueryOwnerRequest(nullptr) {}
  ~QueryOwnerRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOwnerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOwnerRequest(const QueryOwnerRequest& from);
  QueryOwnerRequest(QueryOwnerRequest&& from) noexcept
    : QueryOwnerRequest() {
    *this = ::std::move(from);
  }

  inline QueryOwnerRequest& operator=(const QueryOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOwnerRequest& operator=(QueryOwnerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOwnerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const QueryOwnerRequest*>(
               &_QueryOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryOwnerRequest& a, QueryOwnerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOwnerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOwnerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOwnerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOwnerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOwnerRequest& from) {
    QueryOwnerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOwnerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryOwnerRequest";
  }
  protected:
  explicit QueryOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryOwnerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOwnerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryOwnerResponse) */ {
 public:
  inline QueryOwnerResponse() : QueryOwnerResponse(nullptr) {}
  ~QueryOwnerResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOwnerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOwnerResponse(const QueryOwnerResponse& from);
  QueryOwnerResponse(QueryOwnerResponse&& from) noexcept
    : QueryOwnerResponse() {
    *this = ::std::move(from);
  }

  inline QueryOwnerResponse& operator=(const QueryOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOwnerResponse& operator=(QueryOwnerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOwnerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const QueryOwnerResponse*>(
               &_QueryOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryOwnerResponse& a, QueryOwnerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOwnerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOwnerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOwnerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOwnerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOwnerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOwnerResponse& from) {
    QueryOwnerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOwnerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryOwnerResponse";
  }
  protected:
  explicit QueryOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
  };
  // string owner = 1 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryOwnerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySupplyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QuerySupplyRequest) */ {
 public:
  inline QuerySupplyRequest() : QuerySupplyRequest(nullptr) {}
  ~QuerySupplyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySupplyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySupplyRequest(const QuerySupplyRequest& from);
  QuerySupplyRequest(QuerySupplyRequest&& from) noexcept
    : QuerySupplyRequest() {
    *this = ::std::move(from);
  }

  inline QuerySupplyRequest& operator=(const QuerySupplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySupplyRequest& operator=(QuerySupplyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySupplyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySupplyRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySupplyRequest*>(
               &_QuerySupplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QuerySupplyRequest& a, QuerySupplyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySupplyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySupplyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySupplyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySupplyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySupplyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySupplyRequest& from) {
    QuerySupplyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySupplyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QuerySupplyRequest";
  }
  protected:
  explicit QuerySupplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QuerySupplyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySupplyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QuerySupplyResponse) */ {
 public:
  inline QuerySupplyResponse() : QuerySupplyResponse(nullptr) {}
  ~QuerySupplyResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySupplyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySupplyResponse(const QuerySupplyResponse& from);
  QuerySupplyResponse(QuerySupplyResponse&& from) noexcept
    : QuerySupplyResponse() {
    *this = ::std::move(from);
  }

  inline QuerySupplyResponse& operator=(const QuerySupplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySupplyResponse& operator=(QuerySupplyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySupplyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySupplyResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySupplyResponse*>(
               &_QuerySupplyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QuerySupplyResponse& a, QuerySupplyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySupplyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySupplyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySupplyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySupplyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySupplyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySupplyResponse& from) {
    QuerySupplyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySupplyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QuerySupplyResponse";
  }
  protected:
  explicit QuerySupplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // uint64 amount = 1 [json_name = "amount"];
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QuerySupplyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryNFTsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryNFTsRequest) */ {
 public:
  inline QueryNFTsRequest() : QueryNFTsRequest(nullptr) {}
  ~QueryNFTsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNFTsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNFTsRequest(const QueryNFTsRequest& from);
  QueryNFTsRequest(QueryNFTsRequest&& from) noexcept
    : QueryNFTsRequest() {
    *this = ::std::move(from);
  }

  inline QueryNFTsRequest& operator=(const QueryNFTsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNFTsRequest& operator=(QueryNFTsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNFTsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNFTsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryNFTsRequest*>(
               &_QueryNFTsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryNFTsRequest& a, QueryNFTsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNFTsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNFTsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNFTsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNFTsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNFTsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNFTsRequest& from) {
    QueryNFTsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNFTsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryNFTsRequest";
  }
  protected:
  explicit QueryNFTsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string owner = 2 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryNFTsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryNFTsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryNFTsResponse) */ {
 public:
  inline QueryNFTsResponse() : QueryNFTsResponse(nullptr) {}
  ~QueryNFTsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNFTsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNFTsResponse(const QueryNFTsResponse& from);
  QueryNFTsResponse(QueryNFTsResponse&& from) noexcept
    : QueryNFTsResponse() {
    *this = ::std::move(from);
  }

  inline QueryNFTsResponse& operator=(const QueryNFTsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNFTsResponse& operator=(QueryNFTsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNFTsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNFTsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryNFTsResponse*>(
               &_QueryNFTsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryNFTsResponse& a, QueryNFTsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNFTsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNFTsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNFTsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNFTsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNFTsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNFTsResponse& from) {
    QueryNFTsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNFTsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryNFTsResponse";
  }
  protected:
  explicit QueryNFTsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNftsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.nft.v1beta1.NFT nfts = 1 [json_name = "nfts"];
  int nfts_size() const;
  private:
  int _internal_nfts_size() const;

  public:
  void clear_nfts() ;
  ::cosmos::nft::v1beta1::NFT* mutable_nfts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT >*
      mutable_nfts();
  private:
  const ::cosmos::nft::v1beta1::NFT& _internal_nfts(int index) const;
  ::cosmos::nft::v1beta1::NFT* _internal_add_nfts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>& _internal_nfts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>* _internal_mutable_nfts();
  public:
  const ::cosmos::nft::v1beta1::NFT& nfts(int index) const;
  ::cosmos::nft::v1beta1::NFT* add_nfts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT >&
      nfts() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryNFTsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT > nfts_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryNFTRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryNFTRequest) */ {
 public:
  inline QueryNFTRequest() : QueryNFTRequest(nullptr) {}
  ~QueryNFTRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNFTRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNFTRequest(const QueryNFTRequest& from);
  QueryNFTRequest(QueryNFTRequest&& from) noexcept
    : QueryNFTRequest() {
    *this = ::std::move(from);
  }

  inline QueryNFTRequest& operator=(const QueryNFTRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNFTRequest& operator=(QueryNFTRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNFTRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNFTRequest* internal_default_instance() {
    return reinterpret_cast<const QueryNFTRequest*>(
               &_QueryNFTRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryNFTRequest& a, QueryNFTRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNFTRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNFTRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNFTRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNFTRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNFTRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNFTRequest& from) {
    QueryNFTRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNFTRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryNFTRequest";
  }
  protected:
  explicit QueryNFTRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryNFTRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryNFTResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryNFTResponse) */ {
 public:
  inline QueryNFTResponse() : QueryNFTResponse(nullptr) {}
  ~QueryNFTResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNFTResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNFTResponse(const QueryNFTResponse& from);
  QueryNFTResponse(QueryNFTResponse&& from) noexcept
    : QueryNFTResponse() {
    *this = ::std::move(from);
  }

  inline QueryNFTResponse& operator=(const QueryNFTResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNFTResponse& operator=(QueryNFTResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNFTResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNFTResponse* internal_default_instance() {
    return reinterpret_cast<const QueryNFTResponse*>(
               &_QueryNFTResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryNFTResponse& a, QueryNFTResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNFTResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNFTResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNFTResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNFTResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNFTResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNFTResponse& from) {
    QueryNFTResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNFTResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryNFTResponse";
  }
  protected:
  explicit QueryNFTResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNftFieldNumber = 1,
  };
  // .cosmos.nft.v1beta1.NFT nft = 1 [json_name = "nft"];
  bool has_nft() const;
  void clear_nft() ;
  const ::cosmos::nft::v1beta1::NFT& nft() const;
  PROTOBUF_NODISCARD ::cosmos::nft::v1beta1::NFT* release_nft();
  ::cosmos::nft::v1beta1::NFT* mutable_nft();
  void set_allocated_nft(::cosmos::nft::v1beta1::NFT* nft);
  private:
  const ::cosmos::nft::v1beta1::NFT& _internal_nft() const;
  ::cosmos::nft::v1beta1::NFT* _internal_mutable_nft();
  public:
  void unsafe_arena_set_allocated_nft(
      ::cosmos::nft::v1beta1::NFT* nft);
  ::cosmos::nft::v1beta1::NFT* unsafe_arena_release_nft();
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryNFTResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::nft::v1beta1::NFT* nft_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClassRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryClassRequest) */ {
 public:
  inline QueryClassRequest() : QueryClassRequest(nullptr) {}
  ~QueryClassRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClassRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClassRequest(const QueryClassRequest& from);
  QueryClassRequest(QueryClassRequest&& from) noexcept
    : QueryClassRequest() {
    *this = ::std::move(from);
  }

  inline QueryClassRequest& operator=(const QueryClassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClassRequest& operator=(QueryClassRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClassRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClassRequest* internal_default_instance() {
    return reinterpret_cast<const QueryClassRequest*>(
               &_QueryClassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryClassRequest& a, QueryClassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClassRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClassRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClassRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClassRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClassRequest& from) {
    QueryClassRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClassRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryClassRequest";
  }
  protected:
  explicit QueryClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryClassRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClassResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryClassResponse) */ {
 public:
  inline QueryClassResponse() : QueryClassResponse(nullptr) {}
  ~QueryClassResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClassResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClassResponse(const QueryClassResponse& from);
  QueryClassResponse(QueryClassResponse&& from) noexcept
    : QueryClassResponse() {
    *this = ::std::move(from);
  }

  inline QueryClassResponse& operator=(const QueryClassResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClassResponse& operator=(QueryClassResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClassResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClassResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClassResponse*>(
               &_QueryClassResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryClassResponse& a, QueryClassResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClassResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClassResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClassResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClassResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClassResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClassResponse& from) {
    QueryClassResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClassResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryClassResponse";
  }
  protected:
  explicit QueryClassResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassFieldNumber = 1,
  };
  // .cosmos.nft.v1beta1.Class class = 1 [json_name = "class"];
  bool has_class_() const;
  void clear_class_() ;
  const ::cosmos::nft::v1beta1::Class& class_() const;
  PROTOBUF_NODISCARD ::cosmos::nft::v1beta1::Class* release_class_();
  ::cosmos::nft::v1beta1::Class* mutable_class_();
  void set_allocated_class_(::cosmos::nft::v1beta1::Class* class_);
  private:
  const ::cosmos::nft::v1beta1::Class& _internal_class_() const;
  ::cosmos::nft::v1beta1::Class* _internal_mutable_class_();
  public:
  void unsafe_arena_set_allocated_class_(
      ::cosmos::nft::v1beta1::Class* class_);
  ::cosmos::nft::v1beta1::Class* unsafe_arena_release_class_();
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryClassResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::nft::v1beta1::Class* class__;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClassesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryClassesRequest) */ {
 public:
  inline QueryClassesRequest() : QueryClassesRequest(nullptr) {}
  ~QueryClassesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClassesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClassesRequest(const QueryClassesRequest& from);
  QueryClassesRequest(QueryClassesRequest&& from) noexcept
    : QueryClassesRequest() {
    *this = ::std::move(from);
  }

  inline QueryClassesRequest& operator=(const QueryClassesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClassesRequest& operator=(QueryClassesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClassesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClassesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryClassesRequest*>(
               &_QueryClassesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryClassesRequest& a, QueryClassesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClassesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClassesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClassesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClassesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClassesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClassesRequest& from) {
    QueryClassesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClassesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryClassesRequest";
  }
  protected:
  explicit QueryClassesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryClassesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClassesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.QueryClassesResponse) */ {
 public:
  inline QueryClassesResponse() : QueryClassesResponse(nullptr) {}
  ~QueryClassesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClassesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClassesResponse(const QueryClassesResponse& from);
  QueryClassesResponse(QueryClassesResponse&& from) noexcept
    : QueryClassesResponse() {
    *this = ::std::move(from);
  }

  inline QueryClassesResponse& operator=(const QueryClassesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClassesResponse& operator=(QueryClassesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClassesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClassesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClassesResponse*>(
               &_QueryClassesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryClassesResponse& a, QueryClassesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClassesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClassesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClassesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClassesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClassesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClassesResponse& from) {
    QueryClassesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClassesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.QueryClassesResponse";
  }
  protected:
  explicit QueryClassesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
  int classes_size() const;
  private:
  int _internal_classes_size() const;

  public:
  void clear_classes() ;
  ::cosmos::nft::v1beta1::Class* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class >*
      mutable_classes();
  private:
  const ::cosmos::nft::v1beta1::Class& _internal_classes(int index) const;
  ::cosmos::nft::v1beta1::Class* _internal_add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Class>& _internal_classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Class>* _internal_mutable_classes();
  public:
  const ::cosmos::nft::v1beta1::Class& classes(int index) const;
  ::cosmos::nft::v1beta1::Class* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class >&
      classes() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.QueryClassesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class > classes_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryBalanceRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryBalanceRequest::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryBalanceRequest::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryBalanceRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
}
inline std::string* QueryBalanceRequest::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
  return _s;
}
inline const std::string& QueryBalanceRequest::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void QueryBalanceRequest::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryBalanceRequest::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryBalanceRequest::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryBalanceRequest::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryBalanceRequest.class_id)
}

// string owner = 2 [json_name = "owner"];
inline void QueryBalanceRequest::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& QueryBalanceRequest::owner() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryBalanceRequest::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
}
inline std::string* QueryBalanceRequest::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
  return _s;
}
inline const std::string& QueryBalanceRequest::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void QueryBalanceRequest::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryBalanceRequest::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryBalanceRequest::release_owner() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
  return _impl_.owner_.Release();
}
inline void QueryBalanceRequest::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryBalanceRequest.owner)
}

// -------------------------------------------------------------------

// QueryBalanceResponse

// uint64 amount = 1 [json_name = "amount"];
inline void QueryBalanceResponse::clear_amount() {
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t QueryBalanceResponse::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryBalanceResponse.amount)
  return _internal_amount();
}
inline void QueryBalanceResponse::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryBalanceResponse.amount)
}
inline ::uint64_t QueryBalanceResponse::_internal_amount() const {
  return _impl_.amount_;
}
inline void QueryBalanceResponse::_internal_set_amount(::uint64_t value) {
  ;
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// QueryOwnerRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryOwnerRequest::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryOwnerRequest::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOwnerRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
}
inline std::string* QueryOwnerRequest::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
  return _s;
}
inline const std::string& QueryOwnerRequest::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void QueryOwnerRequest::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryOwnerRequest::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryOwnerRequest::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryOwnerRequest::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryOwnerRequest.class_id)
}

// string id = 2 [json_name = "id"];
inline void QueryOwnerRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QueryOwnerRequest::id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryOwnerRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOwnerRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryOwnerRequest.id)
}
inline std::string* QueryOwnerRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryOwnerRequest.id)
  return _s;
}
inline const std::string& QueryOwnerRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void QueryOwnerRequest::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryOwnerRequest::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryOwnerRequest::release_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryOwnerRequest.id)
  return _impl_.id_.Release();
}
inline void QueryOwnerRequest::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryOwnerRequest.id)
}

// -------------------------------------------------------------------

// QueryOwnerResponse

// string owner = 1 [json_name = "owner"];
inline void QueryOwnerResponse::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& QueryOwnerResponse::owner() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOwnerResponse::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
}
inline std::string* QueryOwnerResponse::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
  return _s;
}
inline const std::string& QueryOwnerResponse::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void QueryOwnerResponse::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryOwnerResponse::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryOwnerResponse::release_owner() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
  return _impl_.owner_.Release();
}
inline void QueryOwnerResponse::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryOwnerResponse.owner)
}

// -------------------------------------------------------------------

// QuerySupplyRequest

// string class_id = 1 [json_name = "classId"];
inline void QuerySupplyRequest::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QuerySupplyRequest::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySupplyRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
}
inline std::string* QuerySupplyRequest::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
  return _s;
}
inline const std::string& QuerySupplyRequest::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void QuerySupplyRequest::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySupplyRequest::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySupplyRequest::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QuerySupplyRequest::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QuerySupplyRequest.class_id)
}

// -------------------------------------------------------------------

// QuerySupplyResponse

// uint64 amount = 1 [json_name = "amount"];
inline void QuerySupplyResponse::clear_amount() {
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t QuerySupplyResponse::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QuerySupplyResponse.amount)
  return _internal_amount();
}
inline void QuerySupplyResponse::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QuerySupplyResponse.amount)
}
inline ::uint64_t QuerySupplyResponse::_internal_amount() const {
  return _impl_.amount_;
}
inline void QuerySupplyResponse::_internal_set_amount(::uint64_t value) {
  ;
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// QueryNFTsRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryNFTsRequest::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryNFTsRequest::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNFTsRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
}
inline std::string* QueryNFTsRequest::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
  return _s;
}
inline const std::string& QueryNFTsRequest::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void QueryNFTsRequest::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNFTsRequest::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNFTsRequest::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryNFTsRequest::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTsRequest.class_id)
}

// string owner = 2 [json_name = "owner"];
inline void QueryNFTsRequest::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& QueryNFTsRequest::owner() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNFTsRequest::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
}
inline std::string* QueryNFTsRequest::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
  return _s;
}
inline const std::string& QueryNFTsRequest::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void QueryNFTsRequest::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNFTsRequest::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNFTsRequest::release_owner() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
  return _impl_.owner_.Release();
}
inline void QueryNFTsRequest::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTsRequest.owner)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
inline bool QueryNFTsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryNFTsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryNFTsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
  return _internal_pagination();
}
inline void QueryNFTsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryNFTsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryNFTsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryNFTsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryNFTsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
  return _msg;
}
inline void QueryNFTsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryNFTsResponse

// repeated .cosmos.nft.v1beta1.NFT nfts = 1 [json_name = "nfts"];
inline int QueryNFTsResponse::_internal_nfts_size() const {
  return _impl_.nfts_.size();
}
inline int QueryNFTsResponse::nfts_size() const {
  return _internal_nfts_size();
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTsResponse::mutable_nfts(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _internal_mutable_nfts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT >*
QueryNFTsResponse::mutable_nfts() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _internal_mutable_nfts();
}
inline const ::cosmos::nft::v1beta1::NFT& QueryNFTsResponse::_internal_nfts(int index) const {
  return _internal_nfts().Get(index);
}
inline const ::cosmos::nft::v1beta1::NFT& QueryNFTsResponse::nfts(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _internal_nfts(index);
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTsResponse::_internal_add_nfts() {
  return _internal_mutable_nfts()->Add();
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTsResponse::add_nfts() {
  ::cosmos::nft::v1beta1::NFT* _add = _internal_add_nfts();
  // @@protoc_insertion_point(field_add:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT >&
QueryNFTsResponse::nfts() const {
  // @@protoc_insertion_point(field_list:cosmos.nft.v1beta1.QueryNFTsResponse.nfts)
  return _internal_nfts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>&
QueryNFTsResponse::_internal_nfts() const {
  return _impl_.nfts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>*
QueryNFTsResponse::_internal_mutable_nfts() {
  return &_impl_.nfts_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryNFTsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryNFTsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryNFTsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
  return _internal_pagination();
}
inline void QueryNFTsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryNFTsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryNFTsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryNFTsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryNFTsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
  return _msg;
}
inline void QueryNFTsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTsResponse.pagination)
}

// -------------------------------------------------------------------

// QueryNFTRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryNFTRequest::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryNFTRequest::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNFTRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
}
inline std::string* QueryNFTRequest::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
  return _s;
}
inline const std::string& QueryNFTRequest::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void QueryNFTRequest::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNFTRequest::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNFTRequest::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryNFTRequest::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTRequest.class_id)
}

// string id = 2 [json_name = "id"];
inline void QueryNFTRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& QueryNFTRequest::id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNFTRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryNFTRequest.id)
}
inline std::string* QueryNFTRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTRequest.id)
  return _s;
}
inline const std::string& QueryNFTRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void QueryNFTRequest::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNFTRequest::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNFTRequest::release_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTRequest.id)
  return _impl_.id_.Release();
}
inline void QueryNFTRequest::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTRequest.id)
}

// -------------------------------------------------------------------

// QueryNFTResponse

// .cosmos.nft.v1beta1.NFT nft = 1 [json_name = "nft"];
inline bool QueryNFTResponse::has_nft() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nft_ != nullptr);
  return value;
}
inline const ::cosmos::nft::v1beta1::NFT& QueryNFTResponse::_internal_nft() const {
  const ::cosmos::nft::v1beta1::NFT* p = _impl_.nft_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::nft::v1beta1::NFT&>(
      ::cosmos::nft::v1beta1::_NFT_default_instance_);
}
inline const ::cosmos::nft::v1beta1::NFT& QueryNFTResponse::nft() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryNFTResponse.nft)
  return _internal_nft();
}
inline void QueryNFTResponse::unsafe_arena_set_allocated_nft(
    ::cosmos::nft::v1beta1::NFT* nft) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nft_);
  }
  _impl_.nft_ = nft;
  if (nft) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryNFTResponse.nft)
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTResponse::release_nft() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::nft::v1beta1::NFT* temp = _impl_.nft_;
  _impl_.nft_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTResponse::unsafe_arena_release_nft() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryNFTResponse.nft)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::nft::v1beta1::NFT* temp = _impl_.nft_;
  _impl_.nft_ = nullptr;
  return temp;
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTResponse::_internal_mutable_nft() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.nft_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::nft::v1beta1::NFT>(GetArenaForAllocation());
    _impl_.nft_ = p;
  }
  return _impl_.nft_;
}
inline ::cosmos::nft::v1beta1::NFT* QueryNFTResponse::mutable_nft() {
  ::cosmos::nft::v1beta1::NFT* _msg = _internal_mutable_nft();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryNFTResponse.nft)
  return _msg;
}
inline void QueryNFTResponse::set_allocated_nft(::cosmos::nft::v1beta1::NFT* nft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nft_);
  }
  if (nft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nft));
    if (message_arena != submessage_arena) {
      nft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nft, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.nft_ = nft;
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryNFTResponse.nft)
}

// -------------------------------------------------------------------

// QueryClassRequest

// string class_id = 1 [json_name = "classId"];
inline void QueryClassRequest::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& QueryClassRequest::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassRequest.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryClassRequest::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.QueryClassRequest.class_id)
}
inline std::string* QueryClassRequest::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassRequest.class_id)
  return _s;
}
inline const std::string& QueryClassRequest::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void QueryClassRequest::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryClassRequest::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryClassRequest::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryClassRequest.class_id)
  return _impl_.class_id_.Release();
}
inline void QueryClassRequest::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryClassRequest.class_id)
}

// -------------------------------------------------------------------

// QueryClassResponse

// .cosmos.nft.v1beta1.Class class = 1 [json_name = "class"];
inline bool QueryClassResponse::has_class_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.class__ != nullptr);
  return value;
}
inline const ::cosmos::nft::v1beta1::Class& QueryClassResponse::_internal_class_() const {
  const ::cosmos::nft::v1beta1::Class* p = _impl_.class__;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::nft::v1beta1::Class&>(
      ::cosmos::nft::v1beta1::_Class_default_instance_);
}
inline const ::cosmos::nft::v1beta1::Class& QueryClassResponse::class_() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassResponse.class)
  return _internal_class_();
}
inline void QueryClassResponse::unsafe_arena_set_allocated_class_(
    ::cosmos::nft::v1beta1::Class* class_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.class__);
  }
  _impl_.class__ = class_;
  if (class_) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryClassResponse.class)
}
inline ::cosmos::nft::v1beta1::Class* QueryClassResponse::release_class_() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::nft::v1beta1::Class* temp = _impl_.class__;
  _impl_.class__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::nft::v1beta1::Class* QueryClassResponse::unsafe_arena_release_class_() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryClassResponse.class)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::nft::v1beta1::Class* temp = _impl_.class__;
  _impl_.class__ = nullptr;
  return temp;
}
inline ::cosmos::nft::v1beta1::Class* QueryClassResponse::_internal_mutable_class_() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.class__ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::nft::v1beta1::Class>(GetArenaForAllocation());
    _impl_.class__ = p;
  }
  return _impl_.class__;
}
inline ::cosmos::nft::v1beta1::Class* QueryClassResponse::mutable_class_() {
  ::cosmos::nft::v1beta1::Class* _msg = _internal_mutable_class_();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassResponse.class)
  return _msg;
}
inline void QueryClassResponse::set_allocated_class_(::cosmos::nft::v1beta1::Class* class_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.class__);
  }
  if (class_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(class_));
    if (message_arena != submessage_arena) {
      class_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, class_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.class__ = class_;
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryClassResponse.class)
}

// -------------------------------------------------------------------

// QueryClassesRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryClassesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryClassesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryClassesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
  return _internal_pagination();
}
inline void QueryClassesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClassesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClassesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClassesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClassesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
  return _msg;
}
inline void QueryClassesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryClassesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryClassesResponse

// repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
inline int QueryClassesResponse::_internal_classes_size() const {
  return _impl_.classes_.size();
}
inline int QueryClassesResponse::classes_size() const {
  return _internal_classes_size();
}
inline ::cosmos::nft::v1beta1::Class* QueryClassesResponse::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _internal_mutable_classes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class >*
QueryClassesResponse::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _internal_mutable_classes();
}
inline const ::cosmos::nft::v1beta1::Class& QueryClassesResponse::_internal_classes(int index) const {
  return _internal_classes().Get(index);
}
inline const ::cosmos::nft::v1beta1::Class& QueryClassesResponse::classes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _internal_classes(index);
}
inline ::cosmos::nft::v1beta1::Class* QueryClassesResponse::_internal_add_classes() {
  return _internal_mutable_classes()->Add();
}
inline ::cosmos::nft::v1beta1::Class* QueryClassesResponse::add_classes() {
  ::cosmos::nft::v1beta1::Class* _add = _internal_add_classes();
  // @@protoc_insertion_point(field_add:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class >&
QueryClassesResponse::classes() const {
  // @@protoc_insertion_point(field_list:cosmos.nft.v1beta1.QueryClassesResponse.classes)
  return _internal_classes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Class>&
QueryClassesResponse::_internal_classes() const {
  return _impl_.classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Class>*
QueryClassesResponse::_internal_mutable_classes() {
  return &_impl_.classes_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryClassesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryClassesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryClassesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
  return _internal_pagination();
}
inline void QueryClassesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClassesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClassesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClassesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClassesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
  return _msg;
}
inline void QueryClassesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.QueryClassesResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fquery_2eproto_2epb_2eh

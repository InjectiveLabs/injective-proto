// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/nft/v1beta1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/nft/v1beta1/nft.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto;
namespace cosmos {
namespace nft {
namespace v1beta1 {
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::nft::v1beta1::Entry* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::Entry>(Arena*);
template <>
::cosmos::nft::v1beta1::GenesisState* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::GenesisState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace nft {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 1,
    kEntriesFieldNumber = 2,
  };
  // repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
  int classes_size() const;
  private:
  int _internal_classes_size() const;

  public:
  void clear_classes() ;
  ::cosmos::nft::v1beta1::Class* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class >*
      mutable_classes();
  private:
  const ::cosmos::nft::v1beta1::Class& _internal_classes(int index) const;
  ::cosmos::nft::v1beta1::Class* _internal_add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Class>& _internal_classes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Class>* _internal_mutable_classes();
  public:
  const ::cosmos::nft::v1beta1::Class& classes(int index) const;
  ::cosmos::nft::v1beta1::Class* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class >&
      classes() const;
  // repeated .cosmos.nft.v1beta1.Entry entries = 2 [json_name = "entries"];
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::cosmos::nft::v1beta1::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Entry >*
      mutable_entries();
  private:
  const ::cosmos::nft::v1beta1::Entry& _internal_entries(int index) const;
  ::cosmos::nft::v1beta1::Entry* _internal_add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Entry>& _internal_entries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Entry>* _internal_mutable_entries();
  public:
  const ::cosmos::nft::v1beta1::Entry& entries(int index) const;
  ::cosmos::nft::v1beta1::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Entry >&
      entries() const;
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class > classes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Entry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entry& from) {
    Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNftsFieldNumber = 2,
    kOwnerFieldNumber = 1,
  };
  // repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];
  int nfts_size() const;
  private:
  int _internal_nfts_size() const;

  public:
  void clear_nfts() ;
  ::cosmos::nft::v1beta1::NFT* mutable_nfts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT >*
      mutable_nfts();
  private:
  const ::cosmos::nft::v1beta1::NFT& _internal_nfts(int index) const;
  ::cosmos::nft::v1beta1::NFT* _internal_add_nfts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>& _internal_nfts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>* _internal_mutable_nfts();
  public:
  const ::cosmos::nft::v1beta1::NFT& nfts(int index) const;
  ::cosmos::nft::v1beta1::NFT* add_nfts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT >&
      nfts() const;
  // string owner = 1 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT > nfts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// repeated .cosmos.nft.v1beta1.Class classes = 1 [json_name = "classes"];
inline int GenesisState::_internal_classes_size() const {
  return _impl_.classes_.size();
}
inline int GenesisState::classes_size() const {
  return _internal_classes_size();
}
inline ::cosmos::nft::v1beta1::Class* GenesisState::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.GenesisState.classes)
  return _internal_mutable_classes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class >*
GenesisState::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.nft.v1beta1.GenesisState.classes)
  return _internal_mutable_classes();
}
inline const ::cosmos::nft::v1beta1::Class& GenesisState::_internal_classes(int index) const {
  return _internal_classes().Get(index);
}
inline const ::cosmos::nft::v1beta1::Class& GenesisState::classes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.GenesisState.classes)
  return _internal_classes(index);
}
inline ::cosmos::nft::v1beta1::Class* GenesisState::_internal_add_classes() {
  return _internal_mutable_classes()->Add();
}
inline ::cosmos::nft::v1beta1::Class* GenesisState::add_classes() {
  ::cosmos::nft::v1beta1::Class* _add = _internal_add_classes();
  // @@protoc_insertion_point(field_add:cosmos.nft.v1beta1.GenesisState.classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Class >&
GenesisState::classes() const {
  // @@protoc_insertion_point(field_list:cosmos.nft.v1beta1.GenesisState.classes)
  return _internal_classes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Class>&
GenesisState::_internal_classes() const {
  return _impl_.classes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Class>*
GenesisState::_internal_mutable_classes() {
  return &_impl_.classes_;
}

// repeated .cosmos.nft.v1beta1.Entry entries = 2 [json_name = "entries"];
inline int GenesisState::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int GenesisState::entries_size() const {
  return _internal_entries_size();
}
inline void GenesisState::clear_entries() {
  _internal_mutable_entries()->Clear();
}
inline ::cosmos::nft::v1beta1::Entry* GenesisState::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.GenesisState.entries)
  return _internal_mutable_entries()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Entry >*
GenesisState::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.nft.v1beta1.GenesisState.entries)
  return _internal_mutable_entries();
}
inline const ::cosmos::nft::v1beta1::Entry& GenesisState::_internal_entries(int index) const {
  return _internal_entries().Get(index);
}
inline const ::cosmos::nft::v1beta1::Entry& GenesisState::entries(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.GenesisState.entries)
  return _internal_entries(index);
}
inline ::cosmos::nft::v1beta1::Entry* GenesisState::_internal_add_entries() {
  return _internal_mutable_entries()->Add();
}
inline ::cosmos::nft::v1beta1::Entry* GenesisState::add_entries() {
  ::cosmos::nft::v1beta1::Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:cosmos.nft.v1beta1.GenesisState.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::Entry >&
GenesisState::entries() const {
  // @@protoc_insertion_point(field_list:cosmos.nft.v1beta1.GenesisState.entries)
  return _internal_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Entry>&
GenesisState::_internal_entries() const {
  return _impl_.entries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::Entry>*
GenesisState::_internal_mutable_entries() {
  return &_impl_.entries_;
}

// -------------------------------------------------------------------

// Entry

// string owner = 1 [json_name = "owner"];
inline void Entry::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& Entry::owner() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.Entry.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Entry::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.Entry.owner)
}
inline std::string* Entry::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.Entry.owner)
  return _s;
}
inline const std::string& Entry::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void Entry::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* Entry::release_owner() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.Entry.owner)
  return _impl_.owner_.Release();
}
inline void Entry::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.Entry.owner)
}

// repeated .cosmos.nft.v1beta1.NFT nfts = 2 [json_name = "nfts"];
inline int Entry::_internal_nfts_size() const {
  return _impl_.nfts_.size();
}
inline int Entry::nfts_size() const {
  return _internal_nfts_size();
}
inline ::cosmos::nft::v1beta1::NFT* Entry::mutable_nfts(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.Entry.nfts)
  return _internal_mutable_nfts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT >*
Entry::mutable_nfts() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.nft.v1beta1.Entry.nfts)
  return _internal_mutable_nfts();
}
inline const ::cosmos::nft::v1beta1::NFT& Entry::_internal_nfts(int index) const {
  return _internal_nfts().Get(index);
}
inline const ::cosmos::nft::v1beta1::NFT& Entry::nfts(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.Entry.nfts)
  return _internal_nfts(index);
}
inline ::cosmos::nft::v1beta1::NFT* Entry::_internal_add_nfts() {
  return _internal_mutable_nfts()->Add();
}
inline ::cosmos::nft::v1beta1::NFT* Entry::add_nfts() {
  ::cosmos::nft::v1beta1::NFT* _add = _internal_add_nfts();
  // @@protoc_insertion_point(field_add:cosmos.nft.v1beta1.Entry.nfts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::nft::v1beta1::NFT >&
Entry::nfts() const {
  // @@protoc_insertion_point(field_list:cosmos.nft.v1beta1.Entry.nfts)
  return _internal_nfts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>&
Entry::_internal_nfts() const {
  return _impl_.nfts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::nft::v1beta1::NFT>*
Entry::_internal_mutable_nfts() {
  return &_impl_.nfts_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fgenesis_2eproto_2epb_2eh

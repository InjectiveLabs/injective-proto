// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/nft/v1beta1/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fnft_2fv1beta1_2fevent_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
namespace cosmos {
namespace nft {
namespace v1beta1 {
class EventBurn;
struct EventBurnDefaultTypeInternal;
extern EventBurnDefaultTypeInternal _EventBurn_default_instance_;
class EventMint;
struct EventMintDefaultTypeInternal;
extern EventMintDefaultTypeInternal _EventMint_default_instance_;
class EventSend;
struct EventSendDefaultTypeInternal;
extern EventSendDefaultTypeInternal _EventSend_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::nft::v1beta1::EventBurn* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::EventBurn>(Arena*);
template <>
::cosmos::nft::v1beta1::EventMint* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::EventMint>(Arena*);
template <>
::cosmos::nft::v1beta1::EventSend* Arena::CreateMaybeMessage<::cosmos::nft::v1beta1::EventSend>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace nft {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class EventSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.EventSend) */ {
 public:
  inline EventSend() : EventSend(nullptr) {}
  ~EventSend() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventSend(const EventSend& from);
  EventSend(EventSend&& from) noexcept
    : EventSend() {
    *this = ::std::move(from);
  }

  inline EventSend& operator=(const EventSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSend& operator=(EventSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventSend* internal_default_instance() {
    return reinterpret_cast<const EventSend*>(
               &_EventSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventSend& a, EventSend& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventSend& from) {
    EventSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.EventSend";
  }
  protected:
  explicit EventSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kSenderFieldNumber = 3,
    kReceiverFieldNumber = 4,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string sender = 3 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string receiver = 4 [json_name = "receiver"];
  void clear_receiver() ;
  const std::string& receiver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_receiver(Arg_&& arg, Args_... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* ptr);

  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(
      const std::string& value);
  std::string* _internal_mutable_receiver();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.EventSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
};// -------------------------------------------------------------------

class EventMint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.EventMint) */ {
 public:
  inline EventMint() : EventMint(nullptr) {}
  ~EventMint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventMint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventMint(const EventMint& from);
  EventMint(EventMint&& from) noexcept
    : EventMint() {
    *this = ::std::move(from);
  }

  inline EventMint& operator=(const EventMint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMint& operator=(EventMint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMint& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMint* internal_default_instance() {
    return reinterpret_cast<const EventMint*>(
               &_EventMint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventMint& a, EventMint& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventMint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventMint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventMint& from) {
    EventMint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.EventMint";
  }
  protected:
  explicit EventMint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kOwnerFieldNumber = 3,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string owner = 3 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.EventMint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
};// -------------------------------------------------------------------

class EventBurn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.nft.v1beta1.EventBurn) */ {
 public:
  inline EventBurn() : EventBurn(nullptr) {}
  ~EventBurn() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventBurn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBurn(const EventBurn& from);
  EventBurn(EventBurn&& from) noexcept
    : EventBurn() {
    *this = ::std::move(from);
  }

  inline EventBurn& operator=(const EventBurn& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBurn& operator=(EventBurn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventBurn& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBurn* internal_default_instance() {
    return reinterpret_cast<const EventBurn*>(
               &_EventBurn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventBurn& a, EventBurn& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBurn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBurn* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventBurn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventBurn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventBurn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventBurn& from) {
    EventBurn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBurn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.nft.v1beta1.EventBurn";
  }
  protected:
  explicit EventBurn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassIdFieldNumber = 1,
    kIdFieldNumber = 2,
    kOwnerFieldNumber = 3,
  };
  // string class_id = 1 [json_name = "classId"];
  void clear_class_id() ;
  const std::string& class_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_id(Arg_&& arg, Args_... args);
  std::string* mutable_class_id();
  PROTOBUF_NODISCARD std::string* release_class_id();
  void set_allocated_class_id(std::string* ptr);

  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(
      const std::string& value);
  std::string* _internal_mutable_class_id();

  public:
  // string id = 2 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string owner = 3 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.nft.v1beta1.EventBurn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventSend

// string class_id = 1 [json_name = "classId"];
inline void EventSend::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& EventSend::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventSend.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSend::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventSend.class_id)
}
inline std::string* EventSend::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventSend.class_id)
  return _s;
}
inline const std::string& EventSend::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void EventSend::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EventSend::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* EventSend::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventSend.class_id)
  return _impl_.class_id_.Release();
}
inline void EventSend::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventSend.class_id)
}

// string id = 2 [json_name = "id"];
inline void EventSend::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EventSend::id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventSend.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSend::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventSend.id)
}
inline std::string* EventSend::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventSend.id)
  return _s;
}
inline const std::string& EventSend::_internal_id() const {
  return _impl_.id_.Get();
}
inline void EventSend::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* EventSend::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* EventSend::release_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventSend.id)
  return _impl_.id_.Release();
}
inline void EventSend::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventSend.id)
}

// string sender = 3 [json_name = "sender"];
inline void EventSend::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& EventSend::sender() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventSend.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSend::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventSend.sender)
}
inline std::string* EventSend::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventSend.sender)
  return _s;
}
inline const std::string& EventSend::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void EventSend::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* EventSend::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* EventSend::release_sender() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventSend.sender)
  return _impl_.sender_.Release();
}
inline void EventSend::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventSend.sender)
}

// string receiver = 4 [json_name = "receiver"];
inline void EventSend::clear_receiver() {
  _impl_.receiver_.ClearToEmpty();
}
inline const std::string& EventSend::receiver() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventSend.receiver)
  return _internal_receiver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventSend::set_receiver(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.receiver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventSend.receiver)
}
inline std::string* EventSend::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventSend.receiver)
  return _s;
}
inline const std::string& EventSend::_internal_receiver() const {
  return _impl_.receiver_.Get();
}
inline void EventSend::_internal_set_receiver(const std::string& value) {
  ;


  _impl_.receiver_.Set(value, GetArenaForAllocation());
}
inline std::string* EventSend::_internal_mutable_receiver() {
  ;
  return _impl_.receiver_.Mutable( GetArenaForAllocation());
}
inline std::string* EventSend::release_receiver() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventSend.receiver)
  return _impl_.receiver_.Release();
}
inline void EventSend::set_allocated_receiver(std::string* value) {
  _impl_.receiver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.receiver_.IsDefault()) {
          _impl_.receiver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventSend.receiver)
}

// -------------------------------------------------------------------

// EventMint

// string class_id = 1 [json_name = "classId"];
inline void EventMint::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& EventMint::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventMint.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventMint::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventMint.class_id)
}
inline std::string* EventMint::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventMint.class_id)
  return _s;
}
inline const std::string& EventMint::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void EventMint::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EventMint::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* EventMint::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventMint.class_id)
  return _impl_.class_id_.Release();
}
inline void EventMint::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventMint.class_id)
}

// string id = 2 [json_name = "id"];
inline void EventMint::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EventMint::id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventMint.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventMint::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventMint.id)
}
inline std::string* EventMint::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventMint.id)
  return _s;
}
inline const std::string& EventMint::_internal_id() const {
  return _impl_.id_.Get();
}
inline void EventMint::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* EventMint::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* EventMint::release_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventMint.id)
  return _impl_.id_.Release();
}
inline void EventMint::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventMint.id)
}

// string owner = 3 [json_name = "owner"];
inline void EventMint::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& EventMint::owner() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventMint.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventMint::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventMint.owner)
}
inline std::string* EventMint::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventMint.owner)
  return _s;
}
inline const std::string& EventMint::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void EventMint::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* EventMint::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* EventMint::release_owner() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventMint.owner)
  return _impl_.owner_.Release();
}
inline void EventMint::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventMint.owner)
}

// -------------------------------------------------------------------

// EventBurn

// string class_id = 1 [json_name = "classId"];
inline void EventBurn::clear_class_id() {
  _impl_.class_id_.ClearToEmpty();
}
inline const std::string& EventBurn::class_id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventBurn.class_id)
  return _internal_class_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBurn::set_class_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.class_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventBurn.class_id)
}
inline std::string* EventBurn::mutable_class_id() {
  std::string* _s = _internal_mutable_class_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventBurn.class_id)
  return _s;
}
inline const std::string& EventBurn::_internal_class_id() const {
  return _impl_.class_id_.Get();
}
inline void EventBurn::_internal_set_class_id(const std::string& value) {
  ;


  _impl_.class_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBurn::_internal_mutable_class_id() {
  ;
  return _impl_.class_id_.Mutable( GetArenaForAllocation());
}
inline std::string* EventBurn::release_class_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventBurn.class_id)
  return _impl_.class_id_.Release();
}
inline void EventBurn::set_allocated_class_id(std::string* value) {
  _impl_.class_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_id_.IsDefault()) {
          _impl_.class_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventBurn.class_id)
}

// string id = 2 [json_name = "id"];
inline void EventBurn::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& EventBurn::id() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventBurn.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBurn::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventBurn.id)
}
inline std::string* EventBurn::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventBurn.id)
  return _s;
}
inline const std::string& EventBurn::_internal_id() const {
  return _impl_.id_.Get();
}
inline void EventBurn::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBurn::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* EventBurn::release_id() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventBurn.id)
  return _impl_.id_.Release();
}
inline void EventBurn::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventBurn.id)
}

// string owner = 3 [json_name = "owner"];
inline void EventBurn::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& EventBurn::owner() const {
  // @@protoc_insertion_point(field_get:cosmos.nft.v1beta1.EventBurn.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventBurn::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.nft.v1beta1.EventBurn.owner)
}
inline std::string* EventBurn::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:cosmos.nft.v1beta1.EventBurn.owner)
  return _s;
}
inline const std::string& EventBurn::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void EventBurn::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* EventBurn::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* EventBurn::release_owner() {
  // @@protoc_insertion_point(field_release:cosmos.nft.v1beta1.EventBurn.owner)
  return _impl_.owner_.Release();
}
inline void EventBurn::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.nft.v1beta1.EventBurn.owner)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fnft_2fv1beta1_2fevent_2eproto_2epb_2eh

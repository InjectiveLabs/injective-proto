// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/nft/v1beta1/event.proto

#include "cosmos/nft/v1beta1/event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace nft {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR EventSend::EventSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventSendDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventSendDefaultTypeInternal() {}
  union {
    EventSend _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventSendDefaultTypeInternal _EventSend_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventMint::EventMint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.owner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventMintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventMintDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventMintDefaultTypeInternal() {}
  union {
    EventMint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventMintDefaultTypeInternal _EventMint_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventBurn::EventBurn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.owner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventBurnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBurnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBurnDefaultTypeInternal() {}
  union {
    EventBurn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBurnDefaultTypeInternal _EventBurn_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fnft_2fv1beta1_2fevent_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fevent_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fevent_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventSend, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventSend, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventSend, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventSend, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventSend, _impl_.receiver_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventMint, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventMint, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventMint, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventMint, _impl_.owner_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventBurn, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventBurn, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventBurn, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::EventBurn, _impl_.owner_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::nft::v1beta1::EventSend)},
        { 12, -1, -1, sizeof(::cosmos::nft::v1beta1::EventMint)},
        { 23, -1, -1, sizeof(::cosmos::nft::v1beta1::EventBurn)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::nft::v1beta1::_EventSend_default_instance_._instance,
    &::cosmos::nft::v1beta1::_EventMint_default_instance_._instance,
    &::cosmos::nft::v1beta1::_EventBurn_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036cosmos/nft/v1beta1/event.proto\022\022cosmos"
    ".nft.v1beta1\"j\n\tEventSend\022\031\n\010class_id\030\001 "
    "\001(\tR\007classId\022\016\n\002id\030\002 \001(\tR\002id\022\026\n\006sender\030\003"
    " \001(\tR\006sender\022\032\n\010receiver\030\004 \001(\tR\010receiver"
    "\"L\n\tEventMint\022\031\n\010class_id\030\001 \001(\tR\007classId"
    "\022\016\n\002id\030\002 \001(\tR\002id\022\024\n\005owner\030\003 \001(\tR\005owner\"L"
    "\n\tEventBurn\022\031\n\010class_id\030\001 \001(\tR\007classId\022\016"
    "\n\002id\030\002 \001(\tR\002id\022\024\n\005owner\030\003 \001(\tR\005ownerB\262\001\n"
    "\026com.cosmos.nft.v1beta1B\nEventProtoP\001Z\"g"
    "ithub.com/cosmos/cosmos-sdk/x/nft\242\002\003CNX\252"
    "\002\022Cosmos.Nft.V1beta1\312\002\022Cosmos\\Nft\\V1beta"
    "1\342\002\036Cosmos\\Nft\\V1beta1\\GPBMetadata\352\002\024Cos"
    "mos::Nft::V1beta1b\006proto3"
};
static ::absl::once_flag descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto = {
    false,
    false,
    505,
    descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fevent_2eproto,
    "cosmos/nft/v1beta1/event.proto",
    &descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fnft_2fv1beta1_2fevent_2eproto::offsets,
    file_level_metadata_cosmos_2fnft_2fv1beta1_2fevent_2eproto,
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fevent_2eproto,
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_getter() {
  return &descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fnft_2fv1beta1_2fevent_2eproto(&descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto);
namespace cosmos {
namespace nft {
namespace v1beta1 {
// ===================================================================

class EventSend::_Internal {
 public:
};

EventSend::EventSend(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.EventSend)
}
EventSend::EventSend(const EventSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.EventSend)
}

inline void EventSend::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventSend::~EventSend() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.EventSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventSend::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
  _impl_.id_.Destroy();
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
}

void EventSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventSend::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.EventSend)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventSend.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventSend.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender = 3 [json_name = "sender"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventSend.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 4 [json_name = "receiver"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventSend.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventSend::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.EventSend)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventSend.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventSend.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string sender = 3 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventSend.sender");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string receiver = 4 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventSend.receiver");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.EventSend)
  return target;
}

::size_t EventSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.EventSend)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string sender = 3 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 4 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventSend::GetClassData() const { return &_class_data_; }


void EventSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventSend*>(&to_msg);
  auto& from = static_cast<const EventSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.EventSend)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventSend::CopyFrom(const EventSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.EventSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSend::IsInitialized() const {
  return true;
}

void EventSend::InternalSwap(EventSend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fevent_2eproto[0]);
}
// ===================================================================

class EventMint::_Internal {
 public:
};

EventMint::EventMint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.EventMint)
}
EventMint::EventMint(const EventMint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventMint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.EventMint)
}

inline void EventMint::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventMint::~EventMint() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.EventMint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventMint::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
  _impl_.id_.Destroy();
  _impl_.owner_.Destroy();
}

void EventMint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventMint::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.EventMint)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventMint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventMint.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventMint.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string owner = 3 [json_name = "owner"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventMint.owner"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventMint::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.EventMint)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventMint.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventMint.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string owner = 3 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    const std::string& _s = this->_internal_owner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventMint.owner");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.EventMint)
  return target;
}

::size_t EventMint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.EventMint)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string owner = 3 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventMint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventMint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventMint::GetClassData() const { return &_class_data_; }


void EventMint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventMint*>(&to_msg);
  auto& from = static_cast<const EventMint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.EventMint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventMint::CopyFrom(const EventMint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.EventMint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMint::IsInitialized() const {
  return true;
}

void EventMint::InternalSwap(EventMint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, lhs_arena,
                                       &other->_impl_.owner_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventMint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fevent_2eproto[1]);
}
// ===================================================================

class EventBurn::_Internal {
 public:
};

EventBurn::EventBurn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.EventBurn)
}
EventBurn::EventBurn(const EventBurn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventBurn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.EventBurn)
}

inline void EventBurn::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.owner_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventBurn::~EventBurn() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.EventBurn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBurn::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
  _impl_.id_.Destroy();
  _impl_.owner_.Destroy();
}

void EventBurn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBurn::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.EventBurn)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBurn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventBurn.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventBurn.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string owner = 3 [json_name = "owner"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.EventBurn.owner"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventBurn::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.EventBurn)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventBurn.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventBurn.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string owner = 3 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    const std::string& _s = this->_internal_owner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.EventBurn.owner");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.EventBurn)
  return target;
}

::size_t EventBurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.EventBurn)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string owner = 3 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBurn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBurn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBurn::GetClassData() const { return &_class_data_; }


void EventBurn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBurn*>(&to_msg);
  auto& from = static_cast<const EventBurn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.EventBurn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBurn::CopyFrom(const EventBurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.EventBurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBurn::IsInitialized() const {
  return true;
}

void EventBurn::InternalSwap(EventBurn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, lhs_arena,
                                       &other->_impl_.owner_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBurn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fevent_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fevent_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::EventSend*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::EventSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::EventSend >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::EventMint*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::EventMint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::EventMint >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::EventBurn*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::EventBurn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::EventBurn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

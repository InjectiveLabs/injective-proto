// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/nft/v1beta1/nft.proto

#include "cosmos/nft/v1beta1/nft.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace nft {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Class::Class(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.uri_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.uri_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/nullptr} {}
struct ClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassDefaultTypeInternal() {}
  union {
    Class _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassDefaultTypeInternal _Class_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NFT::NFT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.class_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.uri_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.uri_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/nullptr} {}
struct NFTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NFTDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NFTDefaultTypeInternal() {}
  union {
    NFT _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NFTDefaultTypeInternal _NFT_default_instance_;
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fnft_2fv1beta1_2fnft_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fnft_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fnft_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fnft_2fv1beta1_2fnft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.uri_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::Class, _impl_.data_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.class_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.uri_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::nft::v1beta1::NFT, _impl_.data_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 15, -1, sizeof(::cosmos::nft::v1beta1::Class)},
        { 22, 35, -1, sizeof(::cosmos::nft::v1beta1::NFT)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::nft::v1beta1::_Class_default_instance_._instance,
    &::cosmos::nft::v1beta1::_NFT_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fnft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034cosmos/nft/v1beta1/nft.proto\022\022cosmos.n"
    "ft.v1beta1\032\031google/protobuf/any.proto\"\274\001"
    "\n\005Class\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004n"
    "ame\022\026\n\006symbol\030\003 \001(\tR\006symbol\022 \n\013descripti"
    "on\030\004 \001(\tR\013description\022\020\n\003uri\030\005 \001(\tR\003uri\022"
    "\031\n\010uri_hash\030\006 \001(\tR\007uriHash\022(\n\004data\030\007 \001(\013"
    "2\024.google.protobuf.AnyR\004data\"\207\001\n\003NFT\022\031\n\010"
    "class_id\030\001 \001(\tR\007classId\022\016\n\002id\030\002 \001(\tR\002id\022"
    "\020\n\003uri\030\003 \001(\tR\003uri\022\031\n\010uri_hash\030\004 \001(\tR\007uri"
    "Hash\022(\n\004data\030\n \001(\0132\024.google.protobuf.Any"
    "R\004dataB\260\001\n\026com.cosmos.nft.v1beta1B\010NftPr"
    "otoP\001Z\"github.com/cosmos/cosmos-sdk/x/nf"
    "t\242\002\003CNX\252\002\022Cosmos.Nft.V1beta1\312\002\022Cosmos\\Nf"
    "t\\V1beta1\342\002\036Cosmos\\Nft\\V1beta1\\GPBMetada"
    "ta\352\002\024Cosmos::Nft::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto = {
    false,
    false,
    593,
    descriptor_table_protodef_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
    "cosmos/nft/v1beta1/nft.proto",
    &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_once,
    descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fnft_2fv1beta1_2fnft_2eproto::offsets,
    file_level_metadata_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
    file_level_enum_descriptors_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
    file_level_service_descriptors_cosmos_2fnft_2fv1beta1_2fnft_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_getter() {
  return &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fnft_2fv1beta1_2fnft_2eproto(&descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto);
namespace cosmos {
namespace nft {
namespace v1beta1 {
// ===================================================================

class Class::_Internal {
 public:
  using HasBits = decltype(std::declval<Class>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Class, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const Class* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Class::_Internal::data(const Class* msg) {
  return *msg->_impl_.data_;
}
void Class::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Class::Class(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.Class)
}
Class::Class(const Class& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Class* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.uri_) {}

    , decltype(_impl_.uri_hash_) {}

    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), _this->GetArenaForAllocation());
  }
  _impl_.uri_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri_hash().empty()) {
    _this->_impl_.uri_hash_.Set(from._internal_uri_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.Class)
}

inline void Class::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.uri_) {}

    , decltype(_impl_.uri_hash_) {}

    , decltype(_impl_.data_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Class::~Class() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.Class)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Class::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.description_.Destroy();
  _impl_.uri_.Destroy();
  _impl_.uri_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void Class::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Class::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.Class)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  _impl_.uri_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Class::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.Class.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.Class.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 3 [json_name = "symbol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.Class.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 4 [json_name = "description"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.Class.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string uri = 5 [json_name = "uri"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.Class.uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string uri_hash = 6 [json_name = "uriHash"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_uri_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.Class.uri_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any data = 7 [json_name = "data"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Class::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.Class)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string symbol = 3 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.symbol");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.description");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string uri = 5 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.uri");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string uri_hash = 6 [json_name = "uriHash"];
  if (!this->_internal_uri_hash().empty()) {
    const std::string& _s = this->_internal_uri_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.Class.uri_hash");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any data = 7 [json_name = "data"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.Class)
  return target;
}

::size_t Class::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.Class)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string symbol = 3 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string description = 4 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string uri = 5 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // string uri_hash = 6 [json_name = "uriHash"];
  if (!this->_internal_uri_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_uri_hash());
  }

  // .google.protobuf.Any data = 7 [json_name = "data"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Class::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Class::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Class::GetClassData() const { return &_class_data_; }


void Class::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Class*>(&to_msg);
  auto& from = static_cast<const Class&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.Class)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_uri_hash().empty()) {
    _this->_internal_set_uri_hash(from._internal_uri_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Class::CopyFrom(const Class& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.Class)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Class::IsInitialized() const {
  return true;
}

void Class::InternalSwap(Class* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, lhs_arena,
                                       &other->_impl_.uri_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_hash_, lhs_arena,
                                       &other->_impl_.uri_hash_, rhs_arena);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Class::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fnft_2eproto[0]);
}
// ===================================================================

class NFT::_Internal {
 public:
  using HasBits = decltype(std::declval<NFT>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NFT, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& data(const NFT* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
NFT::_Internal::data(const NFT* msg) {
  return *msg->_impl_.data_;
}
void NFT::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NFT::NFT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.nft.v1beta1.NFT)
}
NFT::NFT(const NFT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NFT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.uri_) {}

    , decltype(_impl_.uri_hash_) {}

    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_id().empty()) {
    _this->_impl_.class_id_.Set(from._internal_class_id(), _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), _this->GetArenaForAllocation());
  }
  _impl_.uri_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri_hash().empty()) {
    _this->_impl_.uri_hash_.Set(from._internal_uri_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.nft.v1beta1.NFT)
}

inline void NFT::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.class_id_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.uri_) {}

    , decltype(_impl_.uri_hash_) {}

    , decltype(_impl_.data_){nullptr}
  };
  _impl_.class_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.class_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NFT::~NFT() {
  // @@protoc_insertion_point(destructor:cosmos.nft.v1beta1.NFT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NFT::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class_id_.Destroy();
  _impl_.id_.Destroy();
  _impl_.uri_.Destroy();
  _impl_.uri_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void NFT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NFT::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.nft.v1beta1.NFT)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  _impl_.uri_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NFT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_id = 1 [json_name = "classId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.NFT.class_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.NFT.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string uri = 3 [json_name = "uri"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.NFT.uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string uri_hash = 4 [json_name = "uriHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uri_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.nft.v1beta1.NFT.uri_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any data = 10 [json_name = "data"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NFT::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.nft.v1beta1.NFT)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    const std::string& _s = this->_internal_class_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.NFT.class_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.NFT.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string uri = 3 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.NFT.uri");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string uri_hash = 4 [json_name = "uriHash"];
  if (!this->_internal_uri_hash().empty()) {
    const std::string& _s = this->_internal_uri_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.nft.v1beta1.NFT.uri_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any data = 10 [json_name = "data"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.nft.v1beta1.NFT)
  return target;
}

::size_t NFT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.nft.v1beta1.NFT)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_id = 1 [json_name = "classId"];
  if (!this->_internal_class_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_class_id());
  }

  // string id = 2 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string uri = 3 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  // string uri_hash = 4 [json_name = "uriHash"];
  if (!this->_internal_uri_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_uri_hash());
  }

  // .google.protobuf.Any data = 10 [json_name = "data"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NFT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NFT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NFT::GetClassData() const { return &_class_data_; }


void NFT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NFT*>(&to_msg);
  auto& from = static_cast<const NFT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.nft.v1beta1.NFT)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_id().empty()) {
    _this->_internal_set_class_id(from._internal_class_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_uri_hash().empty()) {
    _this->_internal_set_uri_hash(from._internal_uri_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NFT::CopyFrom(const NFT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.nft.v1beta1.NFT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NFT::IsInitialized() const {
  return true;
}

void NFT::InternalSwap(NFT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_id_, lhs_arena,
                                       &other->_impl_.class_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, lhs_arena,
                                       &other->_impl_.uri_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_hash_, lhs_arena,
                                       &other->_impl_.uri_hash_, rhs_arena);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NFT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_getter, &descriptor_table_cosmos_2fnft_2fv1beta1_2fnft_2eproto_once,
      file_level_metadata_cosmos_2fnft_2fv1beta1_2fnft_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::Class*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::Class >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::Class >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::nft::v1beta1::NFT*
Arena::CreateMaybeMessage< ::cosmos::nft::v1beta1::NFT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::nft::v1beta1::NFT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

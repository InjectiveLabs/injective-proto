// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/nft/v1beta1/query.proto
#ifndef GRPC_cosmos_2fnft_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fnft_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/nft/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace nft {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.nft.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
    virtual ::grpc::Status Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryBalanceResponse>> AsyncBalance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryBalanceResponse>>(AsyncBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryBalanceResponse>> PrepareAsyncBalance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryBalanceResponse>>(PrepareAsyncBalanceRaw(context, request, cq));
    }
    // Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
    virtual ::grpc::Status Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryOwnerResponse>> AsyncOwner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryOwnerResponse>>(AsyncOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryOwnerResponse>> PrepareAsyncOwner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryOwnerResponse>>(PrepareAsyncOwnerRaw(context, request, cq));
    }
    // Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
    virtual ::grpc::Status Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QuerySupplyResponse>> AsyncSupply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QuerySupplyResponse>>(AsyncSupplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QuerySupplyResponse>> PrepareAsyncSupply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QuerySupplyResponse>>(PrepareAsyncSupplyRaw(context, request, cq));
    }
    // NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
    // ERC721Enumerable
    virtual ::grpc::Status NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTsResponse>> AsyncNFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTsResponse>>(AsyncNFTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTsResponse>> PrepareAsyncNFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTsResponse>>(PrepareAsyncNFTsRaw(context, request, cq));
    }
    // NFT queries an NFT based on its class and id.
    virtual ::grpc::Status NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::cosmos::nft::v1beta1::QueryNFTResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTResponse>> AsyncNFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTResponse>>(AsyncNFTRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTResponse>> PrepareAsyncNFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTResponse>>(PrepareAsyncNFTRaw(context, request, cq));
    }
    // Class queries an NFT class based on its id
    virtual ::grpc::Status Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::cosmos::nft::v1beta1::QueryClassResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassResponse>> AsyncClass(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassResponse>>(AsyncClassRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassResponse>> PrepareAsyncClass(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassResponse>>(PrepareAsyncClassRaw(context, request, cq));
    }
    // Classes queries all NFT classes
    virtual ::grpc::Status Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::cosmos::nft::v1beta1::QueryClassesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassesResponse>> AsyncClasses(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassesResponse>>(AsyncClassesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassesResponse>> PrepareAsyncClasses(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassesResponse>>(PrepareAsyncClassesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
      virtual void Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
      virtual void Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
      virtual void Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
      // ERC721Enumerable
      virtual void NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // NFT queries an NFT based on its class and id.
      virtual void NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Class queries an NFT class based on its id
      virtual void Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Classes queries all NFT classes
      virtual void Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryBalanceResponse>* AsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryBalanceResponse>* PrepareAsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryOwnerResponse>* AsyncOwnerRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryOwnerResponse>* PrepareAsyncOwnerRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QuerySupplyResponse>* AsyncSupplyRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QuerySupplyResponse>* PrepareAsyncSupplyRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTsResponse>* AsyncNFTsRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTsResponse>* PrepareAsyncNFTsRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTResponse>* AsyncNFTRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryNFTResponse>* PrepareAsyncNFTRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassResponse>* AsyncClassRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassResponse>* PrepareAsyncClassRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassesResponse>* AsyncClassesRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::nft::v1beta1::QueryClassesResponse>* PrepareAsyncClassesRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryBalanceResponse>> AsyncBalance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryBalanceResponse>>(AsyncBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryBalanceResponse>> PrepareAsyncBalance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryBalanceResponse>>(PrepareAsyncBalanceRaw(context, request, cq));
    }
    ::grpc::Status Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryOwnerResponse>> AsyncOwner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryOwnerResponse>>(AsyncOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryOwnerResponse>> PrepareAsyncOwner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryOwnerResponse>>(PrepareAsyncOwnerRaw(context, request, cq));
    }
    ::grpc::Status Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QuerySupplyResponse>> AsyncSupply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QuerySupplyResponse>>(AsyncSupplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QuerySupplyResponse>> PrepareAsyncSupply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QuerySupplyResponse>>(PrepareAsyncSupplyRaw(context, request, cq));
    }
    ::grpc::Status NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTsResponse>> AsyncNFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTsResponse>>(AsyncNFTsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTsResponse>> PrepareAsyncNFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTsResponse>>(PrepareAsyncNFTsRaw(context, request, cq));
    }
    ::grpc::Status NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::cosmos::nft::v1beta1::QueryNFTResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTResponse>> AsyncNFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTResponse>>(AsyncNFTRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTResponse>> PrepareAsyncNFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTResponse>>(PrepareAsyncNFTRaw(context, request, cq));
    }
    ::grpc::Status Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::cosmos::nft::v1beta1::QueryClassResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassResponse>> AsyncClass(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassResponse>>(AsyncClassRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassResponse>> PrepareAsyncClass(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassResponse>>(PrepareAsyncClassRaw(context, request, cq));
    }
    ::grpc::Status Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::cosmos::nft::v1beta1::QueryClassesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassesResponse>> AsyncClasses(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassesResponse>>(AsyncClassesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassesResponse>> PrepareAsyncClasses(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassesResponse>>(PrepareAsyncClassesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response, std::function<void(::grpc::Status)>) override;
      void Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response, std::function<void(::grpc::Status)>) override;
      void Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response, std::function<void(::grpc::Status)>) override;
      void Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response, std::function<void(::grpc::Status)>) override;
      void NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response, std::function<void(::grpc::Status)>) override;
      void NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response, std::function<void(::grpc::Status)>) override;
      void Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response, std::function<void(::grpc::Status)>) override;
      void Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryBalanceResponse>* AsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryBalanceResponse>* PrepareAsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryOwnerResponse>* AsyncOwnerRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryOwnerResponse>* PrepareAsyncOwnerRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QuerySupplyResponse>* AsyncSupplyRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QuerySupplyResponse>* PrepareAsyncSupplyRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTsResponse>* AsyncNFTsRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTsResponse>* PrepareAsyncNFTsRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTResponse>* AsyncNFTRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTResponse>* PrepareAsyncNFTRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassResponse>* AsyncClassRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassResponse>* PrepareAsyncClassRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassesResponse>* AsyncClassesRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassesResponse>* PrepareAsyncClassesRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Balance_;
    const ::grpc::internal::RpcMethod rpcmethod_Owner_;
    const ::grpc::internal::RpcMethod rpcmethod_Supply_;
    const ::grpc::internal::RpcMethod rpcmethod_NFTs_;
    const ::grpc::internal::RpcMethod rpcmethod_NFT_;
    const ::grpc::internal::RpcMethod rpcmethod_Class_;
    const ::grpc::internal::RpcMethod rpcmethod_Classes_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
    virtual ::grpc::Status Balance(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response);
    // Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
    virtual ::grpc::Status Owner(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response);
    // Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
    virtual ::grpc::Status Supply(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response);
    // NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
    // ERC721Enumerable
    virtual ::grpc::Status NFTs(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response);
    // NFT queries an NFT based on its class and id.
    virtual ::grpc::Status NFT(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response);
    // Class queries an NFT class based on its id
    virtual ::grpc::Status Class(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response);
    // Classes queries all NFT classes
    virtual ::grpc::Status Classes(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Balance() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::nft::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBalance(::grpc::ServerContext* context, ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::nft::v1beta1::QueryBalanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Owner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Owner() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Owner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Owner(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryOwnerRequest* /*request*/, ::cosmos::nft::v1beta1::QueryOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOwner(::grpc::ServerContext* context, ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::nft::v1beta1::QueryOwnerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Supply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Supply() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Supply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Supply(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QuerySupplyRequest* /*request*/, ::cosmos::nft::v1beta1::QuerySupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSupply(::grpc::ServerContext* context, ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::nft::v1beta1::QuerySupplyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NFTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NFTs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NFTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFTs(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTsRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFTs(::grpc::ServerContext* context, ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::nft::v1beta1::QueryNFTsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NFT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NFT() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_NFT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFT(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFT(::grpc::ServerContext* context, ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::nft::v1beta1::QueryNFTResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Class : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Class() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Class() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Class(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClass(::grpc::ServerContext* context, ::cosmos::nft::v1beta1::QueryClassRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::nft::v1beta1::QueryClassResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Classes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Classes() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Classes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Classes(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassesRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClasses(::grpc::ServerContext* context, ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::nft::v1beta1::QueryClassesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Balance<WithAsyncMethod_Owner<WithAsyncMethod_Supply<WithAsyncMethod_NFTs<WithAsyncMethod_NFT<WithAsyncMethod_Class<WithAsyncMethod_Classes<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Balance() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryBalanceRequest, ::cosmos::nft::v1beta1::QueryBalanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response) { return this->Balance(context, request, response); }));}
    void SetMessageAllocatorFor_Balance(
        ::grpc::MessageAllocator< ::cosmos::nft::v1beta1::QueryBalanceRequest, ::cosmos::nft::v1beta1::QueryBalanceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryBalanceRequest, ::cosmos::nft::v1beta1::QueryBalanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::nft::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Balance(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::nft::v1beta1::QueryBalanceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Owner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Owner() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryOwnerRequest, ::cosmos::nft::v1beta1::QueryOwnerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response) { return this->Owner(context, request, response); }));}
    void SetMessageAllocatorFor_Owner(
        ::grpc::MessageAllocator< ::cosmos::nft::v1beta1::QueryOwnerRequest, ::cosmos::nft::v1beta1::QueryOwnerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryOwnerRequest, ::cosmos::nft::v1beta1::QueryOwnerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Owner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Owner(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryOwnerRequest* /*request*/, ::cosmos::nft::v1beta1::QueryOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Owner(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryOwnerRequest* /*request*/, ::cosmos::nft::v1beta1::QueryOwnerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Supply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Supply() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QuerySupplyRequest, ::cosmos::nft::v1beta1::QuerySupplyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response) { return this->Supply(context, request, response); }));}
    void SetMessageAllocatorFor_Supply(
        ::grpc::MessageAllocator< ::cosmos::nft::v1beta1::QuerySupplyRequest, ::cosmos::nft::v1beta1::QuerySupplyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QuerySupplyRequest, ::cosmos::nft::v1beta1::QuerySupplyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Supply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Supply(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QuerySupplyRequest* /*request*/, ::cosmos::nft::v1beta1::QuerySupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Supply(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::nft::v1beta1::QuerySupplyRequest* /*request*/, ::cosmos::nft::v1beta1::QuerySupplyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NFTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NFTs() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryNFTsRequest, ::cosmos::nft::v1beta1::QueryNFTsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response) { return this->NFTs(context, request, response); }));}
    void SetMessageAllocatorFor_NFTs(
        ::grpc::MessageAllocator< ::cosmos::nft::v1beta1::QueryNFTsRequest, ::cosmos::nft::v1beta1::QueryNFTsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryNFTsRequest, ::cosmos::nft::v1beta1::QueryNFTsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NFTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFTs(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTsRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NFTs(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTsRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NFT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NFT() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryNFTRequest, ::cosmos::nft::v1beta1::QueryNFTResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response) { return this->NFT(context, request, response); }));}
    void SetMessageAllocatorFor_NFT(
        ::grpc::MessageAllocator< ::cosmos::nft::v1beta1::QueryNFTRequest, ::cosmos::nft::v1beta1::QueryNFTResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryNFTRequest, ::cosmos::nft::v1beta1::QueryNFTResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NFT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFT(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NFT(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Class : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Class() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryClassRequest, ::cosmos::nft::v1beta1::QueryClassResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response) { return this->Class(context, request, response); }));}
    void SetMessageAllocatorFor_Class(
        ::grpc::MessageAllocator< ::cosmos::nft::v1beta1::QueryClassRequest, ::cosmos::nft::v1beta1::QueryClassResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryClassRequest, ::cosmos::nft::v1beta1::QueryClassResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Class() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Class(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Class(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Classes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Classes() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryClassesRequest, ::cosmos::nft::v1beta1::QueryClassesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response) { return this->Classes(context, request, response); }));}
    void SetMessageAllocatorFor_Classes(
        ::grpc::MessageAllocator< ::cosmos::nft::v1beta1::QueryClassesRequest, ::cosmos::nft::v1beta1::QueryClassesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::nft::v1beta1::QueryClassesRequest, ::cosmos::nft::v1beta1::QueryClassesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Classes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Classes(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassesRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Classes(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassesRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Balance<WithCallbackMethod_Owner<WithCallbackMethod_Supply<WithCallbackMethod_NFTs<WithCallbackMethod_NFT<WithCallbackMethod_Class<WithCallbackMethod_Classes<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Balance() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::nft::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Owner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Owner() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Owner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Owner(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryOwnerRequest* /*request*/, ::cosmos::nft::v1beta1::QueryOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Supply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Supply() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Supply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Supply(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QuerySupplyRequest* /*request*/, ::cosmos::nft::v1beta1::QuerySupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NFTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NFTs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NFTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFTs(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTsRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NFT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NFT() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_NFT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFT(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Class : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Class() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Class() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Class(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Classes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Classes() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Classes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Classes(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassesRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Balance() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::nft::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Owner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Owner() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Owner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Owner(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryOwnerRequest* /*request*/, ::cosmos::nft::v1beta1::QueryOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Supply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Supply() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Supply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Supply(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QuerySupplyRequest* /*request*/, ::cosmos::nft::v1beta1::QuerySupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSupply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NFTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NFTs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NFTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFTs(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTsRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFTs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NFT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NFT() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_NFT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFT(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNFT(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Class : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Class() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Class() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Class(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClass(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Classes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Classes() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Classes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Classes(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassesRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClasses(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Balance() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Balance(context, request, response); }));
    }
    ~WithRawCallbackMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::nft::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Balance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Owner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Owner() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Owner(context, request, response); }));
    }
    ~WithRawCallbackMethod_Owner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Owner(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryOwnerRequest* /*request*/, ::cosmos::nft::v1beta1::QueryOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Owner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Supply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Supply() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Supply(context, request, response); }));
    }
    ~WithRawCallbackMethod_Supply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Supply(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QuerySupplyRequest* /*request*/, ::cosmos::nft::v1beta1::QuerySupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Supply(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NFTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NFTs() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NFTs(context, request, response); }));
    }
    ~WithRawCallbackMethod_NFTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFTs(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTsRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NFTs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NFT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NFT() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NFT(context, request, response); }));
    }
    ~WithRawCallbackMethod_NFT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NFT(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NFT(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Class : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Class() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Class(context, request, response); }));
    }
    ~WithRawCallbackMethod_Class() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Class(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Class(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Classes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Classes() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Classes(context, request, response); }));
    }
    ~WithRawCallbackMethod_Classes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Classes(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassesRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Classes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Balance() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::nft::v1beta1::QueryBalanceRequest, ::cosmos::nft::v1beta1::QueryBalanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::nft::v1beta1::QueryBalanceRequest, ::cosmos::nft::v1beta1::QueryBalanceResponse>* streamer) {
                       return this->StreamedBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::nft::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::nft::v1beta1::QueryBalanceRequest,::cosmos::nft::v1beta1::QueryBalanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Owner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Owner() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::nft::v1beta1::QueryOwnerRequest, ::cosmos::nft::v1beta1::QueryOwnerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::nft::v1beta1::QueryOwnerRequest, ::cosmos::nft::v1beta1::QueryOwnerResponse>* streamer) {
                       return this->StreamedOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Owner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Owner(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryOwnerRequest* /*request*/, ::cosmos::nft::v1beta1::QueryOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::nft::v1beta1::QueryOwnerRequest,::cosmos::nft::v1beta1::QueryOwnerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Supply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Supply() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::nft::v1beta1::QuerySupplyRequest, ::cosmos::nft::v1beta1::QuerySupplyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::nft::v1beta1::QuerySupplyRequest, ::cosmos::nft::v1beta1::QuerySupplyResponse>* streamer) {
                       return this->StreamedSupply(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Supply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Supply(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QuerySupplyRequest* /*request*/, ::cosmos::nft::v1beta1::QuerySupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSupply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::nft::v1beta1::QuerySupplyRequest,::cosmos::nft::v1beta1::QuerySupplyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NFTs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NFTs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::nft::v1beta1::QueryNFTsRequest, ::cosmos::nft::v1beta1::QueryNFTsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::nft::v1beta1::QueryNFTsRequest, ::cosmos::nft::v1beta1::QueryNFTsResponse>* streamer) {
                       return this->StreamedNFTs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NFTs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NFTs(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTsRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNFTs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::nft::v1beta1::QueryNFTsRequest,::cosmos::nft::v1beta1::QueryNFTsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NFT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NFT() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::nft::v1beta1::QueryNFTRequest, ::cosmos::nft::v1beta1::QueryNFTResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::nft::v1beta1::QueryNFTRequest, ::cosmos::nft::v1beta1::QueryNFTResponse>* streamer) {
                       return this->StreamedNFT(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NFT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NFT(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryNFTRequest* /*request*/, ::cosmos::nft::v1beta1::QueryNFTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNFT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::nft::v1beta1::QueryNFTRequest,::cosmos::nft::v1beta1::QueryNFTResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Class : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Class() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::nft::v1beta1::QueryClassRequest, ::cosmos::nft::v1beta1::QueryClassResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::nft::v1beta1::QueryClassRequest, ::cosmos::nft::v1beta1::QueryClassResponse>* streamer) {
                       return this->StreamedClass(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Class() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Class(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClass(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::nft::v1beta1::QueryClassRequest,::cosmos::nft::v1beta1::QueryClassResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Classes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Classes() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::nft::v1beta1::QueryClassesRequest, ::cosmos::nft::v1beta1::QueryClassesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::nft::v1beta1::QueryClassesRequest, ::cosmos::nft::v1beta1::QueryClassesResponse>* streamer) {
                       return this->StreamedClasses(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Classes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Classes(::grpc::ServerContext* /*context*/, const ::cosmos::nft::v1beta1::QueryClassesRequest* /*request*/, ::cosmos::nft::v1beta1::QueryClassesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClasses(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::nft::v1beta1::QueryClassesRequest,::cosmos::nft::v1beta1::QueryClassesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Balance<WithStreamedUnaryMethod_Owner<WithStreamedUnaryMethod_Supply<WithStreamedUnaryMethod_NFTs<WithStreamedUnaryMethod_NFT<WithStreamedUnaryMethod_Class<WithStreamedUnaryMethod_Classes<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Balance<WithStreamedUnaryMethod_Owner<WithStreamedUnaryMethod_Supply<WithStreamedUnaryMethod_NFTs<WithStreamedUnaryMethod_NFT<WithStreamedUnaryMethod_Class<WithStreamedUnaryMethod_Classes<Service > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace nft
}  // namespace cosmos


#endif  // GRPC_cosmos_2fnft_2fv1beta1_2fquery_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/nft/v1beta1/query.proto

#include "cosmos/nft/v1beta1/query.pb.h"
#include "cosmos/nft/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace nft {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/cosmos.nft.v1beta1.Query/Balance",
  "/cosmos.nft.v1beta1.Query/Owner",
  "/cosmos.nft.v1beta1.Query/Supply",
  "/cosmos.nft.v1beta1.Query/NFTs",
  "/cosmos.nft.v1beta1.Query/NFT",
  "/cosmos.nft.v1beta1.Query/Class",
  "/cosmos.nft.v1beta1.Query/Classes",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Balance_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Owner_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Supply_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NFTs_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NFT_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Class_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Classes_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::nft::v1beta1::QueryBalanceRequest, ::cosmos::nft::v1beta1::QueryBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Balance_, context, request, response);
}

void Query::Stub::async::Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::nft::v1beta1::QueryBalanceRequest, ::cosmos::nft::v1beta1::QueryBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Balance_, context, request, response, std::move(f));
}

void Query::Stub::async::Balance(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Balance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryBalanceResponse>* Query::Stub::PrepareAsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::nft::v1beta1::QueryBalanceResponse, ::cosmos::nft::v1beta1::QueryBalanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Balance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryBalanceResponse>* Query::Stub::AsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::nft::v1beta1::QueryOwnerRequest, ::cosmos::nft::v1beta1::QueryOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Owner_, context, request, response);
}

void Query::Stub::async::Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::nft::v1beta1::QueryOwnerRequest, ::cosmos::nft::v1beta1::QueryOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Owner_, context, request, response, std::move(f));
}

void Query::Stub::async::Owner(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Owner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryOwnerResponse>* Query::Stub::PrepareAsyncOwnerRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::nft::v1beta1::QueryOwnerResponse, ::cosmos::nft::v1beta1::QueryOwnerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Owner_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryOwnerResponse>* Query::Stub::AsyncOwnerRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOwnerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::nft::v1beta1::QuerySupplyRequest, ::cosmos::nft::v1beta1::QuerySupplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Supply_, context, request, response);
}

void Query::Stub::async::Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::nft::v1beta1::QuerySupplyRequest, ::cosmos::nft::v1beta1::QuerySupplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Supply_, context, request, response, std::move(f));
}

void Query::Stub::async::Supply(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Supply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QuerySupplyResponse>* Query::Stub::PrepareAsyncSupplyRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::nft::v1beta1::QuerySupplyResponse, ::cosmos::nft::v1beta1::QuerySupplyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Supply_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QuerySupplyResponse>* Query::Stub::AsyncSupplyRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSupplyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::nft::v1beta1::QueryNFTsRequest, ::cosmos::nft::v1beta1::QueryNFTsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NFTs_, context, request, response);
}

void Query::Stub::async::NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::nft::v1beta1::QueryNFTsRequest, ::cosmos::nft::v1beta1::QueryNFTsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NFTs_, context, request, response, std::move(f));
}

void Query::Stub::async::NFTs(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NFTs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTsResponse>* Query::Stub::PrepareAsyncNFTsRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::nft::v1beta1::QueryNFTsResponse, ::cosmos::nft::v1beta1::QueryNFTsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NFTs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTsResponse>* Query::Stub::AsyncNFTsRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNFTsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::cosmos::nft::v1beta1::QueryNFTResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::nft::v1beta1::QueryNFTRequest, ::cosmos::nft::v1beta1::QueryNFTResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NFT_, context, request, response);
}

void Query::Stub::async::NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::nft::v1beta1::QueryNFTRequest, ::cosmos::nft::v1beta1::QueryNFTResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NFT_, context, request, response, std::move(f));
}

void Query::Stub::async::NFT(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NFT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTResponse>* Query::Stub::PrepareAsyncNFTRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::nft::v1beta1::QueryNFTResponse, ::cosmos::nft::v1beta1::QueryNFTRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NFT_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryNFTResponse>* Query::Stub::AsyncNFTRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNFTRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::cosmos::nft::v1beta1::QueryClassResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::nft::v1beta1::QueryClassRequest, ::cosmos::nft::v1beta1::QueryClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Class_, context, request, response);
}

void Query::Stub::async::Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::nft::v1beta1::QueryClassRequest, ::cosmos::nft::v1beta1::QueryClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Class_, context, request, response, std::move(f));
}

void Query::Stub::async::Class(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Class_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassResponse>* Query::Stub::PrepareAsyncClassRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::nft::v1beta1::QueryClassResponse, ::cosmos::nft::v1beta1::QueryClassRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Class_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassResponse>* Query::Stub::AsyncClassRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClassRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::cosmos::nft::v1beta1::QueryClassesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::nft::v1beta1::QueryClassesRequest, ::cosmos::nft::v1beta1::QueryClassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Classes_, context, request, response);
}

void Query::Stub::async::Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::nft::v1beta1::QueryClassesRequest, ::cosmos::nft::v1beta1::QueryClassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Classes_, context, request, response, std::move(f));
}

void Query::Stub::async::Classes(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Classes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassesResponse>* Query::Stub::PrepareAsyncClassesRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::nft::v1beta1::QueryClassesResponse, ::cosmos::nft::v1beta1::QueryClassesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Classes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::nft::v1beta1::QueryClassesResponse>* Query::Stub::AsyncClassesRaw(::grpc::ClientContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClassesRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::nft::v1beta1::QueryBalanceRequest, ::cosmos::nft::v1beta1::QueryBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::nft::v1beta1::QueryBalanceRequest* req,
             ::cosmos::nft::v1beta1::QueryBalanceResponse* resp) {
               return service->Balance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::nft::v1beta1::QueryOwnerRequest, ::cosmos::nft::v1beta1::QueryOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::nft::v1beta1::QueryOwnerRequest* req,
             ::cosmos::nft::v1beta1::QueryOwnerResponse* resp) {
               return service->Owner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::nft::v1beta1::QuerySupplyRequest, ::cosmos::nft::v1beta1::QuerySupplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::nft::v1beta1::QuerySupplyRequest* req,
             ::cosmos::nft::v1beta1::QuerySupplyResponse* resp) {
               return service->Supply(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::nft::v1beta1::QueryNFTsRequest, ::cosmos::nft::v1beta1::QueryNFTsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::nft::v1beta1::QueryNFTsRequest* req,
             ::cosmos::nft::v1beta1::QueryNFTsResponse* resp) {
               return service->NFTs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::nft::v1beta1::QueryNFTRequest, ::cosmos::nft::v1beta1::QueryNFTResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::nft::v1beta1::QueryNFTRequest* req,
             ::cosmos::nft::v1beta1::QueryNFTResponse* resp) {
               return service->NFT(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::nft::v1beta1::QueryClassRequest, ::cosmos::nft::v1beta1::QueryClassResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::nft::v1beta1::QueryClassRequest* req,
             ::cosmos::nft::v1beta1::QueryClassResponse* resp) {
               return service->Class(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::nft::v1beta1::QueryClassesRequest, ::cosmos::nft::v1beta1::QueryClassesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::nft::v1beta1::QueryClassesRequest* req,
             ::cosmos::nft::v1beta1::QueryClassesResponse* resp) {
               return service->Classes(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Balance(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryBalanceRequest* request, ::cosmos::nft::v1beta1::QueryBalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Owner(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryOwnerRequest* request, ::cosmos::nft::v1beta1::QueryOwnerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Supply(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QuerySupplyRequest* request, ::cosmos::nft::v1beta1::QuerySupplyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::NFTs(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryNFTsRequest* request, ::cosmos::nft::v1beta1::QueryNFTsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::NFT(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryNFTRequest* request, ::cosmos::nft::v1beta1::QueryNFTResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Class(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryClassRequest* request, ::cosmos::nft::v1beta1::QueryClassResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Classes(::grpc::ServerContext* context, const ::cosmos::nft::v1beta1::QueryClassesRequest* request, ::cosmos::nft::v1beta1::QueryClassesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace nft
}  // namespace v1beta1


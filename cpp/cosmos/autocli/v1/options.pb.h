// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/autocli/v1/options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fautocli_2fv1_2foptions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fautocli_2fv1_2foptions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fautocli_2fv1_2foptions_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto;
namespace cosmos {
namespace autocli {
namespace v1 {
class FlagOptions;
struct FlagOptionsDefaultTypeInternal;
extern FlagOptionsDefaultTypeInternal _FlagOptions_default_instance_;
class ModuleOptions;
struct ModuleOptionsDefaultTypeInternal;
extern ModuleOptionsDefaultTypeInternal _ModuleOptions_default_instance_;
class PositionalArgDescriptor;
struct PositionalArgDescriptorDefaultTypeInternal;
extern PositionalArgDescriptorDefaultTypeInternal _PositionalArgDescriptor_default_instance_;
class RpcCommandOptions;
struct RpcCommandOptionsDefaultTypeInternal;
extern RpcCommandOptionsDefaultTypeInternal _RpcCommandOptions_default_instance_;
class RpcCommandOptions_FlagOptionsEntry_DoNotUse;
struct RpcCommandOptions_FlagOptionsEntry_DoNotUseDefaultTypeInternal;
extern RpcCommandOptions_FlagOptionsEntry_DoNotUseDefaultTypeInternal _RpcCommandOptions_FlagOptionsEntry_DoNotUse_default_instance_;
class ServiceCommandDescriptor;
struct ServiceCommandDescriptorDefaultTypeInternal;
extern ServiceCommandDescriptorDefaultTypeInternal _ServiceCommandDescriptor_default_instance_;
class ServiceCommandDescriptor_SubCommandsEntry_DoNotUse;
struct ServiceCommandDescriptor_SubCommandsEntry_DoNotUseDefaultTypeInternal;
extern ServiceCommandDescriptor_SubCommandsEntry_DoNotUseDefaultTypeInternal _ServiceCommandDescriptor_SubCommandsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace autocli
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::autocli::v1::FlagOptions* Arena::CreateMaybeMessage<::cosmos::autocli::v1::FlagOptions>(Arena*);
template <>
::cosmos::autocli::v1::ModuleOptions* Arena::CreateMaybeMessage<::cosmos::autocli::v1::ModuleOptions>(Arena*);
template <>
::cosmos::autocli::v1::PositionalArgDescriptor* Arena::CreateMaybeMessage<::cosmos::autocli::v1::PositionalArgDescriptor>(Arena*);
template <>
::cosmos::autocli::v1::RpcCommandOptions* Arena::CreateMaybeMessage<::cosmos::autocli::v1::RpcCommandOptions>(Arena*);
template <>
::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse>(Arena*);
template <>
::cosmos::autocli::v1::ServiceCommandDescriptor* Arena::CreateMaybeMessage<::cosmos::autocli::v1::ServiceCommandDescriptor>(Arena*);
template <>
::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse* Arena::CreateMaybeMessage<::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace autocli {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class ModuleOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.ModuleOptions) */ {
 public:
  inline ModuleOptions() : ModuleOptions(nullptr) {}
  ~ModuleOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleOptions(const ModuleOptions& from);
  ModuleOptions(ModuleOptions&& from) noexcept
    : ModuleOptions() {
    *this = ::std::move(from);
  }

  inline ModuleOptions& operator=(const ModuleOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleOptions& operator=(ModuleOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleOptions* internal_default_instance() {
    return reinterpret_cast<const ModuleOptions*>(
               &_ModuleOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModuleOptions& a, ModuleOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModuleOptions& from) {
    ModuleOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.autocli.v1.ModuleOptions";
  }
  protected:
  explicit ModuleOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kQueryFieldNumber = 2,
  };
  // .cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];
  bool has_tx() const;
  void clear_tx() ;
  const ::cosmos::autocli::v1::ServiceCommandDescriptor& tx() const;
  PROTOBUF_NODISCARD ::cosmos::autocli::v1::ServiceCommandDescriptor* release_tx();
  ::cosmos::autocli::v1::ServiceCommandDescriptor* mutable_tx();
  void set_allocated_tx(::cosmos::autocli::v1::ServiceCommandDescriptor* tx);
  private:
  const ::cosmos::autocli::v1::ServiceCommandDescriptor& _internal_tx() const;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::cosmos::autocli::v1::ServiceCommandDescriptor* tx);
  ::cosmos::autocli::v1::ServiceCommandDescriptor* unsafe_arena_release_tx();
  // .cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];
  bool has_query() const;
  void clear_query() ;
  const ::cosmos::autocli::v1::ServiceCommandDescriptor& query() const;
  PROTOBUF_NODISCARD ::cosmos::autocli::v1::ServiceCommandDescriptor* release_query();
  ::cosmos::autocli::v1::ServiceCommandDescriptor* mutable_query();
  void set_allocated_query(::cosmos::autocli::v1::ServiceCommandDescriptor* query);
  private:
  const ::cosmos::autocli::v1::ServiceCommandDescriptor& _internal_query() const;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::cosmos::autocli::v1::ServiceCommandDescriptor* query);
  ::cosmos::autocli::v1::ServiceCommandDescriptor* unsafe_arena_release_query();
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.ModuleOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::autocli::v1::ServiceCommandDescriptor* tx_;
    ::cosmos::autocli::v1::ServiceCommandDescriptor* query_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};// -------------------------------------------------------------------

class ServiceCommandDescriptor_SubCommandsEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServiceCommandDescriptor_SubCommandsEntry_DoNotUse, 
    std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ServiceCommandDescriptor_SubCommandsEntry_DoNotUse, 
    std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ServiceCommandDescriptor_SubCommandsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceCommandDescriptor_SubCommandsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ServiceCommandDescriptor_SubCommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ServiceCommandDescriptor_SubCommandsEntry_DoNotUse& other);
  static const ServiceCommandDescriptor_SubCommandsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ServiceCommandDescriptor_SubCommandsEntry_DoNotUse*>(&_ServiceCommandDescriptor_SubCommandsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "cosmos.autocli.v1.ServiceCommandDescriptor.SubCommandsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};
// -------------------------------------------------------------------

class ServiceCommandDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.ServiceCommandDescriptor) */ {
 public:
  inline ServiceCommandDescriptor() : ServiceCommandDescriptor(nullptr) {}
  ~ServiceCommandDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceCommandDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceCommandDescriptor(const ServiceCommandDescriptor& from);
  ServiceCommandDescriptor(ServiceCommandDescriptor&& from) noexcept
    : ServiceCommandDescriptor() {
    *this = ::std::move(from);
  }

  inline ServiceCommandDescriptor& operator=(const ServiceCommandDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceCommandDescriptor& operator=(ServiceCommandDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceCommandDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceCommandDescriptor* internal_default_instance() {
    return reinterpret_cast<const ServiceCommandDescriptor*>(
               &_ServiceCommandDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceCommandDescriptor& a, ServiceCommandDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceCommandDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceCommandDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceCommandDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceCommandDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceCommandDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceCommandDescriptor& from) {
    ServiceCommandDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceCommandDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.autocli.v1.ServiceCommandDescriptor";
  }
  protected:
  explicit ServiceCommandDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRpcCommandOptionsFieldNumber = 2,
    kSubCommandsFieldNumber = 3,
    kServiceFieldNumber = 1,
  };
  // repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];
  int rpc_command_options_size() const;
  private:
  int _internal_rpc_command_options_size() const;

  public:
  void clear_rpc_command_options() ;
  ::cosmos::autocli::v1::RpcCommandOptions* mutable_rpc_command_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::RpcCommandOptions >*
      mutable_rpc_command_options();
  private:
  const ::cosmos::autocli::v1::RpcCommandOptions& _internal_rpc_command_options(int index) const;
  ::cosmos::autocli::v1::RpcCommandOptions* _internal_add_rpc_command_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>& _internal_rpc_command_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>* _internal_mutable_rpc_command_options();
  public:
  const ::cosmos::autocli::v1::RpcCommandOptions& rpc_command_options(int index) const;
  ::cosmos::autocli::v1::RpcCommandOptions* add_rpc_command_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::RpcCommandOptions >&
      rpc_command_options() const;
  // map<string, .cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3 [json_name = "subCommands"];
  int sub_commands_size() const;
  private:
  int _internal_sub_commands_size() const;

  public:
  void clear_sub_commands() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >&
      _internal_sub_commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >*
      _internal_mutable_sub_commands();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >&
      sub_commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >*
      mutable_sub_commands();
  // string service = 1 [json_name = "service"];
  void clear_service() ;
  const std::string& service() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service(Arg_&& arg, Args_... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* ptr);

  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
      const std::string& value);
  std::string* _internal_mutable_service();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.ServiceCommandDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::RpcCommandOptions > rpc_command_options_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ServiceCommandDescriptor_SubCommandsEntry_DoNotUse,
        std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> sub_commands_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};// -------------------------------------------------------------------

class RpcCommandOptions_FlagOptionsEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcCommandOptions_FlagOptionsEntry_DoNotUse, 
    std::string, ::cosmos::autocli::v1::FlagOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcCommandOptions_FlagOptionsEntry_DoNotUse, 
    std::string, ::cosmos::autocli::v1::FlagOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RpcCommandOptions_FlagOptionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcCommandOptions_FlagOptionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RpcCommandOptions_FlagOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RpcCommandOptions_FlagOptionsEntry_DoNotUse& other);
  static const RpcCommandOptions_FlagOptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RpcCommandOptions_FlagOptionsEntry_DoNotUse*>(&_RpcCommandOptions_FlagOptionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "cosmos.autocli.v1.RpcCommandOptions.FlagOptionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};
// -------------------------------------------------------------------

class RpcCommandOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.RpcCommandOptions) */ {
 public:
  inline RpcCommandOptions() : RpcCommandOptions(nullptr) {}
  ~RpcCommandOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcCommandOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcCommandOptions(const RpcCommandOptions& from);
  RpcCommandOptions(RpcCommandOptions&& from) noexcept
    : RpcCommandOptions() {
    *this = ::std::move(from);
  }

  inline RpcCommandOptions& operator=(const RpcCommandOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcCommandOptions& operator=(RpcCommandOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcCommandOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcCommandOptions* internal_default_instance() {
    return reinterpret_cast<const RpcCommandOptions*>(
               &_RpcCommandOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RpcCommandOptions& a, RpcCommandOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcCommandOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcCommandOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcCommandOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcCommandOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcCommandOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcCommandOptions& from) {
    RpcCommandOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcCommandOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.autocli.v1.RpcCommandOptions";
  }
  protected:
  explicit RpcCommandOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAliasFieldNumber = 6,
    kSuggestForFieldNumber = 7,
    kFlagOptionsFieldNumber = 10,
    kPositionalArgsFieldNumber = 11,
    kRpcMethodFieldNumber = 1,
    kUseFieldNumber = 2,
    kLongFieldNumber = 3,
    kShortFieldNumber = 4,
    kExampleFieldNumber = 5,
    kDeprecatedFieldNumber = 8,
    kVersionFieldNumber = 9,
    kSkipFieldNumber = 12,
  };
  // repeated string alias = 6 [json_name = "alias"];
  int alias_size() const;
  private:
  int _internal_alias_size() const;

  public:
  void clear_alias() ;
  const std::string& alias(int index) const;
  std::string* mutable_alias(int index);
  void set_alias(int index, const std::string& value);
  void set_alias(int index, std::string&& value);
  void set_alias(int index, const char* value);
  void set_alias(int index, const char* value, std::size_t size);
  void set_alias(int index, absl::string_view value);
  std::string* add_alias();
  void add_alias(const std::string& value);
  void add_alias(std::string&& value);
  void add_alias(const char* value);
  void add_alias(const char* value, std::size_t size);
  void add_alias(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alias();

  private:
  const std::string& _internal_alias(int index) const;
  std::string* _internal_add_alias();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_alias() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_alias();

  public:
  // repeated string suggest_for = 7 [json_name = "suggestFor"];
  int suggest_for_size() const;
  private:
  int _internal_suggest_for_size() const;

  public:
  void clear_suggest_for() ;
  const std::string& suggest_for(int index) const;
  std::string* mutable_suggest_for(int index);
  void set_suggest_for(int index, const std::string& value);
  void set_suggest_for(int index, std::string&& value);
  void set_suggest_for(int index, const char* value);
  void set_suggest_for(int index, const char* value, std::size_t size);
  void set_suggest_for(int index, absl::string_view value);
  std::string* add_suggest_for();
  void add_suggest_for(const std::string& value);
  void add_suggest_for(std::string&& value);
  void add_suggest_for(const char* value);
  void add_suggest_for(const char* value, std::size_t size);
  void add_suggest_for(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& suggest_for() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_suggest_for();

  private:
  const std::string& _internal_suggest_for(int index) const;
  std::string* _internal_add_suggest_for();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_suggest_for() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_suggest_for();

  public:
  // map<string, .cosmos.autocli.v1.FlagOptions> flag_options = 10 [json_name = "flagOptions"];
  int flag_options_size() const;
  private:
  int _internal_flag_options_size() const;

  public:
  void clear_flag_options() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >&
      _internal_flag_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >*
      _internal_mutable_flag_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >&
      flag_options() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >*
      mutable_flag_options();
  // repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];
  int positional_args_size() const;
  private:
  int _internal_positional_args_size() const;

  public:
  void clear_positional_args() ;
  ::cosmos::autocli::v1::PositionalArgDescriptor* mutable_positional_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::PositionalArgDescriptor >*
      mutable_positional_args();
  private:
  const ::cosmos::autocli::v1::PositionalArgDescriptor& _internal_positional_args(int index) const;
  ::cosmos::autocli::v1::PositionalArgDescriptor* _internal_add_positional_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>& _internal_positional_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>* _internal_mutable_positional_args();
  public:
  const ::cosmos::autocli::v1::PositionalArgDescriptor& positional_args(int index) const;
  ::cosmos::autocli::v1::PositionalArgDescriptor* add_positional_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::PositionalArgDescriptor >&
      positional_args() const;
  // string rpc_method = 1 [json_name = "rpcMethod"];
  void clear_rpc_method() ;
  const std::string& rpc_method() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_rpc_method(Arg_&& arg, Args_... args);
  std::string* mutable_rpc_method();
  PROTOBUF_NODISCARD std::string* release_rpc_method();
  void set_allocated_rpc_method(std::string* ptr);

  private:
  const std::string& _internal_rpc_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpc_method(
      const std::string& value);
  std::string* _internal_mutable_rpc_method();

  public:
  // string use = 2 [json_name = "use"];
  void clear_use() ;
  const std::string& use() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_use(Arg_&& arg, Args_... args);
  std::string* mutable_use();
  PROTOBUF_NODISCARD std::string* release_use();
  void set_allocated_use(std::string* ptr);

  private:
  const std::string& _internal_use() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_use(
      const std::string& value);
  std::string* _internal_mutable_use();

  public:
  // string long = 3 [json_name = "long"];
  void clear_long_() ;
  const std::string& long_() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_(Arg_&& arg, Args_... args);
  std::string* mutable_long_();
  PROTOBUF_NODISCARD std::string* release_long_();
  void set_allocated_long_(std::string* ptr);

  private:
  const std::string& _internal_long_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_(
      const std::string& value);
  std::string* _internal_mutable_long_();

  public:
  // string short = 4 [json_name = "short"];
  void clear_short_() ;
  const std::string& short_() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_(Arg_&& arg, Args_... args);
  std::string* mutable_short_();
  PROTOBUF_NODISCARD std::string* release_short_();
  void set_allocated_short_(std::string* ptr);

  private:
  const std::string& _internal_short_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_(
      const std::string& value);
  std::string* _internal_mutable_short_();

  public:
  // string example = 5 [json_name = "example"];
  void clear_example() ;
  const std::string& example() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_example(Arg_&& arg, Args_... args);
  std::string* mutable_example();
  PROTOBUF_NODISCARD std::string* release_example();
  void set_allocated_example(std::string* ptr);

  private:
  const std::string& _internal_example() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_example(
      const std::string& value);
  std::string* _internal_mutable_example();

  public:
  // string deprecated = 8 [json_name = "deprecated"];
  void clear_deprecated() ;
  const std::string& deprecated() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deprecated(Arg_&& arg, Args_... args);
  std::string* mutable_deprecated();
  PROTOBUF_NODISCARD std::string* release_deprecated();
  void set_allocated_deprecated(std::string* ptr);

  private:
  const std::string& _internal_deprecated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated(
      const std::string& value);
  std::string* _internal_mutable_deprecated();

  public:
  // string version = 9 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // bool skip = 12 [json_name = "skip"];
  void clear_skip() ;
  bool skip() const;
  void set_skip(bool value);

  private:
  bool _internal_skip() const;
  void _internal_set_skip(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.RpcCommandOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alias_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> suggest_for_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RpcCommandOptions_FlagOptionsEntry_DoNotUse,
        std::string, ::cosmos::autocli::v1::FlagOptions,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> flag_options_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::PositionalArgDescriptor > positional_args_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpc_method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr use_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr example_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    bool skip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};// -------------------------------------------------------------------

class FlagOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.FlagOptions) */ {
 public:
  inline FlagOptions() : FlagOptions(nullptr) {}
  ~FlagOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlagOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlagOptions(const FlagOptions& from);
  FlagOptions(FlagOptions&& from) noexcept
    : FlagOptions() {
    *this = ::std::move(from);
  }

  inline FlagOptions& operator=(const FlagOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlagOptions& operator=(FlagOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlagOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlagOptions* internal_default_instance() {
    return reinterpret_cast<const FlagOptions*>(
               &_FlagOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FlagOptions& a, FlagOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FlagOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlagOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlagOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlagOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlagOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlagOptions& from) {
    FlagOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlagOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.autocli.v1.FlagOptions";
  }
  protected:
  explicit FlagOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShorthandFieldNumber = 2,
    kUsageFieldNumber = 3,
    kDefaultValueFieldNumber = 4,
    kNoOptDefaultValueFieldNumber = 5,
    kDeprecatedFieldNumber = 6,
    kShorthandDeprecatedFieldNumber = 7,
    kHiddenFieldNumber = 8,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string shorthand = 2 [json_name = "shorthand"];
  void clear_shorthand() ;
  const std::string& shorthand() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shorthand(Arg_&& arg, Args_... args);
  std::string* mutable_shorthand();
  PROTOBUF_NODISCARD std::string* release_shorthand();
  void set_allocated_shorthand(std::string* ptr);

  private:
  const std::string& _internal_shorthand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shorthand(
      const std::string& value);
  std::string* _internal_mutable_shorthand();

  public:
  // string usage = 3 [json_name = "usage"];
  void clear_usage() ;
  const std::string& usage() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_usage(Arg_&& arg, Args_... args);
  std::string* mutable_usage();
  PROTOBUF_NODISCARD std::string* release_usage();
  void set_allocated_usage(std::string* ptr);

  private:
  const std::string& _internal_usage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usage(
      const std::string& value);
  std::string* _internal_mutable_usage();

  public:
  // string default_value = 4 [json_name = "defaultValue"];
  void clear_default_value() ;
  const std::string& default_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_value(Arg_&& arg, Args_... args);
  std::string* mutable_default_value();
  PROTOBUF_NODISCARD std::string* release_default_value();
  void set_allocated_default_value(std::string* ptr);

  private:
  const std::string& _internal_default_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_value(
      const std::string& value);
  std::string* _internal_mutable_default_value();

  public:
  // string no_opt_default_value = 5 [json_name = "noOptDefaultValue"];
  void clear_no_opt_default_value() ;
  const std::string& no_opt_default_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_no_opt_default_value(Arg_&& arg, Args_... args);
  std::string* mutable_no_opt_default_value();
  PROTOBUF_NODISCARD std::string* release_no_opt_default_value();
  void set_allocated_no_opt_default_value(std::string* ptr);

  private:
  const std::string& _internal_no_opt_default_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_no_opt_default_value(
      const std::string& value);
  std::string* _internal_mutable_no_opt_default_value();

  public:
  // string deprecated = 6 [json_name = "deprecated"];
  void clear_deprecated() ;
  const std::string& deprecated() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deprecated(Arg_&& arg, Args_... args);
  std::string* mutable_deprecated();
  PROTOBUF_NODISCARD std::string* release_deprecated();
  void set_allocated_deprecated(std::string* ptr);

  private:
  const std::string& _internal_deprecated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deprecated(
      const std::string& value);
  std::string* _internal_mutable_deprecated();

  public:
  // string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];
  void clear_shorthand_deprecated() ;
  const std::string& shorthand_deprecated() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_shorthand_deprecated(Arg_&& arg, Args_... args);
  std::string* mutable_shorthand_deprecated();
  PROTOBUF_NODISCARD std::string* release_shorthand_deprecated();
  void set_allocated_shorthand_deprecated(std::string* ptr);

  private:
  const std::string& _internal_shorthand_deprecated() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shorthand_deprecated(
      const std::string& value);
  std::string* _internal_mutable_shorthand_deprecated();

  public:
  // bool hidden = 8 [json_name = "hidden"];
  void clear_hidden() ;
  bool hidden() const;
  void set_hidden(bool value);

  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.FlagOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shorthand_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr no_opt_default_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shorthand_deprecated_;
    bool hidden_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};// -------------------------------------------------------------------

class PositionalArgDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.autocli.v1.PositionalArgDescriptor) */ {
 public:
  inline PositionalArgDescriptor() : PositionalArgDescriptor(nullptr) {}
  ~PositionalArgDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PositionalArgDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionalArgDescriptor(const PositionalArgDescriptor& from);
  PositionalArgDescriptor(PositionalArgDescriptor&& from) noexcept
    : PositionalArgDescriptor() {
    *this = ::std::move(from);
  }

  inline PositionalArgDescriptor& operator=(const PositionalArgDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionalArgDescriptor& operator=(PositionalArgDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionalArgDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionalArgDescriptor* internal_default_instance() {
    return reinterpret_cast<const PositionalArgDescriptor*>(
               &_PositionalArgDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PositionalArgDescriptor& a, PositionalArgDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionalArgDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionalArgDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionalArgDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionalArgDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionalArgDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionalArgDescriptor& from) {
    PositionalArgDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionalArgDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.autocli.v1.PositionalArgDescriptor";
  }
  protected:
  explicit PositionalArgDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoFieldFieldNumber = 1,
    kVarargsFieldNumber = 2,
  };
  // string proto_field = 1 [json_name = "protoField"];
  void clear_proto_field() ;
  const std::string& proto_field() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proto_field(Arg_&& arg, Args_... args);
  std::string* mutable_proto_field();
  PROTOBUF_NODISCARD std::string* release_proto_field();
  void set_allocated_proto_field(std::string* ptr);

  private:
  const std::string& _internal_proto_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_field(
      const std::string& value);
  std::string* _internal_mutable_proto_field();

  public:
  // bool varargs = 2 [json_name = "varargs"];
  void clear_varargs() ;
  bool varargs() const;
  void set_varargs(bool value);

  private:
  bool _internal_varargs() const;
  void _internal_set_varargs(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.PositionalArgDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_field_;
    bool varargs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModuleOptions

// .cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];
inline bool ModuleOptions::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline void ModuleOptions::clear_tx() {
  if (_impl_.tx_ != nullptr) _impl_.tx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::autocli::v1::ServiceCommandDescriptor& ModuleOptions::_internal_tx() const {
  const ::cosmos::autocli::v1::ServiceCommandDescriptor* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::autocli::v1::ServiceCommandDescriptor&>(
      ::cosmos::autocli::v1::_ServiceCommandDescriptor_default_instance_);
}
inline const ::cosmos::autocli::v1::ServiceCommandDescriptor& ModuleOptions::tx() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ModuleOptions.tx)
  return _internal_tx();
}
inline void ModuleOptions::unsafe_arena_set_allocated_tx(
    ::cosmos::autocli::v1::ServiceCommandDescriptor* tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = tx;
  if (tx) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.autocli.v1.ModuleOptions.tx)
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::release_tx() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.ModuleOptions.tx)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::_internal_mutable_tx() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::autocli::v1::ServiceCommandDescriptor>(GetArenaForAllocation());
    _impl_.tx_ = p;
  }
  return _impl_.tx_;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::mutable_tx() {
  ::cosmos::autocli::v1::ServiceCommandDescriptor* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ModuleOptions.tx)
  return _msg;
}
inline void ModuleOptions::set_allocated_tx(::cosmos::autocli::v1::ServiceCommandDescriptor* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tx_;
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tx);
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.ModuleOptions.tx)
}

// .cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];
inline bool ModuleOptions::has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_ != nullptr);
  return value;
}
inline void ModuleOptions::clear_query() {
  if (_impl_.query_ != nullptr) _impl_.query_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::autocli::v1::ServiceCommandDescriptor& ModuleOptions::_internal_query() const {
  const ::cosmos::autocli::v1::ServiceCommandDescriptor* p = _impl_.query_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::autocli::v1::ServiceCommandDescriptor&>(
      ::cosmos::autocli::v1::_ServiceCommandDescriptor_default_instance_);
}
inline const ::cosmos::autocli::v1::ServiceCommandDescriptor& ModuleOptions::query() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ModuleOptions.query)
  return _internal_query();
}
inline void ModuleOptions::unsafe_arena_set_allocated_query(
    ::cosmos::autocli::v1::ServiceCommandDescriptor* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_);
  }
  _impl_.query_ = query;
  if (query) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.autocli.v1.ModuleOptions.query)
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::release_query() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* temp = _impl_.query_;
  _impl_.query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.ModuleOptions.query)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::autocli::v1::ServiceCommandDescriptor* temp = _impl_.query_;
  _impl_.query_ = nullptr;
  return temp;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::_internal_mutable_query() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.query_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::autocli::v1::ServiceCommandDescriptor>(GetArenaForAllocation());
    _impl_.query_ = p;
  }
  return _impl_.query_;
}
inline ::cosmos::autocli::v1::ServiceCommandDescriptor* ModuleOptions::mutable_query() {
  ::cosmos::autocli::v1::ServiceCommandDescriptor* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ModuleOptions.query)
  return _msg;
}
inline void ModuleOptions::set_allocated_query(::cosmos::autocli::v1::ServiceCommandDescriptor* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.query_ = query;
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.ModuleOptions.query)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ServiceCommandDescriptor

// string service = 1 [json_name = "service"];
inline void ServiceCommandDescriptor::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& ServiceCommandDescriptor::service() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ServiceCommandDescriptor.service)
  return _internal_service();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceCommandDescriptor::set_service(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.ServiceCommandDescriptor.service)
}
inline std::string* ServiceCommandDescriptor::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ServiceCommandDescriptor.service)
  return _s;
}
inline const std::string& ServiceCommandDescriptor::_internal_service() const {
  return _impl_.service_.Get();
}
inline void ServiceCommandDescriptor::_internal_set_service(const std::string& value) {
  ;


  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceCommandDescriptor::_internal_mutable_service() {
  ;
  return _impl_.service_.Mutable( GetArenaForAllocation());
}
inline std::string* ServiceCommandDescriptor::release_service() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.ServiceCommandDescriptor.service)
  return _impl_.service_.Release();
}
inline void ServiceCommandDescriptor::set_allocated_service(std::string* value) {
  _impl_.service_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_.IsDefault()) {
          _impl_.service_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.ServiceCommandDescriptor.service)
}

// repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];
inline int ServiceCommandDescriptor::_internal_rpc_command_options_size() const {
  return _impl_.rpc_command_options_.size();
}
inline int ServiceCommandDescriptor::rpc_command_options_size() const {
  return _internal_rpc_command_options_size();
}
inline void ServiceCommandDescriptor::clear_rpc_command_options() {
  _internal_mutable_rpc_command_options()->Clear();
}
inline ::cosmos::autocli::v1::RpcCommandOptions* ServiceCommandDescriptor::mutable_rpc_command_options(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _internal_mutable_rpc_command_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::RpcCommandOptions >*
ServiceCommandDescriptor::mutable_rpc_command_options() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _internal_mutable_rpc_command_options();
}
inline const ::cosmos::autocli::v1::RpcCommandOptions& ServiceCommandDescriptor::_internal_rpc_command_options(int index) const {
  return _internal_rpc_command_options().Get(index);
}
inline const ::cosmos::autocli::v1::RpcCommandOptions& ServiceCommandDescriptor::rpc_command_options(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _internal_rpc_command_options(index);
}
inline ::cosmos::autocli::v1::RpcCommandOptions* ServiceCommandDescriptor::_internal_add_rpc_command_options() {
  return _internal_mutable_rpc_command_options()->Add();
}
inline ::cosmos::autocli::v1::RpcCommandOptions* ServiceCommandDescriptor::add_rpc_command_options() {
  ::cosmos::autocli::v1::RpcCommandOptions* _add = _internal_add_rpc_command_options();
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::RpcCommandOptions >&
ServiceCommandDescriptor::rpc_command_options() const {
  // @@protoc_insertion_point(field_list:cosmos.autocli.v1.ServiceCommandDescriptor.rpc_command_options)
  return _internal_rpc_command_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>&
ServiceCommandDescriptor::_internal_rpc_command_options() const {
  return _impl_.rpc_command_options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::autocli::v1::RpcCommandOptions>*
ServiceCommandDescriptor::_internal_mutable_rpc_command_options() {
  return &_impl_.rpc_command_options_;
}

// map<string, .cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3 [json_name = "subCommands"];
inline int ServiceCommandDescriptor::_internal_sub_commands_size() const {
  return _impl_.sub_commands_.size();
}
inline int ServiceCommandDescriptor::sub_commands_size() const {
  return _internal_sub_commands_size();
}
inline void ServiceCommandDescriptor::clear_sub_commands() {
  _impl_.sub_commands_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >&
ServiceCommandDescriptor::_internal_sub_commands() const {
  return _impl_.sub_commands_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >&
ServiceCommandDescriptor::sub_commands() const {
  // @@protoc_insertion_point(field_map:cosmos.autocli.v1.ServiceCommandDescriptor.sub_commands)
  return _internal_sub_commands();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >*
ServiceCommandDescriptor::_internal_mutable_sub_commands() {
  return _impl_.sub_commands_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >*
ServiceCommandDescriptor::mutable_sub_commands() {
  // @@protoc_insertion_point(field_mutable_map:cosmos.autocli.v1.ServiceCommandDescriptor.sub_commands)
  return _internal_mutable_sub_commands();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RpcCommandOptions

// string rpc_method = 1 [json_name = "rpcMethod"];
inline void RpcCommandOptions::clear_rpc_method() {
  _impl_.rpc_method_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::rpc_method() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
  return _internal_rpc_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_rpc_method(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.rpc_method_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
}
inline std::string* RpcCommandOptions::mutable_rpc_method() {
  std::string* _s = _internal_mutable_rpc_method();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_rpc_method() const {
  return _impl_.rpc_method_.Get();
}
inline void RpcCommandOptions::_internal_set_rpc_method(const std::string& value) {
  ;


  _impl_.rpc_method_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::_internal_mutable_rpc_method() {
  ;
  return _impl_.rpc_method_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::release_rpc_method() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
  return _impl_.rpc_method_.Release();
}
inline void RpcCommandOptions::set_allocated_rpc_method(std::string* value) {
  _impl_.rpc_method_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.rpc_method_.IsDefault()) {
          _impl_.rpc_method_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.rpc_method)
}

// string use = 2 [json_name = "use"];
inline void RpcCommandOptions::clear_use() {
  _impl_.use_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::use() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.use)
  return _internal_use();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_use(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.use_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.use)
}
inline std::string* RpcCommandOptions::mutable_use() {
  std::string* _s = _internal_mutable_use();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.use)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_use() const {
  return _impl_.use_.Get();
}
inline void RpcCommandOptions::_internal_set_use(const std::string& value) {
  ;


  _impl_.use_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::_internal_mutable_use() {
  ;
  return _impl_.use_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::release_use() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.use)
  return _impl_.use_.Release();
}
inline void RpcCommandOptions::set_allocated_use(std::string* value) {
  _impl_.use_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.use_.IsDefault()) {
          _impl_.use_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.use)
}

// string long = 3 [json_name = "long"];
inline void RpcCommandOptions::clear_long_() {
  _impl_.long__.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::long_() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.long)
  return _internal_long_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_long_(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.long__.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.long)
}
inline std::string* RpcCommandOptions::mutable_long_() {
  std::string* _s = _internal_mutable_long_();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.long)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_long_() const {
  return _impl_.long__.Get();
}
inline void RpcCommandOptions::_internal_set_long_(const std::string& value) {
  ;


  _impl_.long__.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::_internal_mutable_long_() {
  ;
  return _impl_.long__.Mutable( GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::release_long_() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.long)
  return _impl_.long__.Release();
}
inline void RpcCommandOptions::set_allocated_long_(std::string* value) {
  _impl_.long__.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.long__.IsDefault()) {
          _impl_.long__.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.long)
}

// string short = 4 [json_name = "short"];
inline void RpcCommandOptions::clear_short_() {
  _impl_.short__.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::short_() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.short)
  return _internal_short_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_short_(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.short__.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.short)
}
inline std::string* RpcCommandOptions::mutable_short_() {
  std::string* _s = _internal_mutable_short_();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.short)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_short_() const {
  return _impl_.short__.Get();
}
inline void RpcCommandOptions::_internal_set_short_(const std::string& value) {
  ;


  _impl_.short__.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::_internal_mutable_short_() {
  ;
  return _impl_.short__.Mutable( GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::release_short_() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.short)
  return _impl_.short__.Release();
}
inline void RpcCommandOptions::set_allocated_short_(std::string* value) {
  _impl_.short__.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.short__.IsDefault()) {
          _impl_.short__.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.short)
}

// string example = 5 [json_name = "example"];
inline void RpcCommandOptions::clear_example() {
  _impl_.example_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::example() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.example)
  return _internal_example();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_example(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.example_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.example)
}
inline std::string* RpcCommandOptions::mutable_example() {
  std::string* _s = _internal_mutable_example();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.example)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_example() const {
  return _impl_.example_.Get();
}
inline void RpcCommandOptions::_internal_set_example(const std::string& value) {
  ;


  _impl_.example_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::_internal_mutable_example() {
  ;
  return _impl_.example_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::release_example() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.example)
  return _impl_.example_.Release();
}
inline void RpcCommandOptions::set_allocated_example(std::string* value) {
  _impl_.example_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.example_.IsDefault()) {
          _impl_.example_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.example)
}

// repeated string alias = 6 [json_name = "alias"];
inline int RpcCommandOptions::_internal_alias_size() const {
  return _impl_.alias_.size();
}
inline int RpcCommandOptions::alias_size() const {
  return _internal_alias_size();
}
inline void RpcCommandOptions::clear_alias() {
  _internal_mutable_alias()->Clear();
}
inline std::string* RpcCommandOptions::add_alias() {
  std::string* _s = _internal_add_alias();
  // @@protoc_insertion_point(field_add_mutable:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _s;
}
inline const std::string& RpcCommandOptions::alias(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _internal_alias(index);
}
inline std::string* RpcCommandOptions::mutable_alias(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _internal_mutable_alias()->Mutable(index);
}
inline void RpcCommandOptions::set_alias(int index, const std::string& value) {
  _internal_mutable_alias()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::set_alias(int index, std::string&& value) {
  _internal_mutable_alias()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::set_alias(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_alias()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::set_alias(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_alias()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::set_alias(int index, absl::string_view value) {
  _internal_mutable_alias()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::add_alias(const std::string& value) {
  _internal_mutable_alias()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::add_alias(std::string&& value) {
  _internal_mutable_alias()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::add_alias(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_alias()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::add_alias(const char* value, std::size_t size) {
  _internal_mutable_alias()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline void RpcCommandOptions::add_alias(absl::string_view value) {
  _internal_mutable_alias()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.autocli.v1.RpcCommandOptions.alias)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcCommandOptions::alias() const {
  // @@protoc_insertion_point(field_list:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _internal_alias();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RpcCommandOptions::mutable_alias() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.autocli.v1.RpcCommandOptions.alias)
  return _internal_mutable_alias();
}
inline const std::string& RpcCommandOptions::_internal_alias(int index) const {
  return _internal_alias().Get(index);
}
inline std::string* RpcCommandOptions::_internal_add_alias() {
  return _internal_mutable_alias()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcCommandOptions::_internal_alias() const {
  return _impl_.alias_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcCommandOptions::_internal_mutable_alias() {
  return &_impl_.alias_;
}

// repeated string suggest_for = 7 [json_name = "suggestFor"];
inline int RpcCommandOptions::_internal_suggest_for_size() const {
  return _impl_.suggest_for_.size();
}
inline int RpcCommandOptions::suggest_for_size() const {
  return _internal_suggest_for_size();
}
inline void RpcCommandOptions::clear_suggest_for() {
  _internal_mutable_suggest_for()->Clear();
}
inline std::string* RpcCommandOptions::add_suggest_for() {
  std::string* _s = _internal_add_suggest_for();
  // @@protoc_insertion_point(field_add_mutable:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _s;
}
inline const std::string& RpcCommandOptions::suggest_for(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _internal_suggest_for(index);
}
inline std::string* RpcCommandOptions::mutable_suggest_for(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _internal_mutable_suggest_for()->Mutable(index);
}
inline void RpcCommandOptions::set_suggest_for(int index, const std::string& value) {
  _internal_mutable_suggest_for()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::set_suggest_for(int index, std::string&& value) {
  _internal_mutable_suggest_for()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::set_suggest_for(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_suggest_for()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::set_suggest_for(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_suggest_for()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::set_suggest_for(int index, absl::string_view value) {
  _internal_mutable_suggest_for()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::add_suggest_for(const std::string& value) {
  _internal_mutable_suggest_for()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::add_suggest_for(std::string&& value) {
  _internal_mutable_suggest_for()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::add_suggest_for(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_suggest_for()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::add_suggest_for(const char* value, std::size_t size) {
  _internal_mutable_suggest_for()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline void RpcCommandOptions::add_suggest_for(absl::string_view value) {
  _internal_mutable_suggest_for()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcCommandOptions::suggest_for() const {
  // @@protoc_insertion_point(field_list:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _internal_suggest_for();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RpcCommandOptions::mutable_suggest_for() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.autocli.v1.RpcCommandOptions.suggest_for)
  return _internal_mutable_suggest_for();
}
inline const std::string& RpcCommandOptions::_internal_suggest_for(int index) const {
  return _internal_suggest_for().Get(index);
}
inline std::string* RpcCommandOptions::_internal_add_suggest_for() {
  return _internal_mutable_suggest_for()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RpcCommandOptions::_internal_suggest_for() const {
  return _impl_.suggest_for_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RpcCommandOptions::_internal_mutable_suggest_for() {
  return &_impl_.suggest_for_;
}

// string deprecated = 8 [json_name = "deprecated"];
inline void RpcCommandOptions::clear_deprecated() {
  _impl_.deprecated_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::deprecated() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.deprecated)
  return _internal_deprecated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_deprecated(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.deprecated_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.deprecated)
}
inline std::string* RpcCommandOptions::mutable_deprecated() {
  std::string* _s = _internal_mutable_deprecated();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.deprecated)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_deprecated() const {
  return _impl_.deprecated_.Get();
}
inline void RpcCommandOptions::_internal_set_deprecated(const std::string& value) {
  ;


  _impl_.deprecated_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::_internal_mutable_deprecated() {
  ;
  return _impl_.deprecated_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::release_deprecated() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.deprecated)
  return _impl_.deprecated_.Release();
}
inline void RpcCommandOptions::set_allocated_deprecated(std::string* value) {
  _impl_.deprecated_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deprecated_.IsDefault()) {
          _impl_.deprecated_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.deprecated)
}

// string version = 9 [json_name = "version"];
inline void RpcCommandOptions::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& RpcCommandOptions::version() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcCommandOptions::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.version)
}
inline std::string* RpcCommandOptions::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.version)
  return _s;
}
inline const std::string& RpcCommandOptions::_internal_version() const {
  return _impl_.version_.Get();
}
inline void RpcCommandOptions::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* RpcCommandOptions::release_version() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.RpcCommandOptions.version)
  return _impl_.version_.Release();
}
inline void RpcCommandOptions::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.RpcCommandOptions.version)
}

// map<string, .cosmos.autocli.v1.FlagOptions> flag_options = 10 [json_name = "flagOptions"];
inline int RpcCommandOptions::_internal_flag_options_size() const {
  return _impl_.flag_options_.size();
}
inline int RpcCommandOptions::flag_options_size() const {
  return _internal_flag_options_size();
}
inline void RpcCommandOptions::clear_flag_options() {
  _impl_.flag_options_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >&
RpcCommandOptions::_internal_flag_options() const {
  return _impl_.flag_options_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >&
RpcCommandOptions::flag_options() const {
  // @@protoc_insertion_point(field_map:cosmos.autocli.v1.RpcCommandOptions.flag_options)
  return _internal_flag_options();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >*
RpcCommandOptions::_internal_mutable_flag_options() {
  return _impl_.flag_options_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >*
RpcCommandOptions::mutable_flag_options() {
  // @@protoc_insertion_point(field_mutable_map:cosmos.autocli.v1.RpcCommandOptions.flag_options)
  return _internal_mutable_flag_options();
}

// repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];
inline int RpcCommandOptions::_internal_positional_args_size() const {
  return _impl_.positional_args_.size();
}
inline int RpcCommandOptions::positional_args_size() const {
  return _internal_positional_args_size();
}
inline void RpcCommandOptions::clear_positional_args() {
  _internal_mutable_positional_args()->Clear();
}
inline ::cosmos::autocli::v1::PositionalArgDescriptor* RpcCommandOptions::mutable_positional_args(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _internal_mutable_positional_args()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::PositionalArgDescriptor >*
RpcCommandOptions::mutable_positional_args() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _internal_mutable_positional_args();
}
inline const ::cosmos::autocli::v1::PositionalArgDescriptor& RpcCommandOptions::_internal_positional_args(int index) const {
  return _internal_positional_args().Get(index);
}
inline const ::cosmos::autocli::v1::PositionalArgDescriptor& RpcCommandOptions::positional_args(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _internal_positional_args(index);
}
inline ::cosmos::autocli::v1::PositionalArgDescriptor* RpcCommandOptions::_internal_add_positional_args() {
  return _internal_mutable_positional_args()->Add();
}
inline ::cosmos::autocli::v1::PositionalArgDescriptor* RpcCommandOptions::add_positional_args() {
  ::cosmos::autocli::v1::PositionalArgDescriptor* _add = _internal_add_positional_args();
  // @@protoc_insertion_point(field_add:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::autocli::v1::PositionalArgDescriptor >&
RpcCommandOptions::positional_args() const {
  // @@protoc_insertion_point(field_list:cosmos.autocli.v1.RpcCommandOptions.positional_args)
  return _internal_positional_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>&
RpcCommandOptions::_internal_positional_args() const {
  return _impl_.positional_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::autocli::v1::PositionalArgDescriptor>*
RpcCommandOptions::_internal_mutable_positional_args() {
  return &_impl_.positional_args_;
}

// bool skip = 12 [json_name = "skip"];
inline void RpcCommandOptions::clear_skip() {
  _impl_.skip_ = false;
}
inline bool RpcCommandOptions::skip() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.RpcCommandOptions.skip)
  return _internal_skip();
}
inline void RpcCommandOptions::set_skip(bool value) {
  _internal_set_skip(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.RpcCommandOptions.skip)
}
inline bool RpcCommandOptions::_internal_skip() const {
  return _impl_.skip_;
}
inline void RpcCommandOptions::_internal_set_skip(bool value) {
  ;
  _impl_.skip_ = value;
}

// -------------------------------------------------------------------

// FlagOptions

// string name = 1 [json_name = "name"];
inline void FlagOptions::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FlagOptions::name() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.name)
}
inline std::string* FlagOptions::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.name)
  return _s;
}
inline const std::string& FlagOptions::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FlagOptions::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FlagOptions::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* FlagOptions::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.name)
  return _impl_.name_.Release();
}
inline void FlagOptions::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.name)
}

// string shorthand = 2 [json_name = "shorthand"];
inline void FlagOptions::clear_shorthand() {
  _impl_.shorthand_.ClearToEmpty();
}
inline const std::string& FlagOptions::shorthand() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.shorthand)
  return _internal_shorthand();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_shorthand(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.shorthand_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.shorthand)
}
inline std::string* FlagOptions::mutable_shorthand() {
  std::string* _s = _internal_mutable_shorthand();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.shorthand)
  return _s;
}
inline const std::string& FlagOptions::_internal_shorthand() const {
  return _impl_.shorthand_.Get();
}
inline void FlagOptions::_internal_set_shorthand(const std::string& value) {
  ;


  _impl_.shorthand_.Set(value, GetArenaForAllocation());
}
inline std::string* FlagOptions::_internal_mutable_shorthand() {
  ;
  return _impl_.shorthand_.Mutable( GetArenaForAllocation());
}
inline std::string* FlagOptions::release_shorthand() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.shorthand)
  return _impl_.shorthand_.Release();
}
inline void FlagOptions::set_allocated_shorthand(std::string* value) {
  _impl_.shorthand_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shorthand_.IsDefault()) {
          _impl_.shorthand_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.shorthand)
}

// string usage = 3 [json_name = "usage"];
inline void FlagOptions::clear_usage() {
  _impl_.usage_.ClearToEmpty();
}
inline const std::string& FlagOptions::usage() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.usage)
  return _internal_usage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_usage(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.usage_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.usage)
}
inline std::string* FlagOptions::mutable_usage() {
  std::string* _s = _internal_mutable_usage();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.usage)
  return _s;
}
inline const std::string& FlagOptions::_internal_usage() const {
  return _impl_.usage_.Get();
}
inline void FlagOptions::_internal_set_usage(const std::string& value) {
  ;


  _impl_.usage_.Set(value, GetArenaForAllocation());
}
inline std::string* FlagOptions::_internal_mutable_usage() {
  ;
  return _impl_.usage_.Mutable( GetArenaForAllocation());
}
inline std::string* FlagOptions::release_usage() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.usage)
  return _impl_.usage_.Release();
}
inline void FlagOptions::set_allocated_usage(std::string* value) {
  _impl_.usage_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.usage_.IsDefault()) {
          _impl_.usage_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.usage)
}

// string default_value = 4 [json_name = "defaultValue"];
inline void FlagOptions::clear_default_value() {
  _impl_.default_value_.ClearToEmpty();
}
inline const std::string& FlagOptions::default_value() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.default_value)
  return _internal_default_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_default_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.default_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.default_value)
}
inline std::string* FlagOptions::mutable_default_value() {
  std::string* _s = _internal_mutable_default_value();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.default_value)
  return _s;
}
inline const std::string& FlagOptions::_internal_default_value() const {
  return _impl_.default_value_.Get();
}
inline void FlagOptions::_internal_set_default_value(const std::string& value) {
  ;


  _impl_.default_value_.Set(value, GetArenaForAllocation());
}
inline std::string* FlagOptions::_internal_mutable_default_value() {
  ;
  return _impl_.default_value_.Mutable( GetArenaForAllocation());
}
inline std::string* FlagOptions::release_default_value() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.default_value)
  return _impl_.default_value_.Release();
}
inline void FlagOptions::set_allocated_default_value(std::string* value) {
  _impl_.default_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.default_value_.IsDefault()) {
          _impl_.default_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.default_value)
}

// string no_opt_default_value = 5 [json_name = "noOptDefaultValue"];
inline void FlagOptions::clear_no_opt_default_value() {
  _impl_.no_opt_default_value_.ClearToEmpty();
}
inline const std::string& FlagOptions::no_opt_default_value() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.no_opt_default_value)
  return _internal_no_opt_default_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_no_opt_default_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.no_opt_default_value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.no_opt_default_value)
}
inline std::string* FlagOptions::mutable_no_opt_default_value() {
  std::string* _s = _internal_mutable_no_opt_default_value();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.no_opt_default_value)
  return _s;
}
inline const std::string& FlagOptions::_internal_no_opt_default_value() const {
  return _impl_.no_opt_default_value_.Get();
}
inline void FlagOptions::_internal_set_no_opt_default_value(const std::string& value) {
  ;


  _impl_.no_opt_default_value_.Set(value, GetArenaForAllocation());
}
inline std::string* FlagOptions::_internal_mutable_no_opt_default_value() {
  ;
  return _impl_.no_opt_default_value_.Mutable( GetArenaForAllocation());
}
inline std::string* FlagOptions::release_no_opt_default_value() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.no_opt_default_value)
  return _impl_.no_opt_default_value_.Release();
}
inline void FlagOptions::set_allocated_no_opt_default_value(std::string* value) {
  _impl_.no_opt_default_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.no_opt_default_value_.IsDefault()) {
          _impl_.no_opt_default_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.no_opt_default_value)
}

// string deprecated = 6 [json_name = "deprecated"];
inline void FlagOptions::clear_deprecated() {
  _impl_.deprecated_.ClearToEmpty();
}
inline const std::string& FlagOptions::deprecated() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.deprecated)
  return _internal_deprecated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_deprecated(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.deprecated_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.deprecated)
}
inline std::string* FlagOptions::mutable_deprecated() {
  std::string* _s = _internal_mutable_deprecated();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.deprecated)
  return _s;
}
inline const std::string& FlagOptions::_internal_deprecated() const {
  return _impl_.deprecated_.Get();
}
inline void FlagOptions::_internal_set_deprecated(const std::string& value) {
  ;


  _impl_.deprecated_.Set(value, GetArenaForAllocation());
}
inline std::string* FlagOptions::_internal_mutable_deprecated() {
  ;
  return _impl_.deprecated_.Mutable( GetArenaForAllocation());
}
inline std::string* FlagOptions::release_deprecated() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.deprecated)
  return _impl_.deprecated_.Release();
}
inline void FlagOptions::set_allocated_deprecated(std::string* value) {
  _impl_.deprecated_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deprecated_.IsDefault()) {
          _impl_.deprecated_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.deprecated)
}

// string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];
inline void FlagOptions::clear_shorthand_deprecated() {
  _impl_.shorthand_deprecated_.ClearToEmpty();
}
inline const std::string& FlagOptions::shorthand_deprecated() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
  return _internal_shorthand_deprecated();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FlagOptions::set_shorthand_deprecated(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.shorthand_deprecated_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
}
inline std::string* FlagOptions::mutable_shorthand_deprecated() {
  std::string* _s = _internal_mutable_shorthand_deprecated();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
  return _s;
}
inline const std::string& FlagOptions::_internal_shorthand_deprecated() const {
  return _impl_.shorthand_deprecated_.Get();
}
inline void FlagOptions::_internal_set_shorthand_deprecated(const std::string& value) {
  ;


  _impl_.shorthand_deprecated_.Set(value, GetArenaForAllocation());
}
inline std::string* FlagOptions::_internal_mutable_shorthand_deprecated() {
  ;
  return _impl_.shorthand_deprecated_.Mutable( GetArenaForAllocation());
}
inline std::string* FlagOptions::release_shorthand_deprecated() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
  return _impl_.shorthand_deprecated_.Release();
}
inline void FlagOptions::set_allocated_shorthand_deprecated(std::string* value) {
  _impl_.shorthand_deprecated_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.shorthand_deprecated_.IsDefault()) {
          _impl_.shorthand_deprecated_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.FlagOptions.shorthand_deprecated)
}

// bool hidden = 8 [json_name = "hidden"];
inline void FlagOptions::clear_hidden() {
  _impl_.hidden_ = false;
}
inline bool FlagOptions::hidden() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.FlagOptions.hidden)
  return _internal_hidden();
}
inline void FlagOptions::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.FlagOptions.hidden)
}
inline bool FlagOptions::_internal_hidden() const {
  return _impl_.hidden_;
}
inline void FlagOptions::_internal_set_hidden(bool value) {
  ;
  _impl_.hidden_ = value;
}

// -------------------------------------------------------------------

// PositionalArgDescriptor

// string proto_field = 1 [json_name = "protoField"];
inline void PositionalArgDescriptor::clear_proto_field() {
  _impl_.proto_field_.ClearToEmpty();
}
inline const std::string& PositionalArgDescriptor::proto_field() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
  return _internal_proto_field();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PositionalArgDescriptor::set_proto_field(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proto_field_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
}
inline std::string* PositionalArgDescriptor::mutable_proto_field() {
  std::string* _s = _internal_mutable_proto_field();
  // @@protoc_insertion_point(field_mutable:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
  return _s;
}
inline const std::string& PositionalArgDescriptor::_internal_proto_field() const {
  return _impl_.proto_field_.Get();
}
inline void PositionalArgDescriptor::_internal_set_proto_field(const std::string& value) {
  ;


  _impl_.proto_field_.Set(value, GetArenaForAllocation());
}
inline std::string* PositionalArgDescriptor::_internal_mutable_proto_field() {
  ;
  return _impl_.proto_field_.Mutable( GetArenaForAllocation());
}
inline std::string* PositionalArgDescriptor::release_proto_field() {
  // @@protoc_insertion_point(field_release:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
  return _impl_.proto_field_.Release();
}
inline void PositionalArgDescriptor::set_allocated_proto_field(std::string* value) {
  _impl_.proto_field_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proto_field_.IsDefault()) {
          _impl_.proto_field_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.autocli.v1.PositionalArgDescriptor.proto_field)
}

// bool varargs = 2 [json_name = "varargs"];
inline void PositionalArgDescriptor::clear_varargs() {
  _impl_.varargs_ = false;
}
inline bool PositionalArgDescriptor::varargs() const {
  // @@protoc_insertion_point(field_get:cosmos.autocli.v1.PositionalArgDescriptor.varargs)
  return _internal_varargs();
}
inline void PositionalArgDescriptor::set_varargs(bool value) {
  _internal_set_varargs(value);
  // @@protoc_insertion_point(field_set:cosmos.autocli.v1.PositionalArgDescriptor.varargs)
}
inline bool PositionalArgDescriptor::_internal_varargs() const {
  return _impl_.varargs_;
}
inline void PositionalArgDescriptor::_internal_set_varargs(bool value) {
  ;
  _impl_.varargs_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace autocli
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fautocli_2fv1_2foptions_2eproto_2epb_2eh

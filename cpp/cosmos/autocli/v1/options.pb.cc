// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/autocli/v1/options.proto

#include "cosmos/autocli/v1/options.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace autocli {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR ModuleOptions::ModuleOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tx_)*/nullptr
  , /*decltype(_impl_.query_)*/nullptr} {}
struct ModuleOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleOptionsDefaultTypeInternal() {}
  union {
    ModuleOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleOptionsDefaultTypeInternal _ModuleOptions_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ServiceCommandDescriptor_SubCommandsEntry_DoNotUse::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ServiceCommandDescriptor_SubCommandsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceCommandDescriptor_SubCommandsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceCommandDescriptor_SubCommandsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ServiceCommandDescriptor_SubCommandsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceCommandDescriptor_SubCommandsEntry_DoNotUseDefaultTypeInternal _ServiceCommandDescriptor_SubCommandsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ServiceCommandDescriptor::ServiceCommandDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rpc_command_options_)*/{}
  , /*decltype(_impl_.sub_commands_)*/{}
  , /*decltype(_impl_.service_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceCommandDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceCommandDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceCommandDescriptorDefaultTypeInternal() {}
  union {
    ServiceCommandDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceCommandDescriptorDefaultTypeInternal _ServiceCommandDescriptor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RpcCommandOptions_FlagOptionsEntry_DoNotUse::RpcCommandOptions_FlagOptionsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RpcCommandOptions_FlagOptionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcCommandOptions_FlagOptionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcCommandOptions_FlagOptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RpcCommandOptions_FlagOptionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcCommandOptions_FlagOptionsEntry_DoNotUseDefaultTypeInternal _RpcCommandOptions_FlagOptionsEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RpcCommandOptions::RpcCommandOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.alias_)*/{}
  , /*decltype(_impl_.suggest_for_)*/{}
  , /*decltype(_impl_.flag_options_)*/{}
  , /*decltype(_impl_.positional_args_)*/{}
  , /*decltype(_impl_.rpc_method_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.use_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.long__)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.short__)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.example_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deprecated_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcCommandOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcCommandOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcCommandOptionsDefaultTypeInternal() {}
  union {
    RpcCommandOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcCommandOptionsDefaultTypeInternal _RpcCommandOptions_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FlagOptions::FlagOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.shorthand_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.usage_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.default_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.no_opt_default_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deprecated_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.shorthand_deprecated_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hidden_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FlagOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlagOptionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlagOptionsDefaultTypeInternal() {}
  union {
    FlagOptions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlagOptionsDefaultTypeInternal _FlagOptions_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PositionalArgDescriptor::PositionalArgDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proto_field_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.varargs_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionalArgDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionalArgDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionalArgDescriptorDefaultTypeInternal() {}
  union {
    PositionalArgDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionalArgDescriptorDefaultTypeInternal _PositionalArgDescriptor_default_instance_;
}  // namespace v1
}  // namespace autocli
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fautocli_2fv1_2foptions_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fautocli_2fv1_2foptions_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ModuleOptions, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ModuleOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ModuleOptions, _impl_.tx_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ModuleOptions, _impl_.query_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ServiceCommandDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ServiceCommandDescriptor, _impl_.service_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ServiceCommandDescriptor, _impl_.rpc_command_options_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::ServiceCommandDescriptor, _impl_.sub_commands_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.rpc_method_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.use_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.long__),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.short__),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.example_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.alias_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.suggest_for_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.deprecated_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.flag_options_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.positional_args_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::RpcCommandOptions, _impl_.skip_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _impl_.shorthand_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _impl_.usage_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _impl_.default_value_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _impl_.no_opt_default_value_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _impl_.deprecated_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _impl_.shorthand_deprecated_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::FlagOptions, _impl_.hidden_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::PositionalArgDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::PositionalArgDescriptor, _impl_.proto_field_),
    PROTOBUF_FIELD_OFFSET(::cosmos::autocli::v1::PositionalArgDescriptor, _impl_.varargs_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cosmos::autocli::v1::ModuleOptions)},
        { 12, 22, -1, sizeof(::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse)},
        { 24, -1, -1, sizeof(::cosmos::autocli::v1::ServiceCommandDescriptor)},
        { 35, 45, -1, sizeof(::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse)},
        { 47, -1, -1, sizeof(::cosmos::autocli::v1::RpcCommandOptions)},
        { 67, -1, -1, sizeof(::cosmos::autocli::v1::FlagOptions)},
        { 83, -1, -1, sizeof(::cosmos::autocli::v1::PositionalArgDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::autocli::v1::_ModuleOptions_default_instance_._instance,
    &::cosmos::autocli::v1::_ServiceCommandDescriptor_SubCommandsEntry_DoNotUse_default_instance_._instance,
    &::cosmos::autocli::v1::_ServiceCommandDescriptor_default_instance_._instance,
    &::cosmos::autocli::v1::_RpcCommandOptions_FlagOptionsEntry_DoNotUse_default_instance_._instance,
    &::cosmos::autocli::v1::_RpcCommandOptions_default_instance_._instance,
    &::cosmos::autocli::v1::_FlagOptions_default_instance_._instance,
    &::cosmos::autocli::v1::_PositionalArgDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fautocli_2fv1_2foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037cosmos/autocli/v1/options.proto\022\021cosmo"
    "s.autocli.v1\"\217\001\n\rModuleOptions\022;\n\002tx\030\001 \001"
    "(\0132+.cosmos.autocli.v1.ServiceCommandDes"
    "criptorR\002tx\022A\n\005query\030\002 \001(\0132+.cosmos.auto"
    "cli.v1.ServiceCommandDescriptorR\005query\"\330"
    "\002\n\030ServiceCommandDescriptor\022\030\n\007service\030\001"
    " \001(\tR\007service\022T\n\023rpc_command_options\030\002 \003"
    "(\0132$.cosmos.autocli.v1.RpcCommandOptions"
    "R\021rpcCommandOptions\022_\n\014sub_commands\030\003 \003("
    "\0132<.cosmos.autocli.v1.ServiceCommandDesc"
    "riptor.SubCommandsEntryR\013subCommands\032k\n\020"
    "SubCommandsEntry\022\020\n\003key\030\001 \001(\tR\003key\022A\n\005va"
    "lue\030\002 \001(\0132+.cosmos.autocli.v1.ServiceCom"
    "mandDescriptorR\005value:\0028\001\"\234\004\n\021RpcCommand"
    "Options\022\035\n\nrpc_method\030\001 \001(\tR\trpcMethod\022\020"
    "\n\003use\030\002 \001(\tR\003use\022\022\n\004long\030\003 \001(\tR\004long\022\024\n\005"
    "short\030\004 \001(\tR\005short\022\030\n\007example\030\005 \001(\tR\007exa"
    "mple\022\024\n\005alias\030\006 \003(\tR\005alias\022\037\n\013suggest_fo"
    "r\030\007 \003(\tR\nsuggestFor\022\036\n\ndeprecated\030\010 \001(\tR"
    "\ndeprecated\022\030\n\007version\030\t \001(\tR\007version\022X\n"
    "\014flag_options\030\n \003(\01325.cosmos.autocli.v1."
    "RpcCommandOptions.FlagOptionsEntryR\013flag"
    "Options\022S\n\017positional_args\030\013 \003(\0132*.cosmo"
    "s.autocli.v1.PositionalArgDescriptorR\016po"
    "sitionalArgs\022\022\n\004skip\030\014 \001(\010R\004skip\032^\n\020Flag"
    "OptionsEntry\022\020\n\003key\030\001 \001(\tR\003key\0224\n\005value\030"
    "\002 \001(\0132\036.cosmos.autocli.v1.FlagOptionsR\005v"
    "alue:\0028\001\"\226\002\n\013FlagOptions\022\022\n\004name\030\001 \001(\tR\004"
    "name\022\034\n\tshorthand\030\002 \001(\tR\tshorthand\022\024\n\005us"
    "age\030\003 \001(\tR\005usage\022#\n\rdefault_value\030\004 \001(\tR"
    "\014defaultValue\022/\n\024no_opt_default_value\030\005 "
    "\001(\tR\021noOptDefaultValue\022\036\n\ndeprecated\030\006 \001"
    "(\tR\ndeprecated\0221\n\024shorthand_deprecated\030\007"
    " \001(\tR\023shorthandDeprecated\022\026\n\006hidden\030\010 \001("
    "\010R\006hidden\"T\n\027PositionalArgDescriptor\022\037\n\013"
    "proto_field\030\001 \001(\tR\nprotoField\022\030\n\007varargs"
    "\030\002 \001(\010R\007varargsB\266\001\n\025com.cosmos.autocli.v"
    "1B\014OptionsProtoP\001Z)cosmossdk.io/api/cosm"
    "os/base/cli/v1;cliv1\242\002\003CAX\252\002\021Cosmos.Auto"
    "cli.V1\312\002\021Cosmos\\Autocli\\V1\342\002\035Cosmos\\Auto"
    "cli\\V1\\GPBMetadata\352\002\023Cosmos::Autocli::V1"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto = {
    false,
    false,
    1648,
    descriptor_table_protodef_cosmos_2fautocli_2fv1_2foptions_2eproto,
    "cosmos/autocli/v1/options.proto",
    &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fautocli_2fv1_2foptions_2eproto::offsets,
    file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto,
    file_level_enum_descriptors_cosmos_2fautocli_2fv1_2foptions_2eproto,
    file_level_service_descriptors_cosmos_2fautocli_2fv1_2foptions_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_getter() {
  return &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fautocli_2fv1_2foptions_2eproto(&descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto);
namespace cosmos {
namespace autocli {
namespace v1 {
// ===================================================================

class ModuleOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<ModuleOptions>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModuleOptions, _impl_._has_bits_);
  static const ::cosmos::autocli::v1::ServiceCommandDescriptor& tx(const ModuleOptions* msg);
  static void set_has_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::autocli::v1::ServiceCommandDescriptor& query(const ModuleOptions* msg);
  static void set_has_query(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::autocli::v1::ServiceCommandDescriptor&
ModuleOptions::_Internal::tx(const ModuleOptions* msg) {
  return *msg->_impl_.tx_;
}
const ::cosmos::autocli::v1::ServiceCommandDescriptor&
ModuleOptions::_Internal::query(const ModuleOptions* msg) {
  return *msg->_impl_.query_;
}
ModuleOptions::ModuleOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.autocli.v1.ModuleOptions)
}
ModuleOptions::ModuleOptions(const ModuleOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_){nullptr}
    , decltype(_impl_.query_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tx_ = new ::cosmos::autocli::v1::ServiceCommandDescriptor(*from._impl_.tx_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.query_ = new ::cosmos::autocli::v1::ServiceCommandDescriptor(*from._impl_.query_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.autocli.v1.ModuleOptions)
}

inline void ModuleOptions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_){nullptr}
    , decltype(_impl_.query_){nullptr}
  };
}

ModuleOptions::~ModuleOptions() {
  // @@protoc_insertion_point(destructor:cosmos.autocli.v1.ModuleOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleOptions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tx_;
  if (this != internal_default_instance()) delete _impl_.query_;
}

void ModuleOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.autocli.v1.ModuleOptions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.tx_ != nullptr);
      _impl_.tx_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.query_ != nullptr);
      _impl_.query_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModuleOptions::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.autocli.v1.ModuleOptions)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tx(this),
        _Internal::tx(this).GetCachedSize(), target, stream);
  }

  // .cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::query(this),
        _Internal::query(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.autocli.v1.ModuleOptions)
  return target;
}

::size_t ModuleOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.autocli.v1.ModuleOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.autocli.v1.ServiceCommandDescriptor tx = 1 [json_name = "tx"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tx_);
    }

    // .cosmos.autocli.v1.ServiceCommandDescriptor query = 2 [json_name = "query"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleOptions::GetClassData() const { return &_class_data_; }


void ModuleOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleOptions*>(&to_msg);
  auto& from = static_cast<const ModuleOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.autocli.v1.ModuleOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tx()->::cosmos::autocli::v1::ServiceCommandDescriptor::MergeFrom(
          from._internal_tx());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_query()->::cosmos::autocli::v1::ServiceCommandDescriptor::MergeFrom(
          from._internal_query());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleOptions::CopyFrom(const ModuleOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.autocli.v1.ModuleOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleOptions::IsInitialized() const {
  return true;
}

void ModuleOptions::InternalSwap(ModuleOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleOptions, _impl_.query_)
      + sizeof(ModuleOptions::_impl_.query_)
      - PROTOBUF_FIELD_OFFSET(ModuleOptions, _impl_.tx_)>(
          reinterpret_cast<char*>(&_impl_.tx_),
          reinterpret_cast<char*>(&other->_impl_.tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_getter, &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once,
      file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto[0]);
}
// ===================================================================

ServiceCommandDescriptor_SubCommandsEntry_DoNotUse::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse() {}
ServiceCommandDescriptor_SubCommandsEntry_DoNotUse::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ServiceCommandDescriptor_SubCommandsEntry_DoNotUse::MergeFrom(const ServiceCommandDescriptor_SubCommandsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ServiceCommandDescriptor_SubCommandsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_getter, &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once,
      file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto[1]);
}
// ===================================================================

class ServiceCommandDescriptor::_Internal {
 public:
};

ServiceCommandDescriptor::ServiceCommandDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.autocli.v1.ServiceCommandDescriptor)
}
ServiceCommandDescriptor::ServiceCommandDescriptor(const ServiceCommandDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServiceCommandDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rpc_command_options_){from._impl_.rpc_command_options_}
    , /*decltype(_impl_.sub_commands_)*/{}
    , decltype(_impl_.service_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sub_commands_.MergeFrom(from._impl_.sub_commands_);
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    _this->_impl_.service_.Set(from._internal_service(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.autocli.v1.ServiceCommandDescriptor)
}

inline void ServiceCommandDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rpc_command_options_){arena}
    , /*decltype(_impl_.sub_commands_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.service_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceCommandDescriptor::~ServiceCommandDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.autocli.v1.ServiceCommandDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceCommandDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rpc_command_options()->~RepeatedPtrField();
  _impl_.sub_commands_.~MapField();
  _impl_.service_.Destroy();
}

void ServiceCommandDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceCommandDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.autocli.v1.ServiceCommandDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rpc_command_options()->Clear();
  _impl_.sub_commands_.Clear();
  _impl_.service_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceCommandDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service = 1 [json_name = "service"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.ServiceCommandDescriptor.service"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rpc_command_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, .cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3 [json_name = "subCommands"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sub_commands_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServiceCommandDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.autocli.v1.ServiceCommandDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1 [json_name = "service"];
  if (!this->_internal_service().empty()) {
    const std::string& _s = this->_internal_service();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.ServiceCommandDescriptor.service");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rpc_command_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_rpc_command_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<string, .cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3 [json_name = "subCommands"];
  if (!this->_internal_sub_commands().empty()) {
    using MapType = ::_pb::Map<std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor>;
    using WireHelper = ServiceCommandDescriptor_SubCommandsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sub_commands();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.ServiceCommandDescriptor.sub_commands");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.autocli.v1.ServiceCommandDescriptor)
  return target;
}

::size_t ServiceCommandDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.autocli.v1.ServiceCommandDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];
  total_size += 1UL * this->_internal_rpc_command_options_size();
  for (const auto& msg : this->_internal_rpc_command_options()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .cosmos.autocli.v1.ServiceCommandDescriptor> sub_commands = 3 [json_name = "subCommands"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sub_commands_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::ServiceCommandDescriptor >::const_iterator
      it = this->_internal_sub_commands().begin();
      it != this->_internal_sub_commands().end(); ++it) {
    total_size += ServiceCommandDescriptor_SubCommandsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string service = 1 [json_name = "service"];
  if (!this->_internal_service().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_service());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceCommandDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServiceCommandDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceCommandDescriptor::GetClassData() const { return &_class_data_; }


void ServiceCommandDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServiceCommandDescriptor*>(&to_msg);
  auto& from = static_cast<const ServiceCommandDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.autocli.v1.ServiceCommandDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rpc_command_options()->MergeFrom(from._internal_rpc_command_options());
  _this->_impl_.sub_commands_.MergeFrom(from._impl_.sub_commands_);
  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceCommandDescriptor::CopyFrom(const ServiceCommandDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.autocli.v1.ServiceCommandDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceCommandDescriptor::IsInitialized() const {
  return true;
}

void ServiceCommandDescriptor::InternalSwap(ServiceCommandDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rpc_command_options()->InternalSwap(other->_internal_mutable_rpc_command_options());
  _impl_.sub_commands_.InternalSwap(&other->_impl_.sub_commands_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_, lhs_arena,
                                       &other->_impl_.service_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceCommandDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_getter, &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once,
      file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto[2]);
}
// ===================================================================

RpcCommandOptions_FlagOptionsEntry_DoNotUse::RpcCommandOptions_FlagOptionsEntry_DoNotUse() {}
RpcCommandOptions_FlagOptionsEntry_DoNotUse::RpcCommandOptions_FlagOptionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RpcCommandOptions_FlagOptionsEntry_DoNotUse::MergeFrom(const RpcCommandOptions_FlagOptionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RpcCommandOptions_FlagOptionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_getter, &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once,
      file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto[3]);
}
// ===================================================================

class RpcCommandOptions::_Internal {
 public:
};

RpcCommandOptions::RpcCommandOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.autocli.v1.RpcCommandOptions)
}
RpcCommandOptions::RpcCommandOptions(const RpcCommandOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcCommandOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.alias_){from._impl_.alias_}
    , decltype(_impl_.suggest_for_){from._impl_.suggest_for_}
    , /*decltype(_impl_.flag_options_)*/{}
    , decltype(_impl_.positional_args_){from._impl_.positional_args_}
    , decltype(_impl_.rpc_method_) {}

    , decltype(_impl_.use_) {}

    , decltype(_impl_.long__) {}

    , decltype(_impl_.short__) {}

    , decltype(_impl_.example_) {}

    , decltype(_impl_.deprecated_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.skip_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.flag_options_.MergeFrom(from._impl_.flag_options_);
  _impl_.rpc_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rpc_method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rpc_method().empty()) {
    _this->_impl_.rpc_method_.Set(from._internal_rpc_method(), _this->GetArenaForAllocation());
  }
  _impl_.use_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.use_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_use().empty()) {
    _this->_impl_.use_.Set(from._internal_use(), _this->GetArenaForAllocation());
  }
  _impl_.long__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.long__.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_long_().empty()) {
    _this->_impl_.long__.Set(from._internal_long_(), _this->GetArenaForAllocation());
  }
  _impl_.short__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.short__.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_short_().empty()) {
    _this->_impl_.short__.Set(from._internal_short_(), _this->GetArenaForAllocation());
  }
  _impl_.example_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.example_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_example().empty()) {
    _this->_impl_.example_.Set(from._internal_example(), _this->GetArenaForAllocation());
  }
  _impl_.deprecated_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deprecated_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deprecated().empty()) {
    _this->_impl_.deprecated_.Set(from._internal_deprecated(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _this->_impl_.skip_ = from._impl_.skip_;
  // @@protoc_insertion_point(copy_constructor:cosmos.autocli.v1.RpcCommandOptions)
}

inline void RpcCommandOptions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.alias_){arena}
    , decltype(_impl_.suggest_for_){arena}
    , /*decltype(_impl_.flag_options_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.positional_args_){arena}
    , decltype(_impl_.rpc_method_) {}

    , decltype(_impl_.use_) {}

    , decltype(_impl_.long__) {}

    , decltype(_impl_.short__) {}

    , decltype(_impl_.example_) {}

    , decltype(_impl_.deprecated_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.skip_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rpc_method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rpc_method_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.use_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.use_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.long__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.long__.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.short__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.short__.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.example_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.example_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deprecated_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deprecated_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RpcCommandOptions::~RpcCommandOptions() {
  // @@protoc_insertion_point(destructor:cosmos.autocli.v1.RpcCommandOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcCommandOptions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_alias()->~RepeatedPtrField();
  _internal_mutable_suggest_for()->~RepeatedPtrField();
  _impl_.flag_options_.~MapField();
  _internal_mutable_positional_args()->~RepeatedPtrField();
  _impl_.rpc_method_.Destroy();
  _impl_.use_.Destroy();
  _impl_.long__.Destroy();
  _impl_.short__.Destroy();
  _impl_.example_.Destroy();
  _impl_.deprecated_.Destroy();
  _impl_.version_.Destroy();
}

void RpcCommandOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcCommandOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.autocli.v1.RpcCommandOptions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_alias()->Clear();
  _internal_mutable_suggest_for()->Clear();
  _impl_.flag_options_.Clear();
  _internal_mutable_positional_args()->Clear();
  _impl_.rpc_method_.ClearToEmpty();
  _impl_.use_.ClearToEmpty();
  _impl_.long__.ClearToEmpty();
  _impl_.short__.ClearToEmpty();
  _impl_.example_.ClearToEmpty();
  _impl_.deprecated_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.skip_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcCommandOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rpc_method = 1 [json_name = "rpcMethod"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rpc_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.rpc_method"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string use = 2 [json_name = "use"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_use();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.use"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string long = 3 [json_name = "long"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_long_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.long"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string short = 4 [json_name = "short"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_short_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.short"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string example = 5 [json_name = "example"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_example();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.example"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string alias = 6 [json_name = "alias"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_alias();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.alias"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string suggest_for = 7 [json_name = "suggestFor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_suggest_for();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.suggest_for"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string deprecated = 8 [json_name = "deprecated"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_deprecated();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.deprecated"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 9 [json_name = "version"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.RpcCommandOptions.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, .cosmos.autocli.v1.FlagOptions> flag_options = 10 [json_name = "flagOptions"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.flag_options_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positional_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool skip = 12 [json_name = "skip"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RpcCommandOptions::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.autocli.v1.RpcCommandOptions)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rpc_method = 1 [json_name = "rpcMethod"];
  if (!this->_internal_rpc_method().empty()) {
    const std::string& _s = this->_internal_rpc_method();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.rpc_method");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string use = 2 [json_name = "use"];
  if (!this->_internal_use().empty()) {
    const std::string& _s = this->_internal_use();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.use");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string long = 3 [json_name = "long"];
  if (!this->_internal_long_().empty()) {
    const std::string& _s = this->_internal_long_();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.long");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string short = 4 [json_name = "short"];
  if (!this->_internal_short_().empty()) {
    const std::string& _s = this->_internal_short_();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.short");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string example = 5 [json_name = "example"];
  if (!this->_internal_example().empty()) {
    const std::string& _s = this->_internal_example();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.example");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // repeated string alias = 6 [json_name = "alias"];
  for (int i = 0, n = this->_internal_alias_size(); i < n; ++i) {
    const auto& s = this->_internal_alias(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.alias");
    target = stream->WriteString(6, s, target);
  }

  // repeated string suggest_for = 7 [json_name = "suggestFor"];
  for (int i = 0, n = this->_internal_suggest_for_size(); i < n; ++i) {
    const auto& s = this->_internal_suggest_for(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.suggest_for");
    target = stream->WriteString(7, s, target);
  }

  // string deprecated = 8 [json_name = "deprecated"];
  if (!this->_internal_deprecated().empty()) {
    const std::string& _s = this->_internal_deprecated();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.deprecated");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string version = 9 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.version");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // map<string, .cosmos.autocli.v1.FlagOptions> flag_options = 10 [json_name = "flagOptions"];
  if (!this->_internal_flag_options().empty()) {
    using MapType = ::_pb::Map<std::string, ::cosmos::autocli::v1::FlagOptions>;
    using WireHelper = RpcCommandOptions_FlagOptionsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_flag_options();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.RpcCommandOptions.flag_options");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positional_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_positional_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool skip = 12 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_skip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.autocli.v1.RpcCommandOptions)
  return target;
}

::size_t RpcCommandOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.autocli.v1.RpcCommandOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string alias = 6 [json_name = "alias"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_alias().size());
  for (int i = 0, n = _internal_alias().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_alias().Get(i));
  }

  // repeated string suggest_for = 7 [json_name = "suggestFor"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_suggest_for().size());
  for (int i = 0, n = _internal_suggest_for().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_suggest_for().Get(i));
  }

  // map<string, .cosmos.autocli.v1.FlagOptions> flag_options = 10 [json_name = "flagOptions"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_flag_options_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::cosmos::autocli::v1::FlagOptions >::const_iterator
      it = this->_internal_flag_options().begin();
      it != this->_internal_flag_options().end(); ++it) {
    total_size += RpcCommandOptions_FlagOptionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];
  total_size += 1UL * this->_internal_positional_args_size();
  for (const auto& msg : this->_internal_positional_args()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string rpc_method = 1 [json_name = "rpcMethod"];
  if (!this->_internal_rpc_method().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_rpc_method());
  }

  // string use = 2 [json_name = "use"];
  if (!this->_internal_use().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_use());
  }

  // string long = 3 [json_name = "long"];
  if (!this->_internal_long_().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_long_());
  }

  // string short = 4 [json_name = "short"];
  if (!this->_internal_short_().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_short_());
  }

  // string example = 5 [json_name = "example"];
  if (!this->_internal_example().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_example());
  }

  // string deprecated = 8 [json_name = "deprecated"];
  if (!this->_internal_deprecated().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deprecated());
  }

  // string version = 9 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // bool skip = 12 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcCommandOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcCommandOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcCommandOptions::GetClassData() const { return &_class_data_; }


void RpcCommandOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcCommandOptions*>(&to_msg);
  auto& from = static_cast<const RpcCommandOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.autocli.v1.RpcCommandOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_alias()->MergeFrom(from._internal_alias());
  _this->_internal_mutable_suggest_for()->MergeFrom(from._internal_suggest_for());
  _this->_impl_.flag_options_.MergeFrom(from._impl_.flag_options_);
  _this->_internal_mutable_positional_args()->MergeFrom(from._internal_positional_args());
  if (!from._internal_rpc_method().empty()) {
    _this->_internal_set_rpc_method(from._internal_rpc_method());
  }
  if (!from._internal_use().empty()) {
    _this->_internal_set_use(from._internal_use());
  }
  if (!from._internal_long_().empty()) {
    _this->_internal_set_long_(from._internal_long_());
  }
  if (!from._internal_short_().empty()) {
    _this->_internal_set_short_(from._internal_short_());
  }
  if (!from._internal_example().empty()) {
    _this->_internal_set_example(from._internal_example());
  }
  if (!from._internal_deprecated().empty()) {
    _this->_internal_set_deprecated(from._internal_deprecated());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcCommandOptions::CopyFrom(const RpcCommandOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.autocli.v1.RpcCommandOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcCommandOptions::IsInitialized() const {
  return true;
}

void RpcCommandOptions::InternalSwap(RpcCommandOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_alias()->InternalSwap(
      other->_internal_mutable_alias());
  _internal_mutable_suggest_for()->InternalSwap(
      other->_internal_mutable_suggest_for());
  _impl_.flag_options_.InternalSwap(&other->_impl_.flag_options_);
  _internal_mutable_positional_args()->InternalSwap(other->_internal_mutable_positional_args());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rpc_method_, lhs_arena,
                                       &other->_impl_.rpc_method_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.use_, lhs_arena,
                                       &other->_impl_.use_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.long__, lhs_arena,
                                       &other->_impl_.long__, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.short__, lhs_arena,
                                       &other->_impl_.short__, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.example_, lhs_arena,
                                       &other->_impl_.example_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deprecated_, lhs_arena,
                                       &other->_impl_.deprecated_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);

  swap(_impl_.skip_, other->_impl_.skip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcCommandOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_getter, &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once,
      file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto[4]);
}
// ===================================================================

class FlagOptions::_Internal {
 public:
};

FlagOptions::FlagOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.autocli.v1.FlagOptions)
}
FlagOptions::FlagOptions(const FlagOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FlagOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.shorthand_) {}

    , decltype(_impl_.usage_) {}

    , decltype(_impl_.default_value_) {}

    , decltype(_impl_.no_opt_default_value_) {}

    , decltype(_impl_.deprecated_) {}

    , decltype(_impl_.shorthand_deprecated_) {}

    , decltype(_impl_.hidden_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.shorthand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shorthand_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shorthand().empty()) {
    _this->_impl_.shorthand_.Set(from._internal_shorthand(), _this->GetArenaForAllocation());
  }
  _impl_.usage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.usage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usage().empty()) {
    _this->_impl_.usage_.Set(from._internal_usage(), _this->GetArenaForAllocation());
  }
  _impl_.default_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.default_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_default_value().empty()) {
    _this->_impl_.default_value_.Set(from._internal_default_value(), _this->GetArenaForAllocation());
  }
  _impl_.no_opt_default_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_opt_default_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_no_opt_default_value().empty()) {
    _this->_impl_.no_opt_default_value_.Set(from._internal_no_opt_default_value(), _this->GetArenaForAllocation());
  }
  _impl_.deprecated_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deprecated_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deprecated().empty()) {
    _this->_impl_.deprecated_.Set(from._internal_deprecated(), _this->GetArenaForAllocation());
  }
  _impl_.shorthand_deprecated_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shorthand_deprecated_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shorthand_deprecated().empty()) {
    _this->_impl_.shorthand_deprecated_.Set(from._internal_shorthand_deprecated(), _this->GetArenaForAllocation());
  }
  _this->_impl_.hidden_ = from._impl_.hidden_;
  // @@protoc_insertion_point(copy_constructor:cosmos.autocli.v1.FlagOptions)
}

inline void FlagOptions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.shorthand_) {}

    , decltype(_impl_.usage_) {}

    , decltype(_impl_.default_value_) {}

    , decltype(_impl_.no_opt_default_value_) {}

    , decltype(_impl_.deprecated_) {}

    , decltype(_impl_.shorthand_deprecated_) {}

    , decltype(_impl_.hidden_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shorthand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shorthand_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.usage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.default_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.default_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.no_opt_default_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_opt_default_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deprecated_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deprecated_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shorthand_deprecated_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shorthand_deprecated_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FlagOptions::~FlagOptions() {
  // @@protoc_insertion_point(destructor:cosmos.autocli.v1.FlagOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlagOptions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.shorthand_.Destroy();
  _impl_.usage_.Destroy();
  _impl_.default_value_.Destroy();
  _impl_.no_opt_default_value_.Destroy();
  _impl_.deprecated_.Destroy();
  _impl_.shorthand_deprecated_.Destroy();
}

void FlagOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FlagOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.autocli.v1.FlagOptions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.shorthand_.ClearToEmpty();
  _impl_.usage_.ClearToEmpty();
  _impl_.default_value_.ClearToEmpty();
  _impl_.no_opt_default_value_.ClearToEmpty();
  _impl_.deprecated_.ClearToEmpty();
  _impl_.shorthand_deprecated_.ClearToEmpty();
  _impl_.hidden_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlagOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.FlagOptions.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string shorthand = 2 [json_name = "shorthand"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_shorthand();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.FlagOptions.shorthand"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string usage = 3 [json_name = "usage"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_usage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.FlagOptions.usage"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string default_value = 4 [json_name = "defaultValue"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_default_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.FlagOptions.default_value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string no_opt_default_value = 5 [json_name = "noOptDefaultValue"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_no_opt_default_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.FlagOptions.no_opt_default_value"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string deprecated = 6 [json_name = "deprecated"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_deprecated();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.FlagOptions.deprecated"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_shorthand_deprecated();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.FlagOptions.shorthand_deprecated"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool hidden = 8 [json_name = "hidden"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FlagOptions::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.autocli.v1.FlagOptions)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.FlagOptions.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string shorthand = 2 [json_name = "shorthand"];
  if (!this->_internal_shorthand().empty()) {
    const std::string& _s = this->_internal_shorthand();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.FlagOptions.shorthand");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string usage = 3 [json_name = "usage"];
  if (!this->_internal_usage().empty()) {
    const std::string& _s = this->_internal_usage();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.FlagOptions.usage");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string default_value = 4 [json_name = "defaultValue"];
  if (!this->_internal_default_value().empty()) {
    const std::string& _s = this->_internal_default_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.FlagOptions.default_value");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string no_opt_default_value = 5 [json_name = "noOptDefaultValue"];
  if (!this->_internal_no_opt_default_value().empty()) {
    const std::string& _s = this->_internal_no_opt_default_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.FlagOptions.no_opt_default_value");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string deprecated = 6 [json_name = "deprecated"];
  if (!this->_internal_deprecated().empty()) {
    const std::string& _s = this->_internal_deprecated();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.FlagOptions.deprecated");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];
  if (!this->_internal_shorthand_deprecated().empty()) {
    const std::string& _s = this->_internal_shorthand_deprecated();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.FlagOptions.shorthand_deprecated");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // bool hidden = 8 [json_name = "hidden"];
  if (this->_internal_hidden() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.autocli.v1.FlagOptions)
  return target;
}

::size_t FlagOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.autocli.v1.FlagOptions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string shorthand = 2 [json_name = "shorthand"];
  if (!this->_internal_shorthand().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_shorthand());
  }

  // string usage = 3 [json_name = "usage"];
  if (!this->_internal_usage().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_usage());
  }

  // string default_value = 4 [json_name = "defaultValue"];
  if (!this->_internal_default_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_default_value());
  }

  // string no_opt_default_value = 5 [json_name = "noOptDefaultValue"];
  if (!this->_internal_no_opt_default_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_no_opt_default_value());
  }

  // string deprecated = 6 [json_name = "deprecated"];
  if (!this->_internal_deprecated().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deprecated());
  }

  // string shorthand_deprecated = 7 [json_name = "shorthandDeprecated"];
  if (!this->_internal_shorthand_deprecated().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_shorthand_deprecated());
  }

  // bool hidden = 8 [json_name = "hidden"];
  if (this->_internal_hidden() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FlagOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FlagOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FlagOptions::GetClassData() const { return &_class_data_; }


void FlagOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FlagOptions*>(&to_msg);
  auto& from = static_cast<const FlagOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.autocli.v1.FlagOptions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_shorthand().empty()) {
    _this->_internal_set_shorthand(from._internal_shorthand());
  }
  if (!from._internal_usage().empty()) {
    _this->_internal_set_usage(from._internal_usage());
  }
  if (!from._internal_default_value().empty()) {
    _this->_internal_set_default_value(from._internal_default_value());
  }
  if (!from._internal_no_opt_default_value().empty()) {
    _this->_internal_set_no_opt_default_value(from._internal_no_opt_default_value());
  }
  if (!from._internal_deprecated().empty()) {
    _this->_internal_set_deprecated(from._internal_deprecated());
  }
  if (!from._internal_shorthand_deprecated().empty()) {
    _this->_internal_set_shorthand_deprecated(from._internal_shorthand_deprecated());
  }
  if (from._internal_hidden() != 0) {
    _this->_internal_set_hidden(from._internal_hidden());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FlagOptions::CopyFrom(const FlagOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.autocli.v1.FlagOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlagOptions::IsInitialized() const {
  return true;
}

void FlagOptions::InternalSwap(FlagOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shorthand_, lhs_arena,
                                       &other->_impl_.shorthand_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.usage_, lhs_arena,
                                       &other->_impl_.usage_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.default_value_, lhs_arena,
                                       &other->_impl_.default_value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.no_opt_default_value_, lhs_arena,
                                       &other->_impl_.no_opt_default_value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deprecated_, lhs_arena,
                                       &other->_impl_.deprecated_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shorthand_deprecated_, lhs_arena,
                                       &other->_impl_.shorthand_deprecated_, rhs_arena);

  swap(_impl_.hidden_, other->_impl_.hidden_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlagOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_getter, &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once,
      file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto[5]);
}
// ===================================================================

class PositionalArgDescriptor::_Internal {
 public:
};

PositionalArgDescriptor::PositionalArgDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.autocli.v1.PositionalArgDescriptor)
}
PositionalArgDescriptor::PositionalArgDescriptor(const PositionalArgDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionalArgDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proto_field_) {}

    , decltype(_impl_.varargs_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proto_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proto_field_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto_field().empty()) {
    _this->_impl_.proto_field_.Set(from._internal_proto_field(), _this->GetArenaForAllocation());
  }
  _this->_impl_.varargs_ = from._impl_.varargs_;
  // @@protoc_insertion_point(copy_constructor:cosmos.autocli.v1.PositionalArgDescriptor)
}

inline void PositionalArgDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proto_field_) {}

    , decltype(_impl_.varargs_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proto_field_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proto_field_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionalArgDescriptor::~PositionalArgDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.autocli.v1.PositionalArgDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionalArgDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proto_field_.Destroy();
}

void PositionalArgDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionalArgDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.autocli.v1.PositionalArgDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proto_field_.ClearToEmpty();
  _impl_.varargs_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionalArgDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string proto_field = 1 [json_name = "protoField"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_proto_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.autocli.v1.PositionalArgDescriptor.proto_field"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool varargs = 2 [json_name = "varargs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.varargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PositionalArgDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.autocli.v1.PositionalArgDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string proto_field = 1 [json_name = "protoField"];
  if (!this->_internal_proto_field().empty()) {
    const std::string& _s = this->_internal_proto_field();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.autocli.v1.PositionalArgDescriptor.proto_field");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool varargs = 2 [json_name = "varargs"];
  if (this->_internal_varargs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_varargs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.autocli.v1.PositionalArgDescriptor)
  return target;
}

::size_t PositionalArgDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.autocli.v1.PositionalArgDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proto_field = 1 [json_name = "protoField"];
  if (!this->_internal_proto_field().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_proto_field());
  }

  // bool varargs = 2 [json_name = "varargs"];
  if (this->_internal_varargs() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionalArgDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionalArgDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionalArgDescriptor::GetClassData() const { return &_class_data_; }


void PositionalArgDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionalArgDescriptor*>(&to_msg);
  auto& from = static_cast<const PositionalArgDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.autocli.v1.PositionalArgDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proto_field().empty()) {
    _this->_internal_set_proto_field(from._internal_proto_field());
  }
  if (from._internal_varargs() != 0) {
    _this->_internal_set_varargs(from._internal_varargs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionalArgDescriptor::CopyFrom(const PositionalArgDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.autocli.v1.PositionalArgDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionalArgDescriptor::IsInitialized() const {
  return true;
}

void PositionalArgDescriptor::InternalSwap(PositionalArgDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proto_field_, lhs_arena,
                                       &other->_impl_.proto_field_, rhs_arena);

  swap(_impl_.varargs_, other->_impl_.varargs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionalArgDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_getter, &descriptor_table_cosmos_2fautocli_2fv1_2foptions_2eproto_once,
      file_level_metadata_cosmos_2fautocli_2fv1_2foptions_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace autocli
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::autocli::v1::ModuleOptions*
Arena::CreateMaybeMessage< ::cosmos::autocli::v1::ModuleOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::autocli::v1::ModuleOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::autocli::v1::ServiceCommandDescriptor_SubCommandsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::autocli::v1::ServiceCommandDescriptor*
Arena::CreateMaybeMessage< ::cosmos::autocli::v1::ServiceCommandDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::autocli::v1::ServiceCommandDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::autocli::v1::RpcCommandOptions_FlagOptionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::autocli::v1::RpcCommandOptions*
Arena::CreateMaybeMessage< ::cosmos::autocli::v1::RpcCommandOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::autocli::v1::RpcCommandOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::autocli::v1::FlagOptions*
Arena::CreateMaybeMessage< ::cosmos::autocli::v1::FlagOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::autocli::v1::FlagOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::autocli::v1::PositionalArgDescriptor*
Arena::CreateMaybeMessage< ::cosmos::autocli::v1::PositionalArgDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::autocli::v1::PositionalArgDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

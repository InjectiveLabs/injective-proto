// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/orm/query/v1alpha1/query.proto

#include "cosmos/orm/query/v1alpha1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace orm {
namespace query {
namespace v1alpha1 {
template <typename>
PROTOBUF_CONSTEXPR GetRequest::GetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.message_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRequestDefaultTypeInternal() {}
  union {
    GetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRequestDefaultTypeInternal _GetRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetResponse::GetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/nullptr} {}
struct GetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResponseDefaultTypeInternal() {}
  union {
    GetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResponseDefaultTypeInternal _GetResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListRequest_Prefix::ListRequest_Prefix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListRequest_PrefixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRequest_PrefixDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRequest_PrefixDefaultTypeInternal() {}
  union {
    ListRequest_Prefix _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRequest_PrefixDefaultTypeInternal _ListRequest_Prefix_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListRequest_Range::ListRequest_Range(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/{}
  , /*decltype(_impl_.end_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListRequest_RangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRequest_RangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRequest_RangeDefaultTypeInternal() {}
  union {
    ListRequest_Range _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRequest_RangeDefaultTypeInternal _ListRequest_Range_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListRequest::ListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.query_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRequestDefaultTypeInternal() {}
  union {
    ListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRequestDefaultTypeInternal _ListRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListResponse::ListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct ListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListResponseDefaultTypeInternal() {}
  union {
    ListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListResponseDefaultTypeInternal _ListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IndexValue::IndexValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct IndexValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexValueDefaultTypeInternal() {}
  union {
    IndexValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexValueDefaultTypeInternal _IndexValue_default_instance_;
}  // namespace v1alpha1
}  // namespace query
}  // namespace orm
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::GetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::GetRequest, _impl_.message_name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::GetRequest, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::GetRequest, _impl_.values_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::GetResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::GetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::GetResponse, _impl_.result_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest_Prefix, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest_Prefix, _impl_.values_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest_Range, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest_Range, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest_Range, _impl_.end_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest, _impl_.message_name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest, _impl_.index_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest, _impl_.query_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListResponse, _impl_.results_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::IndexValue, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::IndexValue, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::IndexValue, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::orm::query::v1alpha1::GetRequest)},
        { 11, 20, -1, sizeof(::cosmos::orm::query::v1alpha1::GetResponse)},
        { 21, -1, -1, sizeof(::cosmos::orm::query::v1alpha1::ListRequest_Prefix)},
        { 30, -1, -1, sizeof(::cosmos::orm::query::v1alpha1::ListRequest_Range)},
        { 40, 54, -1, sizeof(::cosmos::orm::query::v1alpha1::ListRequest)},
        { 59, 69, -1, sizeof(::cosmos::orm::query::v1alpha1::ListResponse)},
        { 71, -1, -1, sizeof(::cosmos::orm::query::v1alpha1::IndexValue)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::orm::query::v1alpha1::_GetRequest_default_instance_._instance,
    &::cosmos::orm::query::v1alpha1::_GetResponse_default_instance_._instance,
    &::cosmos::orm::query::v1alpha1::_ListRequest_Prefix_default_instance_._instance,
    &::cosmos::orm::query::v1alpha1::_ListRequest_Range_default_instance_._instance,
    &::cosmos::orm::query::v1alpha1::_ListRequest_default_instance_._instance,
    &::cosmos::orm::query::v1alpha1::_ListResponse_default_instance_._instance,
    &::cosmos::orm::query::v1alpha1::_IndexValue_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%cosmos/orm/query/v1alpha1/query.proto\022"
    "\031cosmos.orm.query.v1alpha1\032\037google/proto"
    "buf/timestamp.proto\032\036google/protobuf/dur"
    "ation.proto\032\031google/protobuf/any.proto\032*"
    "cosmos/base/query/v1beta1/pagination.pro"
    "to\"\204\001\n\nGetRequest\022!\n\014message_name\030\001 \001(\tR"
    "\013messageName\022\024\n\005index\030\002 \001(\tR\005index\022=\n\006va"
    "lues\030\003 \003(\0132%.cosmos.orm.query.v1alpha1.I"
    "ndexValueR\006values\";\n\013GetResponse\022,\n\006resu"
    "lt\030\001 \001(\0132\024.google.protobuf.AnyR\006result\"\356"
    "\003\n\013ListRequest\022!\n\014message_name\030\001 \001(\tR\013me"
    "ssageName\022\024\n\005index\030\002 \001(\tR\005index\022G\n\006prefi"
    "x\030\003 \001(\0132-.cosmos.orm.query.v1alpha1.List"
    "Request.PrefixH\000R\006prefix\022D\n\005range\030\004 \001(\0132"
    ",.cosmos.orm.query.v1alpha1.ListRequest."
    "RangeH\000R\005range\022F\n\npagination\030\005 \001(\0132&.cos"
    "mos.base.query.v1beta1.PageRequestR\npagi"
    "nation\032G\n\006Prefix\022=\n\006values\030\001 \003(\0132%.cosmo"
    "s.orm.query.v1alpha1.IndexValueR\006values\032"
    "}\n\005Range\022;\n\005start\030\001 \003(\0132%.cosmos.orm.que"
    "ry.v1alpha1.IndexValueR\005start\0227\n\003end\030\002 \003"
    "(\0132%.cosmos.orm.query.v1alpha1.IndexValu"
    "eR\003endB\007\n\005query\"\207\001\n\014ListResponse\022.\n\007resu"
    "lts\030\001 \003(\0132\024.google.protobuf.AnyR\007results"
    "\022G\n\npagination\030\005 \001(\0132\'.cosmos.base.query"
    ".v1beta1.PageResponseR\npagination\"\214\002\n\nIn"
    "dexValue\022\024\n\004uint\030\001 \001(\004H\000R\004uint\022\022\n\003int\030\002 "
    "\001(\003H\000R\003int\022\022\n\003str\030\003 \001(\tH\000R\003str\022\026\n\005bytes\030"
    "\004 \001(\014H\000R\005bytes\022\024\n\004enum\030\005 \001(\tH\000R\004enum\022\024\n\004"
    "bool\030\006 \001(\010H\000R\004bool\022:\n\ttimestamp\030\007 \001(\0132\032."
    "google.protobuf.TimestampH\000R\ttimestamp\0227"
    "\n\010duration\030\010 \001(\0132\031.google.protobuf.Durat"
    "ionH\000R\010durationB\007\n\005value2\266\001\n\005Query\022T\n\003Ge"
    "t\022%.cosmos.orm.query.v1alpha1.GetRequest"
    "\032&.cosmos.orm.query.v1alpha1.GetResponse"
    "\022W\n\004List\022&.cosmos.orm.query.v1alpha1.Lis"
    "tRequest\032\'.cosmos.orm.query.v1alpha1.Lis"
    "tResponseB\262\001\n\035com.cosmos.orm.query.v1alp"
    "ha1B\nQueryProtoP\001\242\002\003COQ\252\002\031Cosmos.Orm.Que"
    "ry.V1alpha1\312\002\031Cosmos\\Orm\\Query\\V1alpha1\342"
    "\002%Cosmos\\Orm\\Query\\V1alpha1\\GPBMetadata\352"
    "\002\034Cosmos::Orm::Query::V1alpha1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto = {
    false,
    false,
    1678,
    descriptor_table_protodef_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto,
    "cosmos/orm/query/v1alpha1/query.proto",
    &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once,
    descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_deps,
    4,
    7,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto::offsets,
    file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto,
    file_level_enum_descriptors_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto,
    file_level_service_descriptors_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_getter() {
  return &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto(&descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto);
namespace cosmos {
namespace orm {
namespace query {
namespace v1alpha1 {
// ===================================================================

class GetRequest::_Internal {
 public:
};

GetRequest::GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.query.v1alpha1.GetRequest)
}
GetRequest::GetRequest(const GetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.message_name_) {}

    , decltype(_impl_.index_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_name().empty()) {
    _this->_impl_.message_name_.Set(from._internal_message_name(), _this->GetArenaForAllocation());
  }
  _impl_.index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.index_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    _this->_impl_.index_.Set(from._internal_index(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.query.v1alpha1.GetRequest)
}

inline void GetRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.message_name_) {}

    , decltype(_impl_.index_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.index_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:cosmos.orm.query.v1alpha1.GetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_values()->~RepeatedPtrField();
  _impl_.message_name_.Destroy();
  _impl_.index_.Destroy();
}

void GetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.query.v1alpha1.GetRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_values()->Clear();
  _impl_.message_name_.ClearToEmpty();
  _impl_.index_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_name = 1 [json_name = "messageName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.query.v1alpha1.GetRequest.message_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string index = 2 [json_name = "index"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.query.v1alpha1.GetRequest.index"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.orm.query.v1alpha1.IndexValue values = 3 [json_name = "values"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.query.v1alpha1.GetRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_name = 1 [json_name = "messageName"];
  if (!this->_internal_message_name().empty()) {
    const std::string& _s = this->_internal_message_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.query.v1alpha1.GetRequest.message_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string index = 2 [json_name = "index"];
  if (!this->_internal_index().empty()) {
    const std::string& _s = this->_internal_index();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.query.v1alpha1.GetRequest.index");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmos.orm.query.v1alpha1.IndexValue values = 3 [json_name = "values"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.query.v1alpha1.GetRequest)
  return target;
}

::size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.query.v1alpha1.GetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.orm.query.v1alpha1.IndexValue values = 3 [json_name = "values"];
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_internal_values()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_name = 1 [json_name = "messageName"];
  if (!this->_internal_message_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message_name());
  }

  // string index = 2 [json_name = "index"];
  if (!this->_internal_index().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRequest::GetClassData() const { return &_class_data_; }


void GetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRequest*>(&to_msg);
  auto& from = static_cast<const GetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.query.v1alpha1.GetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  if (!from._internal_message_name().empty()) {
    _this->_internal_set_message_name(from._internal_message_name());
  }
  if (!from._internal_index().empty()) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.query.v1alpha1.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRequest::IsInitialized() const {
  return true;
}

void GetRequest::InternalSwap(GetRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_values()->InternalSwap(other->_internal_mutable_values());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_name_, lhs_arena,
                                       &other->_impl_.message_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.index_, lhs_arena,
                                       &other->_impl_.index_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_getter, &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[0]);
}
// ===================================================================

class GetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetResponse, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& result(const GetResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
GetResponse::_Internal::result(const GetResponse* msg) {
  return *msg->_impl_.result_;
}
void GetResponse::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetResponse::GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.query.v1alpha1.GetResponse)
}
GetResponse::GetResponse(const GetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.result_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.query.v1alpha1.GetResponse)
}

inline void GetResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
  };
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:cosmos.orm.query.v1alpha1.GetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void GetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.query.v1alpha1.GetResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any result = 1 [json_name = "result"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.query.v1alpha1.GetResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any result = 1 [json_name = "result"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.query.v1alpha1.GetResponse)
  return target;
}

::size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.query.v1alpha1.GetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any result = 1 [json_name = "result"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResponse::GetClassData() const { return &_class_data_; }


void GetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetResponse*>(&to_msg);
  auto& from = static_cast<const GetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.query.v1alpha1.GetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_result()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.query.v1alpha1.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResponse::IsInitialized() const {
  return true;
}

void GetResponse::InternalSwap(GetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_getter, &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[1]);
}
// ===================================================================

class ListRequest_Prefix::_Internal {
 public:
};

ListRequest_Prefix::ListRequest_Prefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
}
ListRequest_Prefix::ListRequest_Prefix(const ListRequest_Prefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRequest_Prefix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
}

inline void ListRequest_Prefix::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListRequest_Prefix::~ListRequest_Prefix() {
  // @@protoc_insertion_point(destructor:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRequest_Prefix::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_values()->~RepeatedPtrField();
}

void ListRequest_Prefix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRequest_Prefix::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_values()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRequest_Prefix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.orm.query.v1alpha1.IndexValue values = 1 [json_name = "values"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListRequest_Prefix::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.orm.query.v1alpha1.IndexValue values = 1 [json_name = "values"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
  return target;
}

::size_t ListRequest_Prefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.orm.query.v1alpha1.IndexValue values = 1 [json_name = "values"];
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_internal_values()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRequest_Prefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRequest_Prefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRequest_Prefix::GetClassData() const { return &_class_data_; }


void ListRequest_Prefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRequest_Prefix*>(&to_msg);
  auto& from = static_cast<const ListRequest_Prefix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRequest_Prefix::CopyFrom(const ListRequest_Prefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest_Prefix::IsInitialized() const {
  return true;
}

void ListRequest_Prefix::InternalSwap(ListRequest_Prefix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_values()->InternalSwap(other->_internal_mutable_values());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRequest_Prefix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_getter, &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[2]);
}
// ===================================================================

class ListRequest_Range::_Internal {
 public:
};

ListRequest_Range::ListRequest_Range(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.query.v1alpha1.ListRequest.Range)
}
ListRequest_Range::ListRequest_Range(const ListRequest_Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRequest_Range* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){from._impl_.start_}
    , decltype(_impl_.end_){from._impl_.end_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.query.v1alpha1.ListRequest.Range)
}

inline void ListRequest_Range::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){arena}
    , decltype(_impl_.end_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListRequest_Range::~ListRequest_Range() {
  // @@protoc_insertion_point(destructor:cosmos.orm.query.v1alpha1.ListRequest.Range)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRequest_Range::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_start()->~RepeatedPtrField();
  _internal_mutable_end()->~RepeatedPtrField();
}

void ListRequest_Range::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRequest_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.query.v1alpha1.ListRequest.Range)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_start()->Clear();
  _internal_mutable_end()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRequest_Range::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.orm.query.v1alpha1.IndexValue start = 1 [json_name = "start"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_start(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.orm.query.v1alpha1.IndexValue end = 2 [json_name = "end"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_end(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListRequest_Range::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.query.v1alpha1.ListRequest.Range)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.orm.query.v1alpha1.IndexValue start = 1 [json_name = "start"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_start_size()); i < n; i++) {
    const auto& repfield = this->_internal_start(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.orm.query.v1alpha1.IndexValue end = 2 [json_name = "end"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_size()); i < n; i++) {
    const auto& repfield = this->_internal_end(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.query.v1alpha1.ListRequest.Range)
  return target;
}

::size_t ListRequest_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.query.v1alpha1.ListRequest.Range)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.orm.query.v1alpha1.IndexValue start = 1 [json_name = "start"];
  total_size += 1UL * this->_internal_start_size();
  for (const auto& msg : this->_internal_start()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.orm.query.v1alpha1.IndexValue end = 2 [json_name = "end"];
  total_size += 1UL * this->_internal_end_size();
  for (const auto& msg : this->_internal_end()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRequest_Range::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRequest_Range::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRequest_Range::GetClassData() const { return &_class_data_; }


void ListRequest_Range::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRequest_Range*>(&to_msg);
  auto& from = static_cast<const ListRequest_Range&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.query.v1alpha1.ListRequest.Range)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_start()->MergeFrom(from._internal_start());
  _this->_internal_mutable_end()->MergeFrom(from._internal_end());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRequest_Range::CopyFrom(const ListRequest_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.query.v1alpha1.ListRequest.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest_Range::IsInitialized() const {
  return true;
}

void ListRequest_Range::InternalSwap(ListRequest_Range* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_start()->InternalSwap(other->_internal_mutable_start());
  _internal_mutable_end()->InternalSwap(other->_internal_mutable_end());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRequest_Range::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_getter, &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[3]);
}
// ===================================================================

class ListRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ListRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::ListRequest, _impl_._oneof_case_);
  static const ::cosmos::orm::query::v1alpha1::ListRequest_Prefix& prefix(const ListRequest* msg);
  static const ::cosmos::orm::query::v1alpha1::ListRequest_Range& range(const ListRequest* msg);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const ListRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::orm::query::v1alpha1::ListRequest_Prefix&
ListRequest::_Internal::prefix(const ListRequest* msg) {
  return *msg->_impl_.query_.prefix_;
}
const ::cosmos::orm::query::v1alpha1::ListRequest_Range&
ListRequest::_Internal::range(const ListRequest* msg) {
  return *msg->_impl_.query_.range_;
}
const ::cosmos::base::query::v1beta1::PageRequest&
ListRequest::_Internal::pagination(const ListRequest* msg) {
  return *msg->_impl_.pagination_;
}
void ListRequest::set_allocated_prefix(::cosmos::orm::query::v1alpha1::ListRequest_Prefix* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    set_has_prefix();
    _impl_.query_.prefix_ = prefix;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.ListRequest.prefix)
}
void ListRequest::set_allocated_range(::cosmos::orm::query::v1alpha1::ListRequest_Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    _impl_.query_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.ListRequest.range)
}
void ListRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListRequest::ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.query.v1alpha1.ListRequest)
}
ListRequest::ListRequest(const ListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_name_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.query_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_name().empty()) {
    _this->_impl_.message_name_.Set(from._internal_message_name(), _this->GetArenaForAllocation());
  }
  _impl_.index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.index_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    _this->_impl_.index_.Set(from._internal_index(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  clear_has_query();
  switch (from.query_case()) {
    case kPrefix: {
      _this->_internal_mutable_prefix()->::cosmos::orm::query::v1alpha1::ListRequest_Prefix::MergeFrom(
          from._internal_prefix());
      break;
    }
    case kRange: {
      _this->_internal_mutable_range()->::cosmos::orm::query::v1alpha1::ListRequest_Range::MergeFrom(
          from._internal_range());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.query.v1alpha1.ListRequest)
}

inline void ListRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_name_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.query_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.index_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_query();
}

ListRequest::~ListRequest() {
  // @@protoc_insertion_point(destructor:cosmos.orm.query.v1alpha1.ListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_name_.Destroy();
  _impl_.index_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
  if (has_query()) {
    clear_query();
  }
}

void ListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRequest::clear_query() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.orm.query.v1alpha1.ListRequest)
  switch (query_case()) {
    case kPrefix: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.prefix_;
      }
      break;
    }
    case kRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.query_.range_;
      }
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = QUERY_NOT_SET;
}


void ListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.query.v1alpha1.ListRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_name_.ClearToEmpty();
  _impl_.index_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  clear_query();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_name = 1 [json_name = "messageName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.query.v1alpha1.ListRequest.message_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string index = 2 [json_name = "index"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.query.v1alpha1.ListRequest.index"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.orm.query.v1alpha1.ListRequest.Prefix prefix = 3 [json_name = "prefix"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.orm.query.v1alpha1.ListRequest.Range range = 4 [json_name = "range"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 5 [json_name = "pagination"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.query.v1alpha1.ListRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_name = 1 [json_name = "messageName"];
  if (!this->_internal_message_name().empty()) {
    const std::string& _s = this->_internal_message_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.query.v1alpha1.ListRequest.message_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string index = 2 [json_name = "index"];
  if (!this->_internal_index().empty()) {
    const std::string& _s = this->_internal_index();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.query.v1alpha1.ListRequest.index");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  switch (query_case()) {
    case kPrefix: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::prefix(this),
          _Internal::prefix(this).GetCachedSize(), target, stream);
      break;
    }
    case kRange: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::range(this),
          _Internal::range(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 5 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.query.v1alpha1.ListRequest)
  return target;
}

::size_t ListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.query.v1alpha1.ListRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_name = 1 [json_name = "messageName"];
  if (!this->_internal_message_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message_name());
  }

  // string index = 2 [json_name = "index"];
  if (!this->_internal_index().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_index());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 5 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  switch (query_case()) {
    // .cosmos.orm.query.v1alpha1.ListRequest.Prefix prefix = 3 [json_name = "prefix"];
    case kPrefix: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.prefix_);
      break;
    }
    // .cosmos.orm.query.v1alpha1.ListRequest.Range range = 4 [json_name = "range"];
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.query_.range_);
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRequest::GetClassData() const { return &_class_data_; }


void ListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRequest*>(&to_msg);
  auto& from = static_cast<const ListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.query.v1alpha1.ListRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_name().empty()) {
    _this->_internal_set_message_name(from._internal_message_name());
  }
  if (!from._internal_index().empty()) {
    _this->_internal_set_index(from._internal_index());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  switch (from.query_case()) {
    case kPrefix: {
      _this->_internal_mutable_prefix()->::cosmos::orm::query::v1alpha1::ListRequest_Prefix::MergeFrom(
          from._internal_prefix());
      break;
    }
    case kRange: {
      _this->_internal_mutable_range()->::cosmos::orm::query::v1alpha1::ListRequest_Range::MergeFrom(
          from._internal_range());
      break;
    }
    case QUERY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRequest::CopyFrom(const ListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.query.v1alpha1.ListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRequest::IsInitialized() const {
  return true;
}

void ListRequest::InternalSwap(ListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_name_, lhs_arena,
                                       &other->_impl_.message_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.index_, lhs_arena,
                                       &other->_impl_.index_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
  swap(_impl_.query_, other->_impl_.query_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_getter, &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[4]);
}
// ===================================================================

class ListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ListResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ListResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const ListResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
ListResponse::_Internal::pagination(const ListResponse* msg) {
  return *msg->_impl_.pagination_;
}
void ListResponse::clear_results() {
  _internal_mutable_results()->Clear();
}
void ListResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ListResponse::ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.query.v1alpha1.ListResponse)
}
ListResponse::ListResponse(const ListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.query.v1alpha1.ListResponse)
}

inline void ListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

ListResponse::~ListResponse() {
  // @@protoc_insertion_point(destructor:cosmos.orm.query.v1alpha1.ListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_results()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void ListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.query.v1alpha1.ListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_results()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any results = 1 [json_name = "results"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 5 [json_name = "pagination"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.query.v1alpha1.ListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any results = 1 [json_name = "results"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 5 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.query.v1alpha1.ListResponse)
  return target;
}

::size_t ListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.query.v1alpha1.ListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any results = 1 [json_name = "results"];
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_internal_results()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 5 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListResponse::GetClassData() const { return &_class_data_; }


void ListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListResponse*>(&to_msg);
  auto& from = static_cast<const ListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.query.v1alpha1.ListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_results()->MergeFrom(from._internal_results());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListResponse::CopyFrom(const ListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.query.v1alpha1.ListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListResponse::IsInitialized() const {
  return true;
}

void ListResponse::InternalSwap(ListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_results()->InternalSwap(other->_internal_mutable_results());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_getter, &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[5]);
}
// ===================================================================

class IndexValue::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::query::v1alpha1::IndexValue, _impl_._oneof_case_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const IndexValue* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const IndexValue* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IndexValue::_Internal::timestamp(const IndexValue* msg) {
  return *msg->_impl_.value_.timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
IndexValue::_Internal::duration(const IndexValue* msg) {
  return *msg->_impl_.value_.duration_;
}
void IndexValue::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    set_has_timestamp();
    _impl_.value_.timestamp_ = timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.IndexValue.timestamp)
}
void IndexValue::clear_timestamp() {
  if (value_case() == kTimestamp) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.timestamp_;
    }
    clear_has_value();
  }
}
void IndexValue::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    set_has_duration();
    _impl_.value_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.IndexValue.duration)
}
void IndexValue::clear_duration() {
  if (value_case() == kDuration) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.duration_;
    }
    clear_has_value();
  }
}
IndexValue::IndexValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.query.v1alpha1.IndexValue)
}
IndexValue::IndexValue(const IndexValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kUint: {
      _this->_internal_set_uint(from._internal_uint());
      break;
    }
    case kInt: {
      _this->_internal_set_int_(from._internal_int_());
      break;
    }
    case kStr: {
      _this->_internal_set_str(from._internal_str());
      break;
    }
    case kBytes: {
      _this->_internal_set_bytes(from._internal_bytes());
      break;
    }
    case kEnum: {
      _this->_internal_set_enum_(from._internal_enum_());
      break;
    }
    case kBool: {
      _this->_internal_set_bool_(from._internal_bool_());
      break;
    }
    case kTimestamp: {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
      break;
    }
    case kDuration: {
      _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_duration());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.query.v1alpha1.IndexValue)
}

inline void IndexValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

IndexValue::~IndexValue() {
  // @@protoc_insertion_point(destructor:cosmos.orm.query.v1alpha1.IndexValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void IndexValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.orm.query.v1alpha1.IndexValue)
  switch (value_case()) {
    case kUint: {
      // No need to clear
      break;
    }
    case kInt: {
      // No need to clear
      break;
    }
    case kStr: {
      _impl_.value_.str_.Destroy();
      break;
    }
    case kBytes: {
      _impl_.value_.bytes_.Destroy();
      break;
    }
    case kEnum: {
      _impl_.value_.enum__.Destroy();
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kTimestamp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.timestamp_;
      }
      break;
    }
    case kDuration: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.duration_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void IndexValue::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.query.v1alpha1.IndexValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 uint = 1 [json_name = "uint"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _internal_set_uint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 int = 2 [json_name = "int"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_int_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string str = 3 [json_name = "str"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.query.v1alpha1.IndexValue.str"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes bytes = 4 [json_name = "bytes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string enum = 5 [json_name = "enum"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_enum_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.query.v1alpha1.IndexValue.enum"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool bool = 6 [json_name = "bool"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 7 [json_name = "timestamp"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration duration = 8 [json_name = "duration"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.query.v1alpha1.IndexValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kUint: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
          1, this->_internal_uint(), target);
      break;
    }
    case kInt: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          2, this->_internal_int_(), target);
      break;
    }
    case kStr: {
      const std::string& _s = this->_internal_str();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.query.v1alpha1.IndexValue.str");
      target = stream->WriteStringMaybeAliased(3, _s, target);
      break;
    }
    case kBytes: {
      const std::string& _s = this->_internal_bytes();
      target = stream->WriteBytesMaybeAliased(4, _s, target);
      break;
    }
    case kEnum: {
      const std::string& _s = this->_internal_enum_();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.query.v1alpha1.IndexValue.enum");
      target = stream->WriteStringMaybeAliased(5, _s, target);
      break;
    }
    case kBool: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          6, this->_internal_bool_(), target);
      break;
    }
    case kTimestamp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::timestamp(this),
          _Internal::timestamp(this).GetCachedSize(), target, stream);
      break;
    }
    case kDuration: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::duration(this),
          _Internal::duration(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.query.v1alpha1.IndexValue)
  return target;
}

::size_t IndexValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.query.v1alpha1.IndexValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // uint64 uint = 1 [json_name = "uint"];
    case kUint: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_uint());
      break;
    }
    // int64 int = 2 [json_name = "int"];
    case kInt: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_int_());
      break;
    }
    // string str = 3 [json_name = "str"];
    case kStr: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_str());
      break;
    }
    // bytes bytes = 4 [json_name = "bytes"];
    case kBytes: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_bytes());
      break;
    }
    // string enum = 5 [json_name = "enum"];
    case kEnum: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_enum_());
      break;
    }
    // bool bool = 6 [json_name = "bool"];
    case kBool: {
      total_size += 2;
      break;
    }
    // .google.protobuf.Timestamp timestamp = 7 [json_name = "timestamp"];
    case kTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.timestamp_);
      break;
    }
    // .google.protobuf.Duration duration = 8 [json_name = "duration"];
    case kDuration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.duration_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexValue::GetClassData() const { return &_class_data_; }


void IndexValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexValue*>(&to_msg);
  auto& from = static_cast<const IndexValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.query.v1alpha1.IndexValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kUint: {
      _this->_internal_set_uint(from._internal_uint());
      break;
    }
    case kInt: {
      _this->_internal_set_int_(from._internal_int_());
      break;
    }
    case kStr: {
      _this->_internal_set_str(from._internal_str());
      break;
    }
    case kBytes: {
      _this->_internal_set_bytes(from._internal_bytes());
      break;
    }
    case kEnum: {
      _this->_internal_set_enum_(from._internal_enum_());
      break;
    }
    case kBool: {
      _this->_internal_set_bool_(from._internal_bool_());
      break;
    }
    case kTimestamp: {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
      break;
    }
    case kDuration: {
      _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_duration());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexValue::CopyFrom(const IndexValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.query.v1alpha1.IndexValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexValue::IsInitialized() const {
  return true;
}

void IndexValue::InternalSwap(IndexValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_getter, &descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace query
}  // namespace orm
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::orm::query::v1alpha1::GetRequest*
Arena::CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::GetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::query::v1alpha1::GetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::query::v1alpha1::GetResponse*
Arena::CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::GetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::query::v1alpha1::GetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::query::v1alpha1::ListRequest_Prefix*
Arena::CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::ListRequest_Prefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::query::v1alpha1::ListRequest_Prefix >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::query::v1alpha1::ListRequest_Range*
Arena::CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::ListRequest_Range >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::query::v1alpha1::ListRequest_Range >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::query::v1alpha1::ListRequest*
Arena::CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::ListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::query::v1alpha1::ListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::query::v1alpha1::ListResponse*
Arena::CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::ListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::query::v1alpha1::ListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::query::v1alpha1::IndexValue*
Arena::CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::IndexValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::query::v1alpha1::IndexValue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

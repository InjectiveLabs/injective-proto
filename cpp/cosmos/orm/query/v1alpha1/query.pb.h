// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/orm/query/v1alpha1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
namespace cosmos {
namespace orm {
namespace query {
namespace v1alpha1 {
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class IndexValue;
struct IndexValueDefaultTypeInternal;
extern IndexValueDefaultTypeInternal _IndexValue_default_instance_;
class ListRequest;
struct ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class ListRequest_Prefix;
struct ListRequest_PrefixDefaultTypeInternal;
extern ListRequest_PrefixDefaultTypeInternal _ListRequest_Prefix_default_instance_;
class ListRequest_Range;
struct ListRequest_RangeDefaultTypeInternal;
extern ListRequest_RangeDefaultTypeInternal _ListRequest_Range_default_instance_;
class ListResponse;
struct ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace query
}  // namespace orm
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::orm::query::v1alpha1::GetRequest* Arena::CreateMaybeMessage<::cosmos::orm::query::v1alpha1::GetRequest>(Arena*);
template <>
::cosmos::orm::query::v1alpha1::GetResponse* Arena::CreateMaybeMessage<::cosmos::orm::query::v1alpha1::GetResponse>(Arena*);
template <>
::cosmos::orm::query::v1alpha1::IndexValue* Arena::CreateMaybeMessage<::cosmos::orm::query::v1alpha1::IndexValue>(Arena*);
template <>
::cosmos::orm::query::v1alpha1::ListRequest* Arena::CreateMaybeMessage<::cosmos::orm::query::v1alpha1::ListRequest>(Arena*);
template <>
::cosmos::orm::query::v1alpha1::ListRequest_Prefix* Arena::CreateMaybeMessage<::cosmos::orm::query::v1alpha1::ListRequest_Prefix>(Arena*);
template <>
::cosmos::orm::query::v1alpha1::ListRequest_Range* Arena::CreateMaybeMessage<::cosmos::orm::query::v1alpha1::ListRequest_Range>(Arena*);
template <>
::cosmos::orm::query::v1alpha1::ListResponse* Arena::CreateMaybeMessage<::cosmos::orm::query::v1alpha1::ListResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace orm {
namespace query {
namespace v1alpha1 {

// ===================================================================


// -------------------------------------------------------------------

class GetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.query.v1alpha1.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRequest& from) {
    GetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.query.v1alpha1.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kMessageNameFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // repeated .cosmos.orm.query.v1alpha1.IndexValue values = 3 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::cosmos::orm::query::v1alpha1::IndexValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >*
      mutable_values();
  private:
  const ::cosmos::orm::query::v1alpha1::IndexValue& _internal_values(int index) const;
  ::cosmos::orm::query::v1alpha1::IndexValue* _internal_add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>* _internal_mutable_values();
  public:
  const ::cosmos::orm::query::v1alpha1::IndexValue& values(int index) const;
  ::cosmos::orm::query::v1alpha1::IndexValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >&
      values() const;
  // string message_name = 1 [json_name = "messageName"];
  void clear_message_name() ;
  const std::string& message_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_name(Arg_&& arg, Args_... args);
  std::string* mutable_message_name();
  PROTOBUF_NODISCARD std::string* release_message_name();
  void set_allocated_message_name(std::string* ptr);

  private:
  const std::string& _internal_message_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_name(
      const std::string& value);
  std::string* _internal_mutable_message_name();

  public:
  // string index = 2 [json_name = "index"];
  void clear_index() ;
  const std::string& index() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_index(Arg_&& arg, Args_... args);
  std::string* mutable_index();
  PROTOBUF_NODISCARD std::string* release_index();
  void set_allocated_index(std::string* ptr);

  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(
      const std::string& value);
  std::string* _internal_mutable_index();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.orm.query.v1alpha1.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue > values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.query.v1alpha1.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  ~GetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetResponse& from) {
    GetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.query.v1alpha1.GetResponse";
  }
  protected:
  explicit GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .google.protobuf.Any result = 1 [json_name = "result"];
  bool has_result() const;
  void clear_result() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& result() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_result();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_result();
  void set_allocated_result(::PROTOBUF_NAMESPACE_ID::Any* result);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_result() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::PROTOBUF_NAMESPACE_ID::Any* result);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_result();
  // @@protoc_insertion_point(class_scope:cosmos.orm.query.v1alpha1.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
};// -------------------------------------------------------------------

class ListRequest_Prefix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.query.v1alpha1.ListRequest.Prefix) */ {
 public:
  inline ListRequest_Prefix() : ListRequest_Prefix(nullptr) {}
  ~ListRequest_Prefix() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListRequest_Prefix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRequest_Prefix(const ListRequest_Prefix& from);
  ListRequest_Prefix(ListRequest_Prefix&& from) noexcept
    : ListRequest_Prefix() {
    *this = ::std::move(from);
  }

  inline ListRequest_Prefix& operator=(const ListRequest_Prefix& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest_Prefix& operator=(ListRequest_Prefix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRequest_Prefix& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRequest_Prefix* internal_default_instance() {
    return reinterpret_cast<const ListRequest_Prefix*>(
               &_ListRequest_Prefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListRequest_Prefix& a, ListRequest_Prefix& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest_Prefix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest_Prefix* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRequest_Prefix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRequest_Prefix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRequest_Prefix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRequest_Prefix& from) {
    ListRequest_Prefix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest_Prefix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.query.v1alpha1.ListRequest.Prefix";
  }
  protected:
  explicit ListRequest_Prefix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .cosmos.orm.query.v1alpha1.IndexValue values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::cosmos::orm::query::v1alpha1::IndexValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >*
      mutable_values();
  private:
  const ::cosmos::orm::query::v1alpha1::IndexValue& _internal_values(int index) const;
  ::cosmos::orm::query::v1alpha1::IndexValue* _internal_add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>* _internal_mutable_values();
  public:
  const ::cosmos::orm::query::v1alpha1::IndexValue& values(int index) const;
  ::cosmos::orm::query::v1alpha1::IndexValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >&
      values() const;
  // @@protoc_insertion_point(class_scope:cosmos.orm.query.v1alpha1.ListRequest.Prefix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
};// -------------------------------------------------------------------

class ListRequest_Range final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.query.v1alpha1.ListRequest.Range) */ {
 public:
  inline ListRequest_Range() : ListRequest_Range(nullptr) {}
  ~ListRequest_Range() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListRequest_Range(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRequest_Range(const ListRequest_Range& from);
  ListRequest_Range(ListRequest_Range&& from) noexcept
    : ListRequest_Range() {
    *this = ::std::move(from);
  }

  inline ListRequest_Range& operator=(const ListRequest_Range& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest_Range& operator=(ListRequest_Range&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRequest_Range& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRequest_Range* internal_default_instance() {
    return reinterpret_cast<const ListRequest_Range*>(
               &_ListRequest_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListRequest_Range& a, ListRequest_Range& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest_Range* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest_Range* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRequest_Range* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRequest_Range>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRequest_Range& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRequest_Range& from) {
    ListRequest_Range::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest_Range* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.query.v1alpha1.ListRequest.Range";
  }
  protected:
  explicit ListRequest_Range(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // repeated .cosmos.orm.query.v1alpha1.IndexValue start = 1 [json_name = "start"];
  int start_size() const;
  private:
  int _internal_start_size() const;

  public:
  void clear_start() ;
  ::cosmos::orm::query::v1alpha1::IndexValue* mutable_start(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >*
      mutable_start();
  private:
  const ::cosmos::orm::query::v1alpha1::IndexValue& _internal_start(int index) const;
  ::cosmos::orm::query::v1alpha1::IndexValue* _internal_add_start();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>& _internal_start() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>* _internal_mutable_start();
  public:
  const ::cosmos::orm::query::v1alpha1::IndexValue& start(int index) const;
  ::cosmos::orm::query::v1alpha1::IndexValue* add_start();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >&
      start() const;
  // repeated .cosmos.orm.query.v1alpha1.IndexValue end = 2 [json_name = "end"];
  int end_size() const;
  private:
  int _internal_end_size() const;

  public:
  void clear_end() ;
  ::cosmos::orm::query::v1alpha1::IndexValue* mutable_end(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >*
      mutable_end();
  private:
  const ::cosmos::orm::query::v1alpha1::IndexValue& _internal_end(int index) const;
  ::cosmos::orm::query::v1alpha1::IndexValue* _internal_add_end();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>& _internal_end() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>* _internal_mutable_end();
  public:
  const ::cosmos::orm::query::v1alpha1::IndexValue& end(int index) const;
  ::cosmos::orm::query::v1alpha1::IndexValue* add_end();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >&
      end() const;
  // @@protoc_insertion_point(class_scope:cosmos.orm.query.v1alpha1.ListRequest.Range)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue > start_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue > end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
};// -------------------------------------------------------------------

class ListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.query.v1alpha1.ListRequest) */ {
 public:
  inline ListRequest() : ListRequest(nullptr) {}
  ~ListRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRequest& default_instance() {
    return *internal_default_instance();
  }
  enum QueryCase {
    kPrefix = 3,
    kRange = 4,
    QUERY_NOT_SET = 0,
  };

  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRequest& from) {
    ListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.query.v1alpha1.ListRequest";
  }
  protected:
  explicit ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ListRequest_Prefix Prefix;
  typedef ListRequest_Range Range;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageNameFieldNumber = 1,
    kIndexFieldNumber = 2,
    kPaginationFieldNumber = 5,
    kPrefixFieldNumber = 3,
    kRangeFieldNumber = 4,
  };
  // string message_name = 1 [json_name = "messageName"];
  void clear_message_name() ;
  const std::string& message_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message_name(Arg_&& arg, Args_... args);
  std::string* mutable_message_name();
  PROTOBUF_NODISCARD std::string* release_message_name();
  void set_allocated_message_name(std::string* ptr);

  private:
  const std::string& _internal_message_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_name(
      const std::string& value);
  std::string* _internal_mutable_message_name();

  public:
  // string index = 2 [json_name = "index"];
  void clear_index() ;
  const std::string& index() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_index(Arg_&& arg, Args_... args);
  std::string* mutable_index();
  PROTOBUF_NODISCARD std::string* release_index();
  void set_allocated_index(std::string* ptr);

  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(
      const std::string& value);
  std::string* _internal_mutable_index();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 5 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // .cosmos.orm.query.v1alpha1.ListRequest.Prefix prefix = 3 [json_name = "prefix"];
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;

  public:
  void clear_prefix() ;
  const ::cosmos::orm::query::v1alpha1::ListRequest_Prefix& prefix() const;
  PROTOBUF_NODISCARD ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* release_prefix();
  ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* mutable_prefix();
  void set_allocated_prefix(::cosmos::orm::query::v1alpha1::ListRequest_Prefix* prefix);
  private:
  const ::cosmos::orm::query::v1alpha1::ListRequest_Prefix& _internal_prefix() const;
  ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* prefix);
  ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* unsafe_arena_release_prefix();
  // .cosmos.orm.query.v1alpha1.ListRequest.Range range = 4 [json_name = "range"];
  bool has_range() const;
  private:
  bool _internal_has_range() const;

  public:
  void clear_range() ;
  const ::cosmos::orm::query::v1alpha1::ListRequest_Range& range() const;
  PROTOBUF_NODISCARD ::cosmos::orm::query::v1alpha1::ListRequest_Range* release_range();
  ::cosmos::orm::query::v1alpha1::ListRequest_Range* mutable_range();
  void set_allocated_range(::cosmos::orm::query::v1alpha1::ListRequest_Range* range);
  private:
  const ::cosmos::orm::query::v1alpha1::ListRequest_Range& _internal_range() const;
  ::cosmos::orm::query::v1alpha1::ListRequest_Range* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::cosmos::orm::query::v1alpha1::ListRequest_Range* range);
  ::cosmos::orm::query::v1alpha1::ListRequest_Range* unsafe_arena_release_range();
  void clear_query();
  QueryCase query_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.orm.query.v1alpha1.ListRequest)
 private:
  class _Internal;
  void set_has_prefix();
  void set_has_range();

  inline bool has_query() const;
  inline void clear_has_query();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    union QueryUnion {
      constexpr QueryUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* prefix_;
      ::cosmos::orm::query::v1alpha1::ListRequest_Range* range_;
    } query_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
};// -------------------------------------------------------------------

class ListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.query.v1alpha1.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {}
  ~ListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListResponse& from) {
    ListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.query.v1alpha1.ListResponse";
  }
  protected:
  explicit ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
    kPaginationFieldNumber = 5,
  };
  // repeated .google.protobuf.Any results = 1 [json_name = "results"];
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_results();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_results(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_results();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& results(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      results() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 5 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.orm.query.v1alpha1.ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > results_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
};// -------------------------------------------------------------------

class IndexValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.query.v1alpha1.IndexValue) */ {
 public:
  inline IndexValue() : IndexValue(nullptr) {}
  ~IndexValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexValue(const IndexValue& from);
  IndexValue(IndexValue&& from) noexcept
    : IndexValue() {
    *this = ::std::move(from);
  }

  inline IndexValue& operator=(const IndexValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexValue& operator=(IndexValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kUint = 1,
    kInt = 2,
    kStr = 3,
    kBytes = 4,
    kEnum = 5,
    kBool = 6,
    kTimestamp = 7,
    kDuration = 8,
    VALUE_NOT_SET = 0,
  };

  static inline const IndexValue* internal_default_instance() {
    return reinterpret_cast<const IndexValue*>(
               &_IndexValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IndexValue& a, IndexValue& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexValue& from) {
    IndexValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.query.v1alpha1.IndexValue";
  }
  protected:
  explicit IndexValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUintFieldNumber = 1,
    kIntFieldNumber = 2,
    kStrFieldNumber = 3,
    kBytesFieldNumber = 4,
    kEnumFieldNumber = 5,
    kBoolFieldNumber = 6,
    kTimestampFieldNumber = 7,
    kDurationFieldNumber = 8,
  };
  // uint64 uint = 1 [json_name = "uint"];
  bool has_uint() const;
  void clear_uint() ;
  ::uint64_t uint() const;
  void set_uint(::uint64_t value);

  private:
  ::uint64_t _internal_uint() const;
  void _internal_set_uint(::uint64_t value);

  public:
  // int64 int = 2 [json_name = "int"];
  bool has_int_() const;
  void clear_int_() ;
  ::int64_t int_() const;
  void set_int_(::int64_t value);

  private:
  ::int64_t _internal_int_() const;
  void _internal_set_int_(::int64_t value);

  public:
  // string str = 3 [json_name = "str"];
  bool has_str() const;
  void clear_str() ;
  const std::string& str() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_str(Arg_&& arg, Args_... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* ptr);

  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(
      const std::string& value);
  std::string* _internal_mutable_str();

  public:
  // bytes bytes = 4 [json_name = "bytes"];
  bool has_bytes() const;
  void clear_bytes() ;
  const std::string& bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* ptr);

  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(
      const std::string& value);
  std::string* _internal_mutable_bytes();

  public:
  // string enum = 5 [json_name = "enum"];
  bool has_enum_() const;
  void clear_enum_() ;
  const std::string& enum_() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_enum_(Arg_&& arg, Args_... args);
  std::string* mutable_enum_();
  PROTOBUF_NODISCARD std::string* release_enum_();
  void set_allocated_enum_(std::string* ptr);

  private:
  const std::string& _internal_enum_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enum_(
      const std::string& value);
  std::string* _internal_mutable_enum_();

  public:
  // bool bool = 6 [json_name = "bool"];
  bool has_bool_() const;
  void clear_bool_() ;
  bool bool_() const;
  void set_bool_(bool value);

  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);

  public:
  // .google.protobuf.Timestamp timestamp = 7 [json_name = "timestamp"];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;

  public:
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // .google.protobuf.Duration duration = 8 [json_name = "duration"];
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;

  public:
  void clear_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.orm.query.v1alpha1.IndexValue)
 private:
  class _Internal;
  void set_has_uint();
  void set_has_int_();
  void set_has_str();
  void set_has_bytes();
  void set_has_enum_();
  void set_has_bool_();
  void set_has_timestamp();
  void set_has_duration();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint64_t uint_;
      ::int64_t int__;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum__;
      bool bool__;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
      ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetRequest

// string message_name = 1 [json_name = "messageName"];
inline void GetRequest::clear_message_name() {
  _impl_.message_name_.ClearToEmpty();
}
inline const std::string& GetRequest::message_name() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.GetRequest.message_name)
  return _internal_message_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRequest::set_message_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.GetRequest.message_name)
}
inline std::string* GetRequest::mutable_message_name() {
  std::string* _s = _internal_mutable_message_name();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.GetRequest.message_name)
  return _s;
}
inline const std::string& GetRequest::_internal_message_name() const {
  return _impl_.message_name_.Get();
}
inline void GetRequest::_internal_set_message_name(const std::string& value) {
  ;


  _impl_.message_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRequest::_internal_mutable_message_name() {
  ;
  return _impl_.message_name_.Mutable( GetArenaForAllocation());
}
inline std::string* GetRequest::release_message_name() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.GetRequest.message_name)
  return _impl_.message_name_.Release();
}
inline void GetRequest::set_allocated_message_name(std::string* value) {
  _impl_.message_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_name_.IsDefault()) {
          _impl_.message_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.GetRequest.message_name)
}

// string index = 2 [json_name = "index"];
inline void GetRequest::clear_index() {
  _impl_.index_.ClearToEmpty();
}
inline const std::string& GetRequest::index() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.GetRequest.index)
  return _internal_index();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetRequest::set_index(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.index_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.GetRequest.index)
}
inline std::string* GetRequest::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.GetRequest.index)
  return _s;
}
inline const std::string& GetRequest::_internal_index() const {
  return _impl_.index_.Get();
}
inline void GetRequest::_internal_set_index(const std::string& value) {
  ;


  _impl_.index_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRequest::_internal_mutable_index() {
  ;
  return _impl_.index_.Mutable( GetArenaForAllocation());
}
inline std::string* GetRequest::release_index() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.GetRequest.index)
  return _impl_.index_.Release();
}
inline void GetRequest::set_allocated_index(std::string* value) {
  _impl_.index_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.index_.IsDefault()) {
          _impl_.index_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.GetRequest.index)
}

// repeated .cosmos.orm.query.v1alpha1.IndexValue values = 3 [json_name = "values"];
inline int GetRequest::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int GetRequest::values_size() const {
  return _internal_values_size();
}
inline void GetRequest::clear_values() {
  _internal_mutable_values()->Clear();
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* GetRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.GetRequest.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >*
GetRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.orm.query.v1alpha1.GetRequest.values)
  return _internal_mutable_values();
}
inline const ::cosmos::orm::query::v1alpha1::IndexValue& GetRequest::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline const ::cosmos::orm::query::v1alpha1::IndexValue& GetRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.GetRequest.values)
  return _internal_values(index);
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* GetRequest::_internal_add_values() {
  return _internal_mutable_values()->Add();
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* GetRequest::add_values() {
  ::cosmos::orm::query::v1alpha1::IndexValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:cosmos.orm.query.v1alpha1.GetRequest.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >&
GetRequest::values() const {
  // @@protoc_insertion_point(field_list:cosmos.orm.query.v1alpha1.GetRequest.values)
  return _internal_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>&
GetRequest::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>*
GetRequest::_internal_mutable_values() {
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// GetResponse

// .google.protobuf.Any result = 1 [json_name = "result"];
inline bool GetResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GetResponse::_internal_result() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GetResponse::result() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.GetResponse.result)
  return _internal_result();
}
inline void GetResponse::unsafe_arena_set_allocated_result(
    ::PROTOBUF_NAMESPACE_ID::Any* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.orm.query.v1alpha1.GetResponse.result)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GetResponse::release_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GetResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.GetResponse.result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GetResponse::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GetResponse::mutable_result() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.GetResponse.result)
  return _msg;
}
inline void GetResponse::set_allocated_result(::PROTOBUF_NAMESPACE_ID::Any* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.GetResponse.result)
}

// -------------------------------------------------------------------

// ListRequest_Prefix

// repeated .cosmos.orm.query.v1alpha1.IndexValue values = 1 [json_name = "values"];
inline int ListRequest_Prefix::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int ListRequest_Prefix::values_size() const {
  return _internal_values_size();
}
inline void ListRequest_Prefix::clear_values() {
  _internal_mutable_values()->Clear();
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Prefix::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListRequest.Prefix.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >*
ListRequest_Prefix::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.orm.query.v1alpha1.ListRequest.Prefix.values)
  return _internal_mutable_values();
}
inline const ::cosmos::orm::query::v1alpha1::IndexValue& ListRequest_Prefix::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline const ::cosmos::orm::query::v1alpha1::IndexValue& ListRequest_Prefix::values(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListRequest.Prefix.values)
  return _internal_values(index);
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Prefix::_internal_add_values() {
  return _internal_mutable_values()->Add();
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Prefix::add_values() {
  ::cosmos::orm::query::v1alpha1::IndexValue* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:cosmos.orm.query.v1alpha1.ListRequest.Prefix.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >&
ListRequest_Prefix::values() const {
  // @@protoc_insertion_point(field_list:cosmos.orm.query.v1alpha1.ListRequest.Prefix.values)
  return _internal_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>&
ListRequest_Prefix::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>*
ListRequest_Prefix::_internal_mutable_values() {
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// ListRequest_Range

// repeated .cosmos.orm.query.v1alpha1.IndexValue start = 1 [json_name = "start"];
inline int ListRequest_Range::_internal_start_size() const {
  return _impl_.start_.size();
}
inline int ListRequest_Range::start_size() const {
  return _internal_start_size();
}
inline void ListRequest_Range::clear_start() {
  _internal_mutable_start()->Clear();
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Range::mutable_start(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListRequest.Range.start)
  return _internal_mutable_start()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >*
ListRequest_Range::mutable_start() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.orm.query.v1alpha1.ListRequest.Range.start)
  return _internal_mutable_start();
}
inline const ::cosmos::orm::query::v1alpha1::IndexValue& ListRequest_Range::_internal_start(int index) const {
  return _internal_start().Get(index);
}
inline const ::cosmos::orm::query::v1alpha1::IndexValue& ListRequest_Range::start(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListRequest.Range.start)
  return _internal_start(index);
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Range::_internal_add_start() {
  return _internal_mutable_start()->Add();
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Range::add_start() {
  ::cosmos::orm::query::v1alpha1::IndexValue* _add = _internal_add_start();
  // @@protoc_insertion_point(field_add:cosmos.orm.query.v1alpha1.ListRequest.Range.start)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >&
ListRequest_Range::start() const {
  // @@protoc_insertion_point(field_list:cosmos.orm.query.v1alpha1.ListRequest.Range.start)
  return _internal_start();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>&
ListRequest_Range::_internal_start() const {
  return _impl_.start_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>*
ListRequest_Range::_internal_mutable_start() {
  return &_impl_.start_;
}

// repeated .cosmos.orm.query.v1alpha1.IndexValue end = 2 [json_name = "end"];
inline int ListRequest_Range::_internal_end_size() const {
  return _impl_.end_.size();
}
inline int ListRequest_Range::end_size() const {
  return _internal_end_size();
}
inline void ListRequest_Range::clear_end() {
  _internal_mutable_end()->Clear();
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Range::mutable_end(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListRequest.Range.end)
  return _internal_mutable_end()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >*
ListRequest_Range::mutable_end() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.orm.query.v1alpha1.ListRequest.Range.end)
  return _internal_mutable_end();
}
inline const ::cosmos::orm::query::v1alpha1::IndexValue& ListRequest_Range::_internal_end(int index) const {
  return _internal_end().Get(index);
}
inline const ::cosmos::orm::query::v1alpha1::IndexValue& ListRequest_Range::end(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListRequest.Range.end)
  return _internal_end(index);
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Range::_internal_add_end() {
  return _internal_mutable_end()->Add();
}
inline ::cosmos::orm::query::v1alpha1::IndexValue* ListRequest_Range::add_end() {
  ::cosmos::orm::query::v1alpha1::IndexValue* _add = _internal_add_end();
  // @@protoc_insertion_point(field_add:cosmos.orm.query.v1alpha1.ListRequest.Range.end)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::query::v1alpha1::IndexValue >&
ListRequest_Range::end() const {
  // @@protoc_insertion_point(field_list:cosmos.orm.query.v1alpha1.ListRequest.Range.end)
  return _internal_end();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>&
ListRequest_Range::_internal_end() const {
  return _impl_.end_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::query::v1alpha1::IndexValue>*
ListRequest_Range::_internal_mutable_end() {
  return &_impl_.end_;
}

// -------------------------------------------------------------------

// ListRequest

// string message_name = 1 [json_name = "messageName"];
inline void ListRequest::clear_message_name() {
  _impl_.message_name_.ClearToEmpty();
}
inline const std::string& ListRequest::message_name() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListRequest.message_name)
  return _internal_message_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListRequest::set_message_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.ListRequest.message_name)
}
inline std::string* ListRequest::mutable_message_name() {
  std::string* _s = _internal_mutable_message_name();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListRequest.message_name)
  return _s;
}
inline const std::string& ListRequest::_internal_message_name() const {
  return _impl_.message_name_.Get();
}
inline void ListRequest::_internal_set_message_name(const std::string& value) {
  ;


  _impl_.message_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRequest::_internal_mutable_message_name() {
  ;
  return _impl_.message_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ListRequest::release_message_name() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.ListRequest.message_name)
  return _impl_.message_name_.Release();
}
inline void ListRequest::set_allocated_message_name(std::string* value) {
  _impl_.message_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_name_.IsDefault()) {
          _impl_.message_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.ListRequest.message_name)
}

// string index = 2 [json_name = "index"];
inline void ListRequest::clear_index() {
  _impl_.index_.ClearToEmpty();
}
inline const std::string& ListRequest::index() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListRequest.index)
  return _internal_index();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListRequest::set_index(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.index_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.ListRequest.index)
}
inline std::string* ListRequest::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListRequest.index)
  return _s;
}
inline const std::string& ListRequest::_internal_index() const {
  return _impl_.index_.Get();
}
inline void ListRequest::_internal_set_index(const std::string& value) {
  ;


  _impl_.index_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRequest::_internal_mutable_index() {
  ;
  return _impl_.index_.Mutable( GetArenaForAllocation());
}
inline std::string* ListRequest::release_index() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.ListRequest.index)
  return _impl_.index_.Release();
}
inline void ListRequest::set_allocated_index(std::string* value) {
  _impl_.index_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.index_.IsDefault()) {
          _impl_.index_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.ListRequest.index)
}

// .cosmos.orm.query.v1alpha1.ListRequest.Prefix prefix = 3 [json_name = "prefix"];
inline bool ListRequest::has_prefix() const {
  return query_case() == kPrefix;
}
inline bool ListRequest::_internal_has_prefix() const {
  return query_case() == kPrefix;
}
inline void ListRequest::set_has_prefix() {
  _impl_._oneof_case_[0] = kPrefix;
}
inline void ListRequest::clear_prefix() {
  if (query_case() == kPrefix) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.prefix_;
    }
    clear_has_query();
  }
}
inline ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* ListRequest::release_prefix() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.ListRequest.prefix)
  if (query_case() == kPrefix) {
    clear_has_query();
    ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* temp = _impl_.query_.prefix_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.prefix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::orm::query::v1alpha1::ListRequest_Prefix& ListRequest::_internal_prefix() const {
  return query_case() == kPrefix
      ? *_impl_.query_.prefix_
      : reinterpret_cast<::cosmos::orm::query::v1alpha1::ListRequest_Prefix&>(::cosmos::orm::query::v1alpha1::_ListRequest_Prefix_default_instance_);
}
inline const ::cosmos::orm::query::v1alpha1::ListRequest_Prefix& ListRequest::prefix() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListRequest.prefix)
  return _internal_prefix();
}
inline ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* ListRequest::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.orm.query.v1alpha1.ListRequest.prefix)
  if (query_case() == kPrefix) {
    clear_has_query();
    ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* temp = _impl_.query_.prefix_;
    _impl_.query_.prefix_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListRequest::unsafe_arena_set_allocated_prefix(::cosmos::orm::query::v1alpha1::ListRequest_Prefix* prefix) {
  clear_query();
  if (prefix) {
    set_has_prefix();
    _impl_.query_.prefix_ = prefix;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.orm.query.v1alpha1.ListRequest.prefix)
}
inline ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* ListRequest::_internal_mutable_prefix() {
  if (query_case() != kPrefix) {
    clear_query();
    set_has_prefix();
    _impl_.query_.prefix_ = CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::ListRequest_Prefix >(GetArenaForAllocation());
  }
  return _impl_.query_.prefix_;
}
inline ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* ListRequest::mutable_prefix() {
  ::cosmos::orm::query::v1alpha1::ListRequest_Prefix* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListRequest.prefix)
  return _msg;
}

// .cosmos.orm.query.v1alpha1.ListRequest.Range range = 4 [json_name = "range"];
inline bool ListRequest::has_range() const {
  return query_case() == kRange;
}
inline bool ListRequest::_internal_has_range() const {
  return query_case() == kRange;
}
inline void ListRequest::set_has_range() {
  _impl_._oneof_case_[0] = kRange;
}
inline void ListRequest::clear_range() {
  if (query_case() == kRange) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.query_.range_;
    }
    clear_has_query();
  }
}
inline ::cosmos::orm::query::v1alpha1::ListRequest_Range* ListRequest::release_range() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.ListRequest.range)
  if (query_case() == kRange) {
    clear_has_query();
    ::cosmos::orm::query::v1alpha1::ListRequest_Range* temp = _impl_.query_.range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.query_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::orm::query::v1alpha1::ListRequest_Range& ListRequest::_internal_range() const {
  return query_case() == kRange
      ? *_impl_.query_.range_
      : reinterpret_cast<::cosmos::orm::query::v1alpha1::ListRequest_Range&>(::cosmos::orm::query::v1alpha1::_ListRequest_Range_default_instance_);
}
inline const ::cosmos::orm::query::v1alpha1::ListRequest_Range& ListRequest::range() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListRequest.range)
  return _internal_range();
}
inline ::cosmos::orm::query::v1alpha1::ListRequest_Range* ListRequest::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.orm.query.v1alpha1.ListRequest.range)
  if (query_case() == kRange) {
    clear_has_query();
    ::cosmos::orm::query::v1alpha1::ListRequest_Range* temp = _impl_.query_.range_;
    _impl_.query_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ListRequest::unsafe_arena_set_allocated_range(::cosmos::orm::query::v1alpha1::ListRequest_Range* range) {
  clear_query();
  if (range) {
    set_has_range();
    _impl_.query_.range_ = range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.orm.query.v1alpha1.ListRequest.range)
}
inline ::cosmos::orm::query::v1alpha1::ListRequest_Range* ListRequest::_internal_mutable_range() {
  if (query_case() != kRange) {
    clear_query();
    set_has_range();
    _impl_.query_.range_ = CreateMaybeMessage< ::cosmos::orm::query::v1alpha1::ListRequest_Range >(GetArenaForAllocation());
  }
  return _impl_.query_.range_;
}
inline ::cosmos::orm::query::v1alpha1::ListRequest_Range* ListRequest::mutable_range() {
  ::cosmos::orm::query::v1alpha1::ListRequest_Range* _msg = _internal_mutable_range();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListRequest.range)
  return _msg;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 5 [json_name = "pagination"];
inline bool ListRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& ListRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& ListRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListRequest.pagination)
  return _internal_pagination();
}
inline void ListRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.orm.query.v1alpha1.ListRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* ListRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* ListRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.ListRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* ListRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* ListRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListRequest.pagination)
  return _msg;
}
inline void ListRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.ListRequest.pagination)
}

inline bool ListRequest::has_query() const {
  return query_case() != QUERY_NOT_SET;
}
inline void ListRequest::clear_has_query() {
  _impl_._oneof_case_[0] = QUERY_NOT_SET;
}
inline ListRequest::QueryCase ListRequest::query_case() const {
  return ListRequest::QueryCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListResponse

// repeated .google.protobuf.Any results = 1 [json_name = "results"];
inline int ListResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int ListResponse::results_size() const {
  return _internal_results_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ListResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListResponse.results)
  return _internal_mutable_results()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
ListResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.orm.query.v1alpha1.ListResponse.results)
  return _internal_mutable_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ListResponse::_internal_results(int index) const {
  return _internal_results().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ListResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListResponse.results)
  return _internal_results(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ListResponse::_internal_add_results() {
  return _internal_mutable_results()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ListResponse::add_results() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:cosmos.orm.query.v1alpha1.ListResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
ListResponse::results() const {
  // @@protoc_insertion_point(field_list:cosmos.orm.query.v1alpha1.ListResponse.results)
  return _internal_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
ListResponse::_internal_results() const {
  return _impl_.results_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
ListResponse::_internal_mutable_results() {
  return &_impl_.results_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 5 [json_name = "pagination"];
inline bool ListResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& ListResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& ListResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.ListResponse.pagination)
  return _internal_pagination();
}
inline void ListResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.orm.query.v1alpha1.ListResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* ListResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* ListResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.ListResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* ListResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* ListResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.ListResponse.pagination)
  return _msg;
}
inline void ListResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.ListResponse.pagination)
}

// -------------------------------------------------------------------

// IndexValue

// uint64 uint = 1 [json_name = "uint"];
inline bool IndexValue::has_uint() const {
  return value_case() == kUint;
}
inline void IndexValue::set_has_uint() {
  _impl_._oneof_case_[0] = kUint;
}
inline void IndexValue::clear_uint() {
  if (value_case() == kUint) {
    _impl_.value_.uint_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t IndexValue::uint() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.IndexValue.uint)
  return _internal_uint();
}
inline void IndexValue::set_uint(::uint64_t value) {
  _internal_set_uint(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.IndexValue.uint)
}
inline ::uint64_t IndexValue::_internal_uint() const {
  if (value_case() == kUint) {
    return _impl_.value_.uint_;
  }
  return ::uint64_t{0u};
}
inline void IndexValue::_internal_set_uint(::uint64_t value) {
  if (value_case() != kUint) {
    clear_value();
    set_has_uint();
  }
  _impl_.value_.uint_ = value;
}

// int64 int = 2 [json_name = "int"];
inline bool IndexValue::has_int_() const {
  return value_case() == kInt;
}
inline void IndexValue::set_has_int_() {
  _impl_._oneof_case_[0] = kInt;
}
inline void IndexValue::clear_int_() {
  if (value_case() == kInt) {
    _impl_.value_.int__ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t IndexValue::int_() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.IndexValue.int)
  return _internal_int_();
}
inline void IndexValue::set_int_(::int64_t value) {
  _internal_set_int_(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.IndexValue.int)
}
inline ::int64_t IndexValue::_internal_int_() const {
  if (value_case() == kInt) {
    return _impl_.value_.int__;
  }
  return ::int64_t{0};
}
inline void IndexValue::_internal_set_int_(::int64_t value) {
  if (value_case() != kInt) {
    clear_value();
    set_has_int_();
  }
  _impl_.value_.int__ = value;
}

// string str = 3 [json_name = "str"];
inline bool IndexValue::has_str() const {
  return value_case() == kStr;
}
inline void IndexValue::set_has_str() {
  _impl_._oneof_case_[0] = kStr;
}
inline void IndexValue::clear_str() {
  if (value_case() == kStr) {
    _impl_.value_.str_.Destroy();
    clear_has_value();
  }
}
inline const std::string& IndexValue::str() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.IndexValue.str)
  return _internal_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexValue::set_str(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.IndexValue.str)
}
inline std::string* IndexValue::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.IndexValue.str)
  return _s;
}
inline const std::string& IndexValue::_internal_str() const {
  if (value_case() != kStr) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.str_.Get();
}
inline void IndexValue::_internal_set_str(const std::string& value) {
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }


  _impl_.value_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexValue::_internal_mutable_str() {
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  return _impl_.value_.str_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexValue::release_str() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.IndexValue.str)
  if (value_case() != kStr) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.str_.Release();
}
inline void IndexValue::set_allocated_str(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_str();
    _impl_.value_.str_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.IndexValue.str)
}

// bytes bytes = 4 [json_name = "bytes"];
inline bool IndexValue::has_bytes() const {
  return value_case() == kBytes;
}
inline void IndexValue::set_has_bytes() {
  _impl_._oneof_case_[0] = kBytes;
}
inline void IndexValue::clear_bytes() {
  if (value_case() == kBytes) {
    _impl_.value_.bytes_.Destroy();
    clear_has_value();
  }
}
inline const std::string& IndexValue::bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.IndexValue.bytes)
  return _internal_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexValue::set_bytes(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kBytes) {
    clear_value();

    set_has_bytes();
    _impl_.value_.bytes_.InitDefault();
  }
  _impl_.value_.bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.IndexValue.bytes)
}
inline std::string* IndexValue::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.IndexValue.bytes)
  return _s;
}
inline const std::string& IndexValue::_internal_bytes() const {
  if (value_case() != kBytes) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.bytes_.Get();
}
inline void IndexValue::_internal_set_bytes(const std::string& value) {
  if (value_case() != kBytes) {
    clear_value();

    set_has_bytes();
    _impl_.value_.bytes_.InitDefault();
  }


  _impl_.value_.bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexValue::_internal_mutable_bytes() {
  if (value_case() != kBytes) {
    clear_value();

    set_has_bytes();
    _impl_.value_.bytes_.InitDefault();
  }
  return _impl_.value_.bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexValue::release_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.IndexValue.bytes)
  if (value_case() != kBytes) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.bytes_.Release();
}
inline void IndexValue::set_allocated_bytes(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_bytes();
    _impl_.value_.bytes_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.IndexValue.bytes)
}

// string enum = 5 [json_name = "enum"];
inline bool IndexValue::has_enum_() const {
  return value_case() == kEnum;
}
inline void IndexValue::set_has_enum_() {
  _impl_._oneof_case_[0] = kEnum;
}
inline void IndexValue::clear_enum_() {
  if (value_case() == kEnum) {
    _impl_.value_.enum__.Destroy();
    clear_has_value();
  }
}
inline const std::string& IndexValue::enum_() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.IndexValue.enum)
  return _internal_enum_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexValue::set_enum_(Arg_&& arg,
                                                     Args_... args) {
  if (value_case() != kEnum) {
    clear_value();

    set_has_enum_();
    _impl_.value_.enum__.InitDefault();
  }
  _impl_.value_.enum__.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.IndexValue.enum)
}
inline std::string* IndexValue::mutable_enum_() {
  std::string* _s = _internal_mutable_enum_();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.IndexValue.enum)
  return _s;
}
inline const std::string& IndexValue::_internal_enum_() const {
  if (value_case() != kEnum) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.enum__.Get();
}
inline void IndexValue::_internal_set_enum_(const std::string& value) {
  if (value_case() != kEnum) {
    clear_value();

    set_has_enum_();
    _impl_.value_.enum__.InitDefault();
  }


  _impl_.value_.enum__.Set(value, GetArenaForAllocation());
}
inline std::string* IndexValue::_internal_mutable_enum_() {
  if (value_case() != kEnum) {
    clear_value();

    set_has_enum_();
    _impl_.value_.enum__.InitDefault();
  }
  return _impl_.value_.enum__.Mutable( GetArenaForAllocation());
}
inline std::string* IndexValue::release_enum_() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.IndexValue.enum)
  if (value_case() != kEnum) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.enum__.Release();
}
inline void IndexValue::set_allocated_enum_(std::string* value) {
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_enum_();
    _impl_.value_.enum__.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.query.v1alpha1.IndexValue.enum)
}

// bool bool = 6 [json_name = "bool"];
inline bool IndexValue::has_bool_() const {
  return value_case() == kBool;
}
inline void IndexValue::set_has_bool_() {
  _impl_._oneof_case_[0] = kBool;
}
inline void IndexValue::clear_bool_() {
  if (value_case() == kBool) {
    _impl_.value_.bool__ = false;
    clear_has_value();
  }
}
inline bool IndexValue::bool_() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.IndexValue.bool)
  return _internal_bool_();
}
inline void IndexValue::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.query.v1alpha1.IndexValue.bool)
}
inline bool IndexValue::_internal_bool_() const {
  if (value_case() == kBool) {
    return _impl_.value_.bool__;
  }
  return false;
}
inline void IndexValue::_internal_set_bool_(bool value) {
  if (value_case() != kBool) {
    clear_value();
    set_has_bool_();
  }
  _impl_.value_.bool__ = value;
}

// .google.protobuf.Timestamp timestamp = 7 [json_name = "timestamp"];
inline bool IndexValue::has_timestamp() const {
  return value_case() == kTimestamp;
}
inline bool IndexValue::_internal_has_timestamp() const {
  return value_case() == kTimestamp;
}
inline void IndexValue::set_has_timestamp() {
  _impl_._oneof_case_[0] = kTimestamp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexValue::release_timestamp() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.IndexValue.timestamp)
  if (value_case() == kTimestamp) {
    clear_has_value();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.value_.timestamp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& IndexValue::_internal_timestamp() const {
  return value_case() == kTimestamp
      ? *_impl_.value_.timestamp_
      : reinterpret_cast<::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& IndexValue::timestamp() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.IndexValue.timestamp)
  return _internal_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexValue::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.orm.query.v1alpha1.IndexValue.timestamp)
  if (value_case() == kTimestamp) {
    clear_has_value();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.value_.timestamp_;
    _impl_.value_.timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IndexValue::unsafe_arena_set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  clear_value();
  if (timestamp) {
    set_has_timestamp();
    _impl_.value_.timestamp_ = timestamp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.orm.query.v1alpha1.IndexValue.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexValue::_internal_mutable_timestamp() {
  if (value_case() != kTimestamp) {
    clear_value();
    set_has_timestamp();
    _impl_.value_.timestamp_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.value_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexValue::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.IndexValue.timestamp)
  return _msg;
}

// .google.protobuf.Duration duration = 8 [json_name = "duration"];
inline bool IndexValue::has_duration() const {
  return value_case() == kDuration;
}
inline bool IndexValue::_internal_has_duration() const {
  return value_case() == kDuration;
}
inline void IndexValue::set_has_duration() {
  _impl_._oneof_case_[0] = kDuration;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* IndexValue::release_duration() {
  // @@protoc_insertion_point(field_release:cosmos.orm.query.v1alpha1.IndexValue.duration)
  if (value_case() == kDuration) {
    clear_has_value();
    ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.value_.duration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& IndexValue::_internal_duration() const {
  return value_case() == kDuration
      ? *_impl_.value_.duration_
      : reinterpret_cast<::PROTOBUF_NAMESPACE_ID::Duration&>(::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& IndexValue::duration() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.query.v1alpha1.IndexValue.duration)
  return _internal_duration();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* IndexValue::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.orm.query.v1alpha1.IndexValue.duration)
  if (value_case() == kDuration) {
    clear_has_value();
    ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.value_.duration_;
    _impl_.value_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IndexValue::unsafe_arena_set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  clear_value();
  if (duration) {
    set_has_duration();
    _impl_.value_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.orm.query.v1alpha1.IndexValue.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* IndexValue::_internal_mutable_duration() {
  if (value_case() != kDuration) {
    clear_value();
    set_has_duration();
    _impl_.value_.duration_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Duration >(GetArenaForAllocation());
  }
  return _impl_.value_.duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* IndexValue::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.query.v1alpha1.IndexValue.duration)
  return _msg;
}

inline bool IndexValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void IndexValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline IndexValue::ValueCase IndexValue::value_case() const {
  return IndexValue::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace query
}  // namespace orm
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fquery_2fv1alpha1_2fquery_2eproto_2epb_2eh

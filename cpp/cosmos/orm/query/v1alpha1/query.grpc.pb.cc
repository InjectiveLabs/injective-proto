// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/orm/query/v1alpha1/query.proto

#include "cosmos/orm/query/v1alpha1/query.pb.h"
#include "cosmos/orm/query/v1alpha1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace orm {
namespace query {
namespace v1alpha1 {

static const char* Query_method_names[] = {
  "/cosmos.orm.query.v1alpha1.Query/Get",
  "/cosmos.orm.query.v1alpha1.Query/List",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Get(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::GetRequest& request, ::cosmos::orm::query::v1alpha1::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::orm::query::v1alpha1::GetRequest, ::cosmos::orm::query::v1alpha1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Query::Stub::async::Get(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::GetRequest* request, ::cosmos::orm::query::v1alpha1::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::orm::query::v1alpha1::GetRequest, ::cosmos::orm::query::v1alpha1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Query::Stub::async::Get(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::GetRequest* request, ::cosmos::orm::query::v1alpha1::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::orm::query::v1alpha1::GetResponse>* Query::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::orm::query::v1alpha1::GetResponse, ::cosmos::orm::query::v1alpha1::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::orm::query::v1alpha1::GetResponse>* Query::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::List(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::ListRequest& request, ::cosmos::orm::query::v1alpha1::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::orm::query::v1alpha1::ListRequest, ::cosmos::orm::query::v1alpha1::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void Query::Stub::async::List(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::ListRequest* request, ::cosmos::orm::query::v1alpha1::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::orm::query::v1alpha1::ListRequest, ::cosmos::orm::query::v1alpha1::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void Query::Stub::async::List(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::ListRequest* request, ::cosmos::orm::query::v1alpha1::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::orm::query::v1alpha1::ListResponse>* Query::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::orm::query::v1alpha1::ListResponse, ::cosmos::orm::query::v1alpha1::ListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::orm::query::v1alpha1::ListResponse>* Query::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::cosmos::orm::query::v1alpha1::ListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::orm::query::v1alpha1::GetRequest, ::cosmos::orm::query::v1alpha1::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::orm::query::v1alpha1::GetRequest* req,
             ::cosmos::orm::query::v1alpha1::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::orm::query::v1alpha1::ListRequest, ::cosmos::orm::query::v1alpha1::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::orm::query::v1alpha1::ListRequest* req,
             ::cosmos::orm::query::v1alpha1::ListResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Get(::grpc::ServerContext* context, const ::cosmos::orm::query::v1alpha1::GetRequest* request, ::cosmos::orm::query::v1alpha1::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::List(::grpc::ServerContext* context, const ::cosmos::orm::query::v1alpha1::ListRequest* request, ::cosmos::orm::query::v1alpha1::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace orm
}  // namespace query
}  // namespace v1alpha1


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/orm/v1alpha1/schema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fv1alpha1_2fschema_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fv1alpha1_2fschema_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2form_2fv1alpha1_2fschema_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2form_2fv1alpha1_2fschema_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto;
namespace cosmos {
namespace orm {
namespace v1alpha1 {
class ModuleSchemaDescriptor;
struct ModuleSchemaDescriptorDefaultTypeInternal;
extern ModuleSchemaDescriptorDefaultTypeInternal _ModuleSchemaDescriptor_default_instance_;
class ModuleSchemaDescriptor_FileEntry;
struct ModuleSchemaDescriptor_FileEntryDefaultTypeInternal;
extern ModuleSchemaDescriptor_FileEntryDefaultTypeInternal _ModuleSchemaDescriptor_FileEntry_default_instance_;
}  // namespace v1alpha1
}  // namespace orm
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::orm::v1alpha1::ModuleSchemaDescriptor* Arena::CreateMaybeMessage<::cosmos::orm::v1alpha1::ModuleSchemaDescriptor>(Arena*);
template <>
::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry* Arena::CreateMaybeMessage<::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace orm {
namespace v1alpha1 {
enum StorageType : int {
  STORAGE_TYPE_DEFAULT_UNSPECIFIED = 0,
  STORAGE_TYPE_MEMORY = 1,
  STORAGE_TYPE_TRANSIENT = 2,
  STORAGE_TYPE_INDEX = 3,
  STORAGE_TYPE_COMMITMENT = 4,
  StorageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StorageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StorageType_IsValid(int value);
constexpr StorageType StorageType_MIN = static_cast<StorageType>(0);
constexpr StorageType StorageType_MAX = static_cast<StorageType>(4);
constexpr int StorageType_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
StorageType_descriptor();
template <typename T>
const std::string& StorageType_Name(T value) {
  static_assert(std::is_same<T, StorageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StorageType_Name().");
  return StorageType_Name(static_cast<StorageType>(value));
}
template <>
inline const std::string& StorageType_Name(StorageType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<StorageType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool StorageType_Parse(absl::string_view name, StorageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StorageType>(
      StorageType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ModuleSchemaDescriptor_FileEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry) */ {
 public:
  inline ModuleSchemaDescriptor_FileEntry() : ModuleSchemaDescriptor_FileEntry(nullptr) {}
  ~ModuleSchemaDescriptor_FileEntry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleSchemaDescriptor_FileEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleSchemaDescriptor_FileEntry(const ModuleSchemaDescriptor_FileEntry& from);
  ModuleSchemaDescriptor_FileEntry(ModuleSchemaDescriptor_FileEntry&& from) noexcept
    : ModuleSchemaDescriptor_FileEntry() {
    *this = ::std::move(from);
  }

  inline ModuleSchemaDescriptor_FileEntry& operator=(const ModuleSchemaDescriptor_FileEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleSchemaDescriptor_FileEntry& operator=(ModuleSchemaDescriptor_FileEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleSchemaDescriptor_FileEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleSchemaDescriptor_FileEntry* internal_default_instance() {
    return reinterpret_cast<const ModuleSchemaDescriptor_FileEntry*>(
               &_ModuleSchemaDescriptor_FileEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModuleSchemaDescriptor_FileEntry& a, ModuleSchemaDescriptor_FileEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleSchemaDescriptor_FileEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleSchemaDescriptor_FileEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleSchemaDescriptor_FileEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleSchemaDescriptor_FileEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleSchemaDescriptor_FileEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModuleSchemaDescriptor_FileEntry& from) {
    ModuleSchemaDescriptor_FileEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleSchemaDescriptor_FileEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry";
  }
  protected:
  explicit ModuleSchemaDescriptor_FileEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoFileNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kStorageTypeFieldNumber = 3,
  };
  // string proto_file_name = 2 [json_name = "protoFileName"];
  void clear_proto_file_name() ;
  const std::string& proto_file_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proto_file_name(Arg_&& arg, Args_... args);
  std::string* mutable_proto_file_name();
  PROTOBUF_NODISCARD std::string* release_proto_file_name();
  void set_allocated_proto_file_name(std::string* ptr);

  private:
  const std::string& _internal_proto_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_file_name(
      const std::string& value);
  std::string* _internal_mutable_proto_file_name();

  public:
  // uint32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // .cosmos.orm.v1alpha1.StorageType storage_type = 3 [json_name = "storageType"];
  void clear_storage_type() ;
  ::cosmos::orm::v1alpha1::StorageType storage_type() const;
  void set_storage_type(::cosmos::orm::v1alpha1::StorageType value);

  private:
  ::cosmos::orm::v1alpha1::StorageType _internal_storage_type() const;
  void _internal_set_storage_type(::cosmos::orm::v1alpha1::StorageType value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_file_name_;
    ::uint32_t id_;
    int storage_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fv1alpha1_2fschema_2eproto;
};// -------------------------------------------------------------------

class ModuleSchemaDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.v1alpha1.ModuleSchemaDescriptor) */ {
 public:
  inline ModuleSchemaDescriptor() : ModuleSchemaDescriptor(nullptr) {}
  ~ModuleSchemaDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleSchemaDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleSchemaDescriptor(const ModuleSchemaDescriptor& from);
  ModuleSchemaDescriptor(ModuleSchemaDescriptor&& from) noexcept
    : ModuleSchemaDescriptor() {
    *this = ::std::move(from);
  }

  inline ModuleSchemaDescriptor& operator=(const ModuleSchemaDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleSchemaDescriptor& operator=(ModuleSchemaDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleSchemaDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleSchemaDescriptor* internal_default_instance() {
    return reinterpret_cast<const ModuleSchemaDescriptor*>(
               &_ModuleSchemaDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModuleSchemaDescriptor& a, ModuleSchemaDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleSchemaDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleSchemaDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleSchemaDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleSchemaDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleSchemaDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModuleSchemaDescriptor& from) {
    ModuleSchemaDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleSchemaDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.v1alpha1.ModuleSchemaDescriptor";
  }
  protected:
  explicit ModuleSchemaDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModuleSchemaDescriptor_FileEntry FileEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kSchemaFileFieldNumber = 1,
    kPrefixFieldNumber = 2,
  };
  // repeated .cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry schema_file = 1 [json_name = "schemaFile"];
  int schema_file_size() const;
  private:
  int _internal_schema_file_size() const;

  public:
  void clear_schema_file() ;
  ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry* mutable_schema_file(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry >*
      mutable_schema_file();
  private:
  const ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry& _internal_schema_file(int index) const;
  ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry* _internal_add_schema_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry>& _internal_schema_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry>* _internal_mutable_schema_file();
  public:
  const ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry& schema_file(int index) const;
  ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry* add_schema_file();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry >&
      schema_file() const;
  // bytes prefix = 2 [json_name = "prefix"];
  void clear_prefix() ;
  const std::string& prefix() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* ptr);

  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(
      const std::string& value);
  std::string* _internal_mutable_prefix();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry > schema_file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fv1alpha1_2fschema_2eproto;
};

// ===================================================================



static const int kModuleSchemaFieldNumber = 104503792;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor >, 11, false >
  module_schema;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ModuleSchemaDescriptor_FileEntry

// uint32 id = 1 [json_name = "id"];
inline void ModuleSchemaDescriptor_FileEntry::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t ModuleSchemaDescriptor_FileEntry::id() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.id)
  return _internal_id();
}
inline void ModuleSchemaDescriptor_FileEntry::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.id)
}
inline ::uint32_t ModuleSchemaDescriptor_FileEntry::_internal_id() const {
  return _impl_.id_;
}
inline void ModuleSchemaDescriptor_FileEntry::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// string proto_file_name = 2 [json_name = "protoFileName"];
inline void ModuleSchemaDescriptor_FileEntry::clear_proto_file_name() {
  _impl_.proto_file_name_.ClearToEmpty();
}
inline const std::string& ModuleSchemaDescriptor_FileEntry::proto_file_name() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.proto_file_name)
  return _internal_proto_file_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModuleSchemaDescriptor_FileEntry::set_proto_file_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proto_file_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.proto_file_name)
}
inline std::string* ModuleSchemaDescriptor_FileEntry::mutable_proto_file_name() {
  std::string* _s = _internal_mutable_proto_file_name();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.proto_file_name)
  return _s;
}
inline const std::string& ModuleSchemaDescriptor_FileEntry::_internal_proto_file_name() const {
  return _impl_.proto_file_name_.Get();
}
inline void ModuleSchemaDescriptor_FileEntry::_internal_set_proto_file_name(const std::string& value) {
  ;


  _impl_.proto_file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleSchemaDescriptor_FileEntry::_internal_mutable_proto_file_name() {
  ;
  return _impl_.proto_file_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ModuleSchemaDescriptor_FileEntry::release_proto_file_name() {
  // @@protoc_insertion_point(field_release:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.proto_file_name)
  return _impl_.proto_file_name_.Release();
}
inline void ModuleSchemaDescriptor_FileEntry::set_allocated_proto_file_name(std::string* value) {
  _impl_.proto_file_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proto_file_name_.IsDefault()) {
          _impl_.proto_file_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.proto_file_name)
}

// .cosmos.orm.v1alpha1.StorageType storage_type = 3 [json_name = "storageType"];
inline void ModuleSchemaDescriptor_FileEntry::clear_storage_type() {
  _impl_.storage_type_ = 0;
}
inline ::cosmos::orm::v1alpha1::StorageType ModuleSchemaDescriptor_FileEntry::storage_type() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.storage_type)
  return _internal_storage_type();
}
inline void ModuleSchemaDescriptor_FileEntry::set_storage_type(::cosmos::orm::v1alpha1::StorageType value) {
   _internal_set_storage_type(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.storage_type)
}
inline ::cosmos::orm::v1alpha1::StorageType ModuleSchemaDescriptor_FileEntry::_internal_storage_type() const {
  return static_cast<::cosmos::orm::v1alpha1::StorageType>(_impl_.storage_type_);
}
inline void ModuleSchemaDescriptor_FileEntry::_internal_set_storage_type(::cosmos::orm::v1alpha1::StorageType value) {
  ;
  _impl_.storage_type_ = value;
}

// -------------------------------------------------------------------

// ModuleSchemaDescriptor

// repeated .cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry schema_file = 1 [json_name = "schemaFile"];
inline int ModuleSchemaDescriptor::_internal_schema_file_size() const {
  return _impl_.schema_file_.size();
}
inline int ModuleSchemaDescriptor::schema_file_size() const {
  return _internal_schema_file_size();
}
inline void ModuleSchemaDescriptor::clear_schema_file() {
  _internal_mutable_schema_file()->Clear();
}
inline ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry* ModuleSchemaDescriptor::mutable_schema_file(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.schema_file)
  return _internal_mutable_schema_file()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry >*
ModuleSchemaDescriptor::mutable_schema_file() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.schema_file)
  return _internal_mutable_schema_file();
}
inline const ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry& ModuleSchemaDescriptor::_internal_schema_file(int index) const {
  return _internal_schema_file().Get(index);
}
inline const ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry& ModuleSchemaDescriptor::schema_file(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.schema_file)
  return _internal_schema_file(index);
}
inline ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry* ModuleSchemaDescriptor::_internal_add_schema_file() {
  return _internal_mutable_schema_file()->Add();
}
inline ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry* ModuleSchemaDescriptor::add_schema_file() {
  ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry* _add = _internal_add_schema_file();
  // @@protoc_insertion_point(field_add:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.schema_file)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry >&
ModuleSchemaDescriptor::schema_file() const {
  // @@protoc_insertion_point(field_list:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.schema_file)
  return _internal_schema_file();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry>&
ModuleSchemaDescriptor::_internal_schema_file() const {
  return _impl_.schema_file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry>*
ModuleSchemaDescriptor::_internal_mutable_schema_file() {
  return &_impl_.schema_file_;
}

// bytes prefix = 2 [json_name = "prefix"];
inline void ModuleSchemaDescriptor::clear_prefix() {
  _impl_.prefix_.ClearToEmpty();
}
inline const std::string& ModuleSchemaDescriptor::prefix() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.prefix)
  return _internal_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModuleSchemaDescriptor::set_prefix(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.prefix_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.prefix)
}
inline std::string* ModuleSchemaDescriptor::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.prefix)
  return _s;
}
inline const std::string& ModuleSchemaDescriptor::_internal_prefix() const {
  return _impl_.prefix_.Get();
}
inline void ModuleSchemaDescriptor::_internal_set_prefix(const std::string& value) {
  ;


  _impl_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleSchemaDescriptor::_internal_mutable_prefix() {
  ;
  return _impl_.prefix_.Mutable( GetArenaForAllocation());
}
inline std::string* ModuleSchemaDescriptor::release_prefix() {
  // @@protoc_insertion_point(field_release:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.prefix)
  return _impl_.prefix_.Release();
}
inline void ModuleSchemaDescriptor::set_allocated_prefix(std::string* value) {
  _impl_.prefix_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.prefix_.IsDefault()) {
          _impl_.prefix_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.prefix)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace orm
}  // namespace cosmos


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cosmos::orm::v1alpha1::StorageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::orm::v1alpha1::StorageType>() {
  return ::cosmos::orm::v1alpha1::StorageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fv1alpha1_2fschema_2eproto_2epb_2eh

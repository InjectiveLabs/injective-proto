// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/orm/v1alpha1/schema.proto

#include "cosmos/orm/v1alpha1/schema.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace orm {
namespace v1alpha1 {
template <typename>
PROTOBUF_CONSTEXPR ModuleSchemaDescriptor_FileEntry::ModuleSchemaDescriptor_FileEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proto_file_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.storage_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleSchemaDescriptor_FileEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleSchemaDescriptor_FileEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleSchemaDescriptor_FileEntryDefaultTypeInternal() {}
  union {
    ModuleSchemaDescriptor_FileEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleSchemaDescriptor_FileEntryDefaultTypeInternal _ModuleSchemaDescriptor_FileEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ModuleSchemaDescriptor::ModuleSchemaDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schema_file_)*/{}
  , /*decltype(_impl_.prefix_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleSchemaDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleSchemaDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleSchemaDescriptorDefaultTypeInternal() {}
  union {
    ModuleSchemaDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleSchemaDescriptorDefaultTypeInternal _ModuleSchemaDescriptor_default_instance_;
}  // namespace v1alpha1
}  // namespace orm
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2form_2fv1alpha1_2fschema_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2form_2fv1alpha1_2fschema_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2form_2fv1alpha1_2fschema_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2form_2fv1alpha1_2fschema_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry, _impl_.proto_file_name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry, _impl_.storage_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor, _impl_.schema_file_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor, _impl_.prefix_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry)},
        { 11, -1, -1, sizeof(::cosmos::orm::v1alpha1::ModuleSchemaDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::orm::v1alpha1::_ModuleSchemaDescriptor_FileEntry_default_instance_._instance,
    &::cosmos::orm::v1alpha1::_ModuleSchemaDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2form_2fv1alpha1_2fschema_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n cosmos/orm/v1alpha1/schema.proto\022\023cosm"
    "os.orm.v1alpha1\032 google/protobuf/descrip"
    "tor.proto\"\223\002\n\026ModuleSchemaDescriptor\022V\n\013"
    "schema_file\030\001 \003(\01325.cosmos.orm.v1alpha1."
    "ModuleSchemaDescriptor.FileEntryR\nschema"
    "File\022\026\n\006prefix\030\002 \001(\014R\006prefix\032\210\001\n\tFileEnt"
    "ry\022\016\n\002id\030\001 \001(\rR\002id\022&\n\017proto_file_name\030\002 "
    "\001(\tR\rprotoFileName\022C\n\014storage_type\030\003 \001(\016"
    "2 .cosmos.orm.v1alpha1.StorageTypeR\013stor"
    "ageType*\235\001\n\013StorageType\022$\n STORAGE_TYPE_"
    "DEFAULT_UNSPECIFIED\020\000\022\027\n\023STORAGE_TYPE_ME"
    "MORY\020\001\022\032\n\026STORAGE_TYPE_TRANSIENT\020\002\022\026\n\022ST"
    "ORAGE_TYPE_INDEX\020\003\022\033\n\027STORAGE_TYPE_COMMI"
    "TMENT\020\004:t\n\rmodule_schema\022\037.google.protob"
    "uf.MessageOptions\030\360\263\3521 \001(\0132+.cosmos.orm."
    "v1alpha1.ModuleSchemaDescriptorR\014moduleS"
    "chemaB\224\001\n\027com.cosmos.orm.v1alpha1B\013Schem"
    "aProtoP\001\242\002\003COX\252\002\023Cosmos.Orm.V1alpha1\312\002\023C"
    "osmos\\Orm\\V1alpha1\342\002\037Cosmos\\Orm\\V1alpha1"
    "\\GPBMetadata\352\002\025Cosmos::Orm::V1alpha1b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto = {
    false,
    false,
    804,
    descriptor_table_protodef_cosmos_2form_2fv1alpha1_2fschema_2eproto,
    "cosmos/orm/v1alpha1/schema.proto",
    &descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_once,
    descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2form_2fv1alpha1_2fschema_2eproto::offsets,
    file_level_metadata_cosmos_2form_2fv1alpha1_2fschema_2eproto,
    file_level_enum_descriptors_cosmos_2form_2fv1alpha1_2fschema_2eproto,
    file_level_service_descriptors_cosmos_2form_2fv1alpha1_2fschema_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_getter() {
  return &descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2form_2fv1alpha1_2fschema_2eproto(&descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto);
namespace cosmos {
namespace orm {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StorageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto);
  return file_level_enum_descriptors_cosmos_2form_2fv1alpha1_2fschema_2eproto[0];
}
bool StorageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ModuleSchemaDescriptor_FileEntry::_Internal {
 public:
};

ModuleSchemaDescriptor_FileEntry::ModuleSchemaDescriptor_FileEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
}
ModuleSchemaDescriptor_FileEntry::ModuleSchemaDescriptor_FileEntry(const ModuleSchemaDescriptor_FileEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleSchemaDescriptor_FileEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proto_file_name_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.storage_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proto_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proto_file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto_file_name().empty()) {
    _this->_impl_.proto_file_name_.Set(from._internal_proto_file_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.storage_type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.storage_type_));
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
}

inline void ModuleSchemaDescriptor_FileEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proto_file_name_) {}

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.storage_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proto_file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proto_file_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleSchemaDescriptor_FileEntry::~ModuleSchemaDescriptor_FileEntry() {
  // @@protoc_insertion_point(destructor:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleSchemaDescriptor_FileEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proto_file_name_.Destroy();
}

void ModuleSchemaDescriptor_FileEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleSchemaDescriptor_FileEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proto_file_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.storage_type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.storage_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleSchemaDescriptor_FileEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string proto_file_name = 2 [json_name = "protoFileName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proto_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.proto_file_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.orm.v1alpha1.StorageType storage_type = 3 [json_name = "storageType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_storage_type(static_cast<::cosmos::orm::v1alpha1::StorageType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModuleSchemaDescriptor_FileEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // string proto_file_name = 2 [json_name = "protoFileName"];
  if (!this->_internal_proto_file_name().empty()) {
    const std::string& _s = this->_internal_proto_file_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry.proto_file_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cosmos.orm.v1alpha1.StorageType storage_type = 3 [json_name = "storageType"];
  if (this->_internal_storage_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_storage_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
  return target;
}

::size_t ModuleSchemaDescriptor_FileEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proto_file_name = 2 [json_name = "protoFileName"];
  if (!this->_internal_proto_file_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_proto_file_name());
  }

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // .cosmos.orm.v1alpha1.StorageType storage_type = 3 [json_name = "storageType"];
  if (this->_internal_storage_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_storage_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleSchemaDescriptor_FileEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleSchemaDescriptor_FileEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleSchemaDescriptor_FileEntry::GetClassData() const { return &_class_data_; }


void ModuleSchemaDescriptor_FileEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleSchemaDescriptor_FileEntry*>(&to_msg);
  auto& from = static_cast<const ModuleSchemaDescriptor_FileEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proto_file_name().empty()) {
    _this->_internal_set_proto_file_name(from._internal_proto_file_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_storage_type() != 0) {
    _this->_internal_set_storage_type(from._internal_storage_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleSchemaDescriptor_FileEntry::CopyFrom(const ModuleSchemaDescriptor_FileEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleSchemaDescriptor_FileEntry::IsInitialized() const {
  return true;
}

void ModuleSchemaDescriptor_FileEntry::InternalSwap(ModuleSchemaDescriptor_FileEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proto_file_name_, lhs_arena,
                                       &other->_impl_.proto_file_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModuleSchemaDescriptor_FileEntry, _impl_.storage_type_)
      + sizeof(ModuleSchemaDescriptor_FileEntry::_impl_.storage_type_)
      - PROTOBUF_FIELD_OFFSET(ModuleSchemaDescriptor_FileEntry, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleSchemaDescriptor_FileEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_getter, &descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_once,
      file_level_metadata_cosmos_2form_2fv1alpha1_2fschema_2eproto[0]);
}
// ===================================================================

class ModuleSchemaDescriptor::_Internal {
 public:
};

ModuleSchemaDescriptor::ModuleSchemaDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
}
ModuleSchemaDescriptor::ModuleSchemaDescriptor(const ModuleSchemaDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleSchemaDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_file_){from._impl_.schema_file_}
    , decltype(_impl_.prefix_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prefix().empty()) {
    _this->_impl_.prefix_.Set(from._internal_prefix(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
}

inline void ModuleSchemaDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.schema_file_){arena}
    , decltype(_impl_.prefix_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleSchemaDescriptor::~ModuleSchemaDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleSchemaDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_schema_file()->~RepeatedPtrField();
  _impl_.prefix_.Destroy();
}

void ModuleSchemaDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleSchemaDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_schema_file()->Clear();
  _impl_.prefix_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleSchemaDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry schema_file = 1 [json_name = "schemaFile"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schema_file(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes prefix = 2 [json_name = "prefix"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModuleSchemaDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry schema_file = 1 [json_name = "schemaFile"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_schema_file_size()); i < n; i++) {
    const auto& repfield = this->_internal_schema_file(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    const std::string& _s = this->_internal_prefix();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
  return target;
}

::size_t ModuleSchemaDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.orm.v1alpha1.ModuleSchemaDescriptor.FileEntry schema_file = 1 [json_name = "schemaFile"];
  total_size += 1UL * this->_internal_schema_file_size();
  for (const auto& msg : this->_internal_schema_file()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes prefix = 2 [json_name = "prefix"];
  if (!this->_internal_prefix().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_prefix());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleSchemaDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleSchemaDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleSchemaDescriptor::GetClassData() const { return &_class_data_; }


void ModuleSchemaDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleSchemaDescriptor*>(&to_msg);
  auto& from = static_cast<const ModuleSchemaDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_schema_file()->MergeFrom(from._internal_schema_file());
  if (!from._internal_prefix().empty()) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleSchemaDescriptor::CopyFrom(const ModuleSchemaDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.v1alpha1.ModuleSchemaDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleSchemaDescriptor::IsInitialized() const {
  return true;
}

void ModuleSchemaDescriptor::InternalSwap(ModuleSchemaDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_schema_file()->InternalSwap(other->_internal_mutable_schema_file());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.prefix_, lhs_arena,
                                       &other->_impl_.prefix_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleSchemaDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_getter, &descriptor_table_cosmos_2form_2fv1alpha1_2fschema_2eproto_once,
      file_level_metadata_cosmos_2form_2fv1alpha1_2fschema_2eproto[1]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor >, 11, false>
  module_schema(kModuleSchemaFieldNumber, ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor::default_instance(), nullptr);
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace orm
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry*
Arena::CreateMaybeMessage< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor_FileEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor*
Arena::CreateMaybeMessage< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::v1alpha1::ModuleSchemaDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

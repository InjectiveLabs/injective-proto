// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/orm/v1/orm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fv1_2form_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fv1_2form_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2form_2fv1_2form_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2form_2fv1_2form_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2form_2fv1_2form_2eproto;
namespace cosmos {
namespace orm {
namespace v1 {
class PrimaryKeyDescriptor;
struct PrimaryKeyDescriptorDefaultTypeInternal;
extern PrimaryKeyDescriptorDefaultTypeInternal _PrimaryKeyDescriptor_default_instance_;
class SecondaryIndexDescriptor;
struct SecondaryIndexDescriptorDefaultTypeInternal;
extern SecondaryIndexDescriptorDefaultTypeInternal _SecondaryIndexDescriptor_default_instance_;
class SingletonDescriptor;
struct SingletonDescriptorDefaultTypeInternal;
extern SingletonDescriptorDefaultTypeInternal _SingletonDescriptor_default_instance_;
class TableDescriptor;
struct TableDescriptorDefaultTypeInternal;
extern TableDescriptorDefaultTypeInternal _TableDescriptor_default_instance_;
}  // namespace v1
}  // namespace orm
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::orm::v1::PrimaryKeyDescriptor* Arena::CreateMaybeMessage<::cosmos::orm::v1::PrimaryKeyDescriptor>(Arena*);
template <>
::cosmos::orm::v1::SecondaryIndexDescriptor* Arena::CreateMaybeMessage<::cosmos::orm::v1::SecondaryIndexDescriptor>(Arena*);
template <>
::cosmos::orm::v1::SingletonDescriptor* Arena::CreateMaybeMessage<::cosmos::orm::v1::SingletonDescriptor>(Arena*);
template <>
::cosmos::orm::v1::TableDescriptor* Arena::CreateMaybeMessage<::cosmos::orm::v1::TableDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace orm {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class TableDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.v1.TableDescriptor) */ {
 public:
  inline TableDescriptor() : TableDescriptor(nullptr) {}
  ~TableDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TableDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableDescriptor(const TableDescriptor& from);
  TableDescriptor(TableDescriptor&& from) noexcept
    : TableDescriptor() {
    *this = ::std::move(from);
  }

  inline TableDescriptor& operator=(const TableDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableDescriptor& operator=(TableDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableDescriptor* internal_default_instance() {
    return reinterpret_cast<const TableDescriptor*>(
               &_TableDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TableDescriptor& a, TableDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TableDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableDescriptor& from) {
    TableDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.v1.TableDescriptor";
  }
  protected:
  explicit TableDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 2,
    kPrimaryKeyFieldNumber = 1,
    kIdFieldNumber = 3,
  };
  // repeated .cosmos.orm.v1.SecondaryIndexDescriptor index = 2 [json_name = "index"];
  int index_size() const;
  private:
  int _internal_index_size() const;

  public:
  void clear_index() ;
  ::cosmos::orm::v1::SecondaryIndexDescriptor* mutable_index(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1::SecondaryIndexDescriptor >*
      mutable_index();
  private:
  const ::cosmos::orm::v1::SecondaryIndexDescriptor& _internal_index(int index) const;
  ::cosmos::orm::v1::SecondaryIndexDescriptor* _internal_add_index();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::v1::SecondaryIndexDescriptor>& _internal_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::v1::SecondaryIndexDescriptor>* _internal_mutable_index();
  public:
  const ::cosmos::orm::v1::SecondaryIndexDescriptor& index(int index) const;
  ::cosmos::orm::v1::SecondaryIndexDescriptor* add_index();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1::SecondaryIndexDescriptor >&
      index() const;
  // .cosmos.orm.v1.PrimaryKeyDescriptor primary_key = 1 [json_name = "primaryKey"];
  bool has_primary_key() const;
  void clear_primary_key() ;
  const ::cosmos::orm::v1::PrimaryKeyDescriptor& primary_key() const;
  PROTOBUF_NODISCARD ::cosmos::orm::v1::PrimaryKeyDescriptor* release_primary_key();
  ::cosmos::orm::v1::PrimaryKeyDescriptor* mutable_primary_key();
  void set_allocated_primary_key(::cosmos::orm::v1::PrimaryKeyDescriptor* primary_key);
  private:
  const ::cosmos::orm::v1::PrimaryKeyDescriptor& _internal_primary_key() const;
  ::cosmos::orm::v1::PrimaryKeyDescriptor* _internal_mutable_primary_key();
  public:
  void unsafe_arena_set_allocated_primary_key(
      ::cosmos::orm::v1::PrimaryKeyDescriptor* primary_key);
  ::cosmos::orm::v1::PrimaryKeyDescriptor* unsafe_arena_release_primary_key();
  // uint32 id = 3 [json_name = "id"];
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.orm.v1.TableDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1::SecondaryIndexDescriptor > index_;
    ::cosmos::orm::v1::PrimaryKeyDescriptor* primary_key_;
    ::uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fv1_2form_2eproto;
};// -------------------------------------------------------------------

class PrimaryKeyDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.v1.PrimaryKeyDescriptor) */ {
 public:
  inline PrimaryKeyDescriptor() : PrimaryKeyDescriptor(nullptr) {}
  ~PrimaryKeyDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PrimaryKeyDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimaryKeyDescriptor(const PrimaryKeyDescriptor& from);
  PrimaryKeyDescriptor(PrimaryKeyDescriptor&& from) noexcept
    : PrimaryKeyDescriptor() {
    *this = ::std::move(from);
  }

  inline PrimaryKeyDescriptor& operator=(const PrimaryKeyDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimaryKeyDescriptor& operator=(PrimaryKeyDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimaryKeyDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimaryKeyDescriptor* internal_default_instance() {
    return reinterpret_cast<const PrimaryKeyDescriptor*>(
               &_PrimaryKeyDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrimaryKeyDescriptor& a, PrimaryKeyDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimaryKeyDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimaryKeyDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimaryKeyDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimaryKeyDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimaryKeyDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrimaryKeyDescriptor& from) {
    PrimaryKeyDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimaryKeyDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.v1.PrimaryKeyDescriptor";
  }
  protected:
  explicit PrimaryKeyDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
    kAutoIncrementFieldNumber = 2,
  };
  // string fields = 1 [json_name = "fields"];
  void clear_fields() ;
  const std::string& fields() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fields(Arg_&& arg, Args_... args);
  std::string* mutable_fields();
  PROTOBUF_NODISCARD std::string* release_fields();
  void set_allocated_fields(std::string* ptr);

  private:
  const std::string& _internal_fields() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fields(
      const std::string& value);
  std::string* _internal_mutable_fields();

  public:
  // bool auto_increment = 2 [json_name = "autoIncrement"];
  void clear_auto_increment() ;
  bool auto_increment() const;
  void set_auto_increment(bool value);

  private:
  bool _internal_auto_increment() const;
  void _internal_set_auto_increment(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.orm.v1.PrimaryKeyDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fields_;
    bool auto_increment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fv1_2form_2eproto;
};// -------------------------------------------------------------------

class SecondaryIndexDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.v1.SecondaryIndexDescriptor) */ {
 public:
  inline SecondaryIndexDescriptor() : SecondaryIndexDescriptor(nullptr) {}
  ~SecondaryIndexDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SecondaryIndexDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecondaryIndexDescriptor(const SecondaryIndexDescriptor& from);
  SecondaryIndexDescriptor(SecondaryIndexDescriptor&& from) noexcept
    : SecondaryIndexDescriptor() {
    *this = ::std::move(from);
  }

  inline SecondaryIndexDescriptor& operator=(const SecondaryIndexDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecondaryIndexDescriptor& operator=(SecondaryIndexDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SecondaryIndexDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecondaryIndexDescriptor* internal_default_instance() {
    return reinterpret_cast<const SecondaryIndexDescriptor*>(
               &_SecondaryIndexDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecondaryIndexDescriptor& a, SecondaryIndexDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SecondaryIndexDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecondaryIndexDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecondaryIndexDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecondaryIndexDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SecondaryIndexDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SecondaryIndexDescriptor& from) {
    SecondaryIndexDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecondaryIndexDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.v1.SecondaryIndexDescriptor";
  }
  protected:
  explicit SecondaryIndexDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
    kIdFieldNumber = 2,
    kUniqueFieldNumber = 3,
  };
  // string fields = 1 [json_name = "fields"];
  void clear_fields() ;
  const std::string& fields() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fields(Arg_&& arg, Args_... args);
  std::string* mutable_fields();
  PROTOBUF_NODISCARD std::string* release_fields();
  void set_allocated_fields(std::string* ptr);

  private:
  const std::string& _internal_fields() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fields(
      const std::string& value);
  std::string* _internal_mutable_fields();

  public:
  // uint32 id = 2 [json_name = "id"];
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // bool unique = 3 [json_name = "unique"];
  void clear_unique() ;
  bool unique() const;
  void set_unique(bool value);

  private:
  bool _internal_unique() const;
  void _internal_set_unique(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.orm.v1.SecondaryIndexDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fields_;
    ::uint32_t id_;
    bool unique_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fv1_2form_2eproto;
};// -------------------------------------------------------------------

class SingletonDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.orm.v1.SingletonDescriptor) */ {
 public:
  inline SingletonDescriptor() : SingletonDescriptor(nullptr) {}
  ~SingletonDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SingletonDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingletonDescriptor(const SingletonDescriptor& from);
  SingletonDescriptor(SingletonDescriptor&& from) noexcept
    : SingletonDescriptor() {
    *this = ::std::move(from);
  }

  inline SingletonDescriptor& operator=(const SingletonDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingletonDescriptor& operator=(SingletonDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SingletonDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingletonDescriptor* internal_default_instance() {
    return reinterpret_cast<const SingletonDescriptor*>(
               &_SingletonDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SingletonDescriptor& a, SingletonDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SingletonDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingletonDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SingletonDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SingletonDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SingletonDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SingletonDescriptor& from) {
    SingletonDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingletonDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.orm.v1.SingletonDescriptor";
  }
  protected:
  explicit SingletonDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.orm.v1.SingletonDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2form_2fv1_2form_2eproto;
};

// ===================================================================



static const int kTableFieldNumber = 104503790;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cosmos::orm::v1::TableDescriptor >, 11, false >
  table;
static const int kSingletonFieldNumber = 104503791;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cosmos::orm::v1::SingletonDescriptor >, 11, false >
  singleton;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TableDescriptor

// .cosmos.orm.v1.PrimaryKeyDescriptor primary_key = 1 [json_name = "primaryKey"];
inline bool TableDescriptor::has_primary_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.primary_key_ != nullptr);
  return value;
}
inline void TableDescriptor::clear_primary_key() {
  if (_impl_.primary_key_ != nullptr) _impl_.primary_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::orm::v1::PrimaryKeyDescriptor& TableDescriptor::_internal_primary_key() const {
  const ::cosmos::orm::v1::PrimaryKeyDescriptor* p = _impl_.primary_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::orm::v1::PrimaryKeyDescriptor&>(
      ::cosmos::orm::v1::_PrimaryKeyDescriptor_default_instance_);
}
inline const ::cosmos::orm::v1::PrimaryKeyDescriptor& TableDescriptor::primary_key() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.TableDescriptor.primary_key)
  return _internal_primary_key();
}
inline void TableDescriptor::unsafe_arena_set_allocated_primary_key(
    ::cosmos::orm::v1::PrimaryKeyDescriptor* primary_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primary_key_);
  }
  _impl_.primary_key_ = primary_key;
  if (primary_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.orm.v1.TableDescriptor.primary_key)
}
inline ::cosmos::orm::v1::PrimaryKeyDescriptor* TableDescriptor::release_primary_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::orm::v1::PrimaryKeyDescriptor* temp = _impl_.primary_key_;
  _impl_.primary_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::orm::v1::PrimaryKeyDescriptor* TableDescriptor::unsafe_arena_release_primary_key() {
  // @@protoc_insertion_point(field_release:cosmos.orm.v1.TableDescriptor.primary_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::orm::v1::PrimaryKeyDescriptor* temp = _impl_.primary_key_;
  _impl_.primary_key_ = nullptr;
  return temp;
}
inline ::cosmos::orm::v1::PrimaryKeyDescriptor* TableDescriptor::_internal_mutable_primary_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.primary_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::orm::v1::PrimaryKeyDescriptor>(GetArenaForAllocation());
    _impl_.primary_key_ = p;
  }
  return _impl_.primary_key_;
}
inline ::cosmos::orm::v1::PrimaryKeyDescriptor* TableDescriptor::mutable_primary_key() {
  ::cosmos::orm::v1::PrimaryKeyDescriptor* _msg = _internal_mutable_primary_key();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.v1.TableDescriptor.primary_key)
  return _msg;
}
inline void TableDescriptor::set_allocated_primary_key(::cosmos::orm::v1::PrimaryKeyDescriptor* primary_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.primary_key_;
  }
  if (primary_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(primary_key);
    if (message_arena != submessage_arena) {
      primary_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.primary_key_ = primary_key;
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.v1.TableDescriptor.primary_key)
}

// repeated .cosmos.orm.v1.SecondaryIndexDescriptor index = 2 [json_name = "index"];
inline int TableDescriptor::_internal_index_size() const {
  return _impl_.index_.size();
}
inline int TableDescriptor::index_size() const {
  return _internal_index_size();
}
inline void TableDescriptor::clear_index() {
  _internal_mutable_index()->Clear();
}
inline ::cosmos::orm::v1::SecondaryIndexDescriptor* TableDescriptor::mutable_index(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.orm.v1.TableDescriptor.index)
  return _internal_mutable_index()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1::SecondaryIndexDescriptor >*
TableDescriptor::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.orm.v1.TableDescriptor.index)
  return _internal_mutable_index();
}
inline const ::cosmos::orm::v1::SecondaryIndexDescriptor& TableDescriptor::_internal_index(int index) const {
  return _internal_index().Get(index);
}
inline const ::cosmos::orm::v1::SecondaryIndexDescriptor& TableDescriptor::index(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.TableDescriptor.index)
  return _internal_index(index);
}
inline ::cosmos::orm::v1::SecondaryIndexDescriptor* TableDescriptor::_internal_add_index() {
  return _internal_mutable_index()->Add();
}
inline ::cosmos::orm::v1::SecondaryIndexDescriptor* TableDescriptor::add_index() {
  ::cosmos::orm::v1::SecondaryIndexDescriptor* _add = _internal_add_index();
  // @@protoc_insertion_point(field_add:cosmos.orm.v1.TableDescriptor.index)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::orm::v1::SecondaryIndexDescriptor >&
TableDescriptor::index() const {
  // @@protoc_insertion_point(field_list:cosmos.orm.v1.TableDescriptor.index)
  return _internal_index();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::v1::SecondaryIndexDescriptor>&
TableDescriptor::_internal_index() const {
  return _impl_.index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::orm::v1::SecondaryIndexDescriptor>*
TableDescriptor::_internal_mutable_index() {
  return &_impl_.index_;
}

// uint32 id = 3 [json_name = "id"];
inline void TableDescriptor::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t TableDescriptor::id() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.TableDescriptor.id)
  return _internal_id();
}
inline void TableDescriptor::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.v1.TableDescriptor.id)
}
inline ::uint32_t TableDescriptor::_internal_id() const {
  return _impl_.id_;
}
inline void TableDescriptor::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// PrimaryKeyDescriptor

// string fields = 1 [json_name = "fields"];
inline void PrimaryKeyDescriptor::clear_fields() {
  _impl_.fields_.ClearToEmpty();
}
inline const std::string& PrimaryKeyDescriptor::fields() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.PrimaryKeyDescriptor.fields)
  return _internal_fields();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrimaryKeyDescriptor::set_fields(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.fields_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.v1.PrimaryKeyDescriptor.fields)
}
inline std::string* PrimaryKeyDescriptor::mutable_fields() {
  std::string* _s = _internal_mutable_fields();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.v1.PrimaryKeyDescriptor.fields)
  return _s;
}
inline const std::string& PrimaryKeyDescriptor::_internal_fields() const {
  return _impl_.fields_.Get();
}
inline void PrimaryKeyDescriptor::_internal_set_fields(const std::string& value) {
  ;


  _impl_.fields_.Set(value, GetArenaForAllocation());
}
inline std::string* PrimaryKeyDescriptor::_internal_mutable_fields() {
  ;
  return _impl_.fields_.Mutable( GetArenaForAllocation());
}
inline std::string* PrimaryKeyDescriptor::release_fields() {
  // @@protoc_insertion_point(field_release:cosmos.orm.v1.PrimaryKeyDescriptor.fields)
  return _impl_.fields_.Release();
}
inline void PrimaryKeyDescriptor::set_allocated_fields(std::string* value) {
  _impl_.fields_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fields_.IsDefault()) {
          _impl_.fields_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.v1.PrimaryKeyDescriptor.fields)
}

// bool auto_increment = 2 [json_name = "autoIncrement"];
inline void PrimaryKeyDescriptor::clear_auto_increment() {
  _impl_.auto_increment_ = false;
}
inline bool PrimaryKeyDescriptor::auto_increment() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.PrimaryKeyDescriptor.auto_increment)
  return _internal_auto_increment();
}
inline void PrimaryKeyDescriptor::set_auto_increment(bool value) {
  _internal_set_auto_increment(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.v1.PrimaryKeyDescriptor.auto_increment)
}
inline bool PrimaryKeyDescriptor::_internal_auto_increment() const {
  return _impl_.auto_increment_;
}
inline void PrimaryKeyDescriptor::_internal_set_auto_increment(bool value) {
  ;
  _impl_.auto_increment_ = value;
}

// -------------------------------------------------------------------

// SecondaryIndexDescriptor

// string fields = 1 [json_name = "fields"];
inline void SecondaryIndexDescriptor::clear_fields() {
  _impl_.fields_.ClearToEmpty();
}
inline const std::string& SecondaryIndexDescriptor::fields() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.SecondaryIndexDescriptor.fields)
  return _internal_fields();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecondaryIndexDescriptor::set_fields(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.fields_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.orm.v1.SecondaryIndexDescriptor.fields)
}
inline std::string* SecondaryIndexDescriptor::mutable_fields() {
  std::string* _s = _internal_mutable_fields();
  // @@protoc_insertion_point(field_mutable:cosmos.orm.v1.SecondaryIndexDescriptor.fields)
  return _s;
}
inline const std::string& SecondaryIndexDescriptor::_internal_fields() const {
  return _impl_.fields_.Get();
}
inline void SecondaryIndexDescriptor::_internal_set_fields(const std::string& value) {
  ;


  _impl_.fields_.Set(value, GetArenaForAllocation());
}
inline std::string* SecondaryIndexDescriptor::_internal_mutable_fields() {
  ;
  return _impl_.fields_.Mutable( GetArenaForAllocation());
}
inline std::string* SecondaryIndexDescriptor::release_fields() {
  // @@protoc_insertion_point(field_release:cosmos.orm.v1.SecondaryIndexDescriptor.fields)
  return _impl_.fields_.Release();
}
inline void SecondaryIndexDescriptor::set_allocated_fields(std::string* value) {
  _impl_.fields_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fields_.IsDefault()) {
          _impl_.fields_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.orm.v1.SecondaryIndexDescriptor.fields)
}

// uint32 id = 2 [json_name = "id"];
inline void SecondaryIndexDescriptor::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t SecondaryIndexDescriptor::id() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.SecondaryIndexDescriptor.id)
  return _internal_id();
}
inline void SecondaryIndexDescriptor::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.v1.SecondaryIndexDescriptor.id)
}
inline ::uint32_t SecondaryIndexDescriptor::_internal_id() const {
  return _impl_.id_;
}
inline void SecondaryIndexDescriptor::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// bool unique = 3 [json_name = "unique"];
inline void SecondaryIndexDescriptor::clear_unique() {
  _impl_.unique_ = false;
}
inline bool SecondaryIndexDescriptor::unique() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.SecondaryIndexDescriptor.unique)
  return _internal_unique();
}
inline void SecondaryIndexDescriptor::set_unique(bool value) {
  _internal_set_unique(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.v1.SecondaryIndexDescriptor.unique)
}
inline bool SecondaryIndexDescriptor::_internal_unique() const {
  return _impl_.unique_;
}
inline void SecondaryIndexDescriptor::_internal_set_unique(bool value) {
  ;
  _impl_.unique_ = value;
}

// -------------------------------------------------------------------

// SingletonDescriptor

// uint32 id = 1 [json_name = "id"];
inline void SingletonDescriptor::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t SingletonDescriptor::id() const {
  // @@protoc_insertion_point(field_get:cosmos.orm.v1.SingletonDescriptor.id)
  return _internal_id();
}
inline void SingletonDescriptor::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cosmos.orm.v1.SingletonDescriptor.id)
}
inline ::uint32_t SingletonDescriptor::_internal_id() const {
  return _impl_.id_;
}
inline void SingletonDescriptor::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace orm
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2form_2fv1_2form_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/orm/v1/orm.proto

#include "cosmos/orm/v1/orm.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace orm {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR TableDescriptor::TableDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/{}
  , /*decltype(_impl_.primary_key_)*/nullptr
  , /*decltype(_impl_.id_)*/ 0u
} {}
struct TableDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDescriptorDefaultTypeInternal() {}
  union {
    TableDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDescriptorDefaultTypeInternal _TableDescriptor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PrimaryKeyDescriptor::PrimaryKeyDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.auto_increment_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrimaryKeyDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrimaryKeyDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrimaryKeyDescriptorDefaultTypeInternal() {}
  union {
    PrimaryKeyDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrimaryKeyDescriptorDefaultTypeInternal _PrimaryKeyDescriptor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SecondaryIndexDescriptor::SecondaryIndexDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.unique_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SecondaryIndexDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecondaryIndexDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecondaryIndexDescriptorDefaultTypeInternal() {}
  union {
    SecondaryIndexDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecondaryIndexDescriptorDefaultTypeInternal _SecondaryIndexDescriptor_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SingletonDescriptor::SingletonDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SingletonDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingletonDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingletonDescriptorDefaultTypeInternal() {}
  union {
    SingletonDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingletonDescriptorDefaultTypeInternal _SingletonDescriptor_default_instance_;
}  // namespace v1
}  // namespace orm
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2form_2fv1_2form_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2form_2fv1_2form_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2form_2fv1_2form_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2form_2fv1_2form_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::TableDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::TableDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::TableDescriptor, _impl_.primary_key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::TableDescriptor, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::TableDescriptor, _impl_.id_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::PrimaryKeyDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::PrimaryKeyDescriptor, _impl_.fields_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::PrimaryKeyDescriptor, _impl_.auto_increment_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::SecondaryIndexDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::SecondaryIndexDescriptor, _impl_.fields_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::SecondaryIndexDescriptor, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::SecondaryIndexDescriptor, _impl_.unique_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::SingletonDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::orm::v1::SingletonDescriptor, _impl_.id_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::cosmos::orm::v1::TableDescriptor)},
        { 14, -1, -1, sizeof(::cosmos::orm::v1::PrimaryKeyDescriptor)},
        { 24, -1, -1, sizeof(::cosmos::orm::v1::SecondaryIndexDescriptor)},
        { 35, -1, -1, sizeof(::cosmos::orm::v1::SingletonDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::orm::v1::_TableDescriptor_default_instance_._instance,
    &::cosmos::orm::v1::_PrimaryKeyDescriptor_default_instance_._instance,
    &::cosmos::orm::v1::_SecondaryIndexDescriptor_default_instance_._instance,
    &::cosmos::orm::v1::_SingletonDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2form_2fv1_2form_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\027cosmos/orm/v1/orm.proto\022\rcosmos.orm.v1"
    "\032 google/protobuf/descriptor.proto\"\246\001\n\017T"
    "ableDescriptor\022D\n\013primary_key\030\001 \001(\0132#.co"
    "smos.orm.v1.PrimaryKeyDescriptorR\nprimar"
    "yKey\022=\n\005index\030\002 \003(\0132\'.cosmos.orm.v1.Seco"
    "ndaryIndexDescriptorR\005index\022\016\n\002id\030\003 \001(\rR"
    "\002id\"U\n\024PrimaryKeyDescriptor\022\026\n\006fields\030\001 "
    "\001(\tR\006fields\022%\n\016auto_increment\030\002 \001(\010R\raut"
    "oIncrement\"Z\n\030SecondaryIndexDescriptor\022\026"
    "\n\006fields\030\001 \001(\tR\006fields\022\016\n\002id\030\002 \001(\rR\002id\022\026"
    "\n\006unique\030\003 \001(\010R\006unique\"%\n\023SingletonDescr"
    "iptor\022\016\n\002id\030\001 \001(\rR\002id:X\n\005table\022\037.google."
    "protobuf.MessageOptions\030\356\263\3521 \001(\0132\036.cosmo"
    "s.orm.v1.TableDescriptorR\005table:d\n\tsingl"
    "eton\022\037.google.protobuf.MessageOptions\030\357\263"
    "\3521 \001(\0132\".cosmos.orm.v1.SingletonDescript"
    "orR\tsingletonBs\n\021com.cosmos.orm.v1B\010OrmP"
    "rotoP\001\242\002\003COX\252\002\rCosmos.Orm.V1\312\002\rCosmos\\Or"
    "m\\V1\342\002\031Cosmos\\Orm\\V1\\GPBMetadata\352\002\017Cosmo"
    "s::Orm::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2form_2fv1_2form_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2form_2fv1_2form_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2form_2fv1_2form_2eproto = {
    false,
    false,
    778,
    descriptor_table_protodef_cosmos_2form_2fv1_2form_2eproto,
    "cosmos/orm/v1/orm.proto",
    &descriptor_table_cosmos_2form_2fv1_2form_2eproto_once,
    descriptor_table_cosmos_2form_2fv1_2form_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2form_2fv1_2form_2eproto::offsets,
    file_level_metadata_cosmos_2form_2fv1_2form_2eproto,
    file_level_enum_descriptors_cosmos_2form_2fv1_2form_2eproto,
    file_level_service_descriptors_cosmos_2form_2fv1_2form_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2form_2fv1_2form_2eproto_getter() {
  return &descriptor_table_cosmos_2form_2fv1_2form_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2form_2fv1_2form_2eproto(&descriptor_table_cosmos_2form_2fv1_2form_2eproto);
namespace cosmos {
namespace orm {
namespace v1 {
// ===================================================================

class TableDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<TableDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TableDescriptor, _impl_._has_bits_);
  static const ::cosmos::orm::v1::PrimaryKeyDescriptor& primary_key(const TableDescriptor* msg);
  static void set_has_primary_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::orm::v1::PrimaryKeyDescriptor&
TableDescriptor::_Internal::primary_key(const TableDescriptor* msg) {
  return *msg->_impl_.primary_key_;
}
TableDescriptor::TableDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.v1.TableDescriptor)
}
TableDescriptor::TableDescriptor(const TableDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){from._impl_.index_}
    , decltype(_impl_.primary_key_){nullptr}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.primary_key_ = new ::cosmos::orm::v1::PrimaryKeyDescriptor(*from._impl_.primary_key_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.v1.TableDescriptor)
}

inline void TableDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){arena}
    , decltype(_impl_.primary_key_){nullptr}
    , decltype(_impl_.id_) { 0u }

  };
}

TableDescriptor::~TableDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.orm.v1.TableDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_index()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.primary_key_;
}

void TableDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.v1.TableDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_index()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.primary_key_ != nullptr);
    _impl_.primary_key_->Clear();
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.orm.v1.PrimaryKeyDescriptor primary_key = 1 [json_name = "primaryKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.orm.v1.SecondaryIndexDescriptor index = 2 [json_name = "index"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_index(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 id = 3 [json_name = "id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TableDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.v1.TableDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.orm.v1.PrimaryKeyDescriptor primary_key = 1 [json_name = "primaryKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::primary_key(this),
        _Internal::primary_key(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.orm.v1.SecondaryIndexDescriptor index = 2 [json_name = "index"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_index_size()); i < n; i++) {
    const auto& repfield = this->_internal_index(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.v1.TableDescriptor)
  return target;
}

::size_t TableDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.v1.TableDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.orm.v1.SecondaryIndexDescriptor index = 2 [json_name = "index"];
  total_size += 1UL * this->_internal_index_size();
  for (const auto& msg : this->_internal_index()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.orm.v1.PrimaryKeyDescriptor primary_key = 1 [json_name = "primaryKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.primary_key_);
  }

  // uint32 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableDescriptor::GetClassData() const { return &_class_data_; }


void TableDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableDescriptor*>(&to_msg);
  auto& from = static_cast<const TableDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.v1.TableDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_index()->MergeFrom(from._internal_index());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_primary_key()->::cosmos::orm::v1::PrimaryKeyDescriptor::MergeFrom(
        from._internal_primary_key());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableDescriptor::CopyFrom(const TableDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.v1.TableDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDescriptor::IsInitialized() const {
  return true;
}

void TableDescriptor::InternalSwap(TableDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_index()->InternalSwap(other->_internal_mutable_index());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableDescriptor, _impl_.id_)
      + sizeof(TableDescriptor::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(TableDescriptor, _impl_.primary_key_)>(
          reinterpret_cast<char*>(&_impl_.primary_key_),
          reinterpret_cast<char*>(&other->_impl_.primary_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fv1_2form_2eproto_getter, &descriptor_table_cosmos_2form_2fv1_2form_2eproto_once,
      file_level_metadata_cosmos_2form_2fv1_2form_2eproto[0]);
}
// ===================================================================

class PrimaryKeyDescriptor::_Internal {
 public:
};

PrimaryKeyDescriptor::PrimaryKeyDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.v1.PrimaryKeyDescriptor)
}
PrimaryKeyDescriptor::PrimaryKeyDescriptor(const PrimaryKeyDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrimaryKeyDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_) {}

    , decltype(_impl_.auto_increment_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fields_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fields_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fields().empty()) {
    _this->_impl_.fields_.Set(from._internal_fields(), _this->GetArenaForAllocation());
  }
  _this->_impl_.auto_increment_ = from._impl_.auto_increment_;
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.v1.PrimaryKeyDescriptor)
}

inline void PrimaryKeyDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_) {}

    , decltype(_impl_.auto_increment_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fields_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fields_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrimaryKeyDescriptor::~PrimaryKeyDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.orm.v1.PrimaryKeyDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrimaryKeyDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.Destroy();
}

void PrimaryKeyDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrimaryKeyDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.v1.PrimaryKeyDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.ClearToEmpty();
  _impl_.auto_increment_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrimaryKeyDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fields = 1 [json_name = "fields"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fields();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.v1.PrimaryKeyDescriptor.fields"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool auto_increment = 2 [json_name = "autoIncrement"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.auto_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrimaryKeyDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.v1.PrimaryKeyDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fields = 1 [json_name = "fields"];
  if (!this->_internal_fields().empty()) {
    const std::string& _s = this->_internal_fields();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.v1.PrimaryKeyDescriptor.fields");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool auto_increment = 2 [json_name = "autoIncrement"];
  if (this->_internal_auto_increment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_auto_increment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.v1.PrimaryKeyDescriptor)
  return target;
}

::size_t PrimaryKeyDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.v1.PrimaryKeyDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fields = 1 [json_name = "fields"];
  if (!this->_internal_fields().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fields());
  }

  // bool auto_increment = 2 [json_name = "autoIncrement"];
  if (this->_internal_auto_increment() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrimaryKeyDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrimaryKeyDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrimaryKeyDescriptor::GetClassData() const { return &_class_data_; }


void PrimaryKeyDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrimaryKeyDescriptor*>(&to_msg);
  auto& from = static_cast<const PrimaryKeyDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.v1.PrimaryKeyDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fields().empty()) {
    _this->_internal_set_fields(from._internal_fields());
  }
  if (from._internal_auto_increment() != 0) {
    _this->_internal_set_auto_increment(from._internal_auto_increment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrimaryKeyDescriptor::CopyFrom(const PrimaryKeyDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.v1.PrimaryKeyDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrimaryKeyDescriptor::IsInitialized() const {
  return true;
}

void PrimaryKeyDescriptor::InternalSwap(PrimaryKeyDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fields_, lhs_arena,
                                       &other->_impl_.fields_, rhs_arena);

  swap(_impl_.auto_increment_, other->_impl_.auto_increment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrimaryKeyDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fv1_2form_2eproto_getter, &descriptor_table_cosmos_2form_2fv1_2form_2eproto_once,
      file_level_metadata_cosmos_2form_2fv1_2form_2eproto[1]);
}
// ===================================================================

class SecondaryIndexDescriptor::_Internal {
 public:
};

SecondaryIndexDescriptor::SecondaryIndexDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.v1.SecondaryIndexDescriptor)
}
SecondaryIndexDescriptor::SecondaryIndexDescriptor(const SecondaryIndexDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SecondaryIndexDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.unique_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fields_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fields_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fields().empty()) {
    _this->_impl_.fields_.Set(from._internal_fields(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.unique_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.unique_));
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.v1.SecondaryIndexDescriptor)
}

inline void SecondaryIndexDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fields_) {}

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.unique_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fields_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fields_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecondaryIndexDescriptor::~SecondaryIndexDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.orm.v1.SecondaryIndexDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecondaryIndexDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.Destroy();
}

void SecondaryIndexDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecondaryIndexDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.v1.SecondaryIndexDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unique_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.unique_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecondaryIndexDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fields = 1 [json_name = "fields"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fields();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.orm.v1.SecondaryIndexDescriptor.fields"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool unique = 3 [json_name = "unique"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.unique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SecondaryIndexDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.v1.SecondaryIndexDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fields = 1 [json_name = "fields"];
  if (!this->_internal_fields().empty()) {
    const std::string& _s = this->_internal_fields();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.orm.v1.SecondaryIndexDescriptor.fields");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_id(), target);
  }

  // bool unique = 3 [json_name = "unique"];
  if (this->_internal_unique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_unique(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.v1.SecondaryIndexDescriptor)
  return target;
}

::size_t SecondaryIndexDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.v1.SecondaryIndexDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fields = 1 [json_name = "fields"];
  if (!this->_internal_fields().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fields());
  }

  // uint32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // bool unique = 3 [json_name = "unique"];
  if (this->_internal_unique() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecondaryIndexDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SecondaryIndexDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecondaryIndexDescriptor::GetClassData() const { return &_class_data_; }


void SecondaryIndexDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SecondaryIndexDescriptor*>(&to_msg);
  auto& from = static_cast<const SecondaryIndexDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.v1.SecondaryIndexDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fields().empty()) {
    _this->_internal_set_fields(from._internal_fields());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_unique() != 0) {
    _this->_internal_set_unique(from._internal_unique());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecondaryIndexDescriptor::CopyFrom(const SecondaryIndexDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.v1.SecondaryIndexDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecondaryIndexDescriptor::IsInitialized() const {
  return true;
}

void SecondaryIndexDescriptor::InternalSwap(SecondaryIndexDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fields_, lhs_arena,
                                       &other->_impl_.fields_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecondaryIndexDescriptor, _impl_.unique_)
      + sizeof(SecondaryIndexDescriptor::_impl_.unique_)
      - PROTOBUF_FIELD_OFFSET(SecondaryIndexDescriptor, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecondaryIndexDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fv1_2form_2eproto_getter, &descriptor_table_cosmos_2form_2fv1_2form_2eproto_once,
      file_level_metadata_cosmos_2form_2fv1_2form_2eproto[2]);
}
// ===================================================================

class SingletonDescriptor::_Internal {
 public:
};

SingletonDescriptor::SingletonDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.orm.v1.SingletonDescriptor)
}
SingletonDescriptor::SingletonDescriptor(const SingletonDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.orm.v1.SingletonDescriptor)
}

inline void SingletonDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SingletonDescriptor::~SingletonDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.orm.v1.SingletonDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingletonDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SingletonDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingletonDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.orm.v1.SingletonDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingletonDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SingletonDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.orm.v1.SingletonDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.orm.v1.SingletonDescriptor)
  return target;
}

::size_t SingletonDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.orm.v1.SingletonDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingletonDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingletonDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingletonDescriptor::GetClassData() const { return &_class_data_; }


void SingletonDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingletonDescriptor*>(&to_msg);
  auto& from = static_cast<const SingletonDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.orm.v1.SingletonDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingletonDescriptor::CopyFrom(const SingletonDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.orm.v1.SingletonDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingletonDescriptor::IsInitialized() const {
  return true;
}

void SingletonDescriptor::InternalSwap(SingletonDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingletonDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2form_2fv1_2form_2eproto_getter, &descriptor_table_cosmos_2form_2fv1_2form_2eproto_once,
      file_level_metadata_cosmos_2form_2fv1_2form_2eproto[3]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cosmos::orm::v1::TableDescriptor >, 11, false>
  table(kTableFieldNumber, ::cosmos::orm::v1::TableDescriptor::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::cosmos::orm::v1::SingletonDescriptor >, 11, false>
  singleton(kSingletonFieldNumber, ::cosmos::orm::v1::SingletonDescriptor::default_instance(), nullptr);
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace orm
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::orm::v1::TableDescriptor*
Arena::CreateMaybeMessage< ::cosmos::orm::v1::TableDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::v1::TableDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::v1::PrimaryKeyDescriptor*
Arena::CreateMaybeMessage< ::cosmos::orm::v1::PrimaryKeyDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::v1::PrimaryKeyDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::v1::SecondaryIndexDescriptor*
Arena::CreateMaybeMessage< ::cosmos::orm::v1::SecondaryIndexDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::v1::SecondaryIndexDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::orm::v1::SingletonDescriptor*
Arena::CreateMaybeMessage< ::cosmos::orm::v1::SingletonDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::orm::v1::SingletonDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

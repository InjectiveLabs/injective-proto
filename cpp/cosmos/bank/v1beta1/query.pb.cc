// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/bank/v1beta1/query.proto

#include "cosmos/bank/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace bank {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR QueryBalanceRequest::QueryBalanceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryBalanceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBalanceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBalanceRequestDefaultTypeInternal() {}
  union {
    QueryBalanceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBalanceRequestDefaultTypeInternal _QueryBalanceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryBalanceResponse::QueryBalanceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balance_)*/nullptr} {}
struct QueryBalanceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryBalanceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryBalanceResponseDefaultTypeInternal() {}
  union {
    QueryBalanceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryBalanceResponseDefaultTypeInternal _QueryBalanceResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAllBalancesRequest::QueryAllBalancesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryAllBalancesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllBalancesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllBalancesRequestDefaultTypeInternal() {}
  union {
    QueryAllBalancesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllBalancesRequestDefaultTypeInternal _QueryAllBalancesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAllBalancesResponse::QueryAllBalancesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balances_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryAllBalancesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllBalancesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllBalancesResponseDefaultTypeInternal() {}
  union {
    QueryAllBalancesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllBalancesResponseDefaultTypeInternal _QueryAllBalancesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpendableBalancesRequest::QuerySpendableBalancesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QuerySpendableBalancesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpendableBalancesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpendableBalancesRequestDefaultTypeInternal() {}
  union {
    QuerySpendableBalancesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpendableBalancesRequestDefaultTypeInternal _QuerySpendableBalancesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpendableBalancesResponse::QuerySpendableBalancesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balances_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QuerySpendableBalancesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpendableBalancesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpendableBalancesResponseDefaultTypeInternal() {}
  union {
    QuerySpendableBalancesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpendableBalancesResponseDefaultTypeInternal _QuerySpendableBalancesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpendableBalanceByDenomRequest::QuerySpendableBalanceByDenomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySpendableBalanceByDenomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpendableBalanceByDenomRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpendableBalanceByDenomRequestDefaultTypeInternal() {}
  union {
    QuerySpendableBalanceByDenomRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpendableBalanceByDenomRequestDefaultTypeInternal _QuerySpendableBalanceByDenomRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySpendableBalanceByDenomResponse::QuerySpendableBalanceByDenomResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balance_)*/nullptr} {}
struct QuerySpendableBalanceByDenomResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySpendableBalanceByDenomResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySpendableBalanceByDenomResponseDefaultTypeInternal() {}
  union {
    QuerySpendableBalanceByDenomResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySpendableBalanceByDenomResponseDefaultTypeInternal _QuerySpendableBalanceByDenomResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTotalSupplyRequest::QueryTotalSupplyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryTotalSupplyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTotalSupplyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTotalSupplyRequestDefaultTypeInternal() {}
  union {
    QueryTotalSupplyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTotalSupplyRequestDefaultTypeInternal _QueryTotalSupplyRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTotalSupplyResponse::QueryTotalSupplyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.supply_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryTotalSupplyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTotalSupplyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTotalSupplyResponseDefaultTypeInternal() {}
  union {
    QueryTotalSupplyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTotalSupplyResponseDefaultTypeInternal _QueryTotalSupplyResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySupplyOfRequest::QuerySupplyOfRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySupplyOfRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySupplyOfRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySupplyOfRequestDefaultTypeInternal() {}
  union {
    QuerySupplyOfRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySupplyOfRequestDefaultTypeInternal _QuerySupplyOfRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySupplyOfResponse::QuerySupplyOfResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.amount_)*/nullptr} {}
struct QuerySupplyOfResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySupplyOfResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySupplyOfResponseDefaultTypeInternal() {}
  union {
    QuerySupplyOfResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySupplyOfResponseDefaultTypeInternal _QuerySupplyOfResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsRequest::QueryParamsRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryParamsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsRequestDefaultTypeInternal() {}
  union {
    QueryParamsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsResponse::QueryParamsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct QueryParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsResponseDefaultTypeInternal() {}
  union {
    QueryParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomsMetadataRequest::QueryDenomsMetadataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryDenomsMetadataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomsMetadataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomsMetadataRequestDefaultTypeInternal() {}
  union {
    QueryDenomsMetadataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomsMetadataRequestDefaultTypeInternal _QueryDenomsMetadataRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomsMetadataResponse::QueryDenomsMetadataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadatas_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryDenomsMetadataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomsMetadataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomsMetadataResponseDefaultTypeInternal() {}
  union {
    QueryDenomsMetadataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomsMetadataResponseDefaultTypeInternal _QueryDenomsMetadataResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomMetadataRequest::QueryDenomMetadataRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryDenomMetadataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomMetadataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomMetadataRequestDefaultTypeInternal() {}
  union {
    QueryDenomMetadataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomMetadataRequestDefaultTypeInternal _QueryDenomMetadataRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomMetadataResponse::QueryDenomMetadataResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr} {}
struct QueryDenomMetadataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomMetadataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomMetadataResponseDefaultTypeInternal() {}
  union {
    QueryDenomMetadataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomMetadataResponseDefaultTypeInternal _QueryDenomMetadataResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomOwnersRequest::QueryDenomOwnersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryDenomOwnersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomOwnersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomOwnersRequestDefaultTypeInternal() {}
  union {
    QueryDenomOwnersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomOwnersRequestDefaultTypeInternal _QueryDenomOwnersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DenomOwner::DenomOwner(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.balance_)*/nullptr} {}
struct DenomOwnerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenomOwnerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenomOwnerDefaultTypeInternal() {}
  union {
    DenomOwner _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenomOwnerDefaultTypeInternal _DenomOwner_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryDenomOwnersResponse::QueryDenomOwnersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.denom_owners_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryDenomOwnersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryDenomOwnersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryDenomOwnersResponseDefaultTypeInternal() {}
  union {
    QueryDenomOwnersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryDenomOwnersResponseDefaultTypeInternal _QueryDenomOwnersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySendEnabledRequest::QuerySendEnabledRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.denoms_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QuerySendEnabledRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySendEnabledRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySendEnabledRequestDefaultTypeInternal() {}
  union {
    QuerySendEnabledRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySendEnabledRequestDefaultTypeInternal _QuerySendEnabledRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySendEnabledResponse::QuerySendEnabledResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.send_enabled_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QuerySendEnabledResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySendEnabledResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySendEnabledResponseDefaultTypeInternal() {}
  union {
    QuerySendEnabledResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySendEnabledResponseDefaultTypeInternal _QuerySendEnabledResponse_default_instance_;
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[23];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbank_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbank_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryBalanceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryBalanceRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryBalanceRequest, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryBalanceResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryBalanceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryBalanceResponse, _impl_.balance_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryAllBalancesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryAllBalancesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryAllBalancesRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryAllBalancesRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryAllBalancesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryAllBalancesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryAllBalancesResponse, _impl_.balances_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryAllBalancesResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalancesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalancesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalancesResponse, _impl_.balances_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalancesResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse, _impl_.balance_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryTotalSupplyRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryTotalSupplyRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryTotalSupplyRequest, _impl_.pagination_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryTotalSupplyResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryTotalSupplyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryTotalSupplyResponse, _impl_.supply_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryTotalSupplyResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySupplyOfRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySupplyOfRequest, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySupplyOfResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySupplyOfResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySupplyOfResponse, _impl_.amount_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryParamsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryParamsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryParamsResponse, _impl_.params_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, _impl_.pagination_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomsMetadataResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomsMetadataResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomsMetadataResponse, _impl_.metadatas_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomsMetadataResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomMetadataRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomMetadataRequest, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomMetadataResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomMetadataResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomMetadataResponse, _impl_.metadata_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomOwnersRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomOwnersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomOwnersRequest, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomOwnersRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::DenomOwner, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::DenomOwner, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::DenomOwner, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::DenomOwner, _impl_.balance_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomOwnersResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomOwnersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomOwnersResponse, _impl_.denom_owners_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QueryDenomOwnersResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySendEnabledRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySendEnabledRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySendEnabledRequest, _impl_.denoms_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySendEnabledRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySendEnabledResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySendEnabledResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySendEnabledResponse, _impl_.send_enabled_),
    PROTOBUF_FIELD_OFFSET(::cosmos::bank::v1beta1::QuerySendEnabledResponse, _impl_.pagination_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::bank::v1beta1::QueryBalanceRequest)},
        { 10, 19, -1, sizeof(::cosmos::bank::v1beta1::QueryBalanceResponse)},
        { 20, 30, -1, sizeof(::cosmos::bank::v1beta1::QueryAllBalancesRequest)},
        { 32, 42, -1, sizeof(::cosmos::bank::v1beta1::QueryAllBalancesResponse)},
        { 44, 54, -1, sizeof(::cosmos::bank::v1beta1::QuerySpendableBalancesRequest)},
        { 56, 66, -1, sizeof(::cosmos::bank::v1beta1::QuerySpendableBalancesResponse)},
        { 68, -1, -1, sizeof(::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest)},
        { 78, 87, -1, sizeof(::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse)},
        { 88, 97, -1, sizeof(::cosmos::bank::v1beta1::QueryTotalSupplyRequest)},
        { 98, 108, -1, sizeof(::cosmos::bank::v1beta1::QueryTotalSupplyResponse)},
        { 110, -1, -1, sizeof(::cosmos::bank::v1beta1::QuerySupplyOfRequest)},
        { 119, 128, -1, sizeof(::cosmos::bank::v1beta1::QuerySupplyOfResponse)},
        { 129, -1, -1, sizeof(::cosmos::bank::v1beta1::QueryParamsRequest)},
        { 137, 146, -1, sizeof(::cosmos::bank::v1beta1::QueryParamsResponse)},
        { 147, 156, -1, sizeof(::cosmos::bank::v1beta1::QueryDenomsMetadataRequest)},
        { 157, 167, -1, sizeof(::cosmos::bank::v1beta1::QueryDenomsMetadataResponse)},
        { 169, -1, -1, sizeof(::cosmos::bank::v1beta1::QueryDenomMetadataRequest)},
        { 178, 187, -1, sizeof(::cosmos::bank::v1beta1::QueryDenomMetadataResponse)},
        { 188, 198, -1, sizeof(::cosmos::bank::v1beta1::QueryDenomOwnersRequest)},
        { 200, 210, -1, sizeof(::cosmos::bank::v1beta1::DenomOwner)},
        { 212, 222, -1, sizeof(::cosmos::bank::v1beta1::QueryDenomOwnersResponse)},
        { 224, 234, -1, sizeof(::cosmos::bank::v1beta1::QuerySendEnabledRequest)},
        { 236, 246, -1, sizeof(::cosmos::bank::v1beta1::QuerySendEnabledResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::bank::v1beta1::_QueryBalanceRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryBalanceResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryAllBalancesRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryAllBalancesResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QuerySpendableBalancesRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QuerySpendableBalancesResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QuerySpendableBalanceByDenomRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QuerySpendableBalanceByDenomResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryTotalSupplyRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryTotalSupplyResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QuerySupplyOfRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QuerySupplyOfResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryParamsRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryParamsResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryDenomsMetadataRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryDenomsMetadataResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryDenomMetadataRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryDenomMetadataResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryDenomOwnersRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_DenomOwner_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QueryDenomOwnersResponse_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QuerySendEnabledRequest_default_instance_._instance,
    &::cosmos::bank::v1beta1::_QuerySendEnabledResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbank_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037cosmos/bank/v1beta1/query.proto\022\023cosmo"
    "s.bank.v1beta1\032*cosmos/base/query/v1beta"
    "1/pagination.proto\032\024gogoproto/gogo.proto"
    "\032\034google/api/annotations.proto\032\036cosmos/b"
    "ase/v1beta1/coin.proto\032\036cosmos/bank/v1be"
    "ta1/bank.proto\032\031cosmos_proto/cosmos.prot"
    "o\032\033cosmos/query/v1/query.proto\032\021amino/am"
    "ino.proto\"i\n\023QueryBalanceRequest\0222\n\007addr"
    "ess\030\001 \001(\tB\030\322\264-\024cosmos.AddressStringR\007add"
    "ress\022\024\n\005denom\030\002 \001(\tR\005denom:\010\210\240\037\000\350\240\037\000\"K\n\024"
    "QueryBalanceResponse\0223\n\007balance\030\001 \001(\0132\031."
    "cosmos.base.v1beta1.CoinR\007balance\"\237\001\n\027Qu"
    "eryAllBalancesRequest\0222\n\007address\030\001 \001(\tB\030"
    "\322\264-\024cosmos.AddressStringR\007address\022F\n\npag"
    "ination\030\002 \001(\0132&.cosmos.base.query.v1beta"
    "1.PageRequestR\npagination:\010\210\240\037\000\350\240\037\000\"\321\001\n\030"
    "QueryAllBalancesResponse\022l\n\010balances\030\001 \003"
    "(\0132\031.cosmos.base.v1beta1.CoinB5\310\336\037\000\252\337\037(g"
    "ithub.com/cosmos/cosmos-sdk/types.Coins\250"
    "\347\260*\001R\010balances\022G\n\npagination\030\002 \001(\0132\'.cos"
    "mos.base.query.v1beta1.PageResponseR\npag"
    "ination\"\245\001\n\035QuerySpendableBalancesReques"
    "t\0222\n\007address\030\001 \001(\tB\030\322\264-\024cosmos.AddressSt"
    "ringR\007address\022F\n\npagination\030\002 \001(\0132&.cosm"
    "os.base.query.v1beta1.PageRequestR\npagin"
    "ation:\010\210\240\037\000\350\240\037\000\"\327\001\n\036QuerySpendableBalanc"
    "esResponse\022l\n\010balances\030\001 \003(\0132\031.cosmos.ba"
    "se.v1beta1.CoinB5\310\336\037\000\252\337\037(github.com/cosm"
    "os/cosmos-sdk/types.Coins\250\347\260*\001R\010balances"
    "\022G\n\npagination\030\002 \001(\0132\'.cosmos.base.query"
    ".v1beta1.PageResponseR\npagination\"y\n#Que"
    "rySpendableBalanceByDenomRequest\0222\n\007addr"
    "ess\030\001 \001(\tB\030\322\264-\024cosmos.AddressStringR\007add"
    "ress\022\024\n\005denom\030\002 \001(\tR\005denom:\010\210\240\037\000\350\240\037\000\"[\n$"
    "QuerySpendableBalanceByDenomResponse\0223\n\007"
    "balance\030\001 \001(\0132\031.cosmos.base.v1beta1.Coin"
    "R\007balance\"k\n\027QueryTotalSupplyRequest\022F\n\n"
    "pagination\030\001 \001(\0132&.cosmos.base.query.v1b"
    "eta1.PageRequestR\npagination:\010\210\240\037\000\350\240\037\000\"\315"
    "\001\n\030QueryTotalSupplyResponse\022h\n\006supply\030\001 "
    "\003(\0132\031.cosmos.base.v1beta1.CoinB5\310\336\037\000\252\337\037("
    "github.com/cosmos/cosmos-sdk/types.Coins"
    "\250\347\260*\001R\006supply\022G\n\npagination\030\002 \001(\0132\'.cosm"
    "os.base.query.v1beta1.PageResponseR\npagi"
    "nation\",\n\024QuerySupplyOfRequest\022\024\n\005denom\030"
    "\001 \001(\tR\005denom\"U\n\025QuerySupplyOfResponse\022<\n"
    "\006amount\030\001 \001(\0132\031.cosmos.base.v1beta1.Coin"
    "B\t\310\336\037\000\250\347\260*\001R\006amount\"\024\n\022QueryParamsReques"
    "t\"U\n\023QueryParamsResponse\022>\n\006params\030\001 \001(\013"
    "2\033.cosmos.bank.v1beta1.ParamsB\t\310\336\037\000\250\347\260*\001"
    "R\006params\"d\n\032QueryDenomsMetadataRequest\022F"
    "\n\npagination\030\001 \001(\0132&.cosmos.base.query.v"
    "1beta1.PageRequestR\npagination\"\256\001\n\033Query"
    "DenomsMetadataResponse\022F\n\tmetadatas\030\001 \003("
    "\0132\035.cosmos.bank.v1beta1.MetadataB\t\310\336\037\000\250\347"
    "\260*\001R\tmetadatas\022G\n\npagination\030\002 \001(\0132\'.cos"
    "mos.base.query.v1beta1.PageResponseR\npag"
    "ination\"1\n\031QueryDenomMetadataRequest\022\024\n\005"
    "denom\030\001 \001(\tR\005denom\"b\n\032QueryDenomMetadata"
    "Response\022D\n\010metadata\030\001 \001(\0132\035.cosmos.bank"
    ".v1beta1.MetadataB\t\310\336\037\000\250\347\260*\001R\010metadata\"w"
    "\n\027QueryDenomOwnersRequest\022\024\n\005denom\030\001 \001(\t"
    "R\005denom\022F\n\npagination\030\002 \001(\0132&.cosmos.bas"
    "e.query.v1beta1.PageRequestR\npagination\""
    "\200\001\n\nDenomOwner\0222\n\007address\030\001 \001(\tB\030\322\264-\024cos"
    "mos.AddressStringR\007address\022>\n\007balance\030\002 "
    "\001(\0132\031.cosmos.base.v1beta1.CoinB\t\310\336\037\000\250\347\260*"
    "\001R\007balance\"\247\001\n\030QueryDenomOwnersResponse\022"
    "B\n\014denom_owners\030\001 \003(\0132\037.cosmos.bank.v1be"
    "ta1.DenomOwnerR\013denomOwners\022G\n\npaginatio"
    "n\030\002 \001(\0132\'.cosmos.base.query.v1beta1.Page"
    "ResponseR\npagination\"y\n\027QuerySendEnabled"
    "Request\022\026\n\006denoms\030\001 \003(\tR\006denoms\022F\n\npagin"
    "ation\030c \001(\0132&.cosmos.base.query.v1beta1."
    "PageRequestR\npagination\"\250\001\n\030QuerySendEna"
    "bledResponse\022C\n\014send_enabled\030\001 \003(\0132 .cos"
    "mos.bank.v1beta1.SendEnabledR\013sendEnable"
    "d\022G\n\npagination\030c \001(\0132\'.cosmos.base.quer"
    "y.v1beta1.PageResponseR\npagination2\262\016\n\005Q"
    "uery\022\235\001\n\007Balance\022(.cosmos.bank.v1beta1.Q"
    "ueryBalanceRequest\032).cosmos.bank.v1beta1"
    ".QueryBalanceResponse\"=\210\347\260*\001\202\323\344\223\0022\0220/cos"
    "mos/bank/v1beta1/balances/{address}/by_d"
    "enom\022\240\001\n\013AllBalances\022,.cosmos.bank.v1bet"
    "a1.QueryAllBalancesRequest\032-.cosmos.bank"
    ".v1beta1.QueryAllBalancesResponse\"4\210\347\260*\001"
    "\202\323\344\223\002)\022\'/cosmos/bank/v1beta1/balances/{a"
    "ddress}\022\274\001\n\021SpendableBalances\0222.cosmos.b"
    "ank.v1beta1.QuerySpendableBalancesReques"
    "t\0323.cosmos.bank.v1beta1.QuerySpendableBa"
    "lancesResponse\">\210\347\260*\001\202\323\344\223\0023\0221/cosmos/ban"
    "k/v1beta1/spendable_balances/{address}\022\327"
    "\001\n\027SpendableBalanceByDenom\0228.cosmos.bank"
    ".v1beta1.QuerySpendableBalanceByDenomReq"
    "uest\0329.cosmos.bank.v1beta1.QuerySpendabl"
    "eBalanceByDenomResponse\"G\210\347\260*\001\202\323\344\223\002<\022:/c"
    "osmos/bank/v1beta1/spendable_balances/{a"
    "ddress}/by_denom\022\224\001\n\013TotalSupply\022,.cosmo"
    "s.bank.v1beta1.QueryTotalSupplyRequest\032-"
    ".cosmos.bank.v1beta1.QueryTotalSupplyRes"
    "ponse\"(\210\347\260*\001\202\323\344\223\002\035\022\033/cosmos/bank/v1beta1"
    "/supply\022\224\001\n\010SupplyOf\022).cosmos.bank.v1bet"
    "a1.QuerySupplyOfRequest\032*.cosmos.bank.v1"
    "beta1.QuerySupplyOfResponse\"1\210\347\260*\001\202\323\344\223\002&"
    "\022$/cosmos/bank/v1beta1/supply/by_denom\022\205"
    "\001\n\006Params\022\'.cosmos.bank.v1beta1.QueryPar"
    "amsRequest\032(.cosmos.bank.v1beta1.QueryPa"
    "ramsResponse\"(\210\347\260*\001\202\323\344\223\002\035\022\033/cosmos/bank/"
    "v1beta1/params\022\253\001\n\rDenomMetadata\022..cosmo"
    "s.bank.v1beta1.QueryDenomMetadataRequest"
    "\032/.cosmos.bank.v1beta1.QueryDenomMetadat"
    "aResponse\"9\210\347\260*\001\202\323\344\223\002.\022,/cosmos/bank/v1b"
    "eta1/denoms_metadata/{denom}\022\246\001\n\016DenomsM"
    "etadata\022/.cosmos.bank.v1beta1.QueryDenom"
    "sMetadataRequest\0320.cosmos.bank.v1beta1.Q"
    "ueryDenomsMetadataResponse\"1\210\347\260*\001\202\323\344\223\002&\022"
    "$/cosmos/bank/v1beta1/denoms_metadata\022\242\001"
    "\n\013DenomOwners\022,.cosmos.bank.v1beta1.Quer"
    "yDenomOwnersRequest\032-.cosmos.bank.v1beta"
    "1.QueryDenomOwnersResponse\"6\210\347\260*\001\202\323\344\223\002+\022"
    ")/cosmos/bank/v1beta1/denom_owners/{deno"
    "m}\022\232\001\n\013SendEnabled\022,.cosmos.bank.v1beta1"
    ".QuerySendEnabledRequest\032-.cosmos.bank.v"
    "1beta1.QuerySendEnabledResponse\".\210\347\260*\001\202\323"
    "\344\223\002#\022!/cosmos/bank/v1beta1/send_enabledB"
    "\276\001\n\027com.cosmos.bank.v1beta1B\nQueryProtoP"
    "\001Z)github.com/cosmos/cosmos-sdk/x/bank/t"
    "ypes\242\002\003CBX\252\002\023Cosmos.Bank.V1beta1\312\002\023Cosmo"
    "s\\Bank\\V1beta1\342\002\037Cosmos\\Bank\\V1beta1\\GPB"
    "Metadata\352\002\025Cosmos::Bank::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_deps[8] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbank_2fv1beta1_2fbank_2eproto,
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_2fquery_2fv1_2fquery_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    5200,
    descriptor_table_protodef_cosmos_2fbank_2fv1beta1_2fquery_2eproto,
    "cosmos/bank/v1beta1/query.proto",
    &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_deps,
    8,
    23,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_cosmos_2fbank_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_cosmos_2fbank_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fbank_2fv1beta1_2fquery_2eproto(&descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto);
namespace cosmos {
namespace bank {
namespace v1beta1 {
// ===================================================================

class QueryBalanceRequest::_Internal {
 public:
};

QueryBalanceRequest::QueryBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryBalanceRequest)
}
QueryBalanceRequest::QueryBalanceRequest(const QueryBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBalanceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryBalanceRequest)
}

inline void QueryBalanceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryBalanceRequest::~QueryBalanceRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryBalanceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBalanceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.denom_.Destroy();
}

void QueryBalanceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryBalanceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBalanceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QueryBalanceRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 2 [json_name = "denom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QueryBalanceRequest.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBalanceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryBalanceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QueryBalanceRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QueryBalanceRequest.denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryBalanceRequest)
  return target;
}

::size_t QueryBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryBalanceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBalanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBalanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBalanceRequest::GetClassData() const { return &_class_data_; }


void QueryBalanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBalanceRequest*>(&to_msg);
  auto& from = static_cast<const QueryBalanceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryBalanceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBalanceRequest::CopyFrom(const QueryBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceRequest::IsInitialized() const {
  return true;
}

void QueryBalanceRequest::InternalSwap(QueryBalanceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBalanceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryBalanceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryBalanceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryBalanceResponse, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& balance(const QueryBalanceResponse* msg);
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
QueryBalanceResponse::_Internal::balance(const QueryBalanceResponse* msg) {
  return *msg->_impl_.balance_;
}
void QueryBalanceResponse::clear_balance() {
  if (_impl_.balance_ != nullptr) _impl_.balance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryBalanceResponse::QueryBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryBalanceResponse)
}
QueryBalanceResponse::QueryBalanceResponse(const QueryBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryBalanceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.balance_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.balance_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryBalanceResponse)
}

inline void QueryBalanceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balance_){nullptr}
  };
}

QueryBalanceResponse::~QueryBalanceResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryBalanceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryBalanceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.balance_;
}

void QueryBalanceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryBalanceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.balance_ != nullptr);
    _impl_.balance_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryBalanceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_balance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryBalanceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryBalanceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::balance(this),
        _Internal::balance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryBalanceResponse)
  return target;
}

::size_t QueryBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryBalanceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.balance_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryBalanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryBalanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryBalanceResponse::GetClassData() const { return &_class_data_; }


void QueryBalanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryBalanceResponse*>(&to_msg);
  auto& from = static_cast<const QueryBalanceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryBalanceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_balance()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryBalanceResponse::CopyFrom(const QueryBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryBalanceResponse::IsInitialized() const {
  return true;
}

void QueryBalanceResponse::InternalSwap(QueryBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.balance_, other->_impl_.balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryBalanceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryAllBalancesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAllBalancesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAllBalancesRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryAllBalancesRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryAllBalancesRequest::_Internal::pagination(const QueryAllBalancesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryAllBalancesRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllBalancesRequest::QueryAllBalancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryAllBalancesRequest)
}
QueryAllBalancesRequest::QueryAllBalancesRequest(const QueryAllBalancesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAllBalancesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryAllBalancesRequest)
}

inline void QueryAllBalancesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryAllBalancesRequest::~QueryAllBalancesRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryAllBalancesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAllBalancesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryAllBalancesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAllBalancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryAllBalancesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAllBalancesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QueryAllBalancesRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAllBalancesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryAllBalancesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QueryAllBalancesRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryAllBalancesRequest)
  return target;
}

::size_t QueryAllBalancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryAllBalancesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAllBalancesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAllBalancesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAllBalancesRequest::GetClassData() const { return &_class_data_; }


void QueryAllBalancesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAllBalancesRequest*>(&to_msg);
  auto& from = static_cast<const QueryAllBalancesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryAllBalancesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllBalancesRequest::CopyFrom(const QueryAllBalancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryAllBalancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllBalancesRequest::IsInitialized() const {
  return true;
}

void QueryAllBalancesRequest::InternalSwap(QueryAllBalancesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllBalancesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryAllBalancesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAllBalancesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAllBalancesResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryAllBalancesResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryAllBalancesResponse::_Internal::pagination(const QueryAllBalancesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryAllBalancesResponse::clear_balances() {
  _internal_mutable_balances()->Clear();
}
void QueryAllBalancesResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllBalancesResponse::QueryAllBalancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryAllBalancesResponse)
}
QueryAllBalancesResponse::QueryAllBalancesResponse(const QueryAllBalancesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAllBalancesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balances_){from._impl_.balances_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryAllBalancesResponse)
}

inline void QueryAllBalancesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balances_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryAllBalancesResponse::~QueryAllBalancesResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryAllBalancesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAllBalancesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_balances()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryAllBalancesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAllBalancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryAllBalancesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_balances()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAllBalancesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAllBalancesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryAllBalancesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_balances_size()); i < n; i++) {
    const auto& repfield = this->_internal_balances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryAllBalancesResponse)
  return target;
}

::size_t QueryAllBalancesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryAllBalancesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_balances_size();
  for (const auto& msg : this->_internal_balances()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAllBalancesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAllBalancesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAllBalancesResponse::GetClassData() const { return &_class_data_; }


void QueryAllBalancesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAllBalancesResponse*>(&to_msg);
  auto& from = static_cast<const QueryAllBalancesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryAllBalancesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_balances()->MergeFrom(from._internal_balances());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllBalancesResponse::CopyFrom(const QueryAllBalancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryAllBalancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllBalancesResponse::IsInitialized() const {
  return true;
}

void QueryAllBalancesResponse::InternalSwap(QueryAllBalancesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_balances()->InternalSwap(other->_internal_mutable_balances());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllBalancesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[3]);
}
// ===================================================================

class QuerySpendableBalancesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySpendableBalancesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySpendableBalancesRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QuerySpendableBalancesRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QuerySpendableBalancesRequest::_Internal::pagination(const QuerySpendableBalancesRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QuerySpendableBalancesRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySpendableBalancesRequest::QuerySpendableBalancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
}
QuerySpendableBalancesRequest::QuerySpendableBalancesRequest(const QuerySpendableBalancesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpendableBalancesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
}

inline void QuerySpendableBalancesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpendableBalancesRequest::~QuerySpendableBalancesRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpendableBalancesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QuerySpendableBalancesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpendableBalancesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpendableBalancesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QuerySpendableBalancesRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpendableBalancesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QuerySpendableBalancesRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
  return target;
}

::size_t QuerySpendableBalancesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpendableBalancesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpendableBalancesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpendableBalancesRequest::GetClassData() const { return &_class_data_; }


void QuerySpendableBalancesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpendableBalancesRequest*>(&to_msg);
  auto& from = static_cast<const QuerySpendableBalancesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpendableBalancesRequest::CopyFrom(const QuerySpendableBalancesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpendableBalancesRequest::IsInitialized() const {
  return true;
}

void QuerySpendableBalancesRequest::InternalSwap(QuerySpendableBalancesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpendableBalancesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[4]);
}
// ===================================================================

class QuerySpendableBalancesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySpendableBalancesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySpendableBalancesResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QuerySpendableBalancesResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QuerySpendableBalancesResponse::_Internal::pagination(const QuerySpendableBalancesResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QuerySpendableBalancesResponse::clear_balances() {
  _internal_mutable_balances()->Clear();
}
void QuerySpendableBalancesResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySpendableBalancesResponse::QuerySpendableBalancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
}
QuerySpendableBalancesResponse::QuerySpendableBalancesResponse(const QuerySpendableBalancesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpendableBalancesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balances_){from._impl_.balances_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
}

inline void QuerySpendableBalancesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balances_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QuerySpendableBalancesResponse::~QuerySpendableBalancesResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpendableBalancesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_balances()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QuerySpendableBalancesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpendableBalancesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_balances()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpendableBalancesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpendableBalancesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_balances_size()); i < n; i++) {
    const auto& repfield = this->_internal_balances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
  return target;
}

::size_t QuerySpendableBalancesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_balances_size();
  for (const auto& msg : this->_internal_balances()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpendableBalancesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpendableBalancesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpendableBalancesResponse::GetClassData() const { return &_class_data_; }


void QuerySpendableBalancesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpendableBalancesResponse*>(&to_msg);
  auto& from = static_cast<const QuerySpendableBalancesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_balances()->MergeFrom(from._internal_balances());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpendableBalancesResponse::CopyFrom(const QuerySpendableBalancesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpendableBalancesResponse::IsInitialized() const {
  return true;
}

void QuerySpendableBalancesResponse::InternalSwap(QuerySpendableBalancesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_balances()->InternalSwap(other->_internal_mutable_balances());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpendableBalancesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[5]);
}
// ===================================================================

class QuerySpendableBalanceByDenomRequest::_Internal {
 public:
};

QuerySpendableBalanceByDenomRequest::QuerySpendableBalanceByDenomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
}
QuerySpendableBalanceByDenomRequest::QuerySpendableBalanceByDenomRequest(const QuerySpendableBalanceByDenomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpendableBalanceByDenomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
}

inline void QuerySpendableBalanceByDenomRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySpendableBalanceByDenomRequest::~QuerySpendableBalanceByDenomRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpendableBalanceByDenomRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.denom_.Destroy();
}

void QuerySpendableBalanceByDenomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpendableBalanceByDenomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpendableBalanceByDenomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 2 [json_name = "denom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpendableBalanceByDenomRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
  return target;
}

::size_t QuerySpendableBalanceByDenomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpendableBalanceByDenomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpendableBalanceByDenomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpendableBalanceByDenomRequest::GetClassData() const { return &_class_data_; }


void QuerySpendableBalanceByDenomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpendableBalanceByDenomRequest*>(&to_msg);
  auto& from = static_cast<const QuerySpendableBalanceByDenomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpendableBalanceByDenomRequest::CopyFrom(const QuerySpendableBalanceByDenomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpendableBalanceByDenomRequest::IsInitialized() const {
  return true;
}

void QuerySpendableBalanceByDenomRequest::InternalSwap(QuerySpendableBalanceByDenomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpendableBalanceByDenomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[6]);
}
// ===================================================================

class QuerySpendableBalanceByDenomResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySpendableBalanceByDenomResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySpendableBalanceByDenomResponse, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& balance(const QuerySpendableBalanceByDenomResponse* msg);
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
QuerySpendableBalanceByDenomResponse::_Internal::balance(const QuerySpendableBalanceByDenomResponse* msg) {
  return *msg->_impl_.balance_;
}
void QuerySpendableBalanceByDenomResponse::clear_balance() {
  if (_impl_.balance_ != nullptr) _impl_.balance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySpendableBalanceByDenomResponse::QuerySpendableBalanceByDenomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
}
QuerySpendableBalanceByDenomResponse::QuerySpendableBalanceByDenomResponse(const QuerySpendableBalanceByDenomResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySpendableBalanceByDenomResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.balance_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.balance_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
}

inline void QuerySpendableBalanceByDenomResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balance_){nullptr}
  };
}

QuerySpendableBalanceByDenomResponse::~QuerySpendableBalanceByDenomResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySpendableBalanceByDenomResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.balance_;
}

void QuerySpendableBalanceByDenomResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySpendableBalanceByDenomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.balance_ != nullptr);
    _impl_.balance_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySpendableBalanceByDenomResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_balance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySpendableBalanceByDenomResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::balance(this),
        _Internal::balance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
  return target;
}

::size_t QuerySpendableBalanceByDenomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.balance_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySpendableBalanceByDenomResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySpendableBalanceByDenomResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySpendableBalanceByDenomResponse::GetClassData() const { return &_class_data_; }


void QuerySpendableBalanceByDenomResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySpendableBalanceByDenomResponse*>(&to_msg);
  auto& from = static_cast<const QuerySpendableBalanceByDenomResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_balance()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySpendableBalanceByDenomResponse::CopyFrom(const QuerySpendableBalanceByDenomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySpendableBalanceByDenomResponse::IsInitialized() const {
  return true;
}

void QuerySpendableBalanceByDenomResponse::InternalSwap(QuerySpendableBalanceByDenomResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.balance_, other->_impl_.balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySpendableBalanceByDenomResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[7]);
}
// ===================================================================

class QueryTotalSupplyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryTotalSupplyRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryTotalSupplyRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryTotalSupplyRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryTotalSupplyRequest::_Internal::pagination(const QueryTotalSupplyRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryTotalSupplyRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryTotalSupplyRequest::QueryTotalSupplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
}
QueryTotalSupplyRequest::QueryTotalSupplyRequest(const QueryTotalSupplyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTotalSupplyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
}

inline void QueryTotalSupplyRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryTotalSupplyRequest::~QueryTotalSupplyRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTotalSupplyRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryTotalSupplyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTotalSupplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTotalSupplyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTotalSupplyRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
  return target;
}

::size_t QueryTotalSupplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTotalSupplyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTotalSupplyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTotalSupplyRequest::GetClassData() const { return &_class_data_; }


void QueryTotalSupplyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTotalSupplyRequest*>(&to_msg);
  auto& from = static_cast<const QueryTotalSupplyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTotalSupplyRequest::CopyFrom(const QueryTotalSupplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTotalSupplyRequest::IsInitialized() const {
  return true;
}

void QueryTotalSupplyRequest::InternalSwap(QueryTotalSupplyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTotalSupplyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryTotalSupplyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryTotalSupplyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryTotalSupplyResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryTotalSupplyResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryTotalSupplyResponse::_Internal::pagination(const QueryTotalSupplyResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryTotalSupplyResponse::clear_supply() {
  _internal_mutable_supply()->Clear();
}
void QueryTotalSupplyResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryTotalSupplyResponse::QueryTotalSupplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
}
QueryTotalSupplyResponse::QueryTotalSupplyResponse(const QueryTotalSupplyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTotalSupplyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.supply_){from._impl_.supply_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
}

inline void QueryTotalSupplyResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.supply_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryTotalSupplyResponse::~QueryTotalSupplyResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTotalSupplyResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_supply()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryTotalSupplyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTotalSupplyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_supply()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTotalSupplyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin supply = 1 [json_name = "supply", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTotalSupplyResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin supply = 1 [json_name = "supply", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_supply_size()); i < n; i++) {
    const auto& repfield = this->_internal_supply(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
  return target;
}

::size_t QueryTotalSupplyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin supply = 1 [json_name = "supply", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_supply_size();
  for (const auto& msg : this->_internal_supply()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTotalSupplyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTotalSupplyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTotalSupplyResponse::GetClassData() const { return &_class_data_; }


void QueryTotalSupplyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTotalSupplyResponse*>(&to_msg);
  auto& from = static_cast<const QueryTotalSupplyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_supply()->MergeFrom(from._internal_supply());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTotalSupplyResponse::CopyFrom(const QueryTotalSupplyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTotalSupplyResponse::IsInitialized() const {
  return true;
}

void QueryTotalSupplyResponse::InternalSwap(QueryTotalSupplyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_supply()->InternalSwap(other->_internal_mutable_supply());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTotalSupplyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[9]);
}
// ===================================================================

class QuerySupplyOfRequest::_Internal {
 public:
};

QuerySupplyOfRequest::QuerySupplyOfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QuerySupplyOfRequest)
}
QuerySupplyOfRequest::QuerySupplyOfRequest(const QuerySupplyOfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySupplyOfRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QuerySupplyOfRequest)
}

inline void QuerySupplyOfRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySupplyOfRequest::~QuerySupplyOfRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QuerySupplyOfRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySupplyOfRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
}

void QuerySupplyOfRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySupplyOfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QuerySupplyOfRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySupplyOfRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QuerySupplyOfRequest.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySupplyOfRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QuerySupplyOfRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QuerySupplyOfRequest.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QuerySupplyOfRequest)
  return target;
}

::size_t QuerySupplyOfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QuerySupplyOfRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySupplyOfRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySupplyOfRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySupplyOfRequest::GetClassData() const { return &_class_data_; }


void QuerySupplyOfRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySupplyOfRequest*>(&to_msg);
  auto& from = static_cast<const QuerySupplyOfRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QuerySupplyOfRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySupplyOfRequest::CopyFrom(const QuerySupplyOfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QuerySupplyOfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySupplyOfRequest::IsInitialized() const {
  return true;
}

void QuerySupplyOfRequest::InternalSwap(QuerySupplyOfRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySupplyOfRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[10]);
}
// ===================================================================

class QuerySupplyOfResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySupplyOfResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySupplyOfResponse, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& amount(const QuerySupplyOfResponse* msg);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
QuerySupplyOfResponse::_Internal::amount(const QuerySupplyOfResponse* msg) {
  return *msg->_impl_.amount_;
}
void QuerySupplyOfResponse::clear_amount() {
  if (_impl_.amount_ != nullptr) _impl_.amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySupplyOfResponse::QuerySupplyOfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QuerySupplyOfResponse)
}
QuerySupplyOfResponse::QuerySupplyOfResponse(const QuerySupplyOfResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySupplyOfResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.amount_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.amount_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QuerySupplyOfResponse)
}

inline void QuerySupplyOfResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.amount_){nullptr}
  };
}

QuerySupplyOfResponse::~QuerySupplyOfResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QuerySupplyOfResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySupplyOfResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.amount_;
}

void QuerySupplyOfResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySupplyOfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QuerySupplyOfResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.amount_ != nullptr);
    _impl_.amount_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySupplyOfResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySupplyOfResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QuerySupplyOfResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::amount(this),
        _Internal::amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QuerySupplyOfResponse)
  return target;
}

::size_t QuerySupplyOfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QuerySupplyOfResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amount_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySupplyOfResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySupplyOfResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySupplyOfResponse::GetClassData() const { return &_class_data_; }


void QuerySupplyOfResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySupplyOfResponse*>(&to_msg);
  auto& from = static_cast<const QuerySupplyOfResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QuerySupplyOfResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySupplyOfResponse::CopyFrom(const QuerySupplyOfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QuerySupplyOfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySupplyOfResponse::IsInitialized() const {
  return true;
}

void QuerySupplyOfResponse::InternalSwap(QuerySupplyOfResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.amount_, other->_impl_.amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySupplyOfResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryParamsRequest::_Internal {
 public:
};

QueryParamsRequest::QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryParamsRequest)
}
QueryParamsRequest::QueryParamsRequest(const QueryParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryParamsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryParamsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryParamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryParamsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryParamsResponse, _impl_._has_bits_);
  static const ::cosmos::bank::v1beta1::Params& params(const QueryParamsResponse* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::bank::v1beta1::Params&
QueryParamsResponse::_Internal::params(const QueryParamsResponse* msg) {
  return *msg->_impl_.params_;
}
void QueryParamsResponse::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryParamsResponse::QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryParamsResponse)
}
QueryParamsResponse::QueryParamsResponse(const QueryParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParamsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::cosmos::bank::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryParamsResponse)
}

inline void QueryParamsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){nullptr}
  };
}

QueryParamsResponse::~QueryParamsResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryParamsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParamsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.params_;
}

void QueryParamsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParamsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.bank.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryParamsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.bank.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryParamsResponse)
  return target;
}

::size_t QueryParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryParamsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.bank.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParamsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsResponse::GetClassData() const { return &_class_data_; }


void QueryParamsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParamsResponse*>(&to_msg);
  auto& from = static_cast<const QueryParamsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryParamsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::cosmos::bank::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParamsResponse::CopyFrom(const QueryParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParamsResponse::IsInitialized() const {
  return true;
}

void QueryParamsResponse::InternalSwap(QueryParamsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[13]);
}
// ===================================================================

class QueryDenomsMetadataRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDenomsMetadataRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDenomsMetadataRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryDenomsMetadataRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryDenomsMetadataRequest::_Internal::pagination(const QueryDenomsMetadataRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryDenomsMetadataRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDenomsMetadataRequest::QueryDenomsMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
}
QueryDenomsMetadataRequest::QueryDenomsMetadataRequest(const QueryDenomsMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomsMetadataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
}

inline void QueryDenomsMetadataRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryDenomsMetadataRequest::~QueryDenomsMetadataRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomsMetadataRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryDenomsMetadataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomsMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomsMetadataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomsMetadataRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
  return target;
}

::size_t QueryDenomsMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomsMetadataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomsMetadataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomsMetadataRequest::GetClassData() const { return &_class_data_; }


void QueryDenomsMetadataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomsMetadataRequest*>(&to_msg);
  auto& from = static_cast<const QueryDenomsMetadataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomsMetadataRequest::CopyFrom(const QueryDenomsMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomsMetadataRequest::IsInitialized() const {
  return true;
}

void QueryDenomsMetadataRequest::InternalSwap(QueryDenomsMetadataRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomsMetadataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[14]);
}
// ===================================================================

class QueryDenomsMetadataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDenomsMetadataResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDenomsMetadataResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryDenomsMetadataResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryDenomsMetadataResponse::_Internal::pagination(const QueryDenomsMetadataResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryDenomsMetadataResponse::clear_metadatas() {
  _internal_mutable_metadatas()->Clear();
}
void QueryDenomsMetadataResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDenomsMetadataResponse::QueryDenomsMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
}
QueryDenomsMetadataResponse::QueryDenomsMetadataResponse(const QueryDenomsMetadataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomsMetadataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadatas_){from._impl_.metadatas_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
}

inline void QueryDenomsMetadataResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadatas_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryDenomsMetadataResponse::~QueryDenomsMetadataResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomsMetadataResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_metadatas()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryDenomsMetadataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomsMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_metadatas()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomsMetadataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.bank.v1beta1.Metadata metadatas = 1 [json_name = "metadatas", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomsMetadataResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.bank.v1beta1.Metadata metadatas = 1 [json_name = "metadatas", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
  return target;
}

::size_t QueryDenomsMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.bank.v1beta1.Metadata metadatas = 1 [json_name = "metadatas", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_metadatas_size();
  for (const auto& msg : this->_internal_metadatas()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomsMetadataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomsMetadataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomsMetadataResponse::GetClassData() const { return &_class_data_; }


void QueryDenomsMetadataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomsMetadataResponse*>(&to_msg);
  auto& from = static_cast<const QueryDenomsMetadataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metadatas()->MergeFrom(from._internal_metadatas());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomsMetadataResponse::CopyFrom(const QueryDenomsMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomsMetadataResponse::IsInitialized() const {
  return true;
}

void QueryDenomsMetadataResponse::InternalSwap(QueryDenomsMetadataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_metadatas()->InternalSwap(other->_internal_mutable_metadatas());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomsMetadataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[15]);
}
// ===================================================================

class QueryDenomMetadataRequest::_Internal {
 public:
};

QueryDenomMetadataRequest::QueryDenomMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
}
QueryDenomMetadataRequest::QueryDenomMetadataRequest(const QueryDenomMetadataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomMetadataRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
}

inline void QueryDenomMetadataRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDenomMetadataRequest::~QueryDenomMetadataRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomMetadataRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
}

void QueryDenomMetadataRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomMetadataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomMetadataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QueryDenomMetadataRequest.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomMetadataRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QueryDenomMetadataRequest.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
  return target;
}

::size_t QueryDenomMetadataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomMetadataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomMetadataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomMetadataRequest::GetClassData() const { return &_class_data_; }


void QueryDenomMetadataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomMetadataRequest*>(&to_msg);
  auto& from = static_cast<const QueryDenomMetadataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomMetadataRequest::CopyFrom(const QueryDenomMetadataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomMetadataRequest::IsInitialized() const {
  return true;
}

void QueryDenomMetadataRequest::InternalSwap(QueryDenomMetadataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomMetadataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[16]);
}
// ===================================================================

class QueryDenomMetadataResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDenomMetadataResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDenomMetadataResponse, _impl_._has_bits_);
  static const ::cosmos::bank::v1beta1::Metadata& metadata(const QueryDenomMetadataResponse* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::bank::v1beta1::Metadata&
QueryDenomMetadataResponse::_Internal::metadata(const QueryDenomMetadataResponse* msg) {
  return *msg->_impl_.metadata_;
}
void QueryDenomMetadataResponse::clear_metadata() {
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDenomMetadataResponse::QueryDenomMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
}
QueryDenomMetadataResponse::QueryDenomMetadataResponse(const QueryDenomMetadataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomMetadataResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.metadata_ = new ::cosmos::bank::v1beta1::Metadata(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
}

inline void QueryDenomMetadataResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.metadata_){nullptr}
  };
}

QueryDenomMetadataResponse::~QueryDenomMetadataResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomMetadataResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void QueryDenomMetadataResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomMetadataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomMetadataResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.bank.v1beta1.Metadata metadata = 1 [json_name = "metadata", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomMetadataResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.bank.v1beta1.Metadata metadata = 1 [json_name = "metadata", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
  return target;
}

::size_t QueryDenomMetadataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.bank.v1beta1.Metadata metadata = 1 [json_name = "metadata", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomMetadataResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomMetadataResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomMetadataResponse::GetClassData() const { return &_class_data_; }


void QueryDenomMetadataResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomMetadataResponse*>(&to_msg);
  auto& from = static_cast<const QueryDenomMetadataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_metadata()->::cosmos::bank::v1beta1::Metadata::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomMetadataResponse::CopyFrom(const QueryDenomMetadataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomMetadataResponse::IsInitialized() const {
  return true;
}

void QueryDenomMetadataResponse::InternalSwap(QueryDenomMetadataResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomMetadataResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[17]);
}
// ===================================================================

class QueryDenomOwnersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDenomOwnersRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDenomOwnersRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryDenomOwnersRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryDenomOwnersRequest::_Internal::pagination(const QueryDenomOwnersRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryDenomOwnersRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDenomOwnersRequest::QueryDenomOwnersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
}
QueryDenomOwnersRequest::QueryDenomOwnersRequest(const QueryDenomOwnersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomOwnersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denom_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
}

inline void QueryDenomOwnersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denom_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryDenomOwnersRequest::~QueryDenomOwnersRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomOwnersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryDenomOwnersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomOwnersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomOwnersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QueryDenomOwnersRequest.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomOwnersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QueryDenomOwnersRequest.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
  return target;
}

::size_t QueryDenomOwnersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomOwnersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomOwnersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomOwnersRequest::GetClassData() const { return &_class_data_; }


void QueryDenomOwnersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomOwnersRequest*>(&to_msg);
  auto& from = static_cast<const QueryDenomOwnersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomOwnersRequest::CopyFrom(const QueryDenomOwnersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomOwnersRequest::IsInitialized() const {
  return true;
}

void QueryDenomOwnersRequest::InternalSwap(QueryDenomOwnersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomOwnersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[18]);
}
// ===================================================================

class DenomOwner::_Internal {
 public:
  using HasBits = decltype(std::declval<DenomOwner>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DenomOwner, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& balance(const DenomOwner* msg);
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
DenomOwner::_Internal::balance(const DenomOwner* msg) {
  return *msg->_impl_.balance_;
}
void DenomOwner::clear_balance() {
  if (_impl_.balance_ != nullptr) _impl_.balance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DenomOwner::DenomOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.DenomOwner)
}
DenomOwner::DenomOwner(const DenomOwner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DenomOwner* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.balance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.balance_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.balance_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.DenomOwner)
}

inline void DenomOwner::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.balance_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DenomOwner::~DenomOwner() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.DenomOwner)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenomOwner::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.balance_;
}

void DenomOwner::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenomOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.DenomOwner)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.balance_ != nullptr);
    _impl_.balance_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenomOwner::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.DenomOwner.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin balance = 2 [json_name = "balance", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_balance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DenomOwner::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.DenomOwner)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.DenomOwner.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin balance = 2 [json_name = "balance", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::balance(this),
        _Internal::balance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.DenomOwner)
  return target;
}

::size_t DenomOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.DenomOwner)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .cosmos.base.v1beta1.Coin balance = 2 [json_name = "balance", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.balance_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenomOwner::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DenomOwner::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenomOwner::GetClassData() const { return &_class_data_; }


void DenomOwner::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DenomOwner*>(&to_msg);
  auto& from = static_cast<const DenomOwner&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.DenomOwner)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_balance()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_balance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenomOwner::CopyFrom(const DenomOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.DenomOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenomOwner::IsInitialized() const {
  return true;
}

void DenomOwner::InternalSwap(DenomOwner* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  swap(_impl_.balance_, other->_impl_.balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenomOwner::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[19]);
}
// ===================================================================

class QueryDenomOwnersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryDenomOwnersResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryDenomOwnersResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryDenomOwnersResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryDenomOwnersResponse::_Internal::pagination(const QueryDenomOwnersResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryDenomOwnersResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryDenomOwnersResponse::QueryDenomOwnersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
}
QueryDenomOwnersResponse::QueryDenomOwnersResponse(const QueryDenomOwnersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryDenomOwnersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denom_owners_){from._impl_.denom_owners_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
}

inline void QueryDenomOwnersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denom_owners_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryDenomOwnersResponse::~QueryDenomOwnersResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryDenomOwnersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_denom_owners()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryDenomOwnersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryDenomOwnersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_denom_owners()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryDenomOwnersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.bank.v1beta1.DenomOwner denom_owners = 1 [json_name = "denomOwners"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_denom_owners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryDenomOwnersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.bank.v1beta1.DenomOwner denom_owners = 1 [json_name = "denomOwners"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_denom_owners_size()); i < n; i++) {
    const auto& repfield = this->_internal_denom_owners(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
  return target;
}

::size_t QueryDenomOwnersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.bank.v1beta1.DenomOwner denom_owners = 1 [json_name = "denomOwners"];
  total_size += 1UL * this->_internal_denom_owners_size();
  for (const auto& msg : this->_internal_denom_owners()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryDenomOwnersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryDenomOwnersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryDenomOwnersResponse::GetClassData() const { return &_class_data_; }


void QueryDenomOwnersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryDenomOwnersResponse*>(&to_msg);
  auto& from = static_cast<const QueryDenomOwnersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_denom_owners()->MergeFrom(from._internal_denom_owners());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryDenomOwnersResponse::CopyFrom(const QueryDenomOwnersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDenomOwnersResponse::IsInitialized() const {
  return true;
}

void QueryDenomOwnersResponse::InternalSwap(QueryDenomOwnersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_denom_owners()->InternalSwap(other->_internal_mutable_denom_owners());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryDenomOwnersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[20]);
}
// ===================================================================

class QuerySendEnabledRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySendEnabledRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySendEnabledRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QuerySendEnabledRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QuerySendEnabledRequest::_Internal::pagination(const QuerySendEnabledRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QuerySendEnabledRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySendEnabledRequest::QuerySendEnabledRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QuerySendEnabledRequest)
}
QuerySendEnabledRequest::QuerySendEnabledRequest(const QuerySendEnabledRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySendEnabledRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denoms_){from._impl_.denoms_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QuerySendEnabledRequest)
}

inline void QuerySendEnabledRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.denoms_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QuerySendEnabledRequest::~QuerySendEnabledRequest() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QuerySendEnabledRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySendEnabledRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_denoms()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QuerySendEnabledRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySendEnabledRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QuerySendEnabledRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_denoms()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySendEnabledRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string denoms = 1 [json_name = "denoms"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_denoms();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 99 [json_name = "pagination"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySendEnabledRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QuerySendEnabledRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string denoms = 1 [json_name = "denoms"];
  for (int i = 0, n = this->_internal_denoms_size(); i < n; ++i) {
    const auto& s = this->_internal_denoms(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 99 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QuerySendEnabledRequest)
  return target;
}

::size_t QuerySendEnabledRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QuerySendEnabledRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string denoms = 1 [json_name = "denoms"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_denoms().size());
  for (int i = 0, n = _internal_denoms().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_denoms().Get(i));
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 99 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySendEnabledRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySendEnabledRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySendEnabledRequest::GetClassData() const { return &_class_data_; }


void QuerySendEnabledRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySendEnabledRequest*>(&to_msg);
  auto& from = static_cast<const QuerySendEnabledRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QuerySendEnabledRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_denoms()->MergeFrom(from._internal_denoms());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySendEnabledRequest::CopyFrom(const QuerySendEnabledRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QuerySendEnabledRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySendEnabledRequest::IsInitialized() const {
  return true;
}

void QuerySendEnabledRequest::InternalSwap(QuerySendEnabledRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_denoms()->InternalSwap(
      other->_internal_mutable_denoms());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySendEnabledRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[21]);
}
// ===================================================================

class QuerySendEnabledResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QuerySendEnabledResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuerySendEnabledResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QuerySendEnabledResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QuerySendEnabledResponse::_Internal::pagination(const QuerySendEnabledResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QuerySendEnabledResponse::clear_send_enabled() {
  _internal_mutable_send_enabled()->Clear();
}
void QuerySendEnabledResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QuerySendEnabledResponse::QuerySendEnabledResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.bank.v1beta1.QuerySendEnabledResponse)
}
QuerySendEnabledResponse::QuerySendEnabledResponse(const QuerySendEnabledResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySendEnabledResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.send_enabled_){from._impl_.send_enabled_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.bank.v1beta1.QuerySendEnabledResponse)
}

inline void QuerySendEnabledResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.send_enabled_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QuerySendEnabledResponse::~QuerySendEnabledResponse() {
  // @@protoc_insertion_point(destructor:cosmos.bank.v1beta1.QuerySendEnabledResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySendEnabledResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_send_enabled()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QuerySendEnabledResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySendEnabledResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.bank.v1beta1.QuerySendEnabledResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_send_enabled()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySendEnabledResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_send_enabled(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 99 [json_name = "pagination"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySendEnabledResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.bank.v1beta1.QuerySendEnabledResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_send_enabled_size()); i < n; i++) {
    const auto& repfield = this->_internal_send_enabled(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 99 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.bank.v1beta1.QuerySendEnabledResponse)
  return target;
}

::size_t QuerySendEnabledResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.bank.v1beta1.QuerySendEnabledResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled"];
  total_size += 1UL * this->_internal_send_enabled_size();
  for (const auto& msg : this->_internal_send_enabled()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 99 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySendEnabledResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySendEnabledResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySendEnabledResponse::GetClassData() const { return &_class_data_; }


void QuerySendEnabledResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySendEnabledResponse*>(&to_msg);
  auto& from = static_cast<const QuerySendEnabledResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.bank.v1beta1.QuerySendEnabledResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_send_enabled()->MergeFrom(from._internal_send_enabled());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySendEnabledResponse::CopyFrom(const QuerySendEnabledResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.bank.v1beta1.QuerySendEnabledResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySendEnabledResponse::IsInitialized() const {
  return true;
}

void QuerySendEnabledResponse::InternalSwap(QuerySendEnabledResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_send_enabled()->InternalSwap(other->_internal_mutable_send_enabled());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySendEnabledResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fbank_2fv1beta1_2fquery_2eproto[22]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryBalanceRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryBalanceResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryAllBalancesRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryAllBalancesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryAllBalancesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryAllBalancesResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryAllBalancesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryAllBalancesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryTotalSupplyRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryTotalSupplyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryTotalSupplyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryTotalSupplyResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QuerySupplyOfRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QuerySupplyOfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QuerySupplyOfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QuerySupplyOfResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QuerySupplyOfResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QuerySupplyOfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryParamsRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryParamsResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryDenomMetadataRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryDenomMetadataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryDenomMetadataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryDenomMetadataResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryDenomOwnersRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryDenomOwnersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryDenomOwnersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::DenomOwner*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::DenomOwner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::DenomOwner >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QueryDenomOwnersResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QuerySendEnabledRequest*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QuerySendEnabledRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QuerySendEnabledRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::bank::v1beta1::QuerySendEnabledResponse*
Arena::CreateMaybeMessage< ::cosmos::bank::v1beta1::QuerySendEnabledResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::bank::v1beta1::QuerySendEnabledResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/bank/v1beta1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/bank/v1beta1/bank.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbank_2fv1beta1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbank_2fv1beta1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fbank_2fv1beta1_2fgenesis_2eproto;
namespace cosmos {
namespace bank {
namespace v1beta1 {
class Balance;
struct BalanceDefaultTypeInternal;
extern BalanceDefaultTypeInternal _Balance_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::bank::v1beta1::Balance* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::Balance>(Arena*);
template <>
::cosmos::bank::v1beta1::GenesisState* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::GenesisState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace bank {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalancesFieldNumber = 2,
    kSupplyFieldNumber = 3,
    kDenomMetadataFieldNumber = 4,
    kSendEnabledFieldNumber = 5,
    kParamsFieldNumber = 1,
  };
  // repeated .cosmos.bank.v1beta1.Balance balances = 2 [json_name = "balances", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int balances_size() const;
  private:
  int _internal_balances_size() const;

  public:
  void clear_balances() ;
  ::cosmos::bank::v1beta1::Balance* mutable_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Balance >*
      mutable_balances();
  private:
  const ::cosmos::bank::v1beta1::Balance& _internal_balances(int index) const;
  ::cosmos::bank::v1beta1::Balance* _internal_add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Balance>& _internal_balances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Balance>* _internal_mutable_balances();
  public:
  const ::cosmos::bank::v1beta1::Balance& balances(int index) const;
  ::cosmos::bank::v1beta1::Balance* add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Balance >&
      balances() const;
  // repeated .cosmos.base.v1beta1.Coin supply = 3 [json_name = "supply", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int supply_size() const;
  private:
  int _internal_supply_size() const;

  public:
  void clear_supply() ;
  ::cosmos::base::v1beta1::Coin* mutable_supply(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_supply();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_supply(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_supply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_supply() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_supply();
  public:
  const ::cosmos::base::v1beta1::Coin& supply(int index) const;
  ::cosmos::base::v1beta1::Coin* add_supply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      supply() const;
  // repeated .cosmos.bank.v1beta1.Metadata denom_metadata = 4 [json_name = "denomMetadata", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int denom_metadata_size() const;
  private:
  int _internal_denom_metadata_size() const;

  public:
  void clear_denom_metadata() ;
  ::cosmos::bank::v1beta1::Metadata* mutable_denom_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata >*
      mutable_denom_metadata();
  private:
  const ::cosmos::bank::v1beta1::Metadata& _internal_denom_metadata(int index) const;
  ::cosmos::bank::v1beta1::Metadata* _internal_add_denom_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Metadata>& _internal_denom_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Metadata>* _internal_mutable_denom_metadata();
  public:
  const ::cosmos::bank::v1beta1::Metadata& denom_metadata(int index) const;
  ::cosmos::bank::v1beta1::Metadata* add_denom_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata >&
      denom_metadata() const;
  // repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 5 [json_name = "sendEnabled", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int send_enabled_size() const;
  private:
  int _internal_send_enabled_size() const;

  public:
  void clear_send_enabled() ;
  ::cosmos::bank::v1beta1::SendEnabled* mutable_send_enabled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >*
      mutable_send_enabled();
  private:
  const ::cosmos::bank::v1beta1::SendEnabled& _internal_send_enabled(int index) const;
  ::cosmos::bank::v1beta1::SendEnabled* _internal_add_send_enabled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>& _internal_send_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>* _internal_mutable_send_enabled();
  public:
  const ::cosmos::bank::v1beta1::SendEnabled& send_enabled(int index) const;
  ::cosmos::bank::v1beta1::SendEnabled* add_send_enabled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >&
      send_enabled() const;
  // .cosmos.bank.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmos::bank::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmos::bank::v1beta1::Params* release_params();
  ::cosmos::bank::v1beta1::Params* mutable_params();
  void set_allocated_params(::cosmos::bank::v1beta1::Params* params);
  private:
  const ::cosmos::bank::v1beta1::Params& _internal_params() const;
  ::cosmos::bank::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmos::bank::v1beta1::Params* params);
  ::cosmos::bank::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Balance > balances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > supply_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata > denom_metadata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled > send_enabled_;
    ::cosmos::bank::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class Balance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Balance) */ {
 public:
  inline Balance() : Balance(nullptr) {}
  ~Balance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Balance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Balance(const Balance& from);
  Balance(Balance&& from) noexcept
    : Balance() {
    *this = ::std::move(from);
  }

  inline Balance& operator=(const Balance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Balance& operator=(Balance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Balance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Balance* internal_default_instance() {
    return reinterpret_cast<const Balance*>(
               &_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Balance& a, Balance& b) {
    a.Swap(&b);
  }
  inline void Swap(Balance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Balance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Balance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Balance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Balance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Balance& from) {
    Balance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Balance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.Balance";
  }
  protected:
  explicit Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int coins_size() const;
  private:
  int _internal_coins_size() const;

  public:
  void clear_coins() ;
  ::cosmos::base::v1beta1::Coin* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_coins();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_coins(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_coins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_coins();
  public:
  const ::cosmos::base::v1beta1::Coin& coins(int index) const;
  ::cosmos::base::v1beta1::Coin* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      coins() const;
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Balance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > coins_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .cosmos.bank.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool GenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmos::bank::v1beta1::Params& GenesisState::_internal_params() const {
  const ::cosmos::bank::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::bank::v1beta1::Params&>(
      ::cosmos::bank::v1beta1::_Params_default_instance_);
}
inline const ::cosmos::bank::v1beta1::Params& GenesisState::params() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.GenesisState.params)
  return _internal_params();
}
inline void GenesisState::unsafe_arena_set_allocated_params(
    ::cosmos::bank::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.GenesisState.params)
}
inline ::cosmos::bank::v1beta1::Params* GenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::bank::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::bank::v1beta1::Params* GenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.GenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::bank::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmos::bank::v1beta1::Params* GenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::bank::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmos::bank::v1beta1::Params* GenesisState::mutable_params() {
  ::cosmos::bank::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.GenesisState.params)
  return _msg;
}
inline void GenesisState::set_allocated_params(::cosmos::bank::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.GenesisState.params)
}

// repeated .cosmos.bank.v1beta1.Balance balances = 2 [json_name = "balances", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_balances_size() const {
  return _impl_.balances_.size();
}
inline int GenesisState::balances_size() const {
  return _internal_balances_size();
}
inline void GenesisState::clear_balances() {
  _internal_mutable_balances()->Clear();
}
inline ::cosmos::bank::v1beta1::Balance* GenesisState::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.GenesisState.balances)
  return _internal_mutable_balances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Balance >*
GenesisState::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.GenesisState.balances)
  return _internal_mutable_balances();
}
inline const ::cosmos::bank::v1beta1::Balance& GenesisState::_internal_balances(int index) const {
  return _internal_balances().Get(index);
}
inline const ::cosmos::bank::v1beta1::Balance& GenesisState::balances(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.GenesisState.balances)
  return _internal_balances(index);
}
inline ::cosmos::bank::v1beta1::Balance* GenesisState::_internal_add_balances() {
  return _internal_mutable_balances()->Add();
}
inline ::cosmos::bank::v1beta1::Balance* GenesisState::add_balances() {
  ::cosmos::bank::v1beta1::Balance* _add = _internal_add_balances();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.GenesisState.balances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Balance >&
GenesisState::balances() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.GenesisState.balances)
  return _internal_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Balance>&
GenesisState::_internal_balances() const {
  return _impl_.balances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Balance>*
GenesisState::_internal_mutable_balances() {
  return &_impl_.balances_;
}

// repeated .cosmos.base.v1beta1.Coin supply = 3 [json_name = "supply", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_supply_size() const {
  return _impl_.supply_.size();
}
inline int GenesisState::supply_size() const {
  return _internal_supply_size();
}
inline ::cosmos::base::v1beta1::Coin* GenesisState::mutable_supply(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.GenesisState.supply)
  return _internal_mutable_supply()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
GenesisState::mutable_supply() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.GenesisState.supply)
  return _internal_mutable_supply();
}
inline const ::cosmos::base::v1beta1::Coin& GenesisState::_internal_supply(int index) const {
  return _internal_supply().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& GenesisState::supply(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.GenesisState.supply)
  return _internal_supply(index);
}
inline ::cosmos::base::v1beta1::Coin* GenesisState::_internal_add_supply() {
  return _internal_mutable_supply()->Add();
}
inline ::cosmos::base::v1beta1::Coin* GenesisState::add_supply() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_supply();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.GenesisState.supply)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
GenesisState::supply() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.GenesisState.supply)
  return _internal_supply();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
GenesisState::_internal_supply() const {
  return _impl_.supply_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
GenesisState::_internal_mutable_supply() {
  return &_impl_.supply_;
}

// repeated .cosmos.bank.v1beta1.Metadata denom_metadata = 4 [json_name = "denomMetadata", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_denom_metadata_size() const {
  return _impl_.denom_metadata_.size();
}
inline int GenesisState::denom_metadata_size() const {
  return _internal_denom_metadata_size();
}
inline ::cosmos::bank::v1beta1::Metadata* GenesisState::mutable_denom_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.GenesisState.denom_metadata)
  return _internal_mutable_denom_metadata()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata >*
GenesisState::mutable_denom_metadata() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.GenesisState.denom_metadata)
  return _internal_mutable_denom_metadata();
}
inline const ::cosmos::bank::v1beta1::Metadata& GenesisState::_internal_denom_metadata(int index) const {
  return _internal_denom_metadata().Get(index);
}
inline const ::cosmos::bank::v1beta1::Metadata& GenesisState::denom_metadata(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.GenesisState.denom_metadata)
  return _internal_denom_metadata(index);
}
inline ::cosmos::bank::v1beta1::Metadata* GenesisState::_internal_add_denom_metadata() {
  return _internal_mutable_denom_metadata()->Add();
}
inline ::cosmos::bank::v1beta1::Metadata* GenesisState::add_denom_metadata() {
  ::cosmos::bank::v1beta1::Metadata* _add = _internal_add_denom_metadata();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.GenesisState.denom_metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata >&
GenesisState::denom_metadata() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.GenesisState.denom_metadata)
  return _internal_denom_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Metadata>&
GenesisState::_internal_denom_metadata() const {
  return _impl_.denom_metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Metadata>*
GenesisState::_internal_mutable_denom_metadata() {
  return &_impl_.denom_metadata_;
}

// repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 5 [json_name = "sendEnabled", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_send_enabled_size() const {
  return _impl_.send_enabled_.size();
}
inline int GenesisState::send_enabled_size() const {
  return _internal_send_enabled_size();
}
inline ::cosmos::bank::v1beta1::SendEnabled* GenesisState::mutable_send_enabled(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.GenesisState.send_enabled)
  return _internal_mutable_send_enabled()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >*
GenesisState::mutable_send_enabled() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.GenesisState.send_enabled)
  return _internal_mutable_send_enabled();
}
inline const ::cosmos::bank::v1beta1::SendEnabled& GenesisState::_internal_send_enabled(int index) const {
  return _internal_send_enabled().Get(index);
}
inline const ::cosmos::bank::v1beta1::SendEnabled& GenesisState::send_enabled(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.GenesisState.send_enabled)
  return _internal_send_enabled(index);
}
inline ::cosmos::bank::v1beta1::SendEnabled* GenesisState::_internal_add_send_enabled() {
  return _internal_mutable_send_enabled()->Add();
}
inline ::cosmos::bank::v1beta1::SendEnabled* GenesisState::add_send_enabled() {
  ::cosmos::bank::v1beta1::SendEnabled* _add = _internal_add_send_enabled();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.GenesisState.send_enabled)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >&
GenesisState::send_enabled() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.GenesisState.send_enabled)
  return _internal_send_enabled();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>&
GenesisState::_internal_send_enabled() const {
  return _impl_.send_enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>*
GenesisState::_internal_mutable_send_enabled() {
  return &_impl_.send_enabled_;
}

// -------------------------------------------------------------------

// Balance

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Balance::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Balance::address() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Balance.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Balance::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Balance.address)
}
inline std::string* Balance::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Balance.address)
  return _s;
}
inline const std::string& Balance::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Balance::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Balance::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* Balance::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Balance.address)
  return _impl_.address_.Release();
}
inline void Balance::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Balance.address)
}

// repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int Balance::_internal_coins_size() const {
  return _impl_.coins_.size();
}
inline int Balance::coins_size() const {
  return _internal_coins_size();
}
inline ::cosmos::base::v1beta1::Coin* Balance::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Balance.coins)
  return _internal_mutable_coins()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Balance::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Balance.coins)
  return _internal_mutable_coins();
}
inline const ::cosmos::base::v1beta1::Coin& Balance::_internal_coins(int index) const {
  return _internal_coins().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Balance::coins(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Balance.coins)
  return _internal_coins(index);
}
inline ::cosmos::base::v1beta1::Coin* Balance::_internal_add_coins() {
  return _internal_mutable_coins()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Balance::add_coins() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_coins();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Balance.coins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Balance::coins() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Balance.coins)
  return _internal_coins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Balance::_internal_coins() const {
  return _impl_.coins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Balance::_internal_mutable_coins() {
  return &_impl_.coins_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fgenesis_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/bank/v1beta1/tx.proto
#ifndef GRPC_cosmos_2fbank_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_cosmos_2fbank_2fv1beta1_2ftx_2eproto__INCLUDED

#include "cosmos/bank/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace bank {
namespace v1beta1 {

// Msg defines the bank Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.bank.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Send defines a method for sending coins from one account to another account.
    virtual ::grpc::Status Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::cosmos::bank::v1beta1::MsgSendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSendResponse>> AsyncSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSendResponse>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSendResponse>> PrepareAsyncSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSendResponse>>(PrepareAsyncSendRaw(context, request, cq));
    }
    // MultiSend defines a method for sending coins from some accounts to other accounts.
    virtual ::grpc::Status MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgMultiSendResponse>> AsyncMultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgMultiSendResponse>>(AsyncMultiSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgMultiSendResponse>> PrepareAsyncMultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgMultiSendResponse>>(PrepareAsyncMultiSendRaw(context, request, cq));
    }
    // UpdateParams defines a governance operation for updating the x/bank module parameters.
    // The authority is defined in the keeper.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    // SetSendEnabled is a governance operation for setting the SendEnabled flag
    // on any number of Denoms. Only the entries to add or update should be
    // included. Entries that already exist in the store, but that aren't
    // included in this message, will be left unchanged.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>> AsyncSetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>>(AsyncSetSendEnabledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>> PrepareAsyncSetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>>(PrepareAsyncSetSendEnabledRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Send defines a method for sending coins from one account to another account.
      virtual void Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // MultiSend defines a method for sending coins from some accounts to other accounts.
      virtual void MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateParams defines a governance operation for updating the x/bank module parameters.
      // The authority is defined in the keeper.
      //
      // Since: cosmos-sdk 0.47
      virtual void UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SetSendEnabled is a governance operation for setting the SendEnabled flag
      // on any number of Denoms. Only the entries to add or update should be
      // included. Entries that already exist in the store, but that aren't
      // included in this message, will be left unchanged.
      //
      // Since: cosmos-sdk 0.47
      virtual void SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSendResponse>* AsyncSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSendResponse>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgMultiSendResponse>* AsyncMultiSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgMultiSendResponse>* PrepareAsyncMultiSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* AsyncSetSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* PrepareAsyncSetSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::cosmos::bank::v1beta1::MsgSendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSendResponse>> AsyncSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSendResponse>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSendResponse>> PrepareAsyncSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSendResponse>>(PrepareAsyncSendRaw(context, request, cq));
    }
    ::grpc::Status MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgMultiSendResponse>> AsyncMultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgMultiSendResponse>>(AsyncMultiSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgMultiSendResponse>> PrepareAsyncMultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgMultiSendResponse>>(PrepareAsyncMultiSendRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    ::grpc::Status SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>> AsyncSetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>>(AsyncSetSendEnabledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>> PrepareAsyncSetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>>(PrepareAsyncSetSendEnabledRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response, std::function<void(::grpc::Status)>) override;
      void Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response, std::function<void(::grpc::Status)>) override;
      void MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response, std::function<void(::grpc::Status)>) override;
      void SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSendResponse>* AsyncSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSendResponse>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgMultiSendResponse>* AsyncMultiSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgMultiSendResponse>* PrepareAsyncMultiSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* AsyncSetSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* PrepareAsyncSetSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Send_;
    const ::grpc::internal::RpcMethod rpcmethod_MultiSend_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSendEnabled_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Send defines a method for sending coins from one account to another account.
    virtual ::grpc::Status Send(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response);
    // MultiSend defines a method for sending coins from some accounts to other accounts.
    virtual ::grpc::Status MultiSend(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response);
    // UpdateParams defines a governance operation for updating the x/bank module parameters.
    // The authority is defined in the keeper.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response);
    // SetSendEnabled is a governance operation for setting the SendEnabled flag
    // on any number of Denoms. Only the entries to add or update should be
    // included. Entries that already exist in the store, but that aren't
    // included in this message, will be left unchanged.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status SetSendEnabled(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSend* /*request*/, ::cosmos::bank::v1beta1::MsgSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::MsgSend* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::MsgSendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MultiSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MultiSend() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MultiSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSend(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgMultiSend* /*request*/, ::cosmos::bank::v1beta1::MsgMultiSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiSend(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::MsgMultiSend* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::MsgMultiSendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSendEnabled() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetSendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* /*request*/, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSendEnabled(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Send<WithAsyncMethod_MultiSend<WithAsyncMethod_UpdateParams<WithAsyncMethod_SetSendEnabled<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::MsgSend, ::cosmos::bank::v1beta1::MsgSendResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response) { return this->Send(context, request, response); }));}
    void SetMessageAllocatorFor_Send(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::MsgSend, ::cosmos::bank::v1beta1::MsgSendResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::MsgSend, ::cosmos::bank::v1beta1::MsgSendResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSend* /*request*/, ::cosmos::bank::v1beta1::MsgSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSend* /*request*/, ::cosmos::bank::v1beta1::MsgSendResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MultiSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MultiSend() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::MsgMultiSend, ::cosmos::bank::v1beta1::MsgMultiSendResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response) { return this->MultiSend(context, request, response); }));}
    void SetMessageAllocatorFor_MultiSend(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::MsgMultiSend, ::cosmos::bank::v1beta1::MsgMultiSendResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::MsgMultiSend, ::cosmos::bank::v1beta1::MsgMultiSendResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MultiSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSend(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgMultiSend* /*request*/, ::cosmos::bank::v1beta1::MsgMultiSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MultiSend(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgMultiSend* /*request*/, ::cosmos::bank::v1beta1::MsgMultiSendResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::MsgUpdateParams, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::MsgUpdateParams, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::MsgUpdateParams, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetSendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetSendEnabled() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response) { return this->SetSendEnabled(context, request, response); }));}
    void SetMessageAllocatorFor_SetSendEnabled(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetSendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* /*request*/, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSendEnabled(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* /*request*/, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Send<WithCallbackMethod_MultiSend<WithCallbackMethod_UpdateParams<WithCallbackMethod_SetSendEnabled<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSend* /*request*/, ::cosmos::bank::v1beta1::MsgSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MultiSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MultiSend() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MultiSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSend(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgMultiSend* /*request*/, ::cosmos::bank::v1beta1::MsgMultiSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSendEnabled() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetSendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* /*request*/, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSend* /*request*/, ::cosmos::bank::v1beta1::MsgSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MultiSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MultiSend() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MultiSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSend(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgMultiSend* /*request*/, ::cosmos::bank::v1beta1::MsgMultiSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMultiSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSendEnabled() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetSendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* /*request*/, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSendEnabled(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSend* /*request*/, ::cosmos::bank::v1beta1::MsgSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MultiSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MultiSend() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MultiSend(context, request, response); }));
    }
    ~WithRawCallbackMethod_MultiSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MultiSend(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgMultiSend* /*request*/, ::cosmos::bank::v1beta1::MsgMultiSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MultiSend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetSendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetSendEnabled() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSendEnabled(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetSendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* /*request*/, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSendEnabled(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::MsgSend, ::cosmos::bank::v1beta1::MsgSendResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::MsgSend, ::cosmos::bank::v1beta1::MsgSendResponse>* streamer) {
                       return this->StreamedSend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSend* /*request*/, ::cosmos::bank::v1beta1::MsgSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::MsgSend,::cosmos::bank::v1beta1::MsgSendResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MultiSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MultiSend() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::MsgMultiSend, ::cosmos::bank::v1beta1::MsgMultiSendResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::MsgMultiSend, ::cosmos::bank::v1beta1::MsgMultiSendResponse>* streamer) {
                       return this->StreamedMultiSend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MultiSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MultiSend(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgMultiSend* /*request*/, ::cosmos::bank::v1beta1::MsgMultiSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMultiSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::MsgMultiSend,::cosmos::bank::v1beta1::MsgMultiSendResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::MsgUpdateParams, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::MsgUpdateParams, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::MsgUpdateParams,::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSendEnabled() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* streamer) {
                       return this->StreamedSetSendEnabled(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* /*request*/, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSendEnabled(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::MsgSetSendEnabled,::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_MultiSend<WithStreamedUnaryMethod_UpdateParams<WithStreamedUnaryMethod_SetSendEnabled<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_MultiSend<WithStreamedUnaryMethod_UpdateParams<WithStreamedUnaryMethod_SetSendEnabled<Service > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos


#endif  // GRPC_cosmos_2fbank_2fv1beta1_2ftx_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/bank/v1beta1/tx.proto

#include "cosmos/bank/v1beta1/tx.pb.h"
#include "cosmos/bank/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace bank {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/cosmos.bank.v1beta1.Msg/Send",
  "/cosmos.bank.v1beta1.Msg/MultiSend",
  "/cosmos.bank.v1beta1.Msg/UpdateParams",
  "/cosmos.bank.v1beta1.Msg/SetSendEnabled",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Send_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MultiSend_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSendEnabled_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::cosmos::bank::v1beta1::MsgSendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::MsgSend, ::cosmos::bank::v1beta1::MsgSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Send_, context, request, response);
}

void Msg::Stub::async::Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::MsgSend, ::cosmos::bank::v1beta1::MsgSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, std::move(f));
}

void Msg::Stub::async::Send(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Send_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSendResponse>* Msg::Stub::PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::MsgSendResponse, ::cosmos::bank::v1beta1::MsgSend, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Send_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSendResponse>* Msg::Stub::AsyncSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSend& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::MsgMultiSend, ::cosmos::bank::v1beta1::MsgMultiSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MultiSend_, context, request, response);
}

void Msg::Stub::async::MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::MsgMultiSend, ::cosmos::bank::v1beta1::MsgMultiSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MultiSend_, context, request, response, std::move(f));
}

void Msg::Stub::async::MultiSend(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MultiSend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgMultiSendResponse>* Msg::Stub::PrepareAsyncMultiSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::MsgMultiSendResponse, ::cosmos::bank::v1beta1::MsgMultiSend, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MultiSend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgMultiSendResponse>* Msg::Stub::AsyncMultiSendRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMultiSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::MsgUpdateParams, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::MsgUpdateParams, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse, ::cosmos::bank::v1beta1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSendEnabled_, context, request, response);
}

void Msg::Stub::async::SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSendEnabled_, context, request, response, std::move(f));
}

void Msg::Stub::async::SetSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSendEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* Msg::Stub::PrepareAsyncSetSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse, ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSendEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse>* Msg::Stub::AsyncSetSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSendEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::bank::v1beta1::MsgSend, ::cosmos::bank::v1beta1::MsgSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::MsgSend* req,
             ::cosmos::bank::v1beta1::MsgSendResponse* resp) {
               return service->Send(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::bank::v1beta1::MsgMultiSend, ::cosmos::bank::v1beta1::MsgMultiSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::MsgMultiSend* req,
             ::cosmos::bank::v1beta1::MsgMultiSendResponse* resp) {
               return service->MultiSend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::bank::v1beta1::MsgUpdateParams, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::MsgUpdateParams* req,
             ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::bank::v1beta1::MsgSetSendEnabled, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::MsgSetSendEnabled* req,
             ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* resp) {
               return service->SetSendEnabled(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::Send(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::MsgSend* request, ::cosmos::bank::v1beta1::MsgSendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::MultiSend(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::MsgMultiSend* request, ::cosmos::bank::v1beta1::MsgMultiSendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::MsgUpdateParams* request, ::cosmos::bank::v1beta1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SetSendEnabled(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::MsgSetSendEnabled* request, ::cosmos::bank::v1beta1::MsgSetSendEnabledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace bank
}  // namespace v1beta1


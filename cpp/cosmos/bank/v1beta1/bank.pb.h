// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/bank/v1beta1/bank.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fbank_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fbank_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbank_2fv1beta1_2fbank_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
namespace cosmos {
namespace bank {
namespace v1beta1 {
class DenomUnit;
struct DenomUnitDefaultTypeInternal;
extern DenomUnitDefaultTypeInternal _DenomUnit_default_instance_;
class Input;
struct InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Output;
struct OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class SendEnabled;
struct SendEnabledDefaultTypeInternal;
extern SendEnabledDefaultTypeInternal _SendEnabled_default_instance_;
class Supply;
struct SupplyDefaultTypeInternal;
extern SupplyDefaultTypeInternal _Supply_default_instance_;
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::bank::v1beta1::DenomUnit* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::DenomUnit>(Arena*);
template <>
::cosmos::bank::v1beta1::Input* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::Input>(Arena*);
template <>
::cosmos::bank::v1beta1::Metadata* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::Metadata>(Arena*);
template <>
::cosmos::bank::v1beta1::Output* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::Output>(Arena*);
template <>
::cosmos::bank::v1beta1::Params* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::Params>(Arena*);
template <>
::cosmos::bank::v1beta1::SendEnabled* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::SendEnabled>(Arena*);
template <>
::cosmos::bank::v1beta1::Supply* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::Supply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace bank {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendEnabledFieldNumber = 1,
    kDefaultSendEnabledFieldNumber = 2,
  };
  // repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled", deprecated = true];
  [[deprecated]]  int send_enabled_size() const;
  private:
  int _internal_send_enabled_size() const;

  public:
  [[deprecated]]  void clear_send_enabled() ;
  [[deprecated]] ::cosmos::bank::v1beta1::SendEnabled* mutable_send_enabled(int index);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >*
      mutable_send_enabled();
  private:
  const ::cosmos::bank::v1beta1::SendEnabled& _internal_send_enabled(int index) const;
  ::cosmos::bank::v1beta1::SendEnabled* _internal_add_send_enabled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>& _internal_send_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>* _internal_mutable_send_enabled();
  public:
  [[deprecated]] const ::cosmos::bank::v1beta1::SendEnabled& send_enabled(int index) const;
  [[deprecated]] ::cosmos::bank::v1beta1::SendEnabled* add_send_enabled();
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >&
      send_enabled() const;
  // bool default_send_enabled = 2 [json_name = "defaultSendEnabled"];
  void clear_default_send_enabled() ;
  bool default_send_enabled() const;
  void set_default_send_enabled(bool value);

  private:
  bool _internal_default_send_enabled() const;
  void _internal_set_default_send_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled > send_enabled_;
    bool default_send_enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};// -------------------------------------------------------------------

class SendEnabled final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.SendEnabled) */ {
 public:
  inline SendEnabled() : SendEnabled(nullptr) {}
  ~SendEnabled() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SendEnabled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendEnabled(const SendEnabled& from);
  SendEnabled(SendEnabled&& from) noexcept
    : SendEnabled() {
    *this = ::std::move(from);
  }

  inline SendEnabled& operator=(const SendEnabled& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendEnabled& operator=(SendEnabled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendEnabled& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendEnabled* internal_default_instance() {
    return reinterpret_cast<const SendEnabled*>(
               &_SendEnabled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendEnabled& a, SendEnabled& b) {
    a.Swap(&b);
  }
  inline void Swap(SendEnabled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendEnabled* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendEnabled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendEnabled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendEnabled& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendEnabled& from) {
    SendEnabled::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendEnabled* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.SendEnabled";
  }
  protected:
  explicit SendEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // bool enabled = 2 [json_name = "enabled"];
  void clear_enabled() ;
  bool enabled() const;
  void set_enabled(bool value);

  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.SendEnabled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    bool enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};// -------------------------------------------------------------------

class Input final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Input) */ {
 public:
  inline Input() : Input(nullptr) {}
  ~Input() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Input(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Input& default_instance() {
    return *internal_default_instance();
  }
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Input* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Input& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Input& from) {
    Input::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int coins_size() const;
  private:
  int _internal_coins_size() const;

  public:
  void clear_coins() ;
  ::cosmos::base::v1beta1::Coin* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_coins();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_coins(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_coins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_coins();
  public:
  const ::cosmos::base::v1beta1::Coin& coins(int index) const;
  ::cosmos::base::v1beta1::Coin* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      coins() const;
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Input)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > coins_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};// -------------------------------------------------------------------

class Output final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Output) */ {
 public:
  inline Output() : Output(nullptr) {}
  ~Output() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Output(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Output(const Output& from);
  Output(Output&& from) noexcept
    : Output() {
    *this = ::std::move(from);
  }

  inline Output& operator=(const Output& from) {
    CopyFrom(from);
    return *this;
  }
  inline Output& operator=(Output&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Output& default_instance() {
    return *internal_default_instance();
  }
  static inline const Output* internal_default_instance() {
    return reinterpret_cast<const Output*>(
               &_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Output& a, Output& b) {
    a.Swap(&b);
  }
  inline void Swap(Output* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Output* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Output* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Output>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Output& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Output& from) {
    Output::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Output* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.Output";
  }
  protected:
  explicit Output(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int coins_size() const;
  private:
  int _internal_coins_size() const;

  public:
  void clear_coins() ;
  ::cosmos::base::v1beta1::Coin* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_coins();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_coins(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_coins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_coins();
  public:
  const ::cosmos::base::v1beta1::Coin& coins(int index) const;
  ::cosmos::base::v1beta1::Coin* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      coins() const;
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Output)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > coins_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};// -------------------------------------------------------------------

class Supply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Supply) */ {
 public:
  inline Supply() : Supply(nullptr) {}
  ~Supply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Supply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Supply(const Supply& from);
  Supply(Supply&& from) noexcept
    : Supply() {
    *this = ::std::move(from);
  }

  inline Supply& operator=(const Supply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Supply& operator=(Supply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Supply& default_instance() {
    return *internal_default_instance();
  }
  static inline const Supply* internal_default_instance() {
    return reinterpret_cast<const Supply*>(
               &_Supply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Supply& a, Supply& b) {
    a.Swap(&b);
  }
  inline void Swap(Supply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Supply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Supply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Supply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Supply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Supply& from) {
    Supply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Supply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.Supply";
  }
  protected:
  explicit Supply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin total = 1 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int total_size() const;
  private:
  int _internal_total_size() const;

  public:
  void clear_total() ;
  ::cosmos::base::v1beta1::Coin* mutable_total(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_total();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_total(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_total();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_total() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_total();
  public:
  const ::cosmos::base::v1beta1::Coin& total(int index) const;
  ::cosmos::base::v1beta1::Coin* add_total();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      total() const;
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Supply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};// -------------------------------------------------------------------

class DenomUnit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.DenomUnit) */ {
 public:
  inline DenomUnit() : DenomUnit(nullptr) {}
  ~DenomUnit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DenomUnit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DenomUnit(const DenomUnit& from);
  DenomUnit(DenomUnit&& from) noexcept
    : DenomUnit() {
    *this = ::std::move(from);
  }

  inline DenomUnit& operator=(const DenomUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenomUnit& operator=(DenomUnit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DenomUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const DenomUnit* internal_default_instance() {
    return reinterpret_cast<const DenomUnit*>(
               &_DenomUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DenomUnit& a, DenomUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(DenomUnit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenomUnit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DenomUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DenomUnit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DenomUnit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DenomUnit& from) {
    DenomUnit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenomUnit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.DenomUnit";
  }
  protected:
  explicit DenomUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAliasesFieldNumber = 3,
    kDenomFieldNumber = 1,
    kExponentFieldNumber = 2,
  };
  // repeated string aliases = 3 [json_name = "aliases"];
  int aliases_size() const;
  private:
  int _internal_aliases_size() const;

  public:
  void clear_aliases() ;
  const std::string& aliases(int index) const;
  std::string* mutable_aliases(int index);
  void set_aliases(int index, const std::string& value);
  void set_aliases(int index, std::string&& value);
  void set_aliases(int index, const char* value);
  void set_aliases(int index, const char* value, std::size_t size);
  void set_aliases(int index, absl::string_view value);
  std::string* add_aliases();
  void add_aliases(const std::string& value);
  void add_aliases(std::string&& value);
  void add_aliases(const char* value);
  void add_aliases(const char* value, std::size_t size);
  void add_aliases(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aliases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aliases();

  private:
  const std::string& _internal_aliases(int index) const;
  std::string* _internal_add_aliases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_aliases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_aliases();

  public:
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // uint32 exponent = 2 [json_name = "exponent"];
  void clear_exponent() ;
  ::uint32_t exponent() const;
  void set_exponent(::uint32_t value);

  private:
  ::uint32_t _internal_exponent() const;
  void _internal_set_exponent(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.DenomUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aliases_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::uint32_t exponent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Metadata& from) {
    Metadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomUnitsFieldNumber = 2,
    kDescriptionFieldNumber = 1,
    kBaseFieldNumber = 3,
    kDisplayFieldNumber = 4,
    kNameFieldNumber = 5,
    kSymbolFieldNumber = 6,
    kUriFieldNumber = 7,
    kUriHashFieldNumber = 8,
  };
  // repeated .cosmos.bank.v1beta1.DenomUnit denom_units = 2 [json_name = "denomUnits"];
  int denom_units_size() const;
  private:
  int _internal_denom_units_size() const;

  public:
  void clear_denom_units() ;
  ::cosmos::bank::v1beta1::DenomUnit* mutable_denom_units(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomUnit >*
      mutable_denom_units();
  private:
  const ::cosmos::bank::v1beta1::DenomUnit& _internal_denom_units(int index) const;
  ::cosmos::bank::v1beta1::DenomUnit* _internal_add_denom_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>& _internal_denom_units() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>* _internal_mutable_denom_units();
  public:
  const ::cosmos::bank::v1beta1::DenomUnit& denom_units(int index) const;
  ::cosmos::bank::v1beta1::DenomUnit* add_denom_units();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomUnit >&
      denom_units() const;
  // string description = 1 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string base = 3 [json_name = "base"];
  void clear_base() ;
  const std::string& base() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* ptr);

  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(
      const std::string& value);
  std::string* _internal_mutable_base();

  public:
  // string display = 4 [json_name = "display"];
  void clear_display() ;
  const std::string& display() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display(Arg_&& arg, Args_... args);
  std::string* mutable_display();
  PROTOBUF_NODISCARD std::string* release_display();
  void set_allocated_display(std::string* ptr);

  private:
  const std::string& _internal_display() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display(
      const std::string& value);
  std::string* _internal_mutable_display();

  public:
  // string name = 5 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string symbol = 6 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string uri = 7 [json_name = "uri", (.gogoproto.customname) = "URI"];
  void clear_uri() ;
  const std::string& uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* ptr);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // string uri_hash = 8 [json_name = "uriHash", (.gogoproto.customname) = "URIHash"];
  void clear_uri_hash() ;
  const std::string& uri_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri_hash(Arg_&& arg, Args_... args);
  std::string* mutable_uri_hash();
  PROTOBUF_NODISCARD std::string* release_uri_hash();
  void set_allocated_uri_hash(std::string* ptr);

  private:
  const std::string& _internal_uri_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_hash(
      const std::string& value);
  std::string* _internal_mutable_uri_hash();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomUnit > denom_units_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fbank_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Params

// repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled", deprecated = true];
inline int Params::_internal_send_enabled_size() const {
  return _impl_.send_enabled_.size();
}
inline int Params::send_enabled_size() const {
  return _internal_send_enabled_size();
}
inline void Params::clear_send_enabled() {
  _internal_mutable_send_enabled()->Clear();
}
inline ::cosmos::bank::v1beta1::SendEnabled* Params::mutable_send_enabled(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Params.send_enabled)
  return _internal_mutable_send_enabled()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >*
Params::mutable_send_enabled() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Params.send_enabled)
  return _internal_mutable_send_enabled();
}
inline const ::cosmos::bank::v1beta1::SendEnabled& Params::_internal_send_enabled(int index) const {
  return _internal_send_enabled().Get(index);
}
inline const ::cosmos::bank::v1beta1::SendEnabled& Params::send_enabled(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Params.send_enabled)
  return _internal_send_enabled(index);
}
inline ::cosmos::bank::v1beta1::SendEnabled* Params::_internal_add_send_enabled() {
  return _internal_mutable_send_enabled()->Add();
}
inline ::cosmos::bank::v1beta1::SendEnabled* Params::add_send_enabled() {
  ::cosmos::bank::v1beta1::SendEnabled* _add = _internal_add_send_enabled();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Params.send_enabled)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >&
Params::send_enabled() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Params.send_enabled)
  return _internal_send_enabled();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>&
Params::_internal_send_enabled() const {
  return _impl_.send_enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>*
Params::_internal_mutable_send_enabled() {
  return &_impl_.send_enabled_;
}

// bool default_send_enabled = 2 [json_name = "defaultSendEnabled"];
inline void Params::clear_default_send_enabled() {
  _impl_.default_send_enabled_ = false;
}
inline bool Params::default_send_enabled() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Params.default_send_enabled)
  return _internal_default_send_enabled();
}
inline void Params::set_default_send_enabled(bool value) {
  _internal_set_default_send_enabled(value);
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Params.default_send_enabled)
}
inline bool Params::_internal_default_send_enabled() const {
  return _impl_.default_send_enabled_;
}
inline void Params::_internal_set_default_send_enabled(bool value) {
  ;
  _impl_.default_send_enabled_ = value;
}

// -------------------------------------------------------------------

// SendEnabled

// string denom = 1 [json_name = "denom"];
inline void SendEnabled::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& SendEnabled::denom() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.SendEnabled.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendEnabled::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.SendEnabled.denom)
}
inline std::string* SendEnabled::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.SendEnabled.denom)
  return _s;
}
inline const std::string& SendEnabled::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void SendEnabled::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* SendEnabled::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* SendEnabled::release_denom() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.SendEnabled.denom)
  return _impl_.denom_.Release();
}
inline void SendEnabled::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.SendEnabled.denom)
}

// bool enabled = 2 [json_name = "enabled"];
inline void SendEnabled::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool SendEnabled::enabled() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.SendEnabled.enabled)
  return _internal_enabled();
}
inline void SendEnabled::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.SendEnabled.enabled)
}
inline bool SendEnabled::_internal_enabled() const {
  return _impl_.enabled_;
}
inline void SendEnabled::_internal_set_enabled(bool value) {
  ;
  _impl_.enabled_ = value;
}

// -------------------------------------------------------------------

// Input

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Input::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Input::address() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Input.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Input::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Input.address)
}
inline std::string* Input::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Input.address)
  return _s;
}
inline const std::string& Input::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Input::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Input::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* Input::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Input.address)
  return _impl_.address_.Release();
}
inline void Input::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Input.address)
}

// repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int Input::_internal_coins_size() const {
  return _impl_.coins_.size();
}
inline int Input::coins_size() const {
  return _internal_coins_size();
}
inline ::cosmos::base::v1beta1::Coin* Input::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Input.coins)
  return _internal_mutable_coins()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Input::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Input.coins)
  return _internal_mutable_coins();
}
inline const ::cosmos::base::v1beta1::Coin& Input::_internal_coins(int index) const {
  return _internal_coins().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Input::coins(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Input.coins)
  return _internal_coins(index);
}
inline ::cosmos::base::v1beta1::Coin* Input::_internal_add_coins() {
  return _internal_mutable_coins()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Input::add_coins() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_coins();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Input.coins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Input::coins() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Input.coins)
  return _internal_coins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Input::_internal_coins() const {
  return _impl_.coins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Input::_internal_mutable_coins() {
  return &_impl_.coins_;
}

// -------------------------------------------------------------------

// Output

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Output::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Output::address() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Output.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Output::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Output.address)
}
inline std::string* Output::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Output.address)
  return _s;
}
inline const std::string& Output::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Output::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Output::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* Output::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Output.address)
  return _impl_.address_.Release();
}
inline void Output::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Output.address)
}

// repeated .cosmos.base.v1beta1.Coin coins = 2 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int Output::_internal_coins_size() const {
  return _impl_.coins_.size();
}
inline int Output::coins_size() const {
  return _internal_coins_size();
}
inline ::cosmos::base::v1beta1::Coin* Output::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Output.coins)
  return _internal_mutable_coins()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Output::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Output.coins)
  return _internal_mutable_coins();
}
inline const ::cosmos::base::v1beta1::Coin& Output::_internal_coins(int index) const {
  return _internal_coins().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Output::coins(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Output.coins)
  return _internal_coins(index);
}
inline ::cosmos::base::v1beta1::Coin* Output::_internal_add_coins() {
  return _internal_mutable_coins()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Output::add_coins() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_coins();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Output.coins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Output::coins() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Output.coins)
  return _internal_coins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Output::_internal_coins() const {
  return _impl_.coins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Output::_internal_mutable_coins() {
  return &_impl_.coins_;
}

// -------------------------------------------------------------------

// Supply

// repeated .cosmos.base.v1beta1.Coin total = 1 [json_name = "total", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int Supply::_internal_total_size() const {
  return _impl_.total_.size();
}
inline int Supply::total_size() const {
  return _internal_total_size();
}
inline ::cosmos::base::v1beta1::Coin* Supply::mutable_total(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Supply.total)
  return _internal_mutable_total()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Supply::mutable_total() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Supply.total)
  return _internal_mutable_total();
}
inline const ::cosmos::base::v1beta1::Coin& Supply::_internal_total(int index) const {
  return _internal_total().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Supply::total(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Supply.total)
  return _internal_total(index);
}
inline ::cosmos::base::v1beta1::Coin* Supply::_internal_add_total() {
  return _internal_mutable_total()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Supply::add_total() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_total();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Supply.total)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Supply::total() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Supply.total)
  return _internal_total();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Supply::_internal_total() const {
  return _impl_.total_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Supply::_internal_mutable_total() {
  return &_impl_.total_;
}

// -------------------------------------------------------------------

// DenomUnit

// string denom = 1 [json_name = "denom"];
inline void DenomUnit::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& DenomUnit::denom() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.DenomUnit.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DenomUnit::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.DenomUnit.denom)
}
inline std::string* DenomUnit::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.DenomUnit.denom)
  return _s;
}
inline const std::string& DenomUnit::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void DenomUnit::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* DenomUnit::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* DenomUnit::release_denom() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.DenomUnit.denom)
  return _impl_.denom_.Release();
}
inline void DenomUnit::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.DenomUnit.denom)
}

// uint32 exponent = 2 [json_name = "exponent"];
inline void DenomUnit::clear_exponent() {
  _impl_.exponent_ = 0u;
}
inline ::uint32_t DenomUnit::exponent() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.DenomUnit.exponent)
  return _internal_exponent();
}
inline void DenomUnit::set_exponent(::uint32_t value) {
  _internal_set_exponent(value);
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.DenomUnit.exponent)
}
inline ::uint32_t DenomUnit::_internal_exponent() const {
  return _impl_.exponent_;
}
inline void DenomUnit::_internal_set_exponent(::uint32_t value) {
  ;
  _impl_.exponent_ = value;
}

// repeated string aliases = 3 [json_name = "aliases"];
inline int DenomUnit::_internal_aliases_size() const {
  return _impl_.aliases_.size();
}
inline int DenomUnit::aliases_size() const {
  return _internal_aliases_size();
}
inline void DenomUnit::clear_aliases() {
  _internal_mutable_aliases()->Clear();
}
inline std::string* DenomUnit::add_aliases() {
  std::string* _s = _internal_add_aliases();
  // @@protoc_insertion_point(field_add_mutable:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _s;
}
inline const std::string& DenomUnit::aliases(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _internal_aliases(index);
}
inline std::string* DenomUnit::mutable_aliases(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _internal_mutable_aliases()->Mutable(index);
}
inline void DenomUnit::set_aliases(int index, const std::string& value) {
  _internal_mutable_aliases()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::set_aliases(int index, std::string&& value) {
  _internal_mutable_aliases()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::set_aliases(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_aliases()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::set_aliases(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_aliases()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::set_aliases(int index, absl::string_view value) {
  _internal_mutable_aliases()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::add_aliases(const std::string& value) {
  _internal_mutable_aliases()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::add_aliases(std::string&& value) {
  _internal_mutable_aliases()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::add_aliases(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_aliases()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::add_aliases(const char* value, std::size_t size) {
  _internal_mutable_aliases()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline void DenomUnit::add_aliases(absl::string_view value) {
  _internal_mutable_aliases()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.bank.v1beta1.DenomUnit.aliases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DenomUnit::aliases() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _internal_aliases();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* DenomUnit::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.DenomUnit.aliases)
  return _internal_mutable_aliases();
}
inline const std::string& DenomUnit::_internal_aliases(int index) const {
  return _internal_aliases().Get(index);
}
inline std::string* DenomUnit::_internal_add_aliases() {
  return _internal_mutable_aliases()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DenomUnit::_internal_aliases() const {
  return _impl_.aliases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DenomUnit::_internal_mutable_aliases() {
  return &_impl_.aliases_;
}

// -------------------------------------------------------------------

// Metadata

// string description = 1 [json_name = "description"];
inline void Metadata::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Metadata::description() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.description)
}
inline std::string* Metadata::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.description)
  return _s;
}
inline const std::string& Metadata::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Metadata::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_description() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.description)
  return _impl_.description_.Release();
}
inline void Metadata::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.description)
}

// repeated .cosmos.bank.v1beta1.DenomUnit denom_units = 2 [json_name = "denomUnits"];
inline int Metadata::_internal_denom_units_size() const {
  return _impl_.denom_units_.size();
}
inline int Metadata::denom_units_size() const {
  return _internal_denom_units_size();
}
inline void Metadata::clear_denom_units() {
  _internal_mutable_denom_units()->Clear();
}
inline ::cosmos::bank::v1beta1::DenomUnit* Metadata::mutable_denom_units(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.denom_units)
  return _internal_mutable_denom_units()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomUnit >*
Metadata::mutable_denom_units() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.Metadata.denom_units)
  return _internal_mutable_denom_units();
}
inline const ::cosmos::bank::v1beta1::DenomUnit& Metadata::_internal_denom_units(int index) const {
  return _internal_denom_units().Get(index);
}
inline const ::cosmos::bank::v1beta1::DenomUnit& Metadata::denom_units(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.denom_units)
  return _internal_denom_units(index);
}
inline ::cosmos::bank::v1beta1::DenomUnit* Metadata::_internal_add_denom_units() {
  return _internal_mutable_denom_units()->Add();
}
inline ::cosmos::bank::v1beta1::DenomUnit* Metadata::add_denom_units() {
  ::cosmos::bank::v1beta1::DenomUnit* _add = _internal_add_denom_units();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.Metadata.denom_units)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomUnit >&
Metadata::denom_units() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.Metadata.denom_units)
  return _internal_denom_units();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>&
Metadata::_internal_denom_units() const {
  return _impl_.denom_units_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::DenomUnit>*
Metadata::_internal_mutable_denom_units() {
  return &_impl_.denom_units_;
}

// string base = 3 [json_name = "base"];
inline void Metadata::clear_base() {
  _impl_.base_.ClearToEmpty();
}
inline const std::string& Metadata::base() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_base(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.base)
}
inline std::string* Metadata::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.base)
  return _s;
}
inline const std::string& Metadata::_internal_base() const {
  return _impl_.base_.Get();
}
inline void Metadata::_internal_set_base(const std::string& value) {
  ;


  _impl_.base_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_base() {
  ;
  return _impl_.base_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_base() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.base)
  return _impl_.base_.Release();
}
inline void Metadata::set_allocated_base(std::string* value) {
  _impl_.base_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_.IsDefault()) {
          _impl_.base_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.base)
}

// string display = 4 [json_name = "display"];
inline void Metadata::clear_display() {
  _impl_.display_.ClearToEmpty();
}
inline const std::string& Metadata::display() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.display)
  return _internal_display();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_display(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.display_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.display)
}
inline std::string* Metadata::mutable_display() {
  std::string* _s = _internal_mutable_display();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.display)
  return _s;
}
inline const std::string& Metadata::_internal_display() const {
  return _impl_.display_.Get();
}
inline void Metadata::_internal_set_display(const std::string& value) {
  ;


  _impl_.display_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_display() {
  ;
  return _impl_.display_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_display() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.display)
  return _impl_.display_.Release();
}
inline void Metadata::set_allocated_display(std::string* value) {
  _impl_.display_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_.IsDefault()) {
          _impl_.display_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.display)
}

// string name = 5 [json_name = "name"];
inline void Metadata::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Metadata::name() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.name)
}
inline std::string* Metadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.name)
  return _s;
}
inline const std::string& Metadata::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Metadata::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.name)
  return _impl_.name_.Release();
}
inline void Metadata::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.name)
}

// string symbol = 6 [json_name = "symbol"];
inline void Metadata::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Metadata::symbol() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.symbol)
}
inline std::string* Metadata::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.symbol)
  return _s;
}
inline const std::string& Metadata::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void Metadata::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_symbol() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.symbol)
  return _impl_.symbol_.Release();
}
inline void Metadata::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.symbol)
}

// string uri = 7 [json_name = "uri", (.gogoproto.customname) = "URI"];
inline void Metadata::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& Metadata::uri() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_uri(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.uri)
}
inline std::string* Metadata::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.uri)
  return _s;
}
inline const std::string& Metadata::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void Metadata::_internal_set_uri(const std::string& value) {
  ;


  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_uri() {
  ;
  return _impl_.uri_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_uri() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.uri)
  return _impl_.uri_.Release();
}
inline void Metadata::set_allocated_uri(std::string* value) {
  _impl_.uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uri_.IsDefault()) {
          _impl_.uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.uri)
}

// string uri_hash = 8 [json_name = "uriHash", (.gogoproto.customname) = "URIHash"];
inline void Metadata::clear_uri_hash() {
  _impl_.uri_hash_.ClearToEmpty();
}
inline const std::string& Metadata::uri_hash() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.Metadata.uri_hash)
  return _internal_uri_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_uri_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.uri_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.Metadata.uri_hash)
}
inline std::string* Metadata::mutable_uri_hash() {
  std::string* _s = _internal_mutable_uri_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.Metadata.uri_hash)
  return _s;
}
inline const std::string& Metadata::_internal_uri_hash() const {
  return _impl_.uri_hash_.Get();
}
inline void Metadata::_internal_set_uri_hash(const std::string& value) {
  ;


  _impl_.uri_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_uri_hash() {
  ;
  return _impl_.uri_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_uri_hash() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.Metadata.uri_hash)
  return _impl_.uri_hash_.Release();
}
inline void Metadata::set_allocated_uri_hash(std::string* value) {
  _impl_.uri_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uri_hash_.IsDefault()) {
          _impl_.uri_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.Metadata.uri_hash)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fbank_2eproto_2epb_2eh

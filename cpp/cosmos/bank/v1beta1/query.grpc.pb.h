// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/bank/v1beta1/query.proto
#ifndef GRPC_cosmos_2fbank_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fbank_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/bank/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace bank {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.bank.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Balance queries the balance of a single coin for a single account.
    virtual ::grpc::Status Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryBalanceResponse>> AsyncBalance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryBalanceResponse>>(AsyncBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryBalanceResponse>> PrepareAsyncBalance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryBalanceResponse>>(PrepareAsyncBalanceRaw(context, request, cq));
    }
    // AllBalances queries the balance of all coins for a single account.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>> AsyncAllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>>(AsyncAllBalancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>> PrepareAsyncAllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>>(PrepareAsyncAllBalancesRaw(context, request, cq));
    }
    // SpendableBalances queries the spendable balance of all coins for a single
    // account.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>> AsyncSpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>>(AsyncSpendableBalancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>> PrepareAsyncSpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>>(PrepareAsyncSpendableBalancesRaw(context, request, cq));
    }
    // SpendableBalanceByDenom queries the spendable balance of a single denom for
    // a single account.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>> AsyncSpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>>(AsyncSpendableBalanceByDenomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>> PrepareAsyncSpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>>(PrepareAsyncSpendableBalanceByDenomRaw(context, request, cq));
    }
    // TotalSupply queries the total supply of all coins.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>> AsyncTotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>>(AsyncTotalSupplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>> PrepareAsyncTotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>>(PrepareAsyncTotalSupplyRaw(context, request, cq));
    }
    // SupplyOf queries the supply of a single coin.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>> AsyncSupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>>(AsyncSupplyOfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>> PrepareAsyncSupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>>(PrepareAsyncSupplyOfRaw(context, request, cq));
    }
    // Params queries the parameters of x/bank module.
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::cosmos::bank::v1beta1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // DenomsMetadata queries the client metadata of a given coin denomination.
    virtual ::grpc::Status DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>> AsyncDenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>>(AsyncDenomMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>> PrepareAsyncDenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>>(PrepareAsyncDenomMetadataRaw(context, request, cq));
    }
    // DenomsMetadata queries the client metadata for all registered coin
    // denominations.
    virtual ::grpc::Status DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>> AsyncDenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>>(AsyncDenomsMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>> PrepareAsyncDenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>>(PrepareAsyncDenomsMetadataRaw(context, request, cq));
    }
    // DenomOwners queries for all account addresses that own a particular token
    // denomination.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>> AsyncDenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>>(AsyncDenomOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>> PrepareAsyncDenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>>(PrepareAsyncDenomOwnersRaw(context, request, cq));
    }
    // SendEnabled queries for SendEnabled entries.
    //
    // This query only returns denominations that have specific SendEnabled settings.
    // Any denomination that does not have a specific setting will use the default
    // params.default_send_enabled, and will not be returned by this query.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>> AsyncSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>>(AsyncSendEnabledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>> PrepareAsyncSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>>(PrepareAsyncSendEnabledRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Balance queries the balance of a single coin for a single account.
      virtual void Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AllBalances queries the balance of all coins for a single account.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SpendableBalances queries the spendable balance of all coins for a single
      // account.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      //
      // Since: cosmos-sdk 0.46
      virtual void SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SpendableBalanceByDenom queries the spendable balance of a single denom for
      // a single account.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      //
      // Since: cosmos-sdk 0.47
      virtual void SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TotalSupply queries the total supply of all coins.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SupplyOf queries the supply of a single coin.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Params queries the parameters of x/bank module.
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DenomsMetadata queries the client metadata of a given coin denomination.
      virtual void DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DenomsMetadata queries the client metadata for all registered coin
      // denominations.
      virtual void DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DenomOwners queries for all account addresses that own a particular token
      // denomination.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      //
      // Since: cosmos-sdk 0.46
      virtual void DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SendEnabled queries for SendEnabled entries.
      //
      // This query only returns denominations that have specific SendEnabled settings.
      // Any denomination that does not have a specific setting will use the default
      // params.default_send_enabled, and will not be returned by this query.
      //
      // Since: cosmos-sdk 0.47
      virtual void SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryBalanceResponse>* AsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryBalanceResponse>* PrepareAsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* AsyncAllBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* PrepareAsyncAllBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* AsyncSpendableBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* PrepareAsyncSpendableBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* AsyncSpendableBalanceByDenomRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* PrepareAsyncSpendableBalanceByDenomRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* AsyncTotalSupplyRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* PrepareAsyncTotalSupplyRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* AsyncSupplyOfRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* PrepareAsyncSupplyOfRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* AsyncDenomMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* PrepareAsyncDenomMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* AsyncDenomsMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* PrepareAsyncDenomsMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* AsyncDenomOwnersRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* PrepareAsyncDenomOwnersRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* AsyncSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* PrepareAsyncSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryBalanceResponse>> AsyncBalance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryBalanceResponse>>(AsyncBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryBalanceResponse>> PrepareAsyncBalance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryBalanceResponse>>(PrepareAsyncBalanceRaw(context, request, cq));
    }
    ::grpc::Status AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>> AsyncAllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>>(AsyncAllBalancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>> PrepareAsyncAllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>>(PrepareAsyncAllBalancesRaw(context, request, cq));
    }
    ::grpc::Status SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>> AsyncSpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>>(AsyncSpendableBalancesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>> PrepareAsyncSpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>>(PrepareAsyncSpendableBalancesRaw(context, request, cq));
    }
    ::grpc::Status SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>> AsyncSpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>>(AsyncSpendableBalanceByDenomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>> PrepareAsyncSpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>>(PrepareAsyncSpendableBalanceByDenomRaw(context, request, cq));
    }
    ::grpc::Status TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>> AsyncTotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>>(AsyncTotalSupplyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>> PrepareAsyncTotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>>(PrepareAsyncTotalSupplyRaw(context, request, cq));
    }
    ::grpc::Status SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>> AsyncSupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>>(AsyncSupplyOfRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>> PrepareAsyncSupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>>(PrepareAsyncSupplyOfRaw(context, request, cq));
    }
    ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::cosmos::bank::v1beta1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>> AsyncDenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>>(AsyncDenomMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>> PrepareAsyncDenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>>(PrepareAsyncDenomMetadataRaw(context, request, cq));
    }
    ::grpc::Status DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>> AsyncDenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>>(AsyncDenomsMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>> PrepareAsyncDenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>>(PrepareAsyncDenomsMetadataRaw(context, request, cq));
    }
    ::grpc::Status DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>> AsyncDenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>>(AsyncDenomOwnersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>> PrepareAsyncDenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>>(PrepareAsyncDenomOwnersRaw(context, request, cq));
    }
    ::grpc::Status SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>> AsyncSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>>(AsyncSendEnabledRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>> PrepareAsyncSendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>>(PrepareAsyncSendEnabledRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response, std::function<void(::grpc::Status)>) override;
      void Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response, std::function<void(::grpc::Status)>) override;
      void AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response, std::function<void(::grpc::Status)>) override;
      void SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response, std::function<void(::grpc::Status)>) override;
      void SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response, std::function<void(::grpc::Status)>) override;
      void TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response, std::function<void(::grpc::Status)>) override;
      void SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response, std::function<void(::grpc::Status)>) override;
      void DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response, std::function<void(::grpc::Status)>) override;
      void SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryBalanceResponse>* AsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryBalanceResponse>* PrepareAsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* AsyncAllBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* PrepareAsyncAllBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* AsyncSpendableBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* PrepareAsyncSpendableBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* AsyncSpendableBalanceByDenomRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* PrepareAsyncSpendableBalanceByDenomRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* AsyncTotalSupplyRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* PrepareAsyncTotalSupplyRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* AsyncSupplyOfRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* PrepareAsyncSupplyOfRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* AsyncDenomMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* PrepareAsyncDenomMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* AsyncDenomsMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* PrepareAsyncDenomsMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* AsyncDenomOwnersRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* PrepareAsyncDenomOwnersRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* AsyncSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* PrepareAsyncSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Balance_;
    const ::grpc::internal::RpcMethod rpcmethod_AllBalances_;
    const ::grpc::internal::RpcMethod rpcmethod_SpendableBalances_;
    const ::grpc::internal::RpcMethod rpcmethod_SpendableBalanceByDenom_;
    const ::grpc::internal::RpcMethod rpcmethod_TotalSupply_;
    const ::grpc::internal::RpcMethod rpcmethod_SupplyOf_;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_DenomMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_DenomsMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_DenomOwners_;
    const ::grpc::internal::RpcMethod rpcmethod_SendEnabled_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Balance queries the balance of a single coin for a single account.
    virtual ::grpc::Status Balance(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response);
    // AllBalances queries the balance of all coins for a single account.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status AllBalances(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response);
    // SpendableBalances queries the spendable balance of all coins for a single
    // account.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status SpendableBalances(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response);
    // SpendableBalanceByDenom queries the spendable balance of a single denom for
    // a single account.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status SpendableBalanceByDenom(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response);
    // TotalSupply queries the total supply of all coins.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status TotalSupply(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response);
    // SupplyOf queries the supply of a single coin.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status SupplyOf(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response);
    // Params queries the parameters of x/bank module.
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response);
    // DenomsMetadata queries the client metadata of a given coin denomination.
    virtual ::grpc::Status DenomMetadata(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response);
    // DenomsMetadata queries the client metadata for all registered coin
    // denominations.
    virtual ::grpc::Status DenomsMetadata(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response);
    // DenomOwners queries for all account addresses that own a particular token
    // denomination.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status DenomOwners(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response);
    // SendEnabled queries for SendEnabled entries.
    //
    // This query only returns denominations that have specific SendEnabled settings.
    // Any denomination that does not have a specific setting will use the default
    // params.default_send_enabled, and will not be returned by this query.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status SendEnabled(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Balance() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::bank::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBalance(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QueryBalanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AllBalances() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AllBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllBalances(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpendableBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpendableBalances() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SpendableBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpendableBalances(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpendableBalanceByDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpendableBalanceByDenom() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SpendableBalanceByDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalanceByDenom(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpendableBalanceByDenom(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TotalSupply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TotalSupply() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TotalSupply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalSupply(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* /*request*/, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalSupply(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SupplyOf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SupplyOf() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SupplyOf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SupplyOf(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSupplyOf(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::bank::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomMetadata() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomMetadata(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomsMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomsMetadata() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DenomsMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomsMetadata(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomOwners() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DenomOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomOwners(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomOwners(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendEnabled() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEnabled(::grpc::ServerContext* context, ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Balance<WithAsyncMethod_AllBalances<WithAsyncMethod_SpendableBalances<WithAsyncMethod_SpendableBalanceByDenom<WithAsyncMethod_TotalSupply<WithAsyncMethod_SupplyOf<WithAsyncMethod_Params<WithAsyncMethod_DenomMetadata<WithAsyncMethod_DenomsMetadata<WithAsyncMethod_DenomOwners<WithAsyncMethod_SendEnabled<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Balance() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryBalanceRequest, ::cosmos::bank::v1beta1::QueryBalanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response) { return this->Balance(context, request, response); }));}
    void SetMessageAllocatorFor_Balance(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QueryBalanceRequest, ::cosmos::bank::v1beta1::QueryBalanceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryBalanceRequest, ::cosmos::bank::v1beta1::QueryBalanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::bank::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Balance(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::bank::v1beta1::QueryBalanceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AllBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AllBalances() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::cosmos::bank::v1beta1::QueryAllBalancesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response) { return this->AllBalances(context, request, response); }));}
    void SetMessageAllocatorFor_AllBalances(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::cosmos::bank::v1beta1::QueryAllBalancesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AllBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllBalances(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpendableBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpendableBalances() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response) { return this->SpendableBalances(context, request, response); }));}
    void SetMessageAllocatorFor_SpendableBalances(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpendableBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpendableBalances(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpendableBalanceByDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpendableBalanceByDenom() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response) { return this->SpendableBalanceByDenom(context, request, response); }));}
    void SetMessageAllocatorFor_SpendableBalanceByDenom(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpendableBalanceByDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalanceByDenom(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpendableBalanceByDenom(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TotalSupply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TotalSupply() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response) { return this->TotalSupply(context, request, response); }));}
    void SetMessageAllocatorFor_TotalSupply(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TotalSupply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalSupply(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* /*request*/, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalSupply(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* /*request*/, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SupplyOf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SupplyOf() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::cosmos::bank::v1beta1::QuerySupplyOfResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response) { return this->SupplyOf(context, request, response); }));}
    void SetMessageAllocatorFor_SupplyOf(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::cosmos::bank::v1beta1::QuerySupplyOfResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SupplyOf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SupplyOf(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SupplyOf(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryParamsRequest, ::cosmos::bank::v1beta1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QueryParamsRequest, ::cosmos::bank::v1beta1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryParamsRequest, ::cosmos::bank::v1beta1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::bank::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::bank::v1beta1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomMetadata() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response) { return this->DenomMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_DenomMetadata(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DenomsMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomsMetadata() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response) { return this->DenomsMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_DenomsMetadata(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomsMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomsMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DenomOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomOwners() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response) { return this->DenomOwners(context, request, response); }));}
    void SetMessageAllocatorFor_DenomOwners(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomOwners(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendEnabled() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::cosmos::bank::v1beta1::QuerySendEnabledResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response) { return this->SendEnabled(context, request, response); }));}
    void SetMessageAllocatorFor_SendEnabled(
        ::grpc::MessageAllocator< ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::cosmos::bank::v1beta1::QuerySendEnabledResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendEnabled(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Balance<WithCallbackMethod_AllBalances<WithCallbackMethod_SpendableBalances<WithCallbackMethod_SpendableBalanceByDenom<WithCallbackMethod_TotalSupply<WithCallbackMethod_SupplyOf<WithCallbackMethod_Params<WithCallbackMethod_DenomMetadata<WithCallbackMethod_DenomsMetadata<WithCallbackMethod_DenomOwners<WithCallbackMethod_SendEnabled<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Balance() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::bank::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AllBalances() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AllBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpendableBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpendableBalances() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SpendableBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpendableBalanceByDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpendableBalanceByDenom() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SpendableBalanceByDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalanceByDenom(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TotalSupply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TotalSupply() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TotalSupply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalSupply(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* /*request*/, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SupplyOf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SupplyOf() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SupplyOf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SupplyOf(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::bank::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomMetadata() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DenomsMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomsMetadata() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DenomsMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DenomOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomOwners() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DenomOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomOwners(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendEnabled() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Balance() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::bank::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AllBalances() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AllBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllBalances(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpendableBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpendableBalances() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SpendableBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpendableBalances(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpendableBalanceByDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpendableBalanceByDenom() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SpendableBalanceByDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalanceByDenom(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpendableBalanceByDenom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TotalSupply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TotalSupply() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_TotalSupply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalSupply(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* /*request*/, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalSupply(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SupplyOf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SupplyOf() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SupplyOf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SupplyOf(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSupplyOf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::bank::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomMetadata() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomsMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomsMetadata() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DenomsMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomsMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomOwners() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DenomOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomOwners(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomOwners(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendEnabled() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEnabled(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Balance() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Balance(context, request, response); }));
    }
    ~WithRawCallbackMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::bank::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Balance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AllBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AllBalances() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AllBalances(context, request, response); }));
    }
    ~WithRawCallbackMethod_AllBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllBalances(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpendableBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpendableBalances() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpendableBalances(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpendableBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpendableBalances(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpendableBalanceByDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpendableBalanceByDenom() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpendableBalanceByDenom(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpendableBalanceByDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpendableBalanceByDenom(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpendableBalanceByDenom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TotalSupply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TotalSupply() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TotalSupply(context, request, response); }));
    }
    ~WithRawCallbackMethod_TotalSupply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalSupply(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* /*request*/, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalSupply(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SupplyOf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SupplyOf() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SupplyOf(context, request, response); }));
    }
    ~WithRawCallbackMethod_SupplyOf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SupplyOf(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SupplyOf(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::bank::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomMetadata() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomsMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomsMetadata() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomsMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomsMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomsMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomsMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomOwners() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomOwners(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomOwners(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomOwners(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendEnabled() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendEnabled(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendEnabled(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Balance() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QueryBalanceRequest, ::cosmos::bank::v1beta1::QueryBalanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QueryBalanceRequest, ::cosmos::bank::v1beta1::QueryBalanceResponse>* streamer) {
                       return this->StreamedBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Balance(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryBalanceRequest* /*request*/, ::cosmos::bank::v1beta1::QueryBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QueryBalanceRequest,::cosmos::bank::v1beta1::QueryBalanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AllBalances() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::cosmos::bank::v1beta1::QueryAllBalancesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* streamer) {
                       return this->StreamedAllBalances(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AllBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllBalances(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QueryAllBalancesRequest,::cosmos::bank::v1beta1::QueryAllBalancesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpendableBalances : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpendableBalances() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* streamer) {
                       return this->StreamedSpendableBalances(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpendableBalances() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpendableBalances(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpendableBalances(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest,::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpendableBalanceByDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpendableBalanceByDenom() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* streamer) {
                       return this->StreamedSpendableBalanceByDenom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpendableBalanceByDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpendableBalanceByDenom(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpendableBalanceByDenom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest,::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TotalSupply : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TotalSupply() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* streamer) {
                       return this->StreamedTotalSupply(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TotalSupply() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TotalSupply(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* /*request*/, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTotalSupply(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QueryTotalSupplyRequest,::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SupplyOf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SupplyOf() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::cosmos::bank::v1beta1::QuerySupplyOfResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* streamer) {
                       return this->StreamedSupplyOf(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SupplyOf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SupplyOf(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSupplyOf(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QuerySupplyOfRequest,::cosmos::bank::v1beta1::QuerySupplyOfResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QueryParamsRequest, ::cosmos::bank::v1beta1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QueryParamsRequest, ::cosmos::bank::v1beta1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::bank::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QueryParamsRequest,::cosmos::bank::v1beta1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomMetadata() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* streamer) {
                       return this->StreamedDenomMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QueryDenomMetadataRequest,::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomsMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomsMetadata() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* streamer) {
                       return this->StreamedDenomsMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomsMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomsMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomsMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest,::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomOwners : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomOwners() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* streamer) {
                       return this->StreamedDenomOwners(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomOwners() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomOwners(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* /*request*/, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomOwners(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QueryDenomOwnersRequest,::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendEnabled : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendEnabled() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::cosmos::bank::v1beta1::QuerySendEnabledResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* streamer) {
                       return this->StreamedSendEnabled(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendEnabled() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendEnabled(::grpc::ServerContext* /*context*/, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* /*request*/, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendEnabled(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::bank::v1beta1::QuerySendEnabledRequest,::cosmos::bank::v1beta1::QuerySendEnabledResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Balance<WithStreamedUnaryMethod_AllBalances<WithStreamedUnaryMethod_SpendableBalances<WithStreamedUnaryMethod_SpendableBalanceByDenom<WithStreamedUnaryMethod_TotalSupply<WithStreamedUnaryMethod_SupplyOf<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_DenomMetadata<WithStreamedUnaryMethod_DenomsMetadata<WithStreamedUnaryMethod_DenomOwners<WithStreamedUnaryMethod_SendEnabled<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Balance<WithStreamedUnaryMethod_AllBalances<WithStreamedUnaryMethod_SpendableBalances<WithStreamedUnaryMethod_SpendableBalanceByDenom<WithStreamedUnaryMethod_TotalSupply<WithStreamedUnaryMethod_SupplyOf<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_DenomMetadata<WithStreamedUnaryMethod_DenomsMetadata<WithStreamedUnaryMethod_DenomOwners<WithStreamedUnaryMethod_SendEnabled<Service > > > > > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos


#endif  // GRPC_cosmos_2fbank_2fv1beta1_2fquery_2eproto__INCLUDED

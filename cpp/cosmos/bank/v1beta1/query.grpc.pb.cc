// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/bank/v1beta1/query.proto

#include "cosmos/bank/v1beta1/query.pb.h"
#include "cosmos/bank/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace bank {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/cosmos.bank.v1beta1.Query/Balance",
  "/cosmos.bank.v1beta1.Query/AllBalances",
  "/cosmos.bank.v1beta1.Query/SpendableBalances",
  "/cosmos.bank.v1beta1.Query/SpendableBalanceByDenom",
  "/cosmos.bank.v1beta1.Query/TotalSupply",
  "/cosmos.bank.v1beta1.Query/SupplyOf",
  "/cosmos.bank.v1beta1.Query/Params",
  "/cosmos.bank.v1beta1.Query/DenomMetadata",
  "/cosmos.bank.v1beta1.Query/DenomsMetadata",
  "/cosmos.bank.v1beta1.Query/DenomOwners",
  "/cosmos.bank.v1beta1.Query/SendEnabled",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Balance_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllBalances_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpendableBalances_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpendableBalanceByDenom_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TotalSupply_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SupplyOf_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Params_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomMetadata_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomsMetadata_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomOwners_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendEnabled_(Query_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QueryBalanceRequest, ::cosmos::bank::v1beta1::QueryBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Balance_, context, request, response);
}

void Query::Stub::async::Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QueryBalanceRequest, ::cosmos::bank::v1beta1::QueryBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Balance_, context, request, response, std::move(f));
}

void Query::Stub::async::Balance(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Balance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryBalanceResponse>* Query::Stub::PrepareAsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QueryBalanceResponse, ::cosmos::bank::v1beta1::QueryBalanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Balance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryBalanceResponse>* Query::Stub::AsyncBalanceRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::cosmos::bank::v1beta1::QueryAllBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllBalances_, context, request, response);
}

void Query::Stub::async::AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::cosmos::bank::v1beta1::QueryAllBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllBalances_, context, request, response, std::move(f));
}

void Query::Stub::async::AllBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllBalances_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* Query::Stub::PrepareAsyncAllBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QueryAllBalancesResponse, ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllBalances_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryAllBalancesResponse>* Query::Stub::AsyncAllBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllBalancesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpendableBalances_, context, request, response);
}

void Query::Stub::async::SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpendableBalances_, context, request, response, std::move(f));
}

void Query::Stub::async::SpendableBalances(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpendableBalances_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* Query::Stub::PrepareAsyncSpendableBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse, ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpendableBalances_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>* Query::Stub::AsyncSpendableBalancesRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpendableBalancesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpendableBalanceByDenom_, context, request, response);
}

void Query::Stub::async::SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpendableBalanceByDenom_, context, request, response, std::move(f));
}

void Query::Stub::async::SpendableBalanceByDenom(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpendableBalanceByDenom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* Query::Stub::PrepareAsyncSpendableBalanceByDenomRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpendableBalanceByDenom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>* Query::Stub::AsyncSpendableBalanceByDenomRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpendableBalanceByDenomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TotalSupply_, context, request, response);
}

void Query::Stub::async::TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalSupply_, context, request, response, std::move(f));
}

void Query::Stub::async::TotalSupply(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalSupply_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* Query::Stub::PrepareAsyncTotalSupplyRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse, ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TotalSupply_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryTotalSupplyResponse>* Query::Stub::AsyncTotalSupplyRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTotalSupplyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::cosmos::bank::v1beta1::QuerySupplyOfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SupplyOf_, context, request, response);
}

void Query::Stub::async::SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::cosmos::bank::v1beta1::QuerySupplyOfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SupplyOf_, context, request, response, std::move(f));
}

void Query::Stub::async::SupplyOf(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SupplyOf_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* Query::Stub::PrepareAsyncSupplyOfRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QuerySupplyOfResponse, ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SupplyOf_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySupplyOfResponse>* Query::Stub::AsyncSupplyOfRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSupplyOfRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::cosmos::bank::v1beta1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QueryParamsRequest, ::cosmos::bank::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QueryParamsRequest, ::cosmos::bank::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QueryParamsResponse, ::cosmos::bank::v1beta1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomMetadata_, context, request, response);
}

void Query::Stub::async::DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomMetadata_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* Query::Stub::PrepareAsyncDenomMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse, ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomMetadataResponse>* Query::Stub::AsyncDenomMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomsMetadata_, context, request, response);
}

void Query::Stub::async::DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomsMetadata_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomsMetadata(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomsMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* Query::Stub::PrepareAsyncDenomsMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse, ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomsMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>* Query::Stub::AsyncDenomsMetadataRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomsMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomOwners_, context, request, response);
}

void Query::Stub::async::DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomOwners_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomOwners(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomOwners_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* Query::Stub::PrepareAsyncDenomOwnersRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse, ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomOwners_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QueryDenomOwnersResponse>* Query::Stub::AsyncDenomOwnersRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomOwnersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::cosmos::bank::v1beta1::QuerySendEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendEnabled_, context, request, response);
}

void Query::Stub::async::SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::cosmos::bank::v1beta1::QuerySendEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendEnabled_, context, request, response, std::move(f));
}

void Query::Stub::async::SendEnabled(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendEnabled_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* Query::Stub::PrepareAsyncSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::bank::v1beta1::QuerySendEnabledResponse, ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendEnabled_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::bank::v1beta1::QuerySendEnabledResponse>* Query::Stub::AsyncSendEnabledRaw(::grpc::ClientContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendEnabledRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QueryBalanceRequest, ::cosmos::bank::v1beta1::QueryBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QueryBalanceRequest* req,
             ::cosmos::bank::v1beta1::QueryBalanceResponse* resp) {
               return service->Balance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QueryAllBalancesRequest, ::cosmos::bank::v1beta1::QueryAllBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* req,
             ::cosmos::bank::v1beta1::QueryAllBalancesResponse* resp) {
               return service->AllBalances(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* req,
             ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* resp) {
               return service->SpendableBalances(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* req,
             ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* resp) {
               return service->SpendableBalanceByDenom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QueryTotalSupplyRequest, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* req,
             ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* resp) {
               return service->TotalSupply(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QuerySupplyOfRequest, ::cosmos::bank::v1beta1::QuerySupplyOfResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* req,
             ::cosmos::bank::v1beta1::QuerySupplyOfResponse* resp) {
               return service->SupplyOf(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QueryParamsRequest, ::cosmos::bank::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QueryParamsRequest* req,
             ::cosmos::bank::v1beta1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QueryDenomMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* req,
             ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* resp) {
               return service->DenomMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* req,
             ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* resp) {
               return service->DenomsMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QueryDenomOwnersRequest, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* req,
             ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* resp) {
               return service->DenomOwners(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::bank::v1beta1::QuerySendEnabledRequest, ::cosmos::bank::v1beta1::QuerySendEnabledResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* req,
             ::cosmos::bank::v1beta1::QuerySendEnabledResponse* resp) {
               return service->SendEnabled(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Balance(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryBalanceRequest* request, ::cosmos::bank::v1beta1::QueryBalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AllBalances(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryAllBalancesRequest* request, ::cosmos::bank::v1beta1::QueryAllBalancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SpendableBalances(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SpendableBalanceByDenom(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* request, ::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TotalSupply(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryTotalSupplyRequest* request, ::cosmos::bank::v1beta1::QueryTotalSupplyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SupplyOf(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QuerySupplyOfRequest* request, ::cosmos::bank::v1beta1::QuerySupplyOfResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryParamsRequest* request, ::cosmos::bank::v1beta1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomMetadata(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomsMetadata(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* request, ::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomOwners(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QueryDenomOwnersRequest* request, ::cosmos::bank::v1beta1::QueryDenomOwnersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::SendEnabled(::grpc::ServerContext* context, const ::cosmos::bank::v1beta1::QuerySendEnabledRequest* request, ::cosmos::bank::v1beta1::QuerySendEnabledResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace bank
}  // namespace v1beta1


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/bank/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/bank/v1beta1/bank.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/query/v1/query.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbank_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace bank {
namespace v1beta1 {
class DenomOwner;
struct DenomOwnerDefaultTypeInternal;
extern DenomOwnerDefaultTypeInternal _DenomOwner_default_instance_;
class QueryAllBalancesRequest;
struct QueryAllBalancesRequestDefaultTypeInternal;
extern QueryAllBalancesRequestDefaultTypeInternal _QueryAllBalancesRequest_default_instance_;
class QueryAllBalancesResponse;
struct QueryAllBalancesResponseDefaultTypeInternal;
extern QueryAllBalancesResponseDefaultTypeInternal _QueryAllBalancesResponse_default_instance_;
class QueryBalanceRequest;
struct QueryBalanceRequestDefaultTypeInternal;
extern QueryBalanceRequestDefaultTypeInternal _QueryBalanceRequest_default_instance_;
class QueryBalanceResponse;
struct QueryBalanceResponseDefaultTypeInternal;
extern QueryBalanceResponseDefaultTypeInternal _QueryBalanceResponse_default_instance_;
class QueryDenomMetadataRequest;
struct QueryDenomMetadataRequestDefaultTypeInternal;
extern QueryDenomMetadataRequestDefaultTypeInternal _QueryDenomMetadataRequest_default_instance_;
class QueryDenomMetadataResponse;
struct QueryDenomMetadataResponseDefaultTypeInternal;
extern QueryDenomMetadataResponseDefaultTypeInternal _QueryDenomMetadataResponse_default_instance_;
class QueryDenomOwnersRequest;
struct QueryDenomOwnersRequestDefaultTypeInternal;
extern QueryDenomOwnersRequestDefaultTypeInternal _QueryDenomOwnersRequest_default_instance_;
class QueryDenomOwnersResponse;
struct QueryDenomOwnersResponseDefaultTypeInternal;
extern QueryDenomOwnersResponseDefaultTypeInternal _QueryDenomOwnersResponse_default_instance_;
class QueryDenomsMetadataRequest;
struct QueryDenomsMetadataRequestDefaultTypeInternal;
extern QueryDenomsMetadataRequestDefaultTypeInternal _QueryDenomsMetadataRequest_default_instance_;
class QueryDenomsMetadataResponse;
struct QueryDenomsMetadataResponseDefaultTypeInternal;
extern QueryDenomsMetadataResponseDefaultTypeInternal _QueryDenomsMetadataResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
class QuerySendEnabledRequest;
struct QuerySendEnabledRequestDefaultTypeInternal;
extern QuerySendEnabledRequestDefaultTypeInternal _QuerySendEnabledRequest_default_instance_;
class QuerySendEnabledResponse;
struct QuerySendEnabledResponseDefaultTypeInternal;
extern QuerySendEnabledResponseDefaultTypeInternal _QuerySendEnabledResponse_default_instance_;
class QuerySpendableBalanceByDenomRequest;
struct QuerySpendableBalanceByDenomRequestDefaultTypeInternal;
extern QuerySpendableBalanceByDenomRequestDefaultTypeInternal _QuerySpendableBalanceByDenomRequest_default_instance_;
class QuerySpendableBalanceByDenomResponse;
struct QuerySpendableBalanceByDenomResponseDefaultTypeInternal;
extern QuerySpendableBalanceByDenomResponseDefaultTypeInternal _QuerySpendableBalanceByDenomResponse_default_instance_;
class QuerySpendableBalancesRequest;
struct QuerySpendableBalancesRequestDefaultTypeInternal;
extern QuerySpendableBalancesRequestDefaultTypeInternal _QuerySpendableBalancesRequest_default_instance_;
class QuerySpendableBalancesResponse;
struct QuerySpendableBalancesResponseDefaultTypeInternal;
extern QuerySpendableBalancesResponseDefaultTypeInternal _QuerySpendableBalancesResponse_default_instance_;
class QuerySupplyOfRequest;
struct QuerySupplyOfRequestDefaultTypeInternal;
extern QuerySupplyOfRequestDefaultTypeInternal _QuerySupplyOfRequest_default_instance_;
class QuerySupplyOfResponse;
struct QuerySupplyOfResponseDefaultTypeInternal;
extern QuerySupplyOfResponseDefaultTypeInternal _QuerySupplyOfResponse_default_instance_;
class QueryTotalSupplyRequest;
struct QueryTotalSupplyRequestDefaultTypeInternal;
extern QueryTotalSupplyRequestDefaultTypeInternal _QueryTotalSupplyRequest_default_instance_;
class QueryTotalSupplyResponse;
struct QueryTotalSupplyResponseDefaultTypeInternal;
extern QueryTotalSupplyResponseDefaultTypeInternal _QueryTotalSupplyResponse_default_instance_;
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::bank::v1beta1::DenomOwner* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::DenomOwner>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryAllBalancesRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryAllBalancesRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryAllBalancesResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryAllBalancesResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryBalanceRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryBalanceRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryBalanceResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryBalanceResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryDenomMetadataRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryDenomMetadataRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryDenomMetadataResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryDenomMetadataResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryDenomOwnersRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryDenomOwnersRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryDenomOwnersResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryDenomOwnersResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryDenomsMetadataRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryDenomsMetadataRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryDenomsMetadataResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryDenomsMetadataResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryParamsRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryParamsRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryParamsResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryParamsResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QuerySendEnabledRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QuerySendEnabledRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QuerySendEnabledResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QuerySendEnabledResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QuerySpendableBalanceByDenomResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QuerySpendableBalancesRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QuerySpendableBalancesRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QuerySpendableBalancesResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QuerySpendableBalancesResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QuerySupplyOfRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QuerySupplyOfRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QuerySupplyOfResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QuerySupplyOfResponse>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryTotalSupplyRequest* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryTotalSupplyRequest>(Arena*);
template <>
::cosmos::bank::v1beta1::QueryTotalSupplyResponse* Arena::CreateMaybeMessage<::cosmos::bank::v1beta1::QueryTotalSupplyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace bank {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryBalanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryBalanceRequest) */ {
 public:
  inline QueryBalanceRequest() : QueryBalanceRequest(nullptr) {}
  ~QueryBalanceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBalanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBalanceRequest(const QueryBalanceRequest& from);
  QueryBalanceRequest(QueryBalanceRequest&& from) noexcept
    : QueryBalanceRequest() {
    *this = ::std::move(from);
  }

  inline QueryBalanceRequest& operator=(const QueryBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBalanceRequest& operator=(QueryBalanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBalanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryBalanceRequest*>(
               &_QueryBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryBalanceRequest& a, QueryBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBalanceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBalanceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBalanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryBalanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryBalanceRequest& from) {
    QueryBalanceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBalanceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryBalanceRequest";
  }
  protected:
  explicit QueryBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string denom = 2 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryBalanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryBalanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryBalanceResponse) */ {
 public:
  inline QueryBalanceResponse() : QueryBalanceResponse(nullptr) {}
  ~QueryBalanceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBalanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBalanceResponse(const QueryBalanceResponse& from);
  QueryBalanceResponse(QueryBalanceResponse&& from) noexcept
    : QueryBalanceResponse() {
    *this = ::std::move(from);
  }

  inline QueryBalanceResponse& operator=(const QueryBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBalanceResponse& operator=(QueryBalanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBalanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryBalanceResponse*>(
               &_QueryBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryBalanceResponse& a, QueryBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBalanceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBalanceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBalanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryBalanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryBalanceResponse& from) {
    QueryBalanceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBalanceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryBalanceResponse";
  }
  protected:
  explicit QueryBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 1,
  };
  // .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
  bool has_balance() const;
  void clear_balance() ;
  const ::cosmos::base::v1beta1::Coin& balance() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_balance();
  ::cosmos::base::v1beta1::Coin* mutable_balance();
  void set_allocated_balance(::cosmos::base::v1beta1::Coin* balance);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_balance() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_balance();
  public:
  void unsafe_arena_set_allocated_balance(
      ::cosmos::base::v1beta1::Coin* balance);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_balance();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryBalanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::v1beta1::Coin* balance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllBalancesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryAllBalancesRequest) */ {
 public:
  inline QueryAllBalancesRequest() : QueryAllBalancesRequest(nullptr) {}
  ~QueryAllBalancesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllBalancesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllBalancesRequest(const QueryAllBalancesRequest& from);
  QueryAllBalancesRequest(QueryAllBalancesRequest&& from) noexcept
    : QueryAllBalancesRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllBalancesRequest& operator=(const QueryAllBalancesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllBalancesRequest& operator=(QueryAllBalancesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllBalancesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllBalancesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllBalancesRequest*>(
               &_QueryAllBalancesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAllBalancesRequest& a, QueryAllBalancesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllBalancesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllBalancesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllBalancesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllBalancesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllBalancesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllBalancesRequest& from) {
    QueryAllBalancesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllBalancesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryAllBalancesRequest";
  }
  protected:
  explicit QueryAllBalancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryAllBalancesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllBalancesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryAllBalancesResponse) */ {
 public:
  inline QueryAllBalancesResponse() : QueryAllBalancesResponse(nullptr) {}
  ~QueryAllBalancesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllBalancesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllBalancesResponse(const QueryAllBalancesResponse& from);
  QueryAllBalancesResponse(QueryAllBalancesResponse&& from) noexcept
    : QueryAllBalancesResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllBalancesResponse& operator=(const QueryAllBalancesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllBalancesResponse& operator=(QueryAllBalancesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllBalancesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllBalancesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllBalancesResponse*>(
               &_QueryAllBalancesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryAllBalancesResponse& a, QueryAllBalancesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllBalancesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllBalancesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllBalancesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllBalancesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllBalancesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllBalancesResponse& from) {
    QueryAllBalancesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllBalancesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryAllBalancesResponse";
  }
  protected:
  explicit QueryAllBalancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalancesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int balances_size() const;
  private:
  int _internal_balances_size() const;

  public:
  void clear_balances() ;
  ::cosmos::base::v1beta1::Coin* mutable_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_balances();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_balances(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_balances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_balances();
  public:
  const ::cosmos::base::v1beta1::Coin& balances(int index) const;
  ::cosmos::base::v1beta1::Coin* add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      balances() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryAllBalancesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > balances_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySpendableBalancesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QuerySpendableBalancesRequest) */ {
 public:
  inline QuerySpendableBalancesRequest() : QuerySpendableBalancesRequest(nullptr) {}
  ~QuerySpendableBalancesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySpendableBalancesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySpendableBalancesRequest(const QuerySpendableBalancesRequest& from);
  QuerySpendableBalancesRequest(QuerySpendableBalancesRequest&& from) noexcept
    : QuerySpendableBalancesRequest() {
    *this = ::std::move(from);
  }

  inline QuerySpendableBalancesRequest& operator=(const QuerySpendableBalancesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySpendableBalancesRequest& operator=(QuerySpendableBalancesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySpendableBalancesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySpendableBalancesRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySpendableBalancesRequest*>(
               &_QuerySpendableBalancesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QuerySpendableBalancesRequest& a, QuerySpendableBalancesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySpendableBalancesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySpendableBalancesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySpendableBalancesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySpendableBalancesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySpendableBalancesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySpendableBalancesRequest& from) {
    QuerySpendableBalancesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySpendableBalancesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QuerySpendableBalancesRequest";
  }
  protected:
  explicit QuerySpendableBalancesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QuerySpendableBalancesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySpendableBalancesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QuerySpendableBalancesResponse) */ {
 public:
  inline QuerySpendableBalancesResponse() : QuerySpendableBalancesResponse(nullptr) {}
  ~QuerySpendableBalancesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySpendableBalancesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySpendableBalancesResponse(const QuerySpendableBalancesResponse& from);
  QuerySpendableBalancesResponse(QuerySpendableBalancesResponse&& from) noexcept
    : QuerySpendableBalancesResponse() {
    *this = ::std::move(from);
  }

  inline QuerySpendableBalancesResponse& operator=(const QuerySpendableBalancesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySpendableBalancesResponse& operator=(QuerySpendableBalancesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySpendableBalancesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySpendableBalancesResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySpendableBalancesResponse*>(
               &_QuerySpendableBalancesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QuerySpendableBalancesResponse& a, QuerySpendableBalancesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySpendableBalancesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySpendableBalancesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySpendableBalancesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySpendableBalancesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySpendableBalancesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySpendableBalancesResponse& from) {
    QuerySpendableBalancesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySpendableBalancesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QuerySpendableBalancesResponse";
  }
  protected:
  explicit QuerySpendableBalancesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalancesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int balances_size() const;
  private:
  int _internal_balances_size() const;

  public:
  void clear_balances() ;
  ::cosmos::base::v1beta1::Coin* mutable_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_balances();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_balances(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_balances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_balances();
  public:
  const ::cosmos::base::v1beta1::Coin& balances(int index) const;
  ::cosmos::base::v1beta1::Coin* add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      balances() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QuerySpendableBalancesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > balances_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySpendableBalanceByDenomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest) */ {
 public:
  inline QuerySpendableBalanceByDenomRequest() : QuerySpendableBalanceByDenomRequest(nullptr) {}
  ~QuerySpendableBalanceByDenomRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySpendableBalanceByDenomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySpendableBalanceByDenomRequest(const QuerySpendableBalanceByDenomRequest& from);
  QuerySpendableBalanceByDenomRequest(QuerySpendableBalanceByDenomRequest&& from) noexcept
    : QuerySpendableBalanceByDenomRequest() {
    *this = ::std::move(from);
  }

  inline QuerySpendableBalanceByDenomRequest& operator=(const QuerySpendableBalanceByDenomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySpendableBalanceByDenomRequest& operator=(QuerySpendableBalanceByDenomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySpendableBalanceByDenomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySpendableBalanceByDenomRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySpendableBalanceByDenomRequest*>(
               &_QuerySpendableBalanceByDenomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QuerySpendableBalanceByDenomRequest& a, QuerySpendableBalanceByDenomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySpendableBalanceByDenomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySpendableBalanceByDenomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySpendableBalanceByDenomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySpendableBalanceByDenomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySpendableBalanceByDenomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySpendableBalanceByDenomRequest& from) {
    QuerySpendableBalanceByDenomRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySpendableBalanceByDenomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest";
  }
  protected:
  explicit QuerySpendableBalanceByDenomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string denom = 2 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySpendableBalanceByDenomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse) */ {
 public:
  inline QuerySpendableBalanceByDenomResponse() : QuerySpendableBalanceByDenomResponse(nullptr) {}
  ~QuerySpendableBalanceByDenomResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySpendableBalanceByDenomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySpendableBalanceByDenomResponse(const QuerySpendableBalanceByDenomResponse& from);
  QuerySpendableBalanceByDenomResponse(QuerySpendableBalanceByDenomResponse&& from) noexcept
    : QuerySpendableBalanceByDenomResponse() {
    *this = ::std::move(from);
  }

  inline QuerySpendableBalanceByDenomResponse& operator=(const QuerySpendableBalanceByDenomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySpendableBalanceByDenomResponse& operator=(QuerySpendableBalanceByDenomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySpendableBalanceByDenomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySpendableBalanceByDenomResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySpendableBalanceByDenomResponse*>(
               &_QuerySpendableBalanceByDenomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QuerySpendableBalanceByDenomResponse& a, QuerySpendableBalanceByDenomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySpendableBalanceByDenomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySpendableBalanceByDenomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySpendableBalanceByDenomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySpendableBalanceByDenomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySpendableBalanceByDenomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySpendableBalanceByDenomResponse& from) {
    QuerySpendableBalanceByDenomResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySpendableBalanceByDenomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse";
  }
  protected:
  explicit QuerySpendableBalanceByDenomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 1,
  };
  // .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
  bool has_balance() const;
  void clear_balance() ;
  const ::cosmos::base::v1beta1::Coin& balance() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_balance();
  ::cosmos::base::v1beta1::Coin* mutable_balance();
  void set_allocated_balance(::cosmos::base::v1beta1::Coin* balance);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_balance() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_balance();
  public:
  void unsafe_arena_set_allocated_balance(
      ::cosmos::base::v1beta1::Coin* balance);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_balance();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::v1beta1::Coin* balance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalSupplyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryTotalSupplyRequest) */ {
 public:
  inline QueryTotalSupplyRequest() : QueryTotalSupplyRequest(nullptr) {}
  ~QueryTotalSupplyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalSupplyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalSupplyRequest(const QueryTotalSupplyRequest& from);
  QueryTotalSupplyRequest(QueryTotalSupplyRequest&& from) noexcept
    : QueryTotalSupplyRequest() {
    *this = ::std::move(from);
  }

  inline QueryTotalSupplyRequest& operator=(const QueryTotalSupplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalSupplyRequest& operator=(QueryTotalSupplyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalSupplyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalSupplyRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTotalSupplyRequest*>(
               &_QueryTotalSupplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryTotalSupplyRequest& a, QueryTotalSupplyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalSupplyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalSupplyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalSupplyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalSupplyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalSupplyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalSupplyRequest& from) {
    QueryTotalSupplyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalSupplyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryTotalSupplyRequest";
  }
  protected:
  explicit QueryTotalSupplyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryTotalSupplyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalSupplyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryTotalSupplyResponse) */ {
 public:
  inline QueryTotalSupplyResponse() : QueryTotalSupplyResponse(nullptr) {}
  ~QueryTotalSupplyResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalSupplyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalSupplyResponse(const QueryTotalSupplyResponse& from);
  QueryTotalSupplyResponse(QueryTotalSupplyResponse&& from) noexcept
    : QueryTotalSupplyResponse() {
    *this = ::std::move(from);
  }

  inline QueryTotalSupplyResponse& operator=(const QueryTotalSupplyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalSupplyResponse& operator=(QueryTotalSupplyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalSupplyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalSupplyResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTotalSupplyResponse*>(
               &_QueryTotalSupplyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryTotalSupplyResponse& a, QueryTotalSupplyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalSupplyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalSupplyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalSupplyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalSupplyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalSupplyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalSupplyResponse& from) {
    QueryTotalSupplyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalSupplyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryTotalSupplyResponse";
  }
  protected:
  explicit QueryTotalSupplyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplyFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin supply = 1 [json_name = "supply", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int supply_size() const;
  private:
  int _internal_supply_size() const;

  public:
  void clear_supply() ;
  ::cosmos::base::v1beta1::Coin* mutable_supply(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_supply();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_supply(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_supply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_supply() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_supply();
  public:
  const ::cosmos::base::v1beta1::Coin& supply(int index) const;
  ::cosmos::base::v1beta1::Coin* add_supply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      supply() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryTotalSupplyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > supply_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySupplyOfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QuerySupplyOfRequest) */ {
 public:
  inline QuerySupplyOfRequest() : QuerySupplyOfRequest(nullptr) {}
  ~QuerySupplyOfRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySupplyOfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySupplyOfRequest(const QuerySupplyOfRequest& from);
  QuerySupplyOfRequest(QuerySupplyOfRequest&& from) noexcept
    : QuerySupplyOfRequest() {
    *this = ::std::move(from);
  }

  inline QuerySupplyOfRequest& operator=(const QuerySupplyOfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySupplyOfRequest& operator=(QuerySupplyOfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySupplyOfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySupplyOfRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySupplyOfRequest*>(
               &_QuerySupplyOfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QuerySupplyOfRequest& a, QuerySupplyOfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySupplyOfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySupplyOfRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySupplyOfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySupplyOfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySupplyOfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySupplyOfRequest& from) {
    QuerySupplyOfRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySupplyOfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QuerySupplyOfRequest";
  }
  protected:
  explicit QuerySupplyOfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QuerySupplyOfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySupplyOfResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QuerySupplyOfResponse) */ {
 public:
  inline QuerySupplyOfResponse() : QuerySupplyOfResponse(nullptr) {}
  ~QuerySupplyOfResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySupplyOfResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySupplyOfResponse(const QuerySupplyOfResponse& from);
  QuerySupplyOfResponse(QuerySupplyOfResponse&& from) noexcept
    : QuerySupplyOfResponse() {
    *this = ::std::move(from);
  }

  inline QuerySupplyOfResponse& operator=(const QuerySupplyOfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySupplyOfResponse& operator=(QuerySupplyOfResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySupplyOfResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySupplyOfResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySupplyOfResponse*>(
               &_QuerySupplyOfResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QuerySupplyOfResponse& a, QuerySupplyOfResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySupplyOfResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySupplyOfResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySupplyOfResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySupplyOfResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySupplyOfResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySupplyOfResponse& from) {
    QuerySupplyOfResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySupplyOfResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QuerySupplyOfResponse";
  }
  protected:
  explicit QuerySupplyOfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QuerySupplyOfResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .cosmos.bank.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmos::bank::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmos::bank::v1beta1::Params* release_params();
  ::cosmos::bank::v1beta1::Params* mutable_params();
  void set_allocated_params(::cosmos::bank::v1beta1::Params* params);
  private:
  const ::cosmos::bank::v1beta1::Params& _internal_params() const;
  ::cosmos::bank::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmos::bank::v1beta1::Params* params);
  ::cosmos::bank::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::bank::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomsMetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryDenomsMetadataRequest) */ {
 public:
  inline QueryDenomsMetadataRequest() : QueryDenomsMetadataRequest(nullptr) {}
  ~QueryDenomsMetadataRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomsMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomsMetadataRequest(const QueryDenomsMetadataRequest& from);
  QueryDenomsMetadataRequest(QueryDenomsMetadataRequest&& from) noexcept
    : QueryDenomsMetadataRequest() {
    *this = ::std::move(from);
  }

  inline QueryDenomsMetadataRequest& operator=(const QueryDenomsMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomsMetadataRequest& operator=(QueryDenomsMetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomsMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomsMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomsMetadataRequest*>(
               &_QueryDenomsMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryDenomsMetadataRequest& a, QueryDenomsMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomsMetadataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomsMetadataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomsMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomsMetadataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomsMetadataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomsMetadataRequest& from) {
    QueryDenomsMetadataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomsMetadataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryDenomsMetadataRequest";
  }
  protected:
  explicit QueryDenomsMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryDenomsMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomsMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryDenomsMetadataResponse) */ {
 public:
  inline QueryDenomsMetadataResponse() : QueryDenomsMetadataResponse(nullptr) {}
  ~QueryDenomsMetadataResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomsMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomsMetadataResponse(const QueryDenomsMetadataResponse& from);
  QueryDenomsMetadataResponse(QueryDenomsMetadataResponse&& from) noexcept
    : QueryDenomsMetadataResponse() {
    *this = ::std::move(from);
  }

  inline QueryDenomsMetadataResponse& operator=(const QueryDenomsMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomsMetadataResponse& operator=(QueryDenomsMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomsMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomsMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomsMetadataResponse*>(
               &_QueryDenomsMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryDenomsMetadataResponse& a, QueryDenomsMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomsMetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomsMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomsMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomsMetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomsMetadataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomsMetadataResponse& from) {
    QueryDenomsMetadataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomsMetadataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryDenomsMetadataResponse";
  }
  protected:
  explicit QueryDenomsMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadatasFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.bank.v1beta1.Metadata metadatas = 1 [json_name = "metadatas", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int metadatas_size() const;
  private:
  int _internal_metadatas_size() const;

  public:
  void clear_metadatas() ;
  ::cosmos::bank::v1beta1::Metadata* mutable_metadatas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata >*
      mutable_metadatas();
  private:
  const ::cosmos::bank::v1beta1::Metadata& _internal_metadatas(int index) const;
  ::cosmos::bank::v1beta1::Metadata* _internal_add_metadatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Metadata>& _internal_metadatas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Metadata>* _internal_mutable_metadatas();
  public:
  const ::cosmos::bank::v1beta1::Metadata& metadatas(int index) const;
  ::cosmos::bank::v1beta1::Metadata* add_metadatas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata >&
      metadatas() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryDenomsMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata > metadatas_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomMetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryDenomMetadataRequest) */ {
 public:
  inline QueryDenomMetadataRequest() : QueryDenomMetadataRequest(nullptr) {}
  ~QueryDenomMetadataRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomMetadataRequest(const QueryDenomMetadataRequest& from);
  QueryDenomMetadataRequest(QueryDenomMetadataRequest&& from) noexcept
    : QueryDenomMetadataRequest() {
    *this = ::std::move(from);
  }

  inline QueryDenomMetadataRequest& operator=(const QueryDenomMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomMetadataRequest& operator=(QueryDenomMetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomMetadataRequest*>(
               &_QueryDenomMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryDenomMetadataRequest& a, QueryDenomMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomMetadataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomMetadataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomMetadataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomMetadataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomMetadataRequest& from) {
    QueryDenomMetadataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomMetadataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryDenomMetadataRequest";
  }
  protected:
  explicit QueryDenomMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryDenomMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryDenomMetadataResponse) */ {
 public:
  inline QueryDenomMetadataResponse() : QueryDenomMetadataResponse(nullptr) {}
  ~QueryDenomMetadataResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomMetadataResponse(const QueryDenomMetadataResponse& from);
  QueryDenomMetadataResponse(QueryDenomMetadataResponse&& from) noexcept
    : QueryDenomMetadataResponse() {
    *this = ::std::move(from);
  }

  inline QueryDenomMetadataResponse& operator=(const QueryDenomMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomMetadataResponse& operator=(QueryDenomMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomMetadataResponse*>(
               &_QueryDenomMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryDenomMetadataResponse& a, QueryDenomMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomMetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomMetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomMetadataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomMetadataResponse& from) {
    QueryDenomMetadataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomMetadataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryDenomMetadataResponse";
  }
  protected:
  explicit QueryDenomMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .cosmos.bank.v1beta1.Metadata metadata = 1 [json_name = "metadata", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::cosmos::bank::v1beta1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::cosmos::bank::v1beta1::Metadata* release_metadata();
  ::cosmos::bank::v1beta1::Metadata* mutable_metadata();
  void set_allocated_metadata(::cosmos::bank::v1beta1::Metadata* metadata);
  private:
  const ::cosmos::bank::v1beta1::Metadata& _internal_metadata() const;
  ::cosmos::bank::v1beta1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::cosmos::bank::v1beta1::Metadata* metadata);
  ::cosmos::bank::v1beta1::Metadata* unsafe_arena_release_metadata();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryDenomMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::bank::v1beta1::Metadata* metadata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomOwnersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryDenomOwnersRequest) */ {
 public:
  inline QueryDenomOwnersRequest() : QueryDenomOwnersRequest(nullptr) {}
  ~QueryDenomOwnersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomOwnersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomOwnersRequest(const QueryDenomOwnersRequest& from);
  QueryDenomOwnersRequest(QueryDenomOwnersRequest&& from) noexcept
    : QueryDenomOwnersRequest() {
    *this = ::std::move(from);
  }

  inline QueryDenomOwnersRequest& operator=(const QueryDenomOwnersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomOwnersRequest& operator=(QueryDenomOwnersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomOwnersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomOwnersRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomOwnersRequest*>(
               &_QueryDenomOwnersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryDenomOwnersRequest& a, QueryDenomOwnersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomOwnersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomOwnersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomOwnersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomOwnersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomOwnersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomOwnersRequest& from) {
    QueryDenomOwnersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomOwnersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryDenomOwnersRequest";
  }
  protected:
  explicit QueryDenomOwnersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryDenomOwnersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class DenomOwner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.DenomOwner) */ {
 public:
  inline DenomOwner() : DenomOwner(nullptr) {}
  ~DenomOwner() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DenomOwner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DenomOwner(const DenomOwner& from);
  DenomOwner(DenomOwner&& from) noexcept
    : DenomOwner() {
    *this = ::std::move(from);
  }

  inline DenomOwner& operator=(const DenomOwner& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenomOwner& operator=(DenomOwner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DenomOwner& default_instance() {
    return *internal_default_instance();
  }
  static inline const DenomOwner* internal_default_instance() {
    return reinterpret_cast<const DenomOwner*>(
               &_DenomOwner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DenomOwner& a, DenomOwner& b) {
    a.Swap(&b);
  }
  inline void Swap(DenomOwner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenomOwner* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DenomOwner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DenomOwner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DenomOwner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DenomOwner& from) {
    DenomOwner::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DenomOwner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.DenomOwner";
  }
  protected:
  explicit DenomOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kBalanceFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.base.v1beta1.Coin balance = 2 [json_name = "balance", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_balance() const;
  void clear_balance() ;
  const ::cosmos::base::v1beta1::Coin& balance() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_balance();
  ::cosmos::base::v1beta1::Coin* mutable_balance();
  void set_allocated_balance(::cosmos::base::v1beta1::Coin* balance);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_balance() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_balance();
  public:
  void unsafe_arena_set_allocated_balance(
      ::cosmos::base::v1beta1::Coin* balance);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_balance();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.DenomOwner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmos::base::v1beta1::Coin* balance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomOwnersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QueryDenomOwnersResponse) */ {
 public:
  inline QueryDenomOwnersResponse() : QueryDenomOwnersResponse(nullptr) {}
  ~QueryDenomOwnersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomOwnersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomOwnersResponse(const QueryDenomOwnersResponse& from);
  QueryDenomOwnersResponse(QueryDenomOwnersResponse&& from) noexcept
    : QueryDenomOwnersResponse() {
    *this = ::std::move(from);
  }

  inline QueryDenomOwnersResponse& operator=(const QueryDenomOwnersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomOwnersResponse& operator=(QueryDenomOwnersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomOwnersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomOwnersResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomOwnersResponse*>(
               &_QueryDenomOwnersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(QueryDenomOwnersResponse& a, QueryDenomOwnersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomOwnersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomOwnersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomOwnersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomOwnersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomOwnersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomOwnersResponse& from) {
    QueryDenomOwnersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomOwnersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QueryDenomOwnersResponse";
  }
  protected:
  explicit QueryDenomOwnersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomOwnersFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.bank.v1beta1.DenomOwner denom_owners = 1 [json_name = "denomOwners"];
  int denom_owners_size() const;
  private:
  int _internal_denom_owners_size() const;

  public:
  void clear_denom_owners() ;
  ::cosmos::bank::v1beta1::DenomOwner* mutable_denom_owners(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomOwner >*
      mutable_denom_owners();
  private:
  const ::cosmos::bank::v1beta1::DenomOwner& _internal_denom_owners(int index) const;
  ::cosmos::bank::v1beta1::DenomOwner* _internal_add_denom_owners();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::DenomOwner>& _internal_denom_owners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::DenomOwner>* _internal_mutable_denom_owners();
  public:
  const ::cosmos::bank::v1beta1::DenomOwner& denom_owners(int index) const;
  ::cosmos::bank::v1beta1::DenomOwner* add_denom_owners();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomOwner >&
      denom_owners() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QueryDenomOwnersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomOwner > denom_owners_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySendEnabledRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QuerySendEnabledRequest) */ {
 public:
  inline QuerySendEnabledRequest() : QuerySendEnabledRequest(nullptr) {}
  ~QuerySendEnabledRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySendEnabledRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySendEnabledRequest(const QuerySendEnabledRequest& from);
  QuerySendEnabledRequest(QuerySendEnabledRequest&& from) noexcept
    : QuerySendEnabledRequest() {
    *this = ::std::move(from);
  }

  inline QuerySendEnabledRequest& operator=(const QuerySendEnabledRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySendEnabledRequest& operator=(QuerySendEnabledRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySendEnabledRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySendEnabledRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySendEnabledRequest*>(
               &_QuerySendEnabledRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QuerySendEnabledRequest& a, QuerySendEnabledRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySendEnabledRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySendEnabledRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySendEnabledRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySendEnabledRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySendEnabledRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySendEnabledRequest& from) {
    QuerySendEnabledRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySendEnabledRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QuerySendEnabledRequest";
  }
  protected:
  explicit QuerySendEnabledRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomsFieldNumber = 1,
    kPaginationFieldNumber = 99,
  };
  // repeated string denoms = 1 [json_name = "denoms"];
  int denoms_size() const;
  private:
  int _internal_denoms_size() const;

  public:
  void clear_denoms() ;
  const std::string& denoms(int index) const;
  std::string* mutable_denoms(int index);
  void set_denoms(int index, const std::string& value);
  void set_denoms(int index, std::string&& value);
  void set_denoms(int index, const char* value);
  void set_denoms(int index, const char* value, std::size_t size);
  void set_denoms(int index, absl::string_view value);
  std::string* add_denoms();
  void add_denoms(const std::string& value);
  void add_denoms(std::string&& value);
  void add_denoms(const char* value);
  void add_denoms(const char* value, std::size_t size);
  void add_denoms(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& denoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_denoms();

  private:
  const std::string& _internal_denoms(int index) const;
  std::string* _internal_add_denoms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_denoms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_denoms();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 99 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QuerySendEnabledRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> denoms_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySendEnabledResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.bank.v1beta1.QuerySendEnabledResponse) */ {
 public:
  inline QuerySendEnabledResponse() : QuerySendEnabledResponse(nullptr) {}
  ~QuerySendEnabledResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySendEnabledResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySendEnabledResponse(const QuerySendEnabledResponse& from);
  QuerySendEnabledResponse(QuerySendEnabledResponse&& from) noexcept
    : QuerySendEnabledResponse() {
    *this = ::std::move(from);
  }

  inline QuerySendEnabledResponse& operator=(const QuerySendEnabledResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySendEnabledResponse& operator=(QuerySendEnabledResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySendEnabledResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySendEnabledResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySendEnabledResponse*>(
               &_QuerySendEnabledResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QuerySendEnabledResponse& a, QuerySendEnabledResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySendEnabledResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySendEnabledResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySendEnabledResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySendEnabledResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySendEnabledResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySendEnabledResponse& from) {
    QuerySendEnabledResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySendEnabledResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.bank.v1beta1.QuerySendEnabledResponse";
  }
  protected:
  explicit QuerySendEnabledResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendEnabledFieldNumber = 1,
    kPaginationFieldNumber = 99,
  };
  // repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled"];
  int send_enabled_size() const;
  private:
  int _internal_send_enabled_size() const;

  public:
  void clear_send_enabled() ;
  ::cosmos::bank::v1beta1::SendEnabled* mutable_send_enabled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >*
      mutable_send_enabled();
  private:
  const ::cosmos::bank::v1beta1::SendEnabled& _internal_send_enabled(int index) const;
  ::cosmos::bank::v1beta1::SendEnabled* _internal_add_send_enabled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>& _internal_send_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>* _internal_mutable_send_enabled();
  public:
  const ::cosmos::bank::v1beta1::SendEnabled& send_enabled(int index) const;
  ::cosmos::bank::v1beta1::SendEnabled* add_send_enabled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >&
      send_enabled() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 99 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.bank.v1beta1.QuerySendEnabledResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled > send_enabled_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbank_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryBalanceRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryBalanceRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryBalanceRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryBalanceRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryBalanceRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QueryBalanceRequest.address)
}
inline std::string* QueryBalanceRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryBalanceRequest.address)
  return _s;
}
inline const std::string& QueryBalanceRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryBalanceRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryBalanceRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryBalanceRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryBalanceRequest.address)
  return _impl_.address_.Release();
}
inline void QueryBalanceRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryBalanceRequest.address)
}

// string denom = 2 [json_name = "denom"];
inline void QueryBalanceRequest::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& QueryBalanceRequest::denom() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryBalanceRequest.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryBalanceRequest::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QueryBalanceRequest.denom)
}
inline std::string* QueryBalanceRequest::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryBalanceRequest.denom)
  return _s;
}
inline const std::string& QueryBalanceRequest::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void QueryBalanceRequest::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryBalanceRequest::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryBalanceRequest::release_denom() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryBalanceRequest.denom)
  return _impl_.denom_.Release();
}
inline void QueryBalanceRequest::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryBalanceRequest.denom)
}

// -------------------------------------------------------------------

// QueryBalanceResponse

// .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
inline bool QueryBalanceResponse::has_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.balance_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& QueryBalanceResponse::_internal_balance() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.balance_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& QueryBalanceResponse::balance() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryBalanceResponse.balance)
  return _internal_balance();
}
inline void QueryBalanceResponse::unsafe_arena_set_allocated_balance(
    ::cosmos::base::v1beta1::Coin* balance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.balance_);
  }
  _impl_.balance_ = balance;
  if (balance) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryBalanceResponse.balance)
}
inline ::cosmos::base::v1beta1::Coin* QueryBalanceResponse::release_balance() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QueryBalanceResponse::unsafe_arena_release_balance() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryBalanceResponse.balance)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QueryBalanceResponse::_internal_mutable_balance() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.balance_ = p;
  }
  return _impl_.balance_;
}
inline ::cosmos::base::v1beta1::Coin* QueryBalanceResponse::mutable_balance() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_balance();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryBalanceResponse.balance)
  return _msg;
}
inline void QueryBalanceResponse::set_allocated_balance(::cosmos::base::v1beta1::Coin* balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.balance_);
  }
  if (balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(balance));
    if (message_arena != submessage_arena) {
      balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.balance_ = balance;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryBalanceResponse.balance)
}

// -------------------------------------------------------------------

// QueryAllBalancesRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryAllBalancesRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryAllBalancesRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryAllBalancesRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAllBalancesRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QueryAllBalancesRequest.address)
}
inline std::string* QueryAllBalancesRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryAllBalancesRequest.address)
  return _s;
}
inline const std::string& QueryAllBalancesRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryAllBalancesRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAllBalancesRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAllBalancesRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryAllBalancesRequest.address)
  return _impl_.address_.Release();
}
inline void QueryAllBalancesRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryAllBalancesRequest.address)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryAllBalancesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllBalancesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllBalancesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryAllBalancesRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllBalancesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryAllBalancesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllBalancesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllBalancesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryAllBalancesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllBalancesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllBalancesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryAllBalancesRequest.pagination)
  return _msg;
}
inline void QueryAllBalancesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryAllBalancesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAllBalancesResponse

// repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int QueryAllBalancesResponse::_internal_balances_size() const {
  return _impl_.balances_.size();
}
inline int QueryAllBalancesResponse::balances_size() const {
  return _internal_balances_size();
}
inline ::cosmos::base::v1beta1::Coin* QueryAllBalancesResponse::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryAllBalancesResponse.balances)
  return _internal_mutable_balances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QueryAllBalancesResponse::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.QueryAllBalancesResponse.balances)
  return _internal_mutable_balances();
}
inline const ::cosmos::base::v1beta1::Coin& QueryAllBalancesResponse::_internal_balances(int index) const {
  return _internal_balances().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QueryAllBalancesResponse::balances(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryAllBalancesResponse.balances)
  return _internal_balances(index);
}
inline ::cosmos::base::v1beta1::Coin* QueryAllBalancesResponse::_internal_add_balances() {
  return _internal_mutable_balances()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QueryAllBalancesResponse::add_balances() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_balances();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.QueryAllBalancesResponse.balances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QueryAllBalancesResponse::balances() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.QueryAllBalancesResponse.balances)
  return _internal_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QueryAllBalancesResponse::_internal_balances() const {
  return _impl_.balances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QueryAllBalancesResponse::_internal_mutable_balances() {
  return &_impl_.balances_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryAllBalancesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllBalancesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllBalancesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryAllBalancesResponse.pagination)
  return _internal_pagination();
}
inline void QueryAllBalancesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryAllBalancesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllBalancesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllBalancesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryAllBalancesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllBalancesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllBalancesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryAllBalancesResponse.pagination)
  return _msg;
}
inline void QueryAllBalancesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryAllBalancesResponse.pagination)
}

// -------------------------------------------------------------------

// QuerySpendableBalancesRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QuerySpendableBalancesRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QuerySpendableBalancesRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySpendableBalancesRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.address)
}
inline std::string* QuerySpendableBalancesRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.address)
  return _s;
}
inline const std::string& QuerySpendableBalancesRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QuerySpendableBalancesRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySpendableBalancesRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySpendableBalancesRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.address)
  return _impl_.address_.Release();
}
inline void QuerySpendableBalancesRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.address)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QuerySpendableBalancesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QuerySpendableBalancesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QuerySpendableBalancesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.pagination)
  return _internal_pagination();
}
inline void QuerySpendableBalancesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySpendableBalancesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySpendableBalancesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySpendableBalancesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySpendableBalancesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.pagination)
  return _msg;
}
inline void QuerySpendableBalancesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalancesRequest.pagination)
}

// -------------------------------------------------------------------

// QuerySpendableBalancesResponse

// repeated .cosmos.base.v1beta1.Coin balances = 1 [json_name = "balances", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int QuerySpendableBalancesResponse::_internal_balances_size() const {
  return _impl_.balances_.size();
}
inline int QuerySpendableBalancesResponse::balances_size() const {
  return _internal_balances_size();
}
inline ::cosmos::base::v1beta1::Coin* QuerySpendableBalancesResponse::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.balances)
  return _internal_mutable_balances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QuerySpendableBalancesResponse::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.balances)
  return _internal_mutable_balances();
}
inline const ::cosmos::base::v1beta1::Coin& QuerySpendableBalancesResponse::_internal_balances(int index) const {
  return _internal_balances().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QuerySpendableBalancesResponse::balances(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.balances)
  return _internal_balances(index);
}
inline ::cosmos::base::v1beta1::Coin* QuerySpendableBalancesResponse::_internal_add_balances() {
  return _internal_mutable_balances()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QuerySpendableBalancesResponse::add_balances() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_balances();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.balances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QuerySpendableBalancesResponse::balances() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.balances)
  return _internal_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QuerySpendableBalancesResponse::_internal_balances() const {
  return _impl_.balances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QuerySpendableBalancesResponse::_internal_mutable_balances() {
  return &_impl_.balances_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QuerySpendableBalancesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QuerySpendableBalancesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QuerySpendableBalancesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.pagination)
  return _internal_pagination();
}
inline void QuerySpendableBalancesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySpendableBalancesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySpendableBalancesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySpendableBalancesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySpendableBalancesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.pagination)
  return _msg;
}
inline void QuerySpendableBalancesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalancesResponse.pagination)
}

// -------------------------------------------------------------------

// QuerySpendableBalanceByDenomRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QuerySpendableBalanceByDenomRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QuerySpendableBalanceByDenomRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySpendableBalanceByDenomRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.address)
}
inline std::string* QuerySpendableBalanceByDenomRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.address)
  return _s;
}
inline const std::string& QuerySpendableBalanceByDenomRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QuerySpendableBalanceByDenomRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySpendableBalanceByDenomRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySpendableBalanceByDenomRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.address)
  return _impl_.address_.Release();
}
inline void QuerySpendableBalanceByDenomRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.address)
}

// string denom = 2 [json_name = "denom"];
inline void QuerySpendableBalanceByDenomRequest::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& QuerySpendableBalanceByDenomRequest::denom() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySpendableBalanceByDenomRequest::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.denom)
}
inline std::string* QuerySpendableBalanceByDenomRequest::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.denom)
  return _s;
}
inline const std::string& QuerySpendableBalanceByDenomRequest::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void QuerySpendableBalanceByDenomRequest::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySpendableBalanceByDenomRequest::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySpendableBalanceByDenomRequest::release_denom() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.denom)
  return _impl_.denom_.Release();
}
inline void QuerySpendableBalanceByDenomRequest::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomRequest.denom)
}

// -------------------------------------------------------------------

// QuerySpendableBalanceByDenomResponse

// .cosmos.base.v1beta1.Coin balance = 1 [json_name = "balance"];
inline bool QuerySpendableBalanceByDenomResponse::has_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.balance_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& QuerySpendableBalanceByDenomResponse::_internal_balance() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.balance_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& QuerySpendableBalanceByDenomResponse::balance() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse.balance)
  return _internal_balance();
}
inline void QuerySpendableBalanceByDenomResponse::unsafe_arena_set_allocated_balance(
    ::cosmos::base::v1beta1::Coin* balance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.balance_);
  }
  _impl_.balance_ = balance;
  if (balance) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse.balance)
}
inline ::cosmos::base::v1beta1::Coin* QuerySpendableBalanceByDenomResponse::release_balance() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QuerySpendableBalanceByDenomResponse::unsafe_arena_release_balance() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse.balance)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QuerySpendableBalanceByDenomResponse::_internal_mutable_balance() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.balance_ = p;
  }
  return _impl_.balance_;
}
inline ::cosmos::base::v1beta1::Coin* QuerySpendableBalanceByDenomResponse::mutable_balance() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_balance();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse.balance)
  return _msg;
}
inline void QuerySpendableBalanceByDenomResponse::set_allocated_balance(::cosmos::base::v1beta1::Coin* balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.balance_);
  }
  if (balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(balance));
    if (message_arena != submessage_arena) {
      balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.balance_ = balance;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySpendableBalanceByDenomResponse.balance)
}

// -------------------------------------------------------------------

// QueryTotalSupplyRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryTotalSupplyRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryTotalSupplyRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryTotalSupplyRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryTotalSupplyRequest.pagination)
  return _internal_pagination();
}
inline void QueryTotalSupplyRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryTotalSupplyRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryTotalSupplyRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryTotalSupplyRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryTotalSupplyRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryTotalSupplyRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryTotalSupplyRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryTotalSupplyRequest.pagination)
  return _msg;
}
inline void QueryTotalSupplyRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryTotalSupplyRequest.pagination)
}

// -------------------------------------------------------------------

// QueryTotalSupplyResponse

// repeated .cosmos.base.v1beta1.Coin supply = 1 [json_name = "supply", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int QueryTotalSupplyResponse::_internal_supply_size() const {
  return _impl_.supply_.size();
}
inline int QueryTotalSupplyResponse::supply_size() const {
  return _internal_supply_size();
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalSupplyResponse::mutable_supply(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryTotalSupplyResponse.supply)
  return _internal_mutable_supply()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QueryTotalSupplyResponse::mutable_supply() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.QueryTotalSupplyResponse.supply)
  return _internal_mutable_supply();
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalSupplyResponse::_internal_supply(int index) const {
  return _internal_supply().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalSupplyResponse::supply(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryTotalSupplyResponse.supply)
  return _internal_supply(index);
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalSupplyResponse::_internal_add_supply() {
  return _internal_mutable_supply()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalSupplyResponse::add_supply() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_supply();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.QueryTotalSupplyResponse.supply)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QueryTotalSupplyResponse::supply() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.QueryTotalSupplyResponse.supply)
  return _internal_supply();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QueryTotalSupplyResponse::_internal_supply() const {
  return _impl_.supply_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QueryTotalSupplyResponse::_internal_mutable_supply() {
  return &_impl_.supply_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryTotalSupplyResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryTotalSupplyResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryTotalSupplyResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryTotalSupplyResponse.pagination)
  return _internal_pagination();
}
inline void QueryTotalSupplyResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryTotalSupplyResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryTotalSupplyResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryTotalSupplyResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryTotalSupplyResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryTotalSupplyResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryTotalSupplyResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryTotalSupplyResponse.pagination)
  return _msg;
}
inline void QueryTotalSupplyResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryTotalSupplyResponse.pagination)
}

// -------------------------------------------------------------------

// QuerySupplyOfRequest

// string denom = 1 [json_name = "denom"];
inline void QuerySupplyOfRequest::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& QuerySupplyOfRequest::denom() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySupplyOfRequest.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySupplyOfRequest::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QuerySupplyOfRequest.denom)
}
inline std::string* QuerySupplyOfRequest::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySupplyOfRequest.denom)
  return _s;
}
inline const std::string& QuerySupplyOfRequest::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void QuerySupplyOfRequest::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySupplyOfRequest::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySupplyOfRequest::release_denom() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySupplyOfRequest.denom)
  return _impl_.denom_.Release();
}
inline void QuerySupplyOfRequest::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySupplyOfRequest.denom)
}

// -------------------------------------------------------------------

// QuerySupplyOfResponse

// .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QuerySupplyOfResponse::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& QuerySupplyOfResponse::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& QuerySupplyOfResponse::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySupplyOfResponse.amount)
  return _internal_amount();
}
inline void QuerySupplyOfResponse::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QuerySupplyOfResponse.amount)
}
inline ::cosmos::base::v1beta1::Coin* QuerySupplyOfResponse::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QuerySupplyOfResponse::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySupplyOfResponse.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QuerySupplyOfResponse::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* QuerySupplyOfResponse::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySupplyOfResponse.amount)
  return _msg;
}
inline void QuerySupplyOfResponse::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySupplyOfResponse.amount)
}

// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .cosmos.bank.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmos::bank::v1beta1::Params& QueryParamsResponse::_internal_params() const {
  const ::cosmos::bank::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::bank::v1beta1::Params&>(
      ::cosmos::bank::v1beta1::_Params_default_instance_);
}
inline const ::cosmos::bank::v1beta1::Params& QueryParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(
    ::cosmos::bank::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryParamsResponse.params)
}
inline ::cosmos::bank::v1beta1::Params* QueryParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::bank::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::bank::v1beta1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::bank::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmos::bank::v1beta1::Params* QueryParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::bank::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmos::bank::v1beta1::Params* QueryParamsResponse::mutable_params() {
  ::cosmos::bank::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::cosmos::bank::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryDenomsMetadataRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryDenomsMetadataRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryDenomsMetadataRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryDenomsMetadataRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomsMetadataRequest.pagination)
  return _internal_pagination();
}
inline void QueryDenomsMetadataRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryDenomsMetadataRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomsMetadataRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomsMetadataRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryDenomsMetadataRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomsMetadataRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomsMetadataRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomsMetadataRequest.pagination)
  return _msg;
}
inline void QueryDenomsMetadataRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryDenomsMetadataRequest.pagination)
}

// -------------------------------------------------------------------

// QueryDenomsMetadataResponse

// repeated .cosmos.bank.v1beta1.Metadata metadatas = 1 [json_name = "metadatas", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int QueryDenomsMetadataResponse::_internal_metadatas_size() const {
  return _impl_.metadatas_.size();
}
inline int QueryDenomsMetadataResponse::metadatas_size() const {
  return _internal_metadatas_size();
}
inline ::cosmos::bank::v1beta1::Metadata* QueryDenomsMetadataResponse::mutable_metadatas(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.metadatas)
  return _internal_mutable_metadatas()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata >*
QueryDenomsMetadataResponse::mutable_metadatas() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.metadatas)
  return _internal_mutable_metadatas();
}
inline const ::cosmos::bank::v1beta1::Metadata& QueryDenomsMetadataResponse::_internal_metadatas(int index) const {
  return _internal_metadatas().Get(index);
}
inline const ::cosmos::bank::v1beta1::Metadata& QueryDenomsMetadataResponse::metadatas(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.metadatas)
  return _internal_metadatas(index);
}
inline ::cosmos::bank::v1beta1::Metadata* QueryDenomsMetadataResponse::_internal_add_metadatas() {
  return _internal_mutable_metadatas()->Add();
}
inline ::cosmos::bank::v1beta1::Metadata* QueryDenomsMetadataResponse::add_metadatas() {
  ::cosmos::bank::v1beta1::Metadata* _add = _internal_add_metadatas();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.metadatas)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::Metadata >&
QueryDenomsMetadataResponse::metadatas() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.metadatas)
  return _internal_metadatas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Metadata>&
QueryDenomsMetadataResponse::_internal_metadatas() const {
  return _impl_.metadatas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::Metadata>*
QueryDenomsMetadataResponse::_internal_mutable_metadatas() {
  return &_impl_.metadatas_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryDenomsMetadataResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryDenomsMetadataResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryDenomsMetadataResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.pagination)
  return _internal_pagination();
}
inline void QueryDenomsMetadataResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomsMetadataResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomsMetadataResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomsMetadataResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomsMetadataResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.pagination)
  return _msg;
}
inline void QueryDenomsMetadataResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryDenomsMetadataResponse.pagination)
}

// -------------------------------------------------------------------

// QueryDenomMetadataRequest

// string denom = 1 [json_name = "denom"];
inline void QueryDenomMetadataRequest::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& QueryDenomMetadataRequest::denom() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomMetadataRequest.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomMetadataRequest::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QueryDenomMetadataRequest.denom)
}
inline std::string* QueryDenomMetadataRequest::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomMetadataRequest.denom)
  return _s;
}
inline const std::string& QueryDenomMetadataRequest::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void QueryDenomMetadataRequest::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDenomMetadataRequest::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDenomMetadataRequest::release_denom() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryDenomMetadataRequest.denom)
  return _impl_.denom_.Release();
}
inline void QueryDenomMetadataRequest::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryDenomMetadataRequest.denom)
}

// -------------------------------------------------------------------

// QueryDenomMetadataResponse

// .cosmos.bank.v1beta1.Metadata metadata = 1 [json_name = "metadata", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryDenomMetadataResponse::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::cosmos::bank::v1beta1::Metadata& QueryDenomMetadataResponse::_internal_metadata() const {
  const ::cosmos::bank::v1beta1::Metadata* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::bank::v1beta1::Metadata&>(
      ::cosmos::bank::v1beta1::_Metadata_default_instance_);
}
inline const ::cosmos::bank::v1beta1::Metadata& QueryDenomMetadataResponse::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomMetadataResponse.metadata)
  return _internal_metadata();
}
inline void QueryDenomMetadataResponse::unsafe_arena_set_allocated_metadata(
    ::cosmos::bank::v1beta1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryDenomMetadataResponse.metadata)
}
inline ::cosmos::bank::v1beta1::Metadata* QueryDenomMetadataResponse::release_metadata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::bank::v1beta1::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::bank::v1beta1::Metadata* QueryDenomMetadataResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryDenomMetadataResponse.metadata)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::bank::v1beta1::Metadata* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::cosmos::bank::v1beta1::Metadata* QueryDenomMetadataResponse::_internal_mutable_metadata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::bank::v1beta1::Metadata>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::cosmos::bank::v1beta1::Metadata* QueryDenomMetadataResponse::mutable_metadata() {
  ::cosmos::bank::v1beta1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomMetadataResponse.metadata)
  return _msg;
}
inline void QueryDenomMetadataResponse::set_allocated_metadata(::cosmos::bank::v1beta1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryDenomMetadataResponse.metadata)
}

// -------------------------------------------------------------------

// QueryDenomOwnersRequest

// string denom = 1 [json_name = "denom"];
inline void QueryDenomOwnersRequest::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& QueryDenomOwnersRequest::denom() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomOwnersRequest.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomOwnersRequest::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QueryDenomOwnersRequest.denom)
}
inline std::string* QueryDenomOwnersRequest::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomOwnersRequest.denom)
  return _s;
}
inline const std::string& QueryDenomOwnersRequest::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void QueryDenomOwnersRequest::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDenomOwnersRequest::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDenomOwnersRequest::release_denom() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryDenomOwnersRequest.denom)
  return _impl_.denom_.Release();
}
inline void QueryDenomOwnersRequest::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryDenomOwnersRequest.denom)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryDenomOwnersRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryDenomOwnersRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryDenomOwnersRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomOwnersRequest.pagination)
  return _internal_pagination();
}
inline void QueryDenomOwnersRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryDenomOwnersRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomOwnersRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomOwnersRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryDenomOwnersRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomOwnersRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomOwnersRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomOwnersRequest.pagination)
  return _msg;
}
inline void QueryDenomOwnersRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryDenomOwnersRequest.pagination)
}

// -------------------------------------------------------------------

// DenomOwner

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void DenomOwner::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& DenomOwner::address() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.DenomOwner.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DenomOwner::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.DenomOwner.address)
}
inline std::string* DenomOwner::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.DenomOwner.address)
  return _s;
}
inline const std::string& DenomOwner::_internal_address() const {
  return _impl_.address_.Get();
}
inline void DenomOwner::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* DenomOwner::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* DenomOwner::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.DenomOwner.address)
  return _impl_.address_.Release();
}
inline void DenomOwner::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.DenomOwner.address)
}

// .cosmos.base.v1beta1.Coin balance = 2 [json_name = "balance", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool DenomOwner::has_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.balance_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& DenomOwner::_internal_balance() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.balance_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& DenomOwner::balance() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.DenomOwner.balance)
  return _internal_balance();
}
inline void DenomOwner::unsafe_arena_set_allocated_balance(
    ::cosmos::base::v1beta1::Coin* balance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.balance_);
  }
  _impl_.balance_ = balance;
  if (balance) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.DenomOwner.balance)
}
inline ::cosmos::base::v1beta1::Coin* DenomOwner::release_balance() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* DenomOwner::unsafe_arena_release_balance() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.DenomOwner.balance)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.balance_;
  _impl_.balance_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* DenomOwner::_internal_mutable_balance() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.balance_ = p;
  }
  return _impl_.balance_;
}
inline ::cosmos::base::v1beta1::Coin* DenomOwner::mutable_balance() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_balance();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.DenomOwner.balance)
  return _msg;
}
inline void DenomOwner::set_allocated_balance(::cosmos::base::v1beta1::Coin* balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.balance_);
  }
  if (balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(balance));
    if (message_arena != submessage_arena) {
      balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, balance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.balance_ = balance;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.DenomOwner.balance)
}

// -------------------------------------------------------------------

// QueryDenomOwnersResponse

// repeated .cosmos.bank.v1beta1.DenomOwner denom_owners = 1 [json_name = "denomOwners"];
inline int QueryDenomOwnersResponse::_internal_denom_owners_size() const {
  return _impl_.denom_owners_.size();
}
inline int QueryDenomOwnersResponse::denom_owners_size() const {
  return _internal_denom_owners_size();
}
inline void QueryDenomOwnersResponse::clear_denom_owners() {
  _internal_mutable_denom_owners()->Clear();
}
inline ::cosmos::bank::v1beta1::DenomOwner* QueryDenomOwnersResponse::mutable_denom_owners(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomOwnersResponse.denom_owners)
  return _internal_mutable_denom_owners()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomOwner >*
QueryDenomOwnersResponse::mutable_denom_owners() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.QueryDenomOwnersResponse.denom_owners)
  return _internal_mutable_denom_owners();
}
inline const ::cosmos::bank::v1beta1::DenomOwner& QueryDenomOwnersResponse::_internal_denom_owners(int index) const {
  return _internal_denom_owners().Get(index);
}
inline const ::cosmos::bank::v1beta1::DenomOwner& QueryDenomOwnersResponse::denom_owners(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomOwnersResponse.denom_owners)
  return _internal_denom_owners(index);
}
inline ::cosmos::bank::v1beta1::DenomOwner* QueryDenomOwnersResponse::_internal_add_denom_owners() {
  return _internal_mutable_denom_owners()->Add();
}
inline ::cosmos::bank::v1beta1::DenomOwner* QueryDenomOwnersResponse::add_denom_owners() {
  ::cosmos::bank::v1beta1::DenomOwner* _add = _internal_add_denom_owners();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.QueryDenomOwnersResponse.denom_owners)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::DenomOwner >&
QueryDenomOwnersResponse::denom_owners() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.QueryDenomOwnersResponse.denom_owners)
  return _internal_denom_owners();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::DenomOwner>&
QueryDenomOwnersResponse::_internal_denom_owners() const {
  return _impl_.denom_owners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::DenomOwner>*
QueryDenomOwnersResponse::_internal_mutable_denom_owners() {
  return &_impl_.denom_owners_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryDenomOwnersResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryDenomOwnersResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryDenomOwnersResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QueryDenomOwnersResponse.pagination)
  return _internal_pagination();
}
inline void QueryDenomOwnersResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QueryDenomOwnersResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomOwnersResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomOwnersResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QueryDenomOwnersResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomOwnersResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomOwnersResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QueryDenomOwnersResponse.pagination)
  return _msg;
}
inline void QueryDenomOwnersResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QueryDenomOwnersResponse.pagination)
}

// -------------------------------------------------------------------

// QuerySendEnabledRequest

// repeated string denoms = 1 [json_name = "denoms"];
inline int QuerySendEnabledRequest::_internal_denoms_size() const {
  return _impl_.denoms_.size();
}
inline int QuerySendEnabledRequest::denoms_size() const {
  return _internal_denoms_size();
}
inline void QuerySendEnabledRequest::clear_denoms() {
  _internal_mutable_denoms()->Clear();
}
inline std::string* QuerySendEnabledRequest::add_denoms() {
  std::string* _s = _internal_add_denoms();
  // @@protoc_insertion_point(field_add_mutable:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
  return _s;
}
inline const std::string& QuerySendEnabledRequest::denoms(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
  return _internal_denoms(index);
}
inline std::string* QuerySendEnabledRequest::mutable_denoms(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
  return _internal_mutable_denoms()->Mutable(index);
}
inline void QuerySendEnabledRequest::set_denoms(int index, const std::string& value) {
  _internal_mutable_denoms()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::set_denoms(int index, std::string&& value) {
  _internal_mutable_denoms()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::set_denoms(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_denoms()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::set_denoms(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_denoms()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::set_denoms(int index, absl::string_view value) {
  _internal_mutable_denoms()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::add_denoms(const std::string& value) {
  _internal_mutable_denoms()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::add_denoms(std::string&& value) {
  _internal_mutable_denoms()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::add_denoms(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_denoms()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::add_denoms(const char* value, std::size_t size) {
  _internal_mutable_denoms()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline void QuerySendEnabledRequest::add_denoms(absl::string_view value) {
  _internal_mutable_denoms()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QuerySendEnabledRequest::denoms() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
  return _internal_denoms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* QuerySendEnabledRequest::mutable_denoms() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.QuerySendEnabledRequest.denoms)
  return _internal_mutable_denoms();
}
inline const std::string& QuerySendEnabledRequest::_internal_denoms(int index) const {
  return _internal_denoms().Get(index);
}
inline std::string* QuerySendEnabledRequest::_internal_add_denoms() {
  return _internal_mutable_denoms()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QuerySendEnabledRequest::_internal_denoms() const {
  return _impl_.denoms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QuerySendEnabledRequest::_internal_mutable_denoms() {
  return &_impl_.denoms_;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 99 [json_name = "pagination"];
inline bool QuerySendEnabledRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QuerySendEnabledRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QuerySendEnabledRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySendEnabledRequest.pagination)
  return _internal_pagination();
}
inline void QuerySendEnabledRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QuerySendEnabledRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySendEnabledRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySendEnabledRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySendEnabledRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySendEnabledRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySendEnabledRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySendEnabledRequest.pagination)
  return _msg;
}
inline void QuerySendEnabledRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySendEnabledRequest.pagination)
}

// -------------------------------------------------------------------

// QuerySendEnabledResponse

// repeated .cosmos.bank.v1beta1.SendEnabled send_enabled = 1 [json_name = "sendEnabled"];
inline int QuerySendEnabledResponse::_internal_send_enabled_size() const {
  return _impl_.send_enabled_.size();
}
inline int QuerySendEnabledResponse::send_enabled_size() const {
  return _internal_send_enabled_size();
}
inline ::cosmos::bank::v1beta1::SendEnabled* QuerySendEnabledResponse::mutable_send_enabled(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySendEnabledResponse.send_enabled)
  return _internal_mutable_send_enabled()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >*
QuerySendEnabledResponse::mutable_send_enabled() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.bank.v1beta1.QuerySendEnabledResponse.send_enabled)
  return _internal_mutable_send_enabled();
}
inline const ::cosmos::bank::v1beta1::SendEnabled& QuerySendEnabledResponse::_internal_send_enabled(int index) const {
  return _internal_send_enabled().Get(index);
}
inline const ::cosmos::bank::v1beta1::SendEnabled& QuerySendEnabledResponse::send_enabled(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySendEnabledResponse.send_enabled)
  return _internal_send_enabled(index);
}
inline ::cosmos::bank::v1beta1::SendEnabled* QuerySendEnabledResponse::_internal_add_send_enabled() {
  return _internal_mutable_send_enabled()->Add();
}
inline ::cosmos::bank::v1beta1::SendEnabled* QuerySendEnabledResponse::add_send_enabled() {
  ::cosmos::bank::v1beta1::SendEnabled* _add = _internal_add_send_enabled();
  // @@protoc_insertion_point(field_add:cosmos.bank.v1beta1.QuerySendEnabledResponse.send_enabled)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::bank::v1beta1::SendEnabled >&
QuerySendEnabledResponse::send_enabled() const {
  // @@protoc_insertion_point(field_list:cosmos.bank.v1beta1.QuerySendEnabledResponse.send_enabled)
  return _internal_send_enabled();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>&
QuerySendEnabledResponse::_internal_send_enabled() const {
  return _impl_.send_enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::bank::v1beta1::SendEnabled>*
QuerySendEnabledResponse::_internal_mutable_send_enabled() {
  return &_impl_.send_enabled_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 99 [json_name = "pagination"];
inline bool QuerySendEnabledResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QuerySendEnabledResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QuerySendEnabledResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.bank.v1beta1.QuerySendEnabledResponse.pagination)
  return _internal_pagination();
}
inline void QuerySendEnabledResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.bank.v1beta1.QuerySendEnabledResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySendEnabledResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySendEnabledResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.bank.v1beta1.QuerySendEnabledResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySendEnabledResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySendEnabledResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.bank.v1beta1.QuerySendEnabledResponse.pagination)
  return _msg;
}
inline void QuerySendEnabledResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.bank.v1beta1.QuerySendEnabledResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace bank
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbank_2fv1beta1_2fquery_2eproto_2epb_2eh

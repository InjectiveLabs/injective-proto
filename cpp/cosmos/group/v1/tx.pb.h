// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos/group/v1/types.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgroup_2fv1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fgroup_2fv1_2ftx_2eproto;
namespace cosmos {
namespace group {
namespace v1 {
class MsgCreateGroup;
struct MsgCreateGroupDefaultTypeInternal;
extern MsgCreateGroupDefaultTypeInternal _MsgCreateGroup_default_instance_;
class MsgCreateGroupPolicy;
struct MsgCreateGroupPolicyDefaultTypeInternal;
extern MsgCreateGroupPolicyDefaultTypeInternal _MsgCreateGroupPolicy_default_instance_;
class MsgCreateGroupPolicyResponse;
struct MsgCreateGroupPolicyResponseDefaultTypeInternal;
extern MsgCreateGroupPolicyResponseDefaultTypeInternal _MsgCreateGroupPolicyResponse_default_instance_;
class MsgCreateGroupResponse;
struct MsgCreateGroupResponseDefaultTypeInternal;
extern MsgCreateGroupResponseDefaultTypeInternal _MsgCreateGroupResponse_default_instance_;
class MsgCreateGroupWithPolicy;
struct MsgCreateGroupWithPolicyDefaultTypeInternal;
extern MsgCreateGroupWithPolicyDefaultTypeInternal _MsgCreateGroupWithPolicy_default_instance_;
class MsgCreateGroupWithPolicyResponse;
struct MsgCreateGroupWithPolicyResponseDefaultTypeInternal;
extern MsgCreateGroupWithPolicyResponseDefaultTypeInternal _MsgCreateGroupWithPolicyResponse_default_instance_;
class MsgExec;
struct MsgExecDefaultTypeInternal;
extern MsgExecDefaultTypeInternal _MsgExec_default_instance_;
class MsgExecResponse;
struct MsgExecResponseDefaultTypeInternal;
extern MsgExecResponseDefaultTypeInternal _MsgExecResponse_default_instance_;
class MsgLeaveGroup;
struct MsgLeaveGroupDefaultTypeInternal;
extern MsgLeaveGroupDefaultTypeInternal _MsgLeaveGroup_default_instance_;
class MsgLeaveGroupResponse;
struct MsgLeaveGroupResponseDefaultTypeInternal;
extern MsgLeaveGroupResponseDefaultTypeInternal _MsgLeaveGroupResponse_default_instance_;
class MsgSubmitProposal;
struct MsgSubmitProposalDefaultTypeInternal;
extern MsgSubmitProposalDefaultTypeInternal _MsgSubmitProposal_default_instance_;
class MsgSubmitProposalResponse;
struct MsgSubmitProposalResponseDefaultTypeInternal;
extern MsgSubmitProposalResponseDefaultTypeInternal _MsgSubmitProposalResponse_default_instance_;
class MsgUpdateGroupAdmin;
struct MsgUpdateGroupAdminDefaultTypeInternal;
extern MsgUpdateGroupAdminDefaultTypeInternal _MsgUpdateGroupAdmin_default_instance_;
class MsgUpdateGroupAdminResponse;
struct MsgUpdateGroupAdminResponseDefaultTypeInternal;
extern MsgUpdateGroupAdminResponseDefaultTypeInternal _MsgUpdateGroupAdminResponse_default_instance_;
class MsgUpdateGroupMembers;
struct MsgUpdateGroupMembersDefaultTypeInternal;
extern MsgUpdateGroupMembersDefaultTypeInternal _MsgUpdateGroupMembers_default_instance_;
class MsgUpdateGroupMembersResponse;
struct MsgUpdateGroupMembersResponseDefaultTypeInternal;
extern MsgUpdateGroupMembersResponseDefaultTypeInternal _MsgUpdateGroupMembersResponse_default_instance_;
class MsgUpdateGroupMetadata;
struct MsgUpdateGroupMetadataDefaultTypeInternal;
extern MsgUpdateGroupMetadataDefaultTypeInternal _MsgUpdateGroupMetadata_default_instance_;
class MsgUpdateGroupMetadataResponse;
struct MsgUpdateGroupMetadataResponseDefaultTypeInternal;
extern MsgUpdateGroupMetadataResponseDefaultTypeInternal _MsgUpdateGroupMetadataResponse_default_instance_;
class MsgUpdateGroupPolicyAdmin;
struct MsgUpdateGroupPolicyAdminDefaultTypeInternal;
extern MsgUpdateGroupPolicyAdminDefaultTypeInternal _MsgUpdateGroupPolicyAdmin_default_instance_;
class MsgUpdateGroupPolicyAdminResponse;
struct MsgUpdateGroupPolicyAdminResponseDefaultTypeInternal;
extern MsgUpdateGroupPolicyAdminResponseDefaultTypeInternal _MsgUpdateGroupPolicyAdminResponse_default_instance_;
class MsgUpdateGroupPolicyDecisionPolicy;
struct MsgUpdateGroupPolicyDecisionPolicyDefaultTypeInternal;
extern MsgUpdateGroupPolicyDecisionPolicyDefaultTypeInternal _MsgUpdateGroupPolicyDecisionPolicy_default_instance_;
class MsgUpdateGroupPolicyDecisionPolicyResponse;
struct MsgUpdateGroupPolicyDecisionPolicyResponseDefaultTypeInternal;
extern MsgUpdateGroupPolicyDecisionPolicyResponseDefaultTypeInternal _MsgUpdateGroupPolicyDecisionPolicyResponse_default_instance_;
class MsgUpdateGroupPolicyMetadata;
struct MsgUpdateGroupPolicyMetadataDefaultTypeInternal;
extern MsgUpdateGroupPolicyMetadataDefaultTypeInternal _MsgUpdateGroupPolicyMetadata_default_instance_;
class MsgUpdateGroupPolicyMetadataResponse;
struct MsgUpdateGroupPolicyMetadataResponseDefaultTypeInternal;
extern MsgUpdateGroupPolicyMetadataResponseDefaultTypeInternal _MsgUpdateGroupPolicyMetadataResponse_default_instance_;
class MsgVote;
struct MsgVoteDefaultTypeInternal;
extern MsgVoteDefaultTypeInternal _MsgVote_default_instance_;
class MsgVoteResponse;
struct MsgVoteResponseDefaultTypeInternal;
extern MsgVoteResponseDefaultTypeInternal _MsgVoteResponse_default_instance_;
class MsgWithdrawProposal;
struct MsgWithdrawProposalDefaultTypeInternal;
extern MsgWithdrawProposalDefaultTypeInternal _MsgWithdrawProposal_default_instance_;
class MsgWithdrawProposalResponse;
struct MsgWithdrawProposalResponseDefaultTypeInternal;
extern MsgWithdrawProposalResponseDefaultTypeInternal _MsgWithdrawProposalResponse_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::group::v1::MsgCreateGroup* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgCreateGroup>(Arena*);
template <>
::cosmos::group::v1::MsgCreateGroupPolicy* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgCreateGroupPolicy>(Arena*);
template <>
::cosmos::group::v1::MsgCreateGroupPolicyResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgCreateGroupPolicyResponse>(Arena*);
template <>
::cosmos::group::v1::MsgCreateGroupResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgCreateGroupResponse>(Arena*);
template <>
::cosmos::group::v1::MsgCreateGroupWithPolicy* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgCreateGroupWithPolicy>(Arena*);
template <>
::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>(Arena*);
template <>
::cosmos::group::v1::MsgExec* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgExec>(Arena*);
template <>
::cosmos::group::v1::MsgExecResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgExecResponse>(Arena*);
template <>
::cosmos::group::v1::MsgLeaveGroup* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgLeaveGroup>(Arena*);
template <>
::cosmos::group::v1::MsgLeaveGroupResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgLeaveGroupResponse>(Arena*);
template <>
::cosmos::group::v1::MsgSubmitProposal* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgSubmitProposal>(Arena*);
template <>
::cosmos::group::v1::MsgSubmitProposalResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgSubmitProposalResponse>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupAdmin* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupAdmin>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupAdminResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupAdminResponse>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupMembers* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupMembers>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupMembersResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupMembersResponse>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupMetadata* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupMetadata>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupMetadataResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupMetadataResponse>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupPolicyAdmin>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupPolicyMetadata>(Arena*);
template <>
::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>(Arena*);
template <>
::cosmos::group::v1::MsgVote* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgVote>(Arena*);
template <>
::cosmos::group::v1::MsgVoteResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgVoteResponse>(Arena*);
template <>
::cosmos::group::v1::MsgWithdrawProposal* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgWithdrawProposal>(Arena*);
template <>
::cosmos::group::v1::MsgWithdrawProposalResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::MsgWithdrawProposalResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace group {
namespace v1 {
enum Exec : int {
  EXEC_UNSPECIFIED = 0,
  EXEC_TRY = 1,
  Exec_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Exec_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Exec_IsValid(int value);
constexpr Exec Exec_MIN = static_cast<Exec>(0);
constexpr Exec Exec_MAX = static_cast<Exec>(1);
constexpr int Exec_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Exec_descriptor();
template <typename T>
const std::string& Exec_Name(T value) {
  static_assert(std::is_same<T, Exec>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Exec_Name().");
  return Exec_Name(static_cast<Exec>(value));
}
template <>
inline const std::string& Exec_Name(Exec value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Exec_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Exec_Parse(absl::string_view name, Exec* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Exec>(
      Exec_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MsgCreateGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroup) */ {
 public:
  inline MsgCreateGroup() : MsgCreateGroup(nullptr) {}
  ~MsgCreateGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateGroup(const MsgCreateGroup& from);
  MsgCreateGroup(MsgCreateGroup&& from) noexcept
    : MsgCreateGroup() {
    *this = ::std::move(from);
  }

  inline MsgCreateGroup& operator=(const MsgCreateGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroup& operator=(MsgCreateGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroup* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroup*>(
               &_MsgCreateGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgCreateGroup& a, MsgCreateGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateGroup& from) {
    MsgCreateGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgCreateGroup";
  }
  protected:
  explicit MsgCreateGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kAdminFieldNumber = 1,
    kMetadataFieldNumber = 3,
  };
  // repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int members_size() const;
  private:
  int _internal_members_size() const;

  public:
  void clear_members() ;
  ::cosmos::group::v1::MemberRequest* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >*
      mutable_members();
  private:
  const ::cosmos::group::v1::MemberRequest& _internal_members(int index) const;
  ::cosmos::group::v1::MemberRequest* _internal_add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& _internal_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* _internal_mutable_members();
  public:
  const ::cosmos::group::v1::MemberRequest& members(int index) const;
  ::cosmos::group::v1::MemberRequest* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >&
      members() const;
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCreateGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupResponse) */ {
 public:
  inline MsgCreateGroupResponse() : MsgCreateGroupResponse(nullptr) {}
  ~MsgCreateGroupResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateGroupResponse(const MsgCreateGroupResponse& from);
  MsgCreateGroupResponse(MsgCreateGroupResponse&& from) noexcept
    : MsgCreateGroupResponse() {
    *this = ::std::move(from);
  }

  inline MsgCreateGroupResponse& operator=(const MsgCreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupResponse& operator=(MsgCreateGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupResponse*>(
               &_MsgCreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgCreateGroupResponse& a, MsgCreateGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateGroupResponse& from) {
    MsgCreateGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgCreateGroupResponse";
  }
  protected:
  explicit MsgCreateGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupMembers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupMembers) */ {
 public:
  inline MsgUpdateGroupMembers() : MsgUpdateGroupMembers(nullptr) {}
  ~MsgUpdateGroupMembers() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupMembers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupMembers(const MsgUpdateGroupMembers& from);
  MsgUpdateGroupMembers(MsgUpdateGroupMembers&& from) noexcept
    : MsgUpdateGroupMembers() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupMembers& operator=(const MsgUpdateGroupMembers& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupMembers& operator=(MsgUpdateGroupMembers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupMembers& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupMembers* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupMembers*>(
               &_MsgUpdateGroupMembers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgUpdateGroupMembers& a, MsgUpdateGroupMembers& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupMembers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupMembers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupMembers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupMembers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupMembers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateGroupMembers& from) {
    MsgUpdateGroupMembers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateGroupMembers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupMembers";
  }
  protected:
  explicit MsgUpdateGroupMembers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberUpdatesFieldNumber = 3,
    kAdminFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.MemberRequest member_updates = 3 [json_name = "memberUpdates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int member_updates_size() const;
  private:
  int _internal_member_updates_size() const;

  public:
  void clear_member_updates() ;
  ::cosmos::group::v1::MemberRequest* mutable_member_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >*
      mutable_member_updates();
  private:
  const ::cosmos::group::v1::MemberRequest& _internal_member_updates(int index) const;
  ::cosmos::group::v1::MemberRequest* _internal_add_member_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& _internal_member_updates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* _internal_mutable_member_updates();
  public:
  const ::cosmos::group::v1::MemberRequest& member_updates(int index) const;
  ::cosmos::group::v1::MemberRequest* add_member_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >&
      member_updates() const;
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupMembers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest > member_updates_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupMembersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupMembersResponse) */ {
 public:
  inline MsgUpdateGroupMembersResponse() : MsgUpdateGroupMembersResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupMembersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupMembersResponse(const MsgUpdateGroupMembersResponse& from);
  MsgUpdateGroupMembersResponse(MsgUpdateGroupMembersResponse&& from) noexcept
    : MsgUpdateGroupMembersResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupMembersResponse& operator=(const MsgUpdateGroupMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupMembersResponse& operator=(MsgUpdateGroupMembersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupMembersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupMembersResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupMembersResponse*>(
               &_MsgUpdateGroupMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgUpdateGroupMembersResponse& a, MsgUpdateGroupMembersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupMembersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupMembersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupMembersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupMembersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupMembersResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupMembersResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupMembersResponse";
  }
  protected:
  explicit MsgUpdateGroupMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupMembersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupAdmin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupAdmin) */ {
 public:
  inline MsgUpdateGroupAdmin() : MsgUpdateGroupAdmin(nullptr) {}
  ~MsgUpdateGroupAdmin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupAdmin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupAdmin(const MsgUpdateGroupAdmin& from);
  MsgUpdateGroupAdmin(MsgUpdateGroupAdmin&& from) noexcept
    : MsgUpdateGroupAdmin() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupAdmin& operator=(const MsgUpdateGroupAdmin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupAdmin& operator=(MsgUpdateGroupAdmin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupAdmin& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupAdmin* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupAdmin*>(
               &_MsgUpdateGroupAdmin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgUpdateGroupAdmin& a, MsgUpdateGroupAdmin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupAdmin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupAdmin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupAdmin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupAdmin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupAdmin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateGroupAdmin& from) {
    MsgUpdateGroupAdmin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateGroupAdmin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupAdmin";
  }
  protected:
  explicit MsgUpdateGroupAdmin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kNewAdminFieldNumber = 3,
    kGroupIdFieldNumber = 2,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string new_admin = 3 [json_name = "newAdmin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_new_admin() ;
  const std::string& new_admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_admin(Arg_&& arg, Args_... args);
  std::string* mutable_new_admin();
  PROTOBUF_NODISCARD std::string* release_new_admin();
  void set_allocated_new_admin(std::string* ptr);

  private:
  const std::string& _internal_new_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_admin(
      const std::string& value);
  std::string* _internal_mutable_new_admin();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupAdmin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_admin_;
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupAdminResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupAdminResponse) */ {
 public:
  inline MsgUpdateGroupAdminResponse() : MsgUpdateGroupAdminResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupAdminResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupAdminResponse(const MsgUpdateGroupAdminResponse& from);
  MsgUpdateGroupAdminResponse(MsgUpdateGroupAdminResponse&& from) noexcept
    : MsgUpdateGroupAdminResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupAdminResponse& operator=(const MsgUpdateGroupAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupAdminResponse& operator=(MsgUpdateGroupAdminResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupAdminResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupAdminResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupAdminResponse*>(
               &_MsgUpdateGroupAdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgUpdateGroupAdminResponse& a, MsgUpdateGroupAdminResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupAdminResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupAdminResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupAdminResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupAdminResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupAdminResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupAdminResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupAdminResponse";
  }
  protected:
  explicit MsgUpdateGroupAdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupAdminResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupMetadata) */ {
 public:
  inline MsgUpdateGroupMetadata() : MsgUpdateGroupMetadata(nullptr) {}
  ~MsgUpdateGroupMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupMetadata(const MsgUpdateGroupMetadata& from);
  MsgUpdateGroupMetadata(MsgUpdateGroupMetadata&& from) noexcept
    : MsgUpdateGroupMetadata() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupMetadata& operator=(const MsgUpdateGroupMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupMetadata& operator=(MsgUpdateGroupMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupMetadata* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupMetadata*>(
               &_MsgUpdateGroupMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgUpdateGroupMetadata& a, MsgUpdateGroupMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateGroupMetadata& from) {
    MsgUpdateGroupMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateGroupMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupMetadata";
  }
  protected:
  explicit MsgUpdateGroupMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kGroupIdFieldNumber = 2,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupMetadataResponse) */ {
 public:
  inline MsgUpdateGroupMetadataResponse() : MsgUpdateGroupMetadataResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupMetadataResponse(const MsgUpdateGroupMetadataResponse& from);
  MsgUpdateGroupMetadataResponse(MsgUpdateGroupMetadataResponse&& from) noexcept
    : MsgUpdateGroupMetadataResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupMetadataResponse& operator=(const MsgUpdateGroupMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupMetadataResponse& operator=(MsgUpdateGroupMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupMetadataResponse*>(
               &_MsgUpdateGroupMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgUpdateGroupMetadataResponse& a, MsgUpdateGroupMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupMetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupMetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupMetadataResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupMetadataResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupMetadataResponse";
  }
  protected:
  explicit MsgUpdateGroupMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCreateGroupPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupPolicy) */ {
 public:
  inline MsgCreateGroupPolicy() : MsgCreateGroupPolicy(nullptr) {}
  ~MsgCreateGroupPolicy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateGroupPolicy(const MsgCreateGroupPolicy& from);
  MsgCreateGroupPolicy(MsgCreateGroupPolicy&& from) noexcept
    : MsgCreateGroupPolicy() {
    *this = ::std::move(from);
  }

  inline MsgCreateGroupPolicy& operator=(const MsgCreateGroupPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupPolicy& operator=(MsgCreateGroupPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupPolicy* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupPolicy*>(
               &_MsgCreateGroupPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgCreateGroupPolicy& a, MsgCreateGroupPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateGroupPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateGroupPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateGroupPolicy& from) {
    MsgCreateGroupPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateGroupPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgCreateGroupPolicy";
  }
  protected:
  explicit MsgCreateGroupPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kDecisionPolicyFieldNumber = 4,
    kGroupIdFieldNumber = 2,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // .google.protobuf.Any decision_policy = 4 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
  bool has_decision_policy() const;
  void clear_decision_policy() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& decision_policy() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_decision_policy();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_decision_policy();
  void set_allocated_decision_policy(::PROTOBUF_NAMESPACE_ID::Any* decision_policy);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_decision_policy() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_decision_policy();
  public:
  void unsafe_arena_set_allocated_decision_policy(
      ::PROTOBUF_NAMESPACE_ID::Any* decision_policy);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_decision_policy();
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::Any* decision_policy_;
    ::uint64_t group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCreateGroupPolicyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupPolicyResponse) */ {
 public:
  inline MsgCreateGroupPolicyResponse() : MsgCreateGroupPolicyResponse(nullptr) {}
  ~MsgCreateGroupPolicyResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupPolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateGroupPolicyResponse(const MsgCreateGroupPolicyResponse& from);
  MsgCreateGroupPolicyResponse(MsgCreateGroupPolicyResponse&& from) noexcept
    : MsgCreateGroupPolicyResponse() {
    *this = ::std::move(from);
  }

  inline MsgCreateGroupPolicyResponse& operator=(const MsgCreateGroupPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupPolicyResponse& operator=(MsgCreateGroupPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupPolicyResponse*>(
               &_MsgCreateGroupPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgCreateGroupPolicyResponse& a, MsgCreateGroupPolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateGroupPolicyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupPolicyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupPolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateGroupPolicyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupPolicyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateGroupPolicyResponse& from) {
    MsgCreateGroupPolicyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateGroupPolicyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgCreateGroupPolicyResponse";
  }
  protected:
  explicit MsgCreateGroupPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupPolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupPolicyAdmin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyAdmin) */ {
 public:
  inline MsgUpdateGroupPolicyAdmin() : MsgUpdateGroupPolicyAdmin(nullptr) {}
  ~MsgUpdateGroupPolicyAdmin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyAdmin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupPolicyAdmin(const MsgUpdateGroupPolicyAdmin& from);
  MsgUpdateGroupPolicyAdmin(MsgUpdateGroupPolicyAdmin&& from) noexcept
    : MsgUpdateGroupPolicyAdmin() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupPolicyAdmin& operator=(const MsgUpdateGroupPolicyAdmin& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyAdmin& operator=(MsgUpdateGroupPolicyAdmin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyAdmin& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyAdmin* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyAdmin*>(
               &_MsgUpdateGroupPolicyAdmin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgUpdateGroupPolicyAdmin& a, MsgUpdateGroupPolicyAdmin& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupPolicyAdmin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyAdmin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyAdmin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupPolicyAdmin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupPolicyAdmin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateGroupPolicyAdmin& from) {
    MsgUpdateGroupPolicyAdmin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateGroupPolicyAdmin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupPolicyAdmin";
  }
  protected:
  explicit MsgUpdateGroupPolicyAdmin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kGroupPolicyAddressFieldNumber = 2,
    kNewAdminFieldNumber = 3,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* ptr);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // string new_admin = 3 [json_name = "newAdmin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_new_admin() ;
  const std::string& new_admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_admin(Arg_&& arg, Args_... args);
  std::string* mutable_new_admin();
  PROTOBUF_NODISCARD std::string* release_new_admin();
  void set_allocated_new_admin(std::string* ptr);

  private:
  const std::string& _internal_new_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_admin(
      const std::string& value);
  std::string* _internal_mutable_new_admin();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyAdmin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_policy_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_admin_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupPolicyAdminResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse) */ {
 public:
  inline MsgUpdateGroupPolicyAdminResponse() : MsgUpdateGroupPolicyAdminResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyAdminResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupPolicyAdminResponse(const MsgUpdateGroupPolicyAdminResponse& from);
  MsgUpdateGroupPolicyAdminResponse(MsgUpdateGroupPolicyAdminResponse&& from) noexcept
    : MsgUpdateGroupPolicyAdminResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupPolicyAdminResponse& operator=(const MsgUpdateGroupPolicyAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyAdminResponse& operator=(MsgUpdateGroupPolicyAdminResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyAdminResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyAdminResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyAdminResponse*>(
               &_MsgUpdateGroupPolicyAdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MsgUpdateGroupPolicyAdminResponse& a, MsgUpdateGroupPolicyAdminResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupPolicyAdminResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyAdminResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyAdminResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupPolicyAdminResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupPolicyAdminResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyAdminResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse";
  }
  protected:
  explicit MsgUpdateGroupPolicyAdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCreateGroupWithPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupWithPolicy) */ {
 public:
  inline MsgCreateGroupWithPolicy() : MsgCreateGroupWithPolicy(nullptr) {}
  ~MsgCreateGroupWithPolicy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupWithPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateGroupWithPolicy(const MsgCreateGroupWithPolicy& from);
  MsgCreateGroupWithPolicy(MsgCreateGroupWithPolicy&& from) noexcept
    : MsgCreateGroupWithPolicy() {
    *this = ::std::move(from);
  }

  inline MsgCreateGroupWithPolicy& operator=(const MsgCreateGroupWithPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupWithPolicy& operator=(MsgCreateGroupWithPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupWithPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupWithPolicy* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupWithPolicy*>(
               &_MsgCreateGroupWithPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MsgCreateGroupWithPolicy& a, MsgCreateGroupWithPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateGroupWithPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupWithPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupWithPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateGroupWithPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupWithPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateGroupWithPolicy& from) {
    MsgCreateGroupWithPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateGroupWithPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgCreateGroupWithPolicy";
  }
  protected:
  explicit MsgCreateGroupWithPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kAdminFieldNumber = 1,
    kGroupMetadataFieldNumber = 3,
    kGroupPolicyMetadataFieldNumber = 4,
    kDecisionPolicyFieldNumber = 6,
    kGroupPolicyAsAdminFieldNumber = 5,
  };
  // repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int members_size() const;
  private:
  int _internal_members_size() const;

  public:
  void clear_members() ;
  ::cosmos::group::v1::MemberRequest* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >*
      mutable_members();
  private:
  const ::cosmos::group::v1::MemberRequest& _internal_members(int index) const;
  ::cosmos::group::v1::MemberRequest* _internal_add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>& _internal_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>* _internal_mutable_members();
  public:
  const ::cosmos::group::v1::MemberRequest& members(int index) const;
  ::cosmos::group::v1::MemberRequest* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >&
      members() const;
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string group_metadata = 3 [json_name = "groupMetadata"];
  void clear_group_metadata() ;
  const std::string& group_metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_group_metadata();
  PROTOBUF_NODISCARD std::string* release_group_metadata();
  void set_allocated_group_metadata(std::string* ptr);

  private:
  const std::string& _internal_group_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_metadata(
      const std::string& value);
  std::string* _internal_mutable_group_metadata();

  public:
  // string group_policy_metadata = 4 [json_name = "groupPolicyMetadata"];
  void clear_group_policy_metadata() ;
  const std::string& group_policy_metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_metadata();
  PROTOBUF_NODISCARD std::string* release_group_policy_metadata();
  void set_allocated_group_policy_metadata(std::string* ptr);

  private:
  const std::string& _internal_group_policy_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_metadata(
      const std::string& value);
  std::string* _internal_mutable_group_policy_metadata();

  public:
  // .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
  bool has_decision_policy() const;
  void clear_decision_policy() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& decision_policy() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_decision_policy();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_decision_policy();
  void set_allocated_decision_policy(::PROTOBUF_NAMESPACE_ID::Any* decision_policy);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_decision_policy() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_decision_policy();
  public:
  void unsafe_arena_set_allocated_decision_policy(
      ::PROTOBUF_NAMESPACE_ID::Any* decision_policy);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_decision_policy();
  // bool group_policy_as_admin = 5 [json_name = "groupPolicyAsAdmin"];
  void clear_group_policy_as_admin() ;
  bool group_policy_as_admin() const;
  void set_group_policy_as_admin(bool value);

  private:
  bool _internal_group_policy_as_admin() const;
  void _internal_set_group_policy_as_admin(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupWithPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_policy_metadata_;
    ::PROTOBUF_NAMESPACE_ID::Any* decision_policy_;
    bool group_policy_as_admin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCreateGroupWithPolicyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgCreateGroupWithPolicyResponse) */ {
 public:
  inline MsgCreateGroupWithPolicyResponse() : MsgCreateGroupWithPolicyResponse(nullptr) {}
  ~MsgCreateGroupWithPolicyResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateGroupWithPolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateGroupWithPolicyResponse(const MsgCreateGroupWithPolicyResponse& from);
  MsgCreateGroupWithPolicyResponse(MsgCreateGroupWithPolicyResponse&& from) noexcept
    : MsgCreateGroupWithPolicyResponse() {
    *this = ::std::move(from);
  }

  inline MsgCreateGroupWithPolicyResponse& operator=(const MsgCreateGroupWithPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateGroupWithPolicyResponse& operator=(MsgCreateGroupWithPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateGroupWithPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateGroupWithPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateGroupWithPolicyResponse*>(
               &_MsgCreateGroupWithPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MsgCreateGroupWithPolicyResponse& a, MsgCreateGroupWithPolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateGroupWithPolicyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateGroupWithPolicyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateGroupWithPolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateGroupWithPolicyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateGroupWithPolicyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateGroupWithPolicyResponse& from) {
    MsgCreateGroupWithPolicyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateGroupWithPolicyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgCreateGroupWithPolicyResponse";
  }
  protected:
  explicit MsgCreateGroupWithPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupPolicyAddressFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* ptr);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgCreateGroupWithPolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_policy_address_;
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupPolicyDecisionPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy) */ {
 public:
  inline MsgUpdateGroupPolicyDecisionPolicy() : MsgUpdateGroupPolicyDecisionPolicy(nullptr) {}
  ~MsgUpdateGroupPolicyDecisionPolicy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyDecisionPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupPolicyDecisionPolicy(const MsgUpdateGroupPolicyDecisionPolicy& from);
  MsgUpdateGroupPolicyDecisionPolicy(MsgUpdateGroupPolicyDecisionPolicy&& from) noexcept
    : MsgUpdateGroupPolicyDecisionPolicy() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupPolicyDecisionPolicy& operator=(const MsgUpdateGroupPolicyDecisionPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyDecisionPolicy& operator=(MsgUpdateGroupPolicyDecisionPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyDecisionPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyDecisionPolicy* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyDecisionPolicy*>(
               &_MsgUpdateGroupPolicyDecisionPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MsgUpdateGroupPolicyDecisionPolicy& a, MsgUpdateGroupPolicyDecisionPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupPolicyDecisionPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyDecisionPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyDecisionPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupPolicyDecisionPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupPolicyDecisionPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateGroupPolicyDecisionPolicy& from) {
    MsgUpdateGroupPolicyDecisionPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateGroupPolicyDecisionPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy";
  }
  protected:
  explicit MsgUpdateGroupPolicyDecisionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kGroupPolicyAddressFieldNumber = 2,
    kDecisionPolicyFieldNumber = 3,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* ptr);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // .google.protobuf.Any decision_policy = 3 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
  bool has_decision_policy() const;
  void clear_decision_policy() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& decision_policy() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_decision_policy();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_decision_policy();
  void set_allocated_decision_policy(::PROTOBUF_NAMESPACE_ID::Any* decision_policy);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_decision_policy() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_decision_policy();
  public:
  void unsafe_arena_set_allocated_decision_policy(
      ::PROTOBUF_NAMESPACE_ID::Any* decision_policy);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_decision_policy();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_policy_address_;
    ::PROTOBUF_NAMESPACE_ID::Any* decision_policy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupPolicyDecisionPolicyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse) */ {
 public:
  inline MsgUpdateGroupPolicyDecisionPolicyResponse() : MsgUpdateGroupPolicyDecisionPolicyResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyDecisionPolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupPolicyDecisionPolicyResponse(const MsgUpdateGroupPolicyDecisionPolicyResponse& from);
  MsgUpdateGroupPolicyDecisionPolicyResponse(MsgUpdateGroupPolicyDecisionPolicyResponse&& from) noexcept
    : MsgUpdateGroupPolicyDecisionPolicyResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupPolicyDecisionPolicyResponse& operator=(const MsgUpdateGroupPolicyDecisionPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyDecisionPolicyResponse& operator=(MsgUpdateGroupPolicyDecisionPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyDecisionPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyDecisionPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyDecisionPolicyResponse*>(
               &_MsgUpdateGroupPolicyDecisionPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MsgUpdateGroupPolicyDecisionPolicyResponse& a, MsgUpdateGroupPolicyDecisionPolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupPolicyDecisionPolicyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyDecisionPolicyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyDecisionPolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupPolicyDecisionPolicyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupPolicyDecisionPolicyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyDecisionPolicyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse";
  }
  protected:
  explicit MsgUpdateGroupPolicyDecisionPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupPolicyMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyMetadata) */ {
 public:
  inline MsgUpdateGroupPolicyMetadata() : MsgUpdateGroupPolicyMetadata(nullptr) {}
  ~MsgUpdateGroupPolicyMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupPolicyMetadata(const MsgUpdateGroupPolicyMetadata& from);
  MsgUpdateGroupPolicyMetadata(MsgUpdateGroupPolicyMetadata&& from) noexcept
    : MsgUpdateGroupPolicyMetadata() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupPolicyMetadata& operator=(const MsgUpdateGroupPolicyMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyMetadata& operator=(MsgUpdateGroupPolicyMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyMetadata* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyMetadata*>(
               &_MsgUpdateGroupPolicyMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MsgUpdateGroupPolicyMetadata& a, MsgUpdateGroupPolicyMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupPolicyMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupPolicyMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateGroupPolicyMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateGroupPolicyMetadata& from) {
    MsgUpdateGroupPolicyMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateGroupPolicyMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupPolicyMetadata";
  }
  protected:
  explicit MsgUpdateGroupPolicyMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kGroupPolicyAddressFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* ptr);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_policy_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateGroupPolicyMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse) */ {
 public:
  inline MsgUpdateGroupPolicyMetadataResponse() : MsgUpdateGroupPolicyMetadataResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateGroupPolicyMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateGroupPolicyMetadataResponse(const MsgUpdateGroupPolicyMetadataResponse& from);
  MsgUpdateGroupPolicyMetadataResponse(MsgUpdateGroupPolicyMetadataResponse&& from) noexcept
    : MsgUpdateGroupPolicyMetadataResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateGroupPolicyMetadataResponse& operator=(const MsgUpdateGroupPolicyMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateGroupPolicyMetadataResponse& operator=(MsgUpdateGroupPolicyMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateGroupPolicyMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateGroupPolicyMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateGroupPolicyMetadataResponse*>(
               &_MsgUpdateGroupPolicyMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MsgUpdateGroupPolicyMetadataResponse& a, MsgUpdateGroupPolicyMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateGroupPolicyMetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateGroupPolicyMetadataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateGroupPolicyMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateGroupPolicyMetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateGroupPolicyMetadataResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateGroupPolicyMetadataResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse";
  }
  protected:
  explicit MsgUpdateGroupPolicyMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgSubmitProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgSubmitProposal) */ {
 public:
  inline MsgSubmitProposal() : MsgSubmitProposal(nullptr) {}
  ~MsgSubmitProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSubmitProposal(const MsgSubmitProposal& from);
  MsgSubmitProposal(MsgSubmitProposal&& from) noexcept
    : MsgSubmitProposal() {
    *this = ::std::move(from);
  }

  inline MsgSubmitProposal& operator=(const MsgSubmitProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitProposal& operator=(MsgSubmitProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitProposal* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitProposal*>(
               &_MsgSubmitProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MsgSubmitProposal& a, MsgSubmitProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSubmitProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSubmitProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSubmitProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSubmitProposal& from) {
    MsgSubmitProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSubmitProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgSubmitProposal";
  }
  protected:
  explicit MsgSubmitProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposersFieldNumber = 2,
    kMessagesFieldNumber = 4,
    kGroupPolicyAddressFieldNumber = 1,
    kMetadataFieldNumber = 3,
    kTitleFieldNumber = 6,
    kSummaryFieldNumber = 7,
    kExecFieldNumber = 5,
  };
  // repeated string proposers = 2 [json_name = "proposers"];
  int proposers_size() const;
  private:
  int _internal_proposers_size() const;

  public:
  void clear_proposers() ;
  const std::string& proposers(int index) const;
  std::string* mutable_proposers(int index);
  void set_proposers(int index, const std::string& value);
  void set_proposers(int index, std::string&& value);
  void set_proposers(int index, const char* value);
  void set_proposers(int index, const char* value, std::size_t size);
  void set_proposers(int index, absl::string_view value);
  std::string* add_proposers();
  void add_proposers(const std::string& value);
  void add_proposers(std::string&& value);
  void add_proposers(const char* value);
  void add_proposers(const char* value, std::size_t size);
  void add_proposers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& proposers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_proposers();

  private:
  const std::string& _internal_proposers(int index) const;
  std::string* _internal_add_proposers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_proposers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_proposers();

  public:
  // repeated .google.protobuf.Any messages = 4 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_messages();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_messages(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_messages();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& messages(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      messages() const;
  // string group_policy_address = 1 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_group_policy_address() ;
  const std::string& group_policy_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_policy_address(Arg_&& arg, Args_... args);
  std::string* mutable_group_policy_address();
  PROTOBUF_NODISCARD std::string* release_group_policy_address();
  void set_allocated_group_policy_address(std::string* ptr);

  private:
  const std::string& _internal_group_policy_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_policy_address(
      const std::string& value);
  std::string* _internal_mutable_group_policy_address();

  public:
  // string metadata = 3 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // string title = 6 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string summary = 7 [json_name = "summary"];
  void clear_summary() ;
  const std::string& summary() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary(Arg_&& arg, Args_... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* ptr);

  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(
      const std::string& value);
  std::string* _internal_mutable_summary();

  public:
  // .cosmos.group.v1.Exec exec = 5 [json_name = "exec"];
  void clear_exec() ;
  ::cosmos::group::v1::Exec exec() const;
  void set_exec(::cosmos::group::v1::Exec value);

  private:
  ::cosmos::group::v1::Exec _internal_exec() const;
  void _internal_set_exec(::cosmos::group::v1::Exec value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgSubmitProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> proposers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > messages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_policy_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
    int exec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgSubmitProposalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgSubmitProposalResponse) */ {
 public:
  inline MsgSubmitProposalResponse() : MsgSubmitProposalResponse(nullptr) {}
  ~MsgSubmitProposalResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSubmitProposalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSubmitProposalResponse(const MsgSubmitProposalResponse& from);
  MsgSubmitProposalResponse(MsgSubmitProposalResponse&& from) noexcept
    : MsgSubmitProposalResponse() {
    *this = ::std::move(from);
  }

  inline MsgSubmitProposalResponse& operator=(const MsgSubmitProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSubmitProposalResponse& operator=(MsgSubmitProposalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSubmitProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSubmitProposalResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSubmitProposalResponse*>(
               &_MsgSubmitProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MsgSubmitProposalResponse& a, MsgSubmitProposalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSubmitProposalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSubmitProposalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSubmitProposalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSubmitProposalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSubmitProposalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSubmitProposalResponse& from) {
    MsgSubmitProposalResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSubmitProposalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgSubmitProposalResponse";
  }
  protected:
  explicit MsgSubmitProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgSubmitProposalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgWithdrawProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgWithdrawProposal) */ {
 public:
  inline MsgWithdrawProposal() : MsgWithdrawProposal(nullptr) {}
  ~MsgWithdrawProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgWithdrawProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgWithdrawProposal(const MsgWithdrawProposal& from);
  MsgWithdrawProposal(MsgWithdrawProposal&& from) noexcept
    : MsgWithdrawProposal() {
    *this = ::std::move(from);
  }

  inline MsgWithdrawProposal& operator=(const MsgWithdrawProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWithdrawProposal& operator=(MsgWithdrawProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgWithdrawProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgWithdrawProposal* internal_default_instance() {
    return reinterpret_cast<const MsgWithdrawProposal*>(
               &_MsgWithdrawProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MsgWithdrawProposal& a, MsgWithdrawProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgWithdrawProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWithdrawProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgWithdrawProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgWithdrawProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgWithdrawProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgWithdrawProposal& from) {
    MsgWithdrawProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgWithdrawProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgWithdrawProposal";
  }
  protected:
  explicit MsgWithdrawProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgWithdrawProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgWithdrawProposalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgWithdrawProposalResponse) */ {
 public:
  inline MsgWithdrawProposalResponse() : MsgWithdrawProposalResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgWithdrawProposalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgWithdrawProposalResponse(const MsgWithdrawProposalResponse& from);
  MsgWithdrawProposalResponse(MsgWithdrawProposalResponse&& from) noexcept
    : MsgWithdrawProposalResponse() {
    *this = ::std::move(from);
  }

  inline MsgWithdrawProposalResponse& operator=(const MsgWithdrawProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWithdrawProposalResponse& operator=(MsgWithdrawProposalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgWithdrawProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgWithdrawProposalResponse* internal_default_instance() {
    return reinterpret_cast<const MsgWithdrawProposalResponse*>(
               &_MsgWithdrawProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MsgWithdrawProposalResponse& a, MsgWithdrawProposalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgWithdrawProposalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWithdrawProposalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgWithdrawProposalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgWithdrawProposalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgWithdrawProposalResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgWithdrawProposalResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgWithdrawProposalResponse";
  }
  protected:
  explicit MsgWithdrawProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgWithdrawProposalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgVote) */ {
 public:
  inline MsgVote() : MsgVote(nullptr) {}
  ~MsgVote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgVote(const MsgVote& from);
  MsgVote(MsgVote&& from) noexcept
    : MsgVote() {
    *this = ::std::move(from);
  }

  inline MsgVote& operator=(const MsgVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgVote& operator=(MsgVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgVote* internal_default_instance() {
    return reinterpret_cast<const MsgVote*>(
               &_MsgVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MsgVote& a, MsgVote& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgVote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgVote& from) {
    MsgVote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgVote";
  }
  protected:
  explicit MsgVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterFieldNumber = 2,
    kMetadataFieldNumber = 4,
    kProposalIdFieldNumber = 1,
    kOptionFieldNumber = 3,
    kExecFieldNumber = 5,
  };
  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* ptr);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // string metadata = 4 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
  void clear_option() ;
  ::cosmos::group::v1::VoteOption option() const;
  void set_option(::cosmos::group::v1::VoteOption value);

  private:
  ::cosmos::group::v1::VoteOption _internal_option() const;
  void _internal_set_option(::cosmos::group::v1::VoteOption value);

  public:
  // .cosmos.group.v1.Exec exec = 5 [json_name = "exec"];
  void clear_exec() ;
  ::cosmos::group::v1::Exec exec() const;
  void set_exec(::cosmos::group::v1::Exec value);

  private:
  ::cosmos::group::v1::Exec _internal_exec() const;
  void _internal_set_exec(::cosmos::group::v1::Exec value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::uint64_t proposal_id_;
    int option_;
    int exec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgVoteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgVoteResponse) */ {
 public:
  inline MsgVoteResponse() : MsgVoteResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgVoteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgVoteResponse(const MsgVoteResponse& from);
  MsgVoteResponse(MsgVoteResponse&& from) noexcept
    : MsgVoteResponse() {
    *this = ::std::move(from);
  }

  inline MsgVoteResponse& operator=(const MsgVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgVoteResponse& operator=(MsgVoteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgVoteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgVoteResponse* internal_default_instance() {
    return reinterpret_cast<const MsgVoteResponse*>(
               &_MsgVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MsgVoteResponse& a, MsgVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgVoteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgVoteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgVoteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgVoteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgVoteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgVoteResponse";
  }
  protected:
  explicit MsgVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgExec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgExec) */ {
 public:
  inline MsgExec() : MsgExec(nullptr) {}
  ~MsgExec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgExec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgExec(const MsgExec& from);
  MsgExec(MsgExec&& from) noexcept
    : MsgExec() {
    *this = ::std::move(from);
  }

  inline MsgExec& operator=(const MsgExec& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgExec& operator=(MsgExec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgExec& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgExec* internal_default_instance() {
    return reinterpret_cast<const MsgExec*>(
               &_MsgExec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MsgExec& a, MsgExec& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgExec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgExec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgExec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgExec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgExec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgExec& from) {
    MsgExec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgExec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgExec";
  }
  protected:
  explicit MsgExec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecutorFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // string executor = 2 [json_name = "executor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_executor() ;
  const std::string& executor() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executor(Arg_&& arg, Args_... args);
  std::string* mutable_executor();
  PROTOBUF_NODISCARD std::string* release_executor();
  void set_allocated_executor(std::string* ptr);

  private:
  const std::string& _internal_executor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executor(
      const std::string& value);
  std::string* _internal_mutable_executor();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgExec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executor_;
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgExecResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgExecResponse) */ {
 public:
  inline MsgExecResponse() : MsgExecResponse(nullptr) {}
  ~MsgExecResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgExecResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgExecResponse(const MsgExecResponse& from);
  MsgExecResponse(MsgExecResponse&& from) noexcept
    : MsgExecResponse() {
    *this = ::std::move(from);
  }

  inline MsgExecResponse& operator=(const MsgExecResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgExecResponse& operator=(MsgExecResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgExecResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgExecResponse* internal_default_instance() {
    return reinterpret_cast<const MsgExecResponse*>(
               &_MsgExecResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MsgExecResponse& a, MsgExecResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgExecResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgExecResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgExecResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgExecResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgExecResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgExecResponse& from) {
    MsgExecResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgExecResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgExecResponse";
  }
  protected:
  explicit MsgExecResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
  };
  // .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
  void clear_result() ;
  ::cosmos::group::v1::ProposalExecutorResult result() const;
  void set_result(::cosmos::group::v1::ProposalExecutorResult value);

  private:
  ::cosmos::group::v1::ProposalExecutorResult _internal_result() const;
  void _internal_set_result(::cosmos::group::v1::ProposalExecutorResult value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgExecResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgLeaveGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgLeaveGroup) */ {
 public:
  inline MsgLeaveGroup() : MsgLeaveGroup(nullptr) {}
  ~MsgLeaveGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgLeaveGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgLeaveGroup(const MsgLeaveGroup& from);
  MsgLeaveGroup(MsgLeaveGroup&& from) noexcept
    : MsgLeaveGroup() {
    *this = ::std::move(from);
  }

  inline MsgLeaveGroup& operator=(const MsgLeaveGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLeaveGroup& operator=(MsgLeaveGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgLeaveGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgLeaveGroup* internal_default_instance() {
    return reinterpret_cast<const MsgLeaveGroup*>(
               &_MsgLeaveGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MsgLeaveGroup& a, MsgLeaveGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgLeaveGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLeaveGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgLeaveGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgLeaveGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgLeaveGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgLeaveGroup& from) {
    MsgLeaveGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgLeaveGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgLeaveGroup";
  }
  protected:
  explicit MsgLeaveGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint64 group_id = 2 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgLeaveGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgLeaveGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.group.v1.MsgLeaveGroupResponse) */ {
 public:
  inline MsgLeaveGroupResponse() : MsgLeaveGroupResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgLeaveGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgLeaveGroupResponse(const MsgLeaveGroupResponse& from);
  MsgLeaveGroupResponse(MsgLeaveGroupResponse&& from) noexcept
    : MsgLeaveGroupResponse() {
    *this = ::std::move(from);
  }

  inline MsgLeaveGroupResponse& operator=(const MsgLeaveGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgLeaveGroupResponse& operator=(MsgLeaveGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgLeaveGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgLeaveGroupResponse* internal_default_instance() {
    return reinterpret_cast<const MsgLeaveGroupResponse*>(
               &_MsgLeaveGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MsgLeaveGroupResponse& a, MsgLeaveGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgLeaveGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgLeaveGroupResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgLeaveGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgLeaveGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgLeaveGroupResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgLeaveGroupResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.MsgLeaveGroupResponse";
  }
  protected:
  explicit MsgLeaveGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.group.v1.MsgLeaveGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgCreateGroup

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroup::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgCreateGroup::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroup.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroup::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroup.admin)
}
inline std::string* MsgCreateGroup::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroup.admin)
  return _s;
}
inline const std::string& MsgCreateGroup::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgCreateGroup::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroup::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroup::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroup.admin)
  return _impl_.admin_.Release();
}
inline void MsgCreateGroup::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroup.admin)
}

// repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int MsgCreateGroup::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int MsgCreateGroup::members_size() const {
  return _internal_members_size();
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroup::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroup.members)
  return _internal_mutable_members()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >*
MsgCreateGroup::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgCreateGroup.members)
  return _internal_mutable_members();
}
inline const ::cosmos::group::v1::MemberRequest& MsgCreateGroup::_internal_members(int index) const {
  return _internal_members().Get(index);
}
inline const ::cosmos::group::v1::MemberRequest& MsgCreateGroup::members(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroup.members)
  return _internal_members(index);
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroup::_internal_add_members() {
  return _internal_mutable_members()->Add();
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroup::add_members() {
  ::cosmos::group::v1::MemberRequest* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgCreateGroup.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >&
MsgCreateGroup::members() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgCreateGroup.members)
  return _internal_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>&
MsgCreateGroup::_internal_members() const {
  return _impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>*
MsgCreateGroup::_internal_mutable_members() {
  return &_impl_.members_;
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgCreateGroup::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgCreateGroup::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroup.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroup::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroup.metadata)
}
inline std::string* MsgCreateGroup::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroup.metadata)
  return _s;
}
inline const std::string& MsgCreateGroup::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void MsgCreateGroup::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroup::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroup::release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroup.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgCreateGroup::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroup.metadata)
}

// -------------------------------------------------------------------

// MsgCreateGroupResponse

// uint64 group_id = 1 [json_name = "groupId"];
inline void MsgCreateGroupResponse::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgCreateGroupResponse::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupResponse.group_id)
  return _internal_group_id();
}
inline void MsgCreateGroupResponse::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupResponse.group_id)
}
inline ::uint64_t MsgCreateGroupResponse::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void MsgCreateGroupResponse::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// MsgUpdateGroupMembers

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupMembers::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupMembers::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMembers.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupMembers::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMembers.admin)
}
inline std::string* MsgUpdateGroupMembers::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupMembers.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupMembers::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupMembers::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupMembers::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupMembers::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupMembers.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupMembers::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupMembers.admin)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgUpdateGroupMembers::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgUpdateGroupMembers::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMembers.group_id)
  return _internal_group_id();
}
inline void MsgUpdateGroupMembers::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMembers.group_id)
}
inline ::uint64_t MsgUpdateGroupMembers::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void MsgUpdateGroupMembers::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// repeated .cosmos.group.v1.MemberRequest member_updates = 3 [json_name = "memberUpdates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int MsgUpdateGroupMembers::_internal_member_updates_size() const {
  return _impl_.member_updates_.size();
}
inline int MsgUpdateGroupMembers::member_updates_size() const {
  return _internal_member_updates_size();
}
inline ::cosmos::group::v1::MemberRequest* MsgUpdateGroupMembers::mutable_member_updates(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _internal_mutable_member_updates()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >*
MsgUpdateGroupMembers::mutable_member_updates() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _internal_mutable_member_updates();
}
inline const ::cosmos::group::v1::MemberRequest& MsgUpdateGroupMembers::_internal_member_updates(int index) const {
  return _internal_member_updates().Get(index);
}
inline const ::cosmos::group::v1::MemberRequest& MsgUpdateGroupMembers::member_updates(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _internal_member_updates(index);
}
inline ::cosmos::group::v1::MemberRequest* MsgUpdateGroupMembers::_internal_add_member_updates() {
  return _internal_mutable_member_updates()->Add();
}
inline ::cosmos::group::v1::MemberRequest* MsgUpdateGroupMembers::add_member_updates() {
  ::cosmos::group::v1::MemberRequest* _add = _internal_add_member_updates();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >&
MsgUpdateGroupMembers::member_updates() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgUpdateGroupMembers.member_updates)
  return _internal_member_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>&
MsgUpdateGroupMembers::_internal_member_updates() const {
  return _impl_.member_updates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>*
MsgUpdateGroupMembers::_internal_mutable_member_updates() {
  return &_impl_.member_updates_;
}

// -------------------------------------------------------------------

// MsgUpdateGroupMembersResponse

// -------------------------------------------------------------------

// MsgUpdateGroupAdmin

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupAdmin::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupAdmin::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupAdmin::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
}
inline std::string* MsgUpdateGroupAdmin::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupAdmin::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupAdmin::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupAdmin::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupAdmin::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupAdmin::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupAdmin.admin)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgUpdateGroupAdmin::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgUpdateGroupAdmin::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupAdmin.group_id)
  return _internal_group_id();
}
inline void MsgUpdateGroupAdmin::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupAdmin.group_id)
}
inline ::uint64_t MsgUpdateGroupAdmin::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void MsgUpdateGroupAdmin::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// string new_admin = 3 [json_name = "newAdmin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupAdmin::clear_new_admin() {
  _impl_.new_admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupAdmin::new_admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
  return _internal_new_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupAdmin::set_new_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.new_admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
}
inline std::string* MsgUpdateGroupAdmin::mutable_new_admin() {
  std::string* _s = _internal_mutable_new_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
  return _s;
}
inline const std::string& MsgUpdateGroupAdmin::_internal_new_admin() const {
  return _impl_.new_admin_.Get();
}
inline void MsgUpdateGroupAdmin::_internal_set_new_admin(const std::string& value) {
  ;


  _impl_.new_admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupAdmin::_internal_mutable_new_admin() {
  ;
  return _impl_.new_admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupAdmin::release_new_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
  return _impl_.new_admin_.Release();
}
inline void MsgUpdateGroupAdmin::set_allocated_new_admin(std::string* value) {
  _impl_.new_admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_admin_.IsDefault()) {
          _impl_.new_admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupAdmin.new_admin)
}

// -------------------------------------------------------------------

// MsgUpdateGroupAdminResponse

// -------------------------------------------------------------------

// MsgUpdateGroupMetadata

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupMetadata::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupMetadata::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupMetadata::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
}
inline std::string* MsgUpdateGroupMetadata::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupMetadata::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupMetadata::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupMetadata::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupMetadata::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupMetadata::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupMetadata.admin)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgUpdateGroupMetadata::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgUpdateGroupMetadata::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMetadata.group_id)
  return _internal_group_id();
}
inline void MsgUpdateGroupMetadata::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMetadata.group_id)
}
inline ::uint64_t MsgUpdateGroupMetadata::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void MsgUpdateGroupMetadata::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgUpdateGroupMetadata::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupMetadata::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupMetadata::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
}
inline std::string* MsgUpdateGroupMetadata::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
  return _s;
}
inline const std::string& MsgUpdateGroupMetadata::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void MsgUpdateGroupMetadata::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupMetadata::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupMetadata::release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgUpdateGroupMetadata::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupMetadata.metadata)
}

// -------------------------------------------------------------------

// MsgUpdateGroupMetadataResponse

// -------------------------------------------------------------------

// MsgCreateGroupPolicy

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroupPolicy::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupPolicy::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicy.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupPolicy::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupPolicy.admin)
}
inline std::string* MsgCreateGroupPolicy::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupPolicy.admin)
  return _s;
}
inline const std::string& MsgCreateGroupPolicy::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgCreateGroupPolicy::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroupPolicy::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroupPolicy::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupPolicy.admin)
  return _impl_.admin_.Release();
}
inline void MsgCreateGroupPolicy::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupPolicy.admin)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgCreateGroupPolicy::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgCreateGroupPolicy::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicy.group_id)
  return _internal_group_id();
}
inline void MsgCreateGroupPolicy::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupPolicy.group_id)
}
inline ::uint64_t MsgCreateGroupPolicy::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void MsgCreateGroupPolicy::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgCreateGroupPolicy::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupPolicy::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupPolicy::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
}
inline std::string* MsgCreateGroupPolicy::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
  return _s;
}
inline const std::string& MsgCreateGroupPolicy::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void MsgCreateGroupPolicy::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroupPolicy::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroupPolicy::release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgCreateGroupPolicy::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupPolicy.metadata)
}

// .google.protobuf.Any decision_policy = 4 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
inline bool MsgCreateGroupPolicy::has_decision_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_policy_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgCreateGroupPolicy::_internal_decision_policy() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.decision_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgCreateGroupPolicy::decision_policy() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
  return _internal_decision_policy();
}
inline void MsgCreateGroupPolicy::unsafe_arena_set_allocated_decision_policy(
    ::PROTOBUF_NAMESPACE_ID::Any* decision_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_policy_);
  }
  _impl_.decision_policy_ = decision_policy;
  if (decision_policy) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateGroupPolicy::release_decision_policy() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateGroupPolicy::unsafe_arena_release_decision_policy() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateGroupPolicy::_internal_mutable_decision_policy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.decision_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.decision_policy_ = p;
  }
  return _impl_.decision_policy_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateGroupPolicy::mutable_decision_policy() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_decision_policy();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
  return _msg;
}
inline void MsgCreateGroupPolicy::set_allocated_decision_policy(::PROTOBUF_NAMESPACE_ID::Any* decision_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_policy_);
  }
  if (decision_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decision_policy));
    if (message_arena != submessage_arena) {
      decision_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision_policy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.decision_policy_ = decision_policy;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupPolicy.decision_policy)
}

// -------------------------------------------------------------------

// MsgCreateGroupPolicyResponse

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroupPolicyResponse::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupPolicyResponse::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupPolicyResponse::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
}
inline std::string* MsgCreateGroupPolicyResponse::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
  return _s;
}
inline const std::string& MsgCreateGroupPolicyResponse::_internal_address() const {
  return _impl_.address_.Get();
}
inline void MsgCreateGroupPolicyResponse::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroupPolicyResponse::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroupPolicyResponse::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
  return _impl_.address_.Release();
}
inline void MsgCreateGroupPolicyResponse::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupPolicyResponse.address)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyAdmin

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyAdmin::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyAdmin::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyAdmin::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
}
inline std::string* MsgUpdateGroupPolicyAdmin::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyAdmin::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupPolicyAdmin::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyAdmin::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyAdmin::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupPolicyAdmin::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.admin)
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyAdmin::clear_group_policy_address() {
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyAdmin::group_policy_address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyAdmin::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
}
inline std::string* MsgUpdateGroupPolicyAdmin::mutable_group_policy_address() {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyAdmin::_internal_group_policy_address() const {
  return _impl_.group_policy_address_.Get();
}
inline void MsgUpdateGroupPolicyAdmin::_internal_set_group_policy_address(const std::string& value) {
  ;


  _impl_.group_policy_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyAdmin::_internal_mutable_group_policy_address() {
  ;
  return _impl_.group_policy_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyAdmin::release_group_policy_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgUpdateGroupPolicyAdmin::set_allocated_group_policy_address(std::string* value) {
  _impl_.group_policy_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_policy_address_.IsDefault()) {
          _impl_.group_policy_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.group_policy_address)
}

// string new_admin = 3 [json_name = "newAdmin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyAdmin::clear_new_admin() {
  _impl_.new_admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyAdmin::new_admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
  return _internal_new_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyAdmin::set_new_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.new_admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
}
inline std::string* MsgUpdateGroupPolicyAdmin::mutable_new_admin() {
  std::string* _s = _internal_mutable_new_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyAdmin::_internal_new_admin() const {
  return _impl_.new_admin_.Get();
}
inline void MsgUpdateGroupPolicyAdmin::_internal_set_new_admin(const std::string& value) {
  ;


  _impl_.new_admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyAdmin::_internal_mutable_new_admin() {
  ;
  return _impl_.new_admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyAdmin::release_new_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
  return _impl_.new_admin_.Release();
}
inline void MsgUpdateGroupPolicyAdmin::set_allocated_new_admin(std::string* value) {
  _impl_.new_admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_admin_.IsDefault()) {
          _impl_.new_admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyAdmin.new_admin)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyAdminResponse

// -------------------------------------------------------------------

// MsgCreateGroupWithPolicy

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroupWithPolicy::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupWithPolicy::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupWithPolicy::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
}
inline std::string* MsgCreateGroupWithPolicy::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
  return _s;
}
inline const std::string& MsgCreateGroupWithPolicy::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgCreateGroupWithPolicy::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroupWithPolicy::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroupWithPolicy::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
  return _impl_.admin_.Release();
}
inline void MsgCreateGroupWithPolicy::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.admin)
}

// repeated .cosmos.group.v1.MemberRequest members = 2 [json_name = "members", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int MsgCreateGroupWithPolicy::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int MsgCreateGroupWithPolicy::members_size() const {
  return _internal_members_size();
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroupWithPolicy::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _internal_mutable_members()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >*
MsgCreateGroupWithPolicy::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _internal_mutable_members();
}
inline const ::cosmos::group::v1::MemberRequest& MsgCreateGroupWithPolicy::_internal_members(int index) const {
  return _internal_members().Get(index);
}
inline const ::cosmos::group::v1::MemberRequest& MsgCreateGroupWithPolicy::members(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _internal_members(index);
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroupWithPolicy::_internal_add_members() {
  return _internal_mutable_members()->Add();
}
inline ::cosmos::group::v1::MemberRequest* MsgCreateGroupWithPolicy::add_members() {
  ::cosmos::group::v1::MemberRequest* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::MemberRequest >&
MsgCreateGroupWithPolicy::members() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgCreateGroupWithPolicy.members)
  return _internal_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>&
MsgCreateGroupWithPolicy::_internal_members() const {
  return _impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::MemberRequest>*
MsgCreateGroupWithPolicy::_internal_mutable_members() {
  return &_impl_.members_;
}

// string group_metadata = 3 [json_name = "groupMetadata"];
inline void MsgCreateGroupWithPolicy::clear_group_metadata() {
  _impl_.group_metadata_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupWithPolicy::group_metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
  return _internal_group_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupWithPolicy::set_group_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
}
inline std::string* MsgCreateGroupWithPolicy::mutable_group_metadata() {
  std::string* _s = _internal_mutable_group_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
  return _s;
}
inline const std::string& MsgCreateGroupWithPolicy::_internal_group_metadata() const {
  return _impl_.group_metadata_.Get();
}
inline void MsgCreateGroupWithPolicy::_internal_set_group_metadata(const std::string& value) {
  ;


  _impl_.group_metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroupWithPolicy::_internal_mutable_group_metadata() {
  ;
  return _impl_.group_metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroupWithPolicy::release_group_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
  return _impl_.group_metadata_.Release();
}
inline void MsgCreateGroupWithPolicy::set_allocated_group_metadata(std::string* value) {
  _impl_.group_metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_metadata_.IsDefault()) {
          _impl_.group_metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.group_metadata)
}

// string group_policy_metadata = 4 [json_name = "groupPolicyMetadata"];
inline void MsgCreateGroupWithPolicy::clear_group_policy_metadata() {
  _impl_.group_policy_metadata_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupWithPolicy::group_policy_metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
  return _internal_group_policy_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupWithPolicy::set_group_policy_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_policy_metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
}
inline std::string* MsgCreateGroupWithPolicy::mutable_group_policy_metadata() {
  std::string* _s = _internal_mutable_group_policy_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
  return _s;
}
inline const std::string& MsgCreateGroupWithPolicy::_internal_group_policy_metadata() const {
  return _impl_.group_policy_metadata_.Get();
}
inline void MsgCreateGroupWithPolicy::_internal_set_group_policy_metadata(const std::string& value) {
  ;


  _impl_.group_policy_metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroupWithPolicy::_internal_mutable_group_policy_metadata() {
  ;
  return _impl_.group_policy_metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroupWithPolicy::release_group_policy_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
  return _impl_.group_policy_metadata_.Release();
}
inline void MsgCreateGroupWithPolicy::set_allocated_group_policy_metadata(std::string* value) {
  _impl_.group_policy_metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_policy_metadata_.IsDefault()) {
          _impl_.group_policy_metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_metadata)
}

// bool group_policy_as_admin = 5 [json_name = "groupPolicyAsAdmin"];
inline void MsgCreateGroupWithPolicy::clear_group_policy_as_admin() {
  _impl_.group_policy_as_admin_ = false;
}
inline bool MsgCreateGroupWithPolicy::group_policy_as_admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_as_admin)
  return _internal_group_policy_as_admin();
}
inline void MsgCreateGroupWithPolicy::set_group_policy_as_admin(bool value) {
  _internal_set_group_policy_as_admin(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicy.group_policy_as_admin)
}
inline bool MsgCreateGroupWithPolicy::_internal_group_policy_as_admin() const {
  return _impl_.group_policy_as_admin_;
}
inline void MsgCreateGroupWithPolicy::_internal_set_group_policy_as_admin(bool value) {
  ;
  _impl_.group_policy_as_admin_ = value;
}

// .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
inline bool MsgCreateGroupWithPolicy::has_decision_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_policy_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgCreateGroupWithPolicy::_internal_decision_policy() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.decision_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgCreateGroupWithPolicy::decision_policy() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
  return _internal_decision_policy();
}
inline void MsgCreateGroupWithPolicy::unsafe_arena_set_allocated_decision_policy(
    ::PROTOBUF_NAMESPACE_ID::Any* decision_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_policy_);
  }
  _impl_.decision_policy_ = decision_policy;
  if (decision_policy) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateGroupWithPolicy::release_decision_policy() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateGroupWithPolicy::unsafe_arena_release_decision_policy() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateGroupWithPolicy::_internal_mutable_decision_policy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.decision_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.decision_policy_ = p;
  }
  return _impl_.decision_policy_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateGroupWithPolicy::mutable_decision_policy() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_decision_policy();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
  return _msg;
}
inline void MsgCreateGroupWithPolicy::set_allocated_decision_policy(::PROTOBUF_NAMESPACE_ID::Any* decision_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_policy_);
  }
  if (decision_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decision_policy));
    if (message_arena != submessage_arena) {
      decision_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision_policy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.decision_policy_ = decision_policy;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicy.decision_policy)
}

// -------------------------------------------------------------------

// MsgCreateGroupWithPolicyResponse

// uint64 group_id = 1 [json_name = "groupId"];
inline void MsgCreateGroupWithPolicyResponse::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgCreateGroupWithPolicyResponse::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_id)
  return _internal_group_id();
}
inline void MsgCreateGroupWithPolicyResponse::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_id)
}
inline ::uint64_t MsgCreateGroupWithPolicyResponse::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void MsgCreateGroupWithPolicyResponse::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateGroupWithPolicyResponse::clear_group_policy_address() {
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgCreateGroupWithPolicyResponse::group_policy_address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateGroupWithPolicyResponse::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
}
inline std::string* MsgCreateGroupWithPolicyResponse::mutable_group_policy_address() {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
  return _s;
}
inline const std::string& MsgCreateGroupWithPolicyResponse::_internal_group_policy_address() const {
  return _impl_.group_policy_address_.Get();
}
inline void MsgCreateGroupWithPolicyResponse::_internal_set_group_policy_address(const std::string& value) {
  ;


  _impl_.group_policy_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateGroupWithPolicyResponse::_internal_mutable_group_policy_address() {
  ;
  return _impl_.group_policy_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateGroupWithPolicyResponse::release_group_policy_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgCreateGroupWithPolicyResponse::set_allocated_group_policy_address(std::string* value) {
  _impl_.group_policy_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_policy_address_.IsDefault()) {
          _impl_.group_policy_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgCreateGroupWithPolicyResponse.group_policy_address)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyDecisionPolicy

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyDecisionPolicy::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyDecisionPolicy::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyDecisionPolicy::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyDecisionPolicy::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.admin)
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyDecisionPolicy::clear_group_policy_address() {
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyDecisionPolicy::group_policy_address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyDecisionPolicy::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::mutable_group_policy_address() {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyDecisionPolicy::_internal_group_policy_address() const {
  return _impl_.group_policy_address_.Get();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::_internal_set_group_policy_address(const std::string& value) {
  ;


  _impl_.group_policy_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::_internal_mutable_group_policy_address() {
  ;
  return _impl_.group_policy_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyDecisionPolicy::release_group_policy_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::set_allocated_group_policy_address(std::string* value) {
  _impl_.group_policy_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_policy_address_.IsDefault()) {
          _impl_.group_policy_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.group_policy_address)
}

// .google.protobuf.Any decision_policy = 3 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
inline bool MsgUpdateGroupPolicyDecisionPolicy::has_decision_policy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.decision_policy_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgUpdateGroupPolicyDecisionPolicy::_internal_decision_policy() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.decision_policy_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgUpdateGroupPolicyDecisionPolicy::decision_policy() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
  return _internal_decision_policy();
}
inline void MsgUpdateGroupPolicyDecisionPolicy::unsafe_arena_set_allocated_decision_policy(
    ::PROTOBUF_NAMESPACE_ID::Any* decision_policy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_policy_);
  }
  _impl_.decision_policy_ = decision_policy;
  if (decision_policy) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgUpdateGroupPolicyDecisionPolicy::release_decision_policy() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgUpdateGroupPolicyDecisionPolicy::unsafe_arena_release_decision_policy() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.decision_policy_;
  _impl_.decision_policy_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgUpdateGroupPolicyDecisionPolicy::_internal_mutable_decision_policy() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.decision_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.decision_policy_ = p;
  }
  return _impl_.decision_policy_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgUpdateGroupPolicyDecisionPolicy::mutable_decision_policy() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_decision_policy();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
  return _msg;
}
inline void MsgUpdateGroupPolicyDecisionPolicy::set_allocated_decision_policy(::PROTOBUF_NAMESPACE_ID::Any* decision_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.decision_policy_);
  }
  if (decision_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(decision_policy));
    if (message_arena != submessage_arena) {
      decision_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decision_policy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.decision_policy_ = decision_policy;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy.decision_policy)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyDecisionPolicyResponse

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyMetadata

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyMetadata::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyMetadata::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyMetadata::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
}
inline std::string* MsgUpdateGroupPolicyMetadata::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyMetadata::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void MsgUpdateGroupPolicyMetadata::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyMetadata::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyMetadata::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
  return _impl_.admin_.Release();
}
inline void MsgUpdateGroupPolicyMetadata::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.admin)
}

// string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateGroupPolicyMetadata::clear_group_policy_address() {
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyMetadata::group_policy_address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyMetadata::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
}
inline std::string* MsgUpdateGroupPolicyMetadata::mutable_group_policy_address() {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyMetadata::_internal_group_policy_address() const {
  return _impl_.group_policy_address_.Get();
}
inline void MsgUpdateGroupPolicyMetadata::_internal_set_group_policy_address(const std::string& value) {
  ;


  _impl_.group_policy_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyMetadata::_internal_mutable_group_policy_address() {
  ;
  return _impl_.group_policy_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyMetadata::release_group_policy_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgUpdateGroupPolicyMetadata::set_allocated_group_policy_address(std::string* value) {
  _impl_.group_policy_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_policy_address_.IsDefault()) {
          _impl_.group_policy_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.group_policy_address)
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgUpdateGroupPolicyMetadata::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgUpdateGroupPolicyMetadata::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateGroupPolicyMetadata::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
}
inline std::string* MsgUpdateGroupPolicyMetadata::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
  return _s;
}
inline const std::string& MsgUpdateGroupPolicyMetadata::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void MsgUpdateGroupPolicyMetadata::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyMetadata::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateGroupPolicyMetadata::release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgUpdateGroupPolicyMetadata::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgUpdateGroupPolicyMetadata.metadata)
}

// -------------------------------------------------------------------

// MsgUpdateGroupPolicyMetadataResponse

// -------------------------------------------------------------------

// MsgSubmitProposal

// string group_policy_address = 1 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgSubmitProposal::clear_group_policy_address() {
  _impl_.group_policy_address_.ClearToEmpty();
}
inline const std::string& MsgSubmitProposal::group_policy_address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
  return _internal_group_policy_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitProposal::set_group_policy_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_policy_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
}
inline std::string* MsgSubmitProposal::mutable_group_policy_address() {
  std::string* _s = _internal_mutable_group_policy_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
  return _s;
}
inline const std::string& MsgSubmitProposal::_internal_group_policy_address() const {
  return _impl_.group_policy_address_.Get();
}
inline void MsgSubmitProposal::_internal_set_group_policy_address(const std::string& value) {
  ;


  _impl_.group_policy_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSubmitProposal::_internal_mutable_group_policy_address() {
  ;
  return _impl_.group_policy_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSubmitProposal::release_group_policy_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
  return _impl_.group_policy_address_.Release();
}
inline void MsgSubmitProposal::set_allocated_group_policy_address(std::string* value) {
  _impl_.group_policy_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_policy_address_.IsDefault()) {
          _impl_.group_policy_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgSubmitProposal.group_policy_address)
}

// repeated string proposers = 2 [json_name = "proposers"];
inline int MsgSubmitProposal::_internal_proposers_size() const {
  return _impl_.proposers_.size();
}
inline int MsgSubmitProposal::proposers_size() const {
  return _internal_proposers_size();
}
inline void MsgSubmitProposal::clear_proposers() {
  _internal_mutable_proposers()->Clear();
}
inline std::string* MsgSubmitProposal::add_proposers() {
  std::string* _s = _internal_add_proposers();
  // @@protoc_insertion_point(field_add_mutable:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _s;
}
inline const std::string& MsgSubmitProposal::proposers(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _internal_proposers(index);
}
inline std::string* MsgSubmitProposal::mutable_proposers(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _internal_mutable_proposers()->Mutable(index);
}
inline void MsgSubmitProposal::set_proposers(int index, const std::string& value) {
  _internal_mutable_proposers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::set_proposers(int index, std::string&& value) {
  _internal_mutable_proposers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::set_proposers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_proposers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::set_proposers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_proposers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::set_proposers(int index, absl::string_view value) {
  _internal_mutable_proposers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::add_proposers(const std::string& value) {
  _internal_mutable_proposers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::add_proposers(std::string&& value) {
  _internal_mutable_proposers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::add_proposers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_proposers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::add_proposers(const char* value, std::size_t size) {
  _internal_mutable_proposers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline void MsgSubmitProposal::add_proposers(absl::string_view value) {
  _internal_mutable_proposers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.group.v1.MsgSubmitProposal.proposers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgSubmitProposal::proposers() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _internal_proposers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* MsgSubmitProposal::mutable_proposers() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgSubmitProposal.proposers)
  return _internal_mutable_proposers();
}
inline const std::string& MsgSubmitProposal::_internal_proposers(int index) const {
  return _internal_proposers().Get(index);
}
inline std::string* MsgSubmitProposal::_internal_add_proposers() {
  return _internal_mutable_proposers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MsgSubmitProposal::_internal_proposers() const {
  return _impl_.proposers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MsgSubmitProposal::_internal_mutable_proposers() {
  return &_impl_.proposers_;
}

// string metadata = 3 [json_name = "metadata"];
inline void MsgSubmitProposal::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgSubmitProposal::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitProposal::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.metadata)
}
inline std::string* MsgSubmitProposal::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.metadata)
  return _s;
}
inline const std::string& MsgSubmitProposal::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void MsgSubmitProposal::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSubmitProposal::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSubmitProposal::release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgSubmitProposal.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgSubmitProposal::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgSubmitProposal.metadata)
}

// repeated .google.protobuf.Any messages = 4 [json_name = "messages"];
inline int MsgSubmitProposal::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int MsgSubmitProposal::messages_size() const {
  return _internal_messages_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitProposal::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
MsgSubmitProposal::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.MsgSubmitProposal.messages)
  return _internal_mutable_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgSubmitProposal::_internal_messages(int index) const {
  return _internal_messages().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgSubmitProposal::messages(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.messages)
  return _internal_messages(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitProposal::_internal_add_messages() {
  return _internal_mutable_messages()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgSubmitProposal::add_messages() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.MsgSubmitProposal.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
MsgSubmitProposal::messages() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.MsgSubmitProposal.messages)
  return _internal_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
MsgSubmitProposal::_internal_messages() const {
  return _impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
MsgSubmitProposal::_internal_mutable_messages() {
  return &_impl_.messages_;
}

// .cosmos.group.v1.Exec exec = 5 [json_name = "exec"];
inline void MsgSubmitProposal::clear_exec() {
  _impl_.exec_ = 0;
}
inline ::cosmos::group::v1::Exec MsgSubmitProposal::exec() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.exec)
  return _internal_exec();
}
inline void MsgSubmitProposal::set_exec(::cosmos::group::v1::Exec value) {
   _internal_set_exec(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.exec)
}
inline ::cosmos::group::v1::Exec MsgSubmitProposal::_internal_exec() const {
  return static_cast<::cosmos::group::v1::Exec>(_impl_.exec_);
}
inline void MsgSubmitProposal::_internal_set_exec(::cosmos::group::v1::Exec value) {
  ;
  _impl_.exec_ = value;
}

// string title = 6 [json_name = "title"];
inline void MsgSubmitProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& MsgSubmitProposal::title() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.title)
}
inline std::string* MsgSubmitProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.title)
  return _s;
}
inline const std::string& MsgSubmitProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void MsgSubmitProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSubmitProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSubmitProposal::release_title() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgSubmitProposal.title)
  return _impl_.title_.Release();
}
inline void MsgSubmitProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgSubmitProposal.title)
}

// string summary = 7 [json_name = "summary"];
inline void MsgSubmitProposal::clear_summary() {
  _impl_.summary_.ClearToEmpty();
}
inline const std::string& MsgSubmitProposal::summary() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposal.summary)
  return _internal_summary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSubmitProposal::set_summary(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.summary_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposal.summary)
}
inline std::string* MsgSubmitProposal::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgSubmitProposal.summary)
  return _s;
}
inline const std::string& MsgSubmitProposal::_internal_summary() const {
  return _impl_.summary_.Get();
}
inline void MsgSubmitProposal::_internal_set_summary(const std::string& value) {
  ;


  _impl_.summary_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSubmitProposal::_internal_mutable_summary() {
  ;
  return _impl_.summary_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSubmitProposal::release_summary() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgSubmitProposal.summary)
  return _impl_.summary_.Release();
}
inline void MsgSubmitProposal::set_allocated_summary(std::string* value) {
  _impl_.summary_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.summary_.IsDefault()) {
          _impl_.summary_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgSubmitProposal.summary)
}

// -------------------------------------------------------------------

// MsgSubmitProposalResponse

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void MsgSubmitProposalResponse::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgSubmitProposalResponse::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgSubmitProposalResponse.proposal_id)
  return _internal_proposal_id();
}
inline void MsgSubmitProposalResponse::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgSubmitProposalResponse.proposal_id)
}
inline ::uint64_t MsgSubmitProposalResponse::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void MsgSubmitProposalResponse::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// MsgWithdrawProposal

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void MsgWithdrawProposal::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgWithdrawProposal::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgWithdrawProposal.proposal_id)
  return _internal_proposal_id();
}
inline void MsgWithdrawProposal::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgWithdrawProposal.proposal_id)
}
inline ::uint64_t MsgWithdrawProposal::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void MsgWithdrawProposal::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgWithdrawProposal::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& MsgWithdrawProposal::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgWithdrawProposal.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgWithdrawProposal::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgWithdrawProposal.address)
}
inline std::string* MsgWithdrawProposal::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgWithdrawProposal.address)
  return _s;
}
inline const std::string& MsgWithdrawProposal::_internal_address() const {
  return _impl_.address_.Get();
}
inline void MsgWithdrawProposal::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgWithdrawProposal::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgWithdrawProposal::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgWithdrawProposal.address)
  return _impl_.address_.Release();
}
inline void MsgWithdrawProposal::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgWithdrawProposal.address)
}

// -------------------------------------------------------------------

// MsgWithdrawProposalResponse

// -------------------------------------------------------------------

// MsgVote

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void MsgVote::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgVote::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.proposal_id)
  return _internal_proposal_id();
}
inline void MsgVote::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.proposal_id)
}
inline ::uint64_t MsgVote::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void MsgVote::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgVote::clear_voter() {
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& MsgVote::voter() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgVote::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.voter)
}
inline std::string* MsgVote::mutable_voter() {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgVote.voter)
  return _s;
}
inline const std::string& MsgVote::_internal_voter() const {
  return _impl_.voter_.Get();
}
inline void MsgVote::_internal_set_voter(const std::string& value) {
  ;


  _impl_.voter_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgVote::_internal_mutable_voter() {
  ;
  return _impl_.voter_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgVote::release_voter() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgVote.voter)
  return _impl_.voter_.Release();
}
inline void MsgVote::set_allocated_voter(std::string* value) {
  _impl_.voter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.voter_.IsDefault()) {
          _impl_.voter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgVote.voter)
}

// .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
inline void MsgVote::clear_option() {
  _impl_.option_ = 0;
}
inline ::cosmos::group::v1::VoteOption MsgVote::option() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.option)
  return _internal_option();
}
inline void MsgVote::set_option(::cosmos::group::v1::VoteOption value) {
   _internal_set_option(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.option)
}
inline ::cosmos::group::v1::VoteOption MsgVote::_internal_option() const {
  return static_cast<::cosmos::group::v1::VoteOption>(_impl_.option_);
}
inline void MsgVote::_internal_set_option(::cosmos::group::v1::VoteOption value) {
  ;
  _impl_.option_ = value;
}

// string metadata = 4 [json_name = "metadata"];
inline void MsgVote::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& MsgVote::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgVote::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.metadata)
}
inline std::string* MsgVote::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgVote.metadata)
  return _s;
}
inline const std::string& MsgVote::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void MsgVote::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgVote::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgVote::release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgVote.metadata)
  return _impl_.metadata_.Release();
}
inline void MsgVote::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgVote.metadata)
}

// .cosmos.group.v1.Exec exec = 5 [json_name = "exec"];
inline void MsgVote::clear_exec() {
  _impl_.exec_ = 0;
}
inline ::cosmos::group::v1::Exec MsgVote::exec() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgVote.exec)
  return _internal_exec();
}
inline void MsgVote::set_exec(::cosmos::group::v1::Exec value) {
   _internal_set_exec(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgVote.exec)
}
inline ::cosmos::group::v1::Exec MsgVote::_internal_exec() const {
  return static_cast<::cosmos::group::v1::Exec>(_impl_.exec_);
}
inline void MsgVote::_internal_set_exec(::cosmos::group::v1::Exec value) {
  ;
  _impl_.exec_ = value;
}

// -------------------------------------------------------------------

// MsgVoteResponse

// -------------------------------------------------------------------

// MsgExec

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void MsgExec::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgExec::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgExec.proposal_id)
  return _internal_proposal_id();
}
inline void MsgExec::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgExec.proposal_id)
}
inline ::uint64_t MsgExec::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void MsgExec::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// string executor = 2 [json_name = "executor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgExec::clear_executor() {
  _impl_.executor_.ClearToEmpty();
}
inline const std::string& MsgExec::executor() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgExec.executor)
  return _internal_executor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgExec::set_executor(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.executor_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgExec.executor)
}
inline std::string* MsgExec::mutable_executor() {
  std::string* _s = _internal_mutable_executor();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgExec.executor)
  return _s;
}
inline const std::string& MsgExec::_internal_executor() const {
  return _impl_.executor_.Get();
}
inline void MsgExec::_internal_set_executor(const std::string& value) {
  ;


  _impl_.executor_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgExec::_internal_mutable_executor() {
  ;
  return _impl_.executor_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgExec::release_executor() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgExec.executor)
  return _impl_.executor_.Release();
}
inline void MsgExec::set_allocated_executor(std::string* value) {
  _impl_.executor_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.executor_.IsDefault()) {
          _impl_.executor_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgExec.executor)
}

// -------------------------------------------------------------------

// MsgExecResponse

// .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
inline void MsgExecResponse::clear_result() {
  _impl_.result_ = 0;
}
inline ::cosmos::group::v1::ProposalExecutorResult MsgExecResponse::result() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgExecResponse.result)
  return _internal_result();
}
inline void MsgExecResponse::set_result(::cosmos::group::v1::ProposalExecutorResult value) {
   _internal_set_result(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgExecResponse.result)
}
inline ::cosmos::group::v1::ProposalExecutorResult MsgExecResponse::_internal_result() const {
  return static_cast<::cosmos::group::v1::ProposalExecutorResult>(_impl_.result_);
}
inline void MsgExecResponse::_internal_set_result(::cosmos::group::v1::ProposalExecutorResult value) {
  ;
  _impl_.result_ = value;
}

// -------------------------------------------------------------------

// MsgLeaveGroup

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgLeaveGroup::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& MsgLeaveGroup::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgLeaveGroup.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgLeaveGroup::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgLeaveGroup.address)
}
inline std::string* MsgLeaveGroup::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.MsgLeaveGroup.address)
  return _s;
}
inline const std::string& MsgLeaveGroup::_internal_address() const {
  return _impl_.address_.Get();
}
inline void MsgLeaveGroup::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgLeaveGroup::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgLeaveGroup::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.MsgLeaveGroup.address)
  return _impl_.address_.Release();
}
inline void MsgLeaveGroup::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.MsgLeaveGroup.address)
}

// uint64 group_id = 2 [json_name = "groupId"];
inline void MsgLeaveGroup::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgLeaveGroup::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.MsgLeaveGroup.group_id)
  return _internal_group_id();
}
inline void MsgLeaveGroup::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.MsgLeaveGroup.group_id)
}
inline ::uint64_t MsgLeaveGroup::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void MsgLeaveGroup::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// MsgLeaveGroupResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cosmos::group::v1::Exec> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::group::v1::Exec>() {
  return ::cosmos::group::v1::Exec_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2ftx_2eproto_2epb_2eh

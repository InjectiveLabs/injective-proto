// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/group/v1/query.proto

#include "cosmos/group/v1/query.pb.h"
#include "cosmos/group/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace group {
namespace v1 {

static const char* Query_method_names[] = {
  "/cosmos.group.v1.Query/GroupInfo",
  "/cosmos.group.v1.Query/GroupPolicyInfo",
  "/cosmos.group.v1.Query/GroupMembers",
  "/cosmos.group.v1.Query/GroupsByAdmin",
  "/cosmos.group.v1.Query/GroupPoliciesByGroup",
  "/cosmos.group.v1.Query/GroupPoliciesByAdmin",
  "/cosmos.group.v1.Query/Proposal",
  "/cosmos.group.v1.Query/ProposalsByGroupPolicy",
  "/cosmos.group.v1.Query/VoteByProposalVoter",
  "/cosmos.group.v1.Query/VotesByProposal",
  "/cosmos.group.v1.Query/VotesByVoter",
  "/cosmos.group.v1.Query/GroupsByMember",
  "/cosmos.group.v1.Query/TallyResult",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GroupInfo_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GroupPolicyInfo_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GroupMembers_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GroupsByAdmin_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GroupPoliciesByGroup_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GroupPoliciesByAdmin_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Proposal_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProposalsByGroupPolicy_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VoteByProposalVoter_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VotesByProposal_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VotesByVoter_(Query_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GroupsByMember_(Query_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TallyResult_(Query_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::GroupInfo(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupInfoRequest& request, ::cosmos::group::v1::QueryGroupInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryGroupInfoRequest, ::cosmos::group::v1::QueryGroupInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GroupInfo_, context, request, response);
}

void Query::Stub::async::GroupInfo(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupInfoRequest* request, ::cosmos::group::v1::QueryGroupInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryGroupInfoRequest, ::cosmos::group::v1::QueryGroupInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::GroupInfo(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupInfoRequest* request, ::cosmos::group::v1::QueryGroupInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupInfoResponse>* Query::Stub::PrepareAsyncGroupInfoRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryGroupInfoResponse, ::cosmos::group::v1::QueryGroupInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GroupInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupInfoResponse>* Query::Stub::AsyncGroupInfoRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGroupInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GroupPolicyInfo(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPolicyInfoRequest& request, ::cosmos::group::v1::QueryGroupPolicyInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryGroupPolicyInfoRequest, ::cosmos::group::v1::QueryGroupPolicyInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GroupPolicyInfo_, context, request, response);
}

void Query::Stub::async::GroupPolicyInfo(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPolicyInfoRequest* request, ::cosmos::group::v1::QueryGroupPolicyInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryGroupPolicyInfoRequest, ::cosmos::group::v1::QueryGroupPolicyInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupPolicyInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::GroupPolicyInfo(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPolicyInfoRequest* request, ::cosmos::group::v1::QueryGroupPolicyInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupPolicyInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupPolicyInfoResponse>* Query::Stub::PrepareAsyncGroupPolicyInfoRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPolicyInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryGroupPolicyInfoResponse, ::cosmos::group::v1::QueryGroupPolicyInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GroupPolicyInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupPolicyInfoResponse>* Query::Stub::AsyncGroupPolicyInfoRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPolicyInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGroupPolicyInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupMembersRequest& request, ::cosmos::group::v1::QueryGroupMembersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryGroupMembersRequest, ::cosmos::group::v1::QueryGroupMembersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GroupMembers_, context, request, response);
}

void Query::Stub::async::GroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupMembersRequest* request, ::cosmos::group::v1::QueryGroupMembersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryGroupMembersRequest, ::cosmos::group::v1::QueryGroupMembersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupMembers_, context, request, response, std::move(f));
}

void Query::Stub::async::GroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupMembersRequest* request, ::cosmos::group::v1::QueryGroupMembersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupMembers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupMembersResponse>* Query::Stub::PrepareAsyncGroupMembersRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupMembersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryGroupMembersResponse, ::cosmos::group::v1::QueryGroupMembersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GroupMembers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupMembersResponse>* Query::Stub::AsyncGroupMembersRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupMembersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGroupMembersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GroupsByAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByAdminRequest& request, ::cosmos::group::v1::QueryGroupsByAdminResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryGroupsByAdminRequest, ::cosmos::group::v1::QueryGroupsByAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GroupsByAdmin_, context, request, response);
}

void Query::Stub::async::GroupsByAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByAdminRequest* request, ::cosmos::group::v1::QueryGroupsByAdminResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryGroupsByAdminRequest, ::cosmos::group::v1::QueryGroupsByAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupsByAdmin_, context, request, response, std::move(f));
}

void Query::Stub::async::GroupsByAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByAdminRequest* request, ::cosmos::group::v1::QueryGroupsByAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupsByAdmin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupsByAdminResponse>* Query::Stub::PrepareAsyncGroupsByAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByAdminRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryGroupsByAdminResponse, ::cosmos::group::v1::QueryGroupsByAdminRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GroupsByAdmin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupsByAdminResponse>* Query::Stub::AsyncGroupsByAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByAdminRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGroupsByAdminRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GroupPoliciesByGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest& request, ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest, ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GroupPoliciesByGroup_, context, request, response);
}

void Query::Stub::async::GroupPoliciesByGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest* request, ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest, ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupPoliciesByGroup_, context, request, response, std::move(f));
}

void Query::Stub::async::GroupPoliciesByGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest* request, ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupPoliciesByGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse>* Query::Stub::PrepareAsyncGroupPoliciesByGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse, ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GroupPoliciesByGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse>* Query::Stub::AsyncGroupPoliciesByGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGroupPoliciesByGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GroupPoliciesByAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest& request, ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest, ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GroupPoliciesByAdmin_, context, request, response);
}

void Query::Stub::async::GroupPoliciesByAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest* request, ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest, ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupPoliciesByAdmin_, context, request, response, std::move(f));
}

void Query::Stub::async::GroupPoliciesByAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest* request, ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupPoliciesByAdmin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse>* Query::Stub::PrepareAsyncGroupPoliciesByAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse, ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GroupPoliciesByAdmin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse>* Query::Stub::AsyncGroupPoliciesByAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGroupPoliciesByAdminRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Proposal(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalRequest& request, ::cosmos::group::v1::QueryProposalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryProposalRequest, ::cosmos::group::v1::QueryProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Proposal_, context, request, response);
}

void Query::Stub::async::Proposal(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalRequest* request, ::cosmos::group::v1::QueryProposalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryProposalRequest, ::cosmos::group::v1::QueryProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Proposal_, context, request, response, std::move(f));
}

void Query::Stub::async::Proposal(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalRequest* request, ::cosmos::group::v1::QueryProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Proposal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryProposalResponse>* Query::Stub::PrepareAsyncProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryProposalResponse, ::cosmos::group::v1::QueryProposalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Proposal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryProposalResponse>* Query::Stub::AsyncProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ProposalsByGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest& request, ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest, ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProposalsByGroupPolicy_, context, request, response);
}

void Query::Stub::async::ProposalsByGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest* request, ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest, ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposalsByGroupPolicy_, context, request, response, std::move(f));
}

void Query::Stub::async::ProposalsByGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest* request, ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProposalsByGroupPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse>* Query::Stub::PrepareAsyncProposalsByGroupPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse, ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProposalsByGroupPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse>* Query::Stub::AsyncProposalsByGroupPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProposalsByGroupPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::VoteByProposalVoter(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVoteByProposalVoterRequest& request, ::cosmos::group::v1::QueryVoteByProposalVoterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryVoteByProposalVoterRequest, ::cosmos::group::v1::QueryVoteByProposalVoterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VoteByProposalVoter_, context, request, response);
}

void Query::Stub::async::VoteByProposalVoter(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVoteByProposalVoterRequest* request, ::cosmos::group::v1::QueryVoteByProposalVoterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryVoteByProposalVoterRequest, ::cosmos::group::v1::QueryVoteByProposalVoterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VoteByProposalVoter_, context, request, response, std::move(f));
}

void Query::Stub::async::VoteByProposalVoter(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVoteByProposalVoterRequest* request, ::cosmos::group::v1::QueryVoteByProposalVoterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VoteByProposalVoter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryVoteByProposalVoterResponse>* Query::Stub::PrepareAsyncVoteByProposalVoterRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVoteByProposalVoterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryVoteByProposalVoterResponse, ::cosmos::group::v1::QueryVoteByProposalVoterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VoteByProposalVoter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryVoteByProposalVoterResponse>* Query::Stub::AsyncVoteByProposalVoterRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVoteByProposalVoterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVoteByProposalVoterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::VotesByProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByProposalRequest& request, ::cosmos::group::v1::QueryVotesByProposalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryVotesByProposalRequest, ::cosmos::group::v1::QueryVotesByProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VotesByProposal_, context, request, response);
}

void Query::Stub::async::VotesByProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByProposalRequest* request, ::cosmos::group::v1::QueryVotesByProposalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryVotesByProposalRequest, ::cosmos::group::v1::QueryVotesByProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VotesByProposal_, context, request, response, std::move(f));
}

void Query::Stub::async::VotesByProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByProposalRequest* request, ::cosmos::group::v1::QueryVotesByProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VotesByProposal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryVotesByProposalResponse>* Query::Stub::PrepareAsyncVotesByProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByProposalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryVotesByProposalResponse, ::cosmos::group::v1::QueryVotesByProposalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VotesByProposal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryVotesByProposalResponse>* Query::Stub::AsyncVotesByProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByProposalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVotesByProposalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::VotesByVoter(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByVoterRequest& request, ::cosmos::group::v1::QueryVotesByVoterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryVotesByVoterRequest, ::cosmos::group::v1::QueryVotesByVoterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VotesByVoter_, context, request, response);
}

void Query::Stub::async::VotesByVoter(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByVoterRequest* request, ::cosmos::group::v1::QueryVotesByVoterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryVotesByVoterRequest, ::cosmos::group::v1::QueryVotesByVoterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VotesByVoter_, context, request, response, std::move(f));
}

void Query::Stub::async::VotesByVoter(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByVoterRequest* request, ::cosmos::group::v1::QueryVotesByVoterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VotesByVoter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryVotesByVoterResponse>* Query::Stub::PrepareAsyncVotesByVoterRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByVoterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryVotesByVoterResponse, ::cosmos::group::v1::QueryVotesByVoterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VotesByVoter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryVotesByVoterResponse>* Query::Stub::AsyncVotesByVoterRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryVotesByVoterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVotesByVoterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::GroupsByMember(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByMemberRequest& request, ::cosmos::group::v1::QueryGroupsByMemberResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryGroupsByMemberRequest, ::cosmos::group::v1::QueryGroupsByMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GroupsByMember_, context, request, response);
}

void Query::Stub::async::GroupsByMember(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByMemberRequest* request, ::cosmos::group::v1::QueryGroupsByMemberResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryGroupsByMemberRequest, ::cosmos::group::v1::QueryGroupsByMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupsByMember_, context, request, response, std::move(f));
}

void Query::Stub::async::GroupsByMember(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByMemberRequest* request, ::cosmos::group::v1::QueryGroupsByMemberResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GroupsByMember_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupsByMemberResponse>* Query::Stub::PrepareAsyncGroupsByMemberRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByMemberRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryGroupsByMemberResponse, ::cosmos::group::v1::QueryGroupsByMemberRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GroupsByMember_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryGroupsByMemberResponse>* Query::Stub::AsyncGroupsByMemberRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryGroupsByMemberRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGroupsByMemberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TallyResult(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryTallyResultRequest& request, ::cosmos::group::v1::QueryTallyResultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::QueryTallyResultRequest, ::cosmos::group::v1::QueryTallyResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TallyResult_, context, request, response);
}

void Query::Stub::async::TallyResult(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryTallyResultRequest* request, ::cosmos::group::v1::QueryTallyResultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::QueryTallyResultRequest, ::cosmos::group::v1::QueryTallyResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TallyResult_, context, request, response, std::move(f));
}

void Query::Stub::async::TallyResult(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryTallyResultRequest* request, ::cosmos::group::v1::QueryTallyResultResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TallyResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryTallyResultResponse>* Query::Stub::PrepareAsyncTallyResultRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::QueryTallyResultResponse, ::cosmos::group::v1::QueryTallyResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TallyResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::QueryTallyResultResponse>* Query::Stub::AsyncTallyResultRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::QueryTallyResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTallyResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryGroupInfoRequest, ::cosmos::group::v1::QueryGroupInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryGroupInfoRequest* req,
             ::cosmos::group::v1::QueryGroupInfoResponse* resp) {
               return service->GroupInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryGroupPolicyInfoRequest, ::cosmos::group::v1::QueryGroupPolicyInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryGroupPolicyInfoRequest* req,
             ::cosmos::group::v1::QueryGroupPolicyInfoResponse* resp) {
               return service->GroupPolicyInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryGroupMembersRequest, ::cosmos::group::v1::QueryGroupMembersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryGroupMembersRequest* req,
             ::cosmos::group::v1::QueryGroupMembersResponse* resp) {
               return service->GroupMembers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryGroupsByAdminRequest, ::cosmos::group::v1::QueryGroupsByAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryGroupsByAdminRequest* req,
             ::cosmos::group::v1::QueryGroupsByAdminResponse* resp) {
               return service->GroupsByAdmin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest, ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest* req,
             ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse* resp) {
               return service->GroupPoliciesByGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest, ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest* req,
             ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse* resp) {
               return service->GroupPoliciesByAdmin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryProposalRequest, ::cosmos::group::v1::QueryProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryProposalRequest* req,
             ::cosmos::group::v1::QueryProposalResponse* resp) {
               return service->Proposal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest, ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest* req,
             ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse* resp) {
               return service->ProposalsByGroupPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryVoteByProposalVoterRequest, ::cosmos::group::v1::QueryVoteByProposalVoterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryVoteByProposalVoterRequest* req,
             ::cosmos::group::v1::QueryVoteByProposalVoterResponse* resp) {
               return service->VoteByProposalVoter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryVotesByProposalRequest, ::cosmos::group::v1::QueryVotesByProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryVotesByProposalRequest* req,
             ::cosmos::group::v1::QueryVotesByProposalResponse* resp) {
               return service->VotesByProposal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryVotesByVoterRequest, ::cosmos::group::v1::QueryVotesByVoterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryVotesByVoterRequest* req,
             ::cosmos::group::v1::QueryVotesByVoterResponse* resp) {
               return service->VotesByVoter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryGroupsByMemberRequest, ::cosmos::group::v1::QueryGroupsByMemberResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryGroupsByMemberRequest* req,
             ::cosmos::group::v1::QueryGroupsByMemberResponse* resp) {
               return service->GroupsByMember(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::group::v1::QueryTallyResultRequest, ::cosmos::group::v1::QueryTallyResultResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::QueryTallyResultRequest* req,
             ::cosmos::group::v1::QueryTallyResultResponse* resp) {
               return service->TallyResult(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::GroupInfo(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryGroupInfoRequest* request, ::cosmos::group::v1::QueryGroupInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GroupPolicyInfo(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryGroupPolicyInfoRequest* request, ::cosmos::group::v1::QueryGroupPolicyInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GroupMembers(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryGroupMembersRequest* request, ::cosmos::group::v1::QueryGroupMembersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GroupsByAdmin(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryGroupsByAdminRequest* request, ::cosmos::group::v1::QueryGroupsByAdminResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GroupPoliciesByGroup(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest* request, ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GroupPoliciesByAdmin(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest* request, ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Proposal(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryProposalRequest* request, ::cosmos::group::v1::QueryProposalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ProposalsByGroupPolicy(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest* request, ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::VoteByProposalVoter(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryVoteByProposalVoterRequest* request, ::cosmos::group::v1::QueryVoteByProposalVoterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::VotesByProposal(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryVotesByProposalRequest* request, ::cosmos::group::v1::QueryVotesByProposalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::VotesByVoter(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryVotesByVoterRequest* request, ::cosmos::group::v1::QueryVotesByVoterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::GroupsByMember(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryGroupsByMemberRequest* request, ::cosmos::group::v1::QueryGroupsByMemberResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TallyResult(::grpc::ServerContext* context, const ::cosmos::group::v1::QueryTallyResultRequest* request, ::cosmos::group::v1::QueryTallyResultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace group
}  // namespace v1


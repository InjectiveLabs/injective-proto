// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/types.proto

#include "cosmos/group/v1/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace group {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Member::Member(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.weight_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.added_at_)*/nullptr} {}
struct MemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemberDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemberDefaultTypeInternal() {}
  union {
    Member _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemberDefaultTypeInternal _Member_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MemberRequest::MemberRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.weight_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemberRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemberRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemberRequestDefaultTypeInternal() {}
  union {
    MemberRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemberRequestDefaultTypeInternal _MemberRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ThresholdDecisionPolicy::ThresholdDecisionPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.threshold_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.windows_)*/nullptr} {}
struct ThresholdDecisionPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThresholdDecisionPolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThresholdDecisionPolicyDefaultTypeInternal() {}
  union {
    ThresholdDecisionPolicy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThresholdDecisionPolicyDefaultTypeInternal _ThresholdDecisionPolicy_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PercentageDecisionPolicy::PercentageDecisionPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.percentage_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.windows_)*/nullptr} {}
struct PercentageDecisionPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PercentageDecisionPolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PercentageDecisionPolicyDefaultTypeInternal() {}
  union {
    PercentageDecisionPolicy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PercentageDecisionPolicyDefaultTypeInternal _PercentageDecisionPolicy_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DecisionPolicyWindows::DecisionPolicyWindows(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voting_period_)*/nullptr
  , /*decltype(_impl_.min_execution_period_)*/nullptr} {}
struct DecisionPolicyWindowsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecisionPolicyWindowsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecisionPolicyWindowsDefaultTypeInternal() {}
  union {
    DecisionPolicyWindows _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecisionPolicyWindowsDefaultTypeInternal _DecisionPolicyWindows_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GroupInfo::GroupInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_weight_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.version_)*/ ::uint64_t{0u}
} {}
struct GroupInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupInfoDefaultTypeInternal() {}
  union {
    GroupInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GroupMember::GroupMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.member_)*/nullptr
  , /*decltype(_impl_.group_id_)*/ ::uint64_t{0u}
} {}
struct GroupMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupMemberDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupMemberDefaultTypeInternal() {}
  union {
    GroupMember _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GroupPolicyInfo::GroupPolicyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.decision_policy_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.group_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.version_)*/ ::uint64_t{0u}
} {}
struct GroupPolicyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupPolicyInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupPolicyInfoDefaultTypeInternal() {}
  union {
    GroupPolicyInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupPolicyInfoDefaultTypeInternal _GroupPolicyInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Proposal::Proposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposers_)*/{}
  , /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.group_policy_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.summary_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.submit_time_)*/nullptr
  , /*decltype(_impl_.final_tally_result_)*/nullptr
  , /*decltype(_impl_.voting_period_end_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.group_version_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.group_policy_version_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.executor_result_)*/ 0
} {}
struct ProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalDefaultTypeInternal() {}
  union {
    Proposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalDefaultTypeInternal _Proposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TallyResult::TallyResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.yes_count_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.abstain_count_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.no_count_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.no_with_veto_count_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TallyResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TallyResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TallyResultDefaultTypeInternal() {}
  union {
    TallyResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TallyResultDefaultTypeInternal _TallyResult_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vote::Vote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.submit_time_)*/nullptr
  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.option_)*/ 0
} {}
struct VoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteDefaultTypeInternal _Vote_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2fgroup_2fv1_2ftypes_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fgroup_2fv1_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Member, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Member, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Member, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Member, _impl_.weight_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Member, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Member, _impl_.added_at_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::MemberRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::MemberRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::MemberRequest, _impl_.weight_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::MemberRequest, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::ThresholdDecisionPolicy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::ThresholdDecisionPolicy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::ThresholdDecisionPolicy, _impl_.threshold_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::ThresholdDecisionPolicy, _impl_.windows_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::PercentageDecisionPolicy, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::PercentageDecisionPolicy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::PercentageDecisionPolicy, _impl_.percentage_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::PercentageDecisionPolicy, _impl_.windows_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::DecisionPolicyWindows, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::DecisionPolicyWindows, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::DecisionPolicyWindows, _impl_.voting_period_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::DecisionPolicyWindows, _impl_.min_execution_period_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupInfo, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupInfo, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupInfo, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupInfo, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupInfo, _impl_.total_weight_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupInfo, _impl_.created_at_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupMember, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupMember, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupMember, _impl_.group_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupMember, _impl_.member_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _impl_.group_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _impl_.decision_policy_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GroupPolicyInfo, _impl_.created_at_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.group_policy_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.proposers_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.submit_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.group_version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.group_policy_version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.final_tally_result_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.voting_period_end_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.executor_result_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.messages_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Proposal, _impl_.summary_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::TallyResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::TallyResult, _impl_.yes_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::TallyResult, _impl_.abstain_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::TallyResult, _impl_.no_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::TallyResult, _impl_.no_with_veto_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Vote, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Vote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Vote, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Vote, _impl_.voter_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Vote, _impl_.option_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Vote, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::Vote, _impl_.submit_time_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::cosmos::group::v1::Member)},
        { 16, -1, -1, sizeof(::cosmos::group::v1::MemberRequest)},
        { 27, 37, -1, sizeof(::cosmos::group::v1::ThresholdDecisionPolicy)},
        { 39, 49, -1, sizeof(::cosmos::group::v1::PercentageDecisionPolicy)},
        { 51, 61, -1, sizeof(::cosmos::group::v1::DecisionPolicyWindows)},
        { 63, 77, -1, sizeof(::cosmos::group::v1::GroupInfo)},
        { 83, 93, -1, sizeof(::cosmos::group::v1::GroupMember)},
        { 95, 110, -1, sizeof(::cosmos::group::v1::GroupPolicyInfo)},
        { 117, 139, -1, sizeof(::cosmos::group::v1::Proposal)},
        { 153, -1, -1, sizeof(::cosmos::group::v1::TallyResult)},
        { 165, 178, -1, sizeof(::cosmos::group::v1::Vote)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::group::v1::_Member_default_instance_._instance,
    &::cosmos::group::v1::_MemberRequest_default_instance_._instance,
    &::cosmos::group::v1::_ThresholdDecisionPolicy_default_instance_._instance,
    &::cosmos::group::v1::_PercentageDecisionPolicy_default_instance_._instance,
    &::cosmos::group::v1::_DecisionPolicyWindows_default_instance_._instance,
    &::cosmos::group::v1::_GroupInfo_default_instance_._instance,
    &::cosmos::group::v1::_GroupMember_default_instance_._instance,
    &::cosmos::group::v1::_GroupPolicyInfo_default_instance_._instance,
    &::cosmos::group::v1::_Proposal_default_instance_._instance,
    &::cosmos::group::v1::_TallyResult_default_instance_._instance,
    &::cosmos::group::v1::_Vote_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fgroup_2fv1_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\033cosmos/group/v1/types.proto\022\017cosmos.gr"
    "oup.v1\032\024gogoproto/gogo.proto\032\036google/pro"
    "tobuf/duration.proto\032\037google/protobuf/ti"
    "mestamp.proto\032\031cosmos_proto/cosmos.proto"
    "\032\031google/protobuf/any.proto\032\021amino/amino"
    ".proto\"\266\001\n\006Member\0222\n\007address\030\001 \001(\tB\030\322\264-\024"
    "cosmos.AddressStringR\007address\022\026\n\006weight\030"
    "\002 \001(\tR\006weight\022\032\n\010metadata\030\003 \001(\tR\010metadat"
    "a\022D\n\010added_at\030\004 \001(\0132\032.google.protobuf.Ti"
    "mestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\007addedAt\"w\n\rMembe"
    "rRequest\0222\n\007address\030\001 \001(\tB\030\322\264-\024cosmos.Ad"
    "dressStringR\007address\022\026\n\006weight\030\002 \001(\tR\006we"
    "ight\022\032\n\010metadata\030\003 \001(\tR\010metadata\"\304\001\n\027Thr"
    "esholdDecisionPolicy\022\034\n\tthreshold\030\001 \001(\tR"
    "\tthreshold\022@\n\007windows\030\002 \001(\0132&.cosmos.gro"
    "up.v1.DecisionPolicyWindowsR\007windows:I\312\264"
    "-\036cosmos.group.v1.DecisionPolicy\212\347\260*\"cos"
    "mos-sdk/ThresholdDecisionPolicy\"\310\001\n\030Perc"
    "entageDecisionPolicy\022\036\n\npercentage\030\001 \001(\t"
    "R\npercentage\022@\n\007windows\030\002 \001(\0132&.cosmos.g"
    "roup.v1.DecisionPolicyWindowsR\007windows:J"
    "\312\264-\036cosmos.group.v1.DecisionPolicy\212\347\260*#c"
    "osmos-sdk/PercentageDecisionPolicy\"\302\001\n\025D"
    "ecisionPolicyWindows\022M\n\rvoting_period\030\001 "
    "\001(\0132\031.google.protobuf.DurationB\r\310\336\037\000\230\337\037\001"
    "\250\347\260*\001R\014votingPeriod\022Z\n\024min_execution_per"
    "iod\030\002 \001(\0132\031.google.protobuf.DurationB\r\310\336"
    "\037\000\230\337\037\001\250\347\260*\001R\022minExecutionPeriod\"\356\001\n\tGrou"
    "pInfo\022\016\n\002id\030\001 \001(\004R\002id\022.\n\005admin\030\002 \001(\tB\030\322\264"
    "-\024cosmos.AddressStringR\005admin\022\032\n\010metadat"
    "a\030\003 \001(\tR\010metadata\022\030\n\007version\030\004 \001(\004R\007vers"
    "ion\022!\n\014total_weight\030\005 \001(\tR\013totalWeight\022H"
    "\n\ncreated_at\030\006 \001(\0132\032.google.protobuf.Tim"
    "estampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\tcreatedAt\"Y\n\013Grou"
    "pMember\022\031\n\010group_id\030\001 \001(\004R\007groupId\022/\n\006me"
    "mber\030\002 \001(\0132\027.cosmos.group.v1.MemberR\006mem"
    "ber\"\375\002\n\017GroupPolicyInfo\0222\n\007address\030\001 \001(\t"
    "B\030\322\264-\024cosmos.AddressStringR\007address\022\031\n\010g"
    "roup_id\030\002 \001(\004R\007groupId\022.\n\005admin\030\003 \001(\tB\030\322"
    "\264-\024cosmos.AddressStringR\005admin\022\032\n\010metada"
    "ta\030\004 \001(\tR\010metadata\022\030\n\007version\030\005 \001(\004R\007ver"
    "sion\022a\n\017decision_policy\030\006 \001(\0132\024.google.p"
    "rotobuf.AnyB\"\312\264-\036cosmos.group.v1.Decisio"
    "nPolicyR\016decisionPolicy\022H\n\ncreated_at\030\007 "
    "\001(\0132\032.google.protobuf.TimestampB\r\310\336\037\000\220\337\037"
    "\001\250\347\260*\001R\tcreatedAt:\010\210\240\037\000\350\240\037\001\"\376\005\n\010Proposal"
    "\022\016\n\002id\030\001 \001(\004R\002id\022J\n\024group_policy_address"
    "\030\002 \001(\tB\030\322\264-\024cosmos.AddressStringR\022groupP"
    "olicyAddress\022\032\n\010metadata\030\003 \001(\tR\010metadata"
    "\0226\n\tproposers\030\004 \003(\tB\030\322\264-\024cosmos.AddressS"
    "tringR\tproposers\022J\n\013submit_time\030\005 \001(\0132\032."
    "google.protobuf.TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001"
    "R\nsubmitTime\022#\n\rgroup_version\030\006 \001(\004R\014gro"
    "upVersion\0220\n\024group_policy_version\030\007 \001(\004R"
    "\022groupPolicyVersion\0227\n\006status\030\010 \001(\0162\037.co"
    "smos.group.v1.ProposalStatusR\006status\022U\n\022"
    "final_tally_result\030\t \001(\0132\034.cosmos.group."
    "v1.TallyResultB\t\310\336\037\000\250\347\260*\001R\020finalTallyRes"
    "ult\022U\n\021voting_period_end\030\n \001(\0132\032.google."
    "protobuf.TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\017votin"
    "gPeriodEnd\022P\n\017executor_result\030\013 \001(\0162\'.co"
    "smos.group.v1.ProposalExecutorResultR\016ex"
    "ecutorResult\0220\n\010messages\030\014 \003(\0132\024.google."
    "protobuf.AnyR\010messages\022\024\n\005title\030\r \001(\tR\005t"
    "itle\022\030\n\007summary\030\016 \001(\tR\007summary:\004\210\240\037\000\"\235\001\n"
    "\013TallyResult\022\033\n\tyes_count\030\001 \001(\tR\010yesCoun"
    "t\022#\n\rabstain_count\030\002 \001(\tR\014abstainCount\022\031"
    "\n\010no_count\030\003 \001(\tR\007noCount\022+\n\022no_with_vet"
    "o_count\030\004 \001(\tR\017noWithVetoCount:\004\210\240\037\000\"\364\001\n"
    "\004Vote\022\037\n\013proposal_id\030\001 \001(\004R\nproposalId\022."
    "\n\005voter\030\002 \001(\tB\030\322\264-\024cosmos.AddressStringR"
    "\005voter\0223\n\006option\030\003 \001(\0162\033.cosmos.group.v1"
    ".VoteOptionR\006option\022\032\n\010metadata\030\004 \001(\tR\010m"
    "etadata\022J\n\013submit_time\030\005 \001(\0132\032.google.pr"
    "otobuf.TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\nsubmitT"
    "ime*\217\001\n\nVoteOption\022\033\n\027VOTE_OPTION_UNSPEC"
    "IFIED\020\000\022\023\n\017VOTE_OPTION_YES\020\001\022\027\n\023VOTE_OPT"
    "ION_ABSTAIN\020\002\022\022\n\016VOTE_OPTION_NO\020\003\022\034\n\030VOT"
    "E_OPTION_NO_WITH_VETO\020\004\032\004\210\243\036\000*\316\001\n\016Propos"
    "alStatus\022\037\n\033PROPOSAL_STATUS_UNSPECIFIED\020"
    "\000\022\035\n\031PROPOSAL_STATUS_SUBMITTED\020\001\022\034\n\030PROP"
    "OSAL_STATUS_ACCEPTED\020\002\022\034\n\030PROPOSAL_STATU"
    "S_REJECTED\020\003\022\033\n\027PROPOSAL_STATUS_ABORTED\020"
    "\004\022\035\n\031PROPOSAL_STATUS_WITHDRAWN\020\005\032\004\210\243\036\000*\272"
    "\001\n\026ProposalExecutorResult\022(\n$PROPOSAL_EX"
    "ECUTOR_RESULT_UNSPECIFIED\020\000\022$\n PROPOSAL_"
    "EXECUTOR_RESULT_NOT_RUN\020\001\022$\n PROPOSAL_EX"
    "ECUTOR_RESULT_SUCCESS\020\002\022$\n PROPOSAL_EXEC"
    "UTOR_RESULT_FAILURE\020\003\032\004\210\243\036\000B\245\001\n\023com.cosm"
    "os.group.v1B\nTypesProtoP\001Z$github.com/co"
    "smos/cosmos-sdk/x/group\242\002\003CGX\252\002\017Cosmos.G"
    "roup.V1\312\002\017Cosmos\\Group\\V1\342\002\033Cosmos\\Group"
    "\\V1\\GPBMetadata\352\002\021Cosmos::Group::V1b\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_deps[6] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto = {
    false,
    false,
    3723,
    descriptor_table_protodef_cosmos_2fgroup_2fv1_2ftypes_2eproto,
    "cosmos/group/v1/types.proto",
    &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
    descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_deps,
    6,
    11,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fgroup_2fv1_2ftypes_2eproto::offsets,
    file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto,
    file_level_enum_descriptors_cosmos_2fgroup_2fv1_2ftypes_2eproto,
    file_level_service_descriptors_cosmos_2fgroup_2fv1_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter() {
  return &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fgroup_2fv1_2ftypes_2eproto(&descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto);
namespace cosmos {
namespace group {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoteOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto);
  return file_level_enum_descriptors_cosmos_2fgroup_2fv1_2ftypes_2eproto[0];
}
bool VoteOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto);
  return file_level_enum_descriptors_cosmos_2fgroup_2fv1_2ftypes_2eproto[1];
}
bool ProposalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalExecutorResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto);
  return file_level_enum_descriptors_cosmos_2fgroup_2fv1_2ftypes_2eproto[2];
}
bool ProposalExecutorResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Member::_Internal {
 public:
  using HasBits = decltype(std::declval<Member>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Member, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& added_at(const Member* msg);
  static void set_has_added_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Member::_Internal::added_at(const Member* msg) {
  return *msg->_impl_.added_at_;
}
void Member::clear_added_at() {
  if (_impl_.added_at_ != nullptr) _impl_.added_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Member::Member(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.Member)
}
Member::Member(const Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Member* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.weight_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.added_at_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.weight_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weight().empty()) {
    _this->_impl_.weight_.Set(from._internal_weight(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.added_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.added_at_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.Member)
}

inline void Member::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.weight_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.added_at_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.weight_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.Member)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Member::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.weight_.Destroy();
  _impl_.metadata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.added_at_;
}

void Member::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.Member)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.weight_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.added_at_ != nullptr);
    _impl_.added_at_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Member::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Member.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string weight = 2 [json_name = "weight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_weight();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Member.weight"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string metadata = 3 [json_name = "metadata"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Member.metadata"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp added_at = 4 [json_name = "addedAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_added_at(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Member::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.Member)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Member.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string weight = 2 [json_name = "weight"];
  if (!this->_internal_weight().empty()) {
    const std::string& _s = this->_internal_weight();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Member.weight");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string metadata = 3 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Member.metadata");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp added_at = 4 [json_name = "addedAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::added_at(this),
        _Internal::added_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.Member)
  return target;
}

::size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.Member)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string weight = 2 [json_name = "weight"];
  if (!this->_internal_weight().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_weight());
  }

  // string metadata = 3 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_metadata());
  }

  // .google.protobuf.Timestamp added_at = 4 [json_name = "addedAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.added_at_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Member::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Member::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Member::GetClassData() const { return &_class_data_; }


void Member::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Member*>(&to_msg);
  auto& from = static_cast<const Member&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.Member)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_weight().empty()) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_added_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_added_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::InternalSwap(Member* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weight_, lhs_arena,
                                       &other->_impl_.weight_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);
  swap(_impl_.added_at_, other->_impl_.added_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Member::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[0]);
}
// ===================================================================

class MemberRequest::_Internal {
 public:
};

MemberRequest::MemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.MemberRequest)
}
MemberRequest::MemberRequest(const MemberRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemberRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.weight_) {}

    , decltype(_impl_.metadata_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.weight_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weight().empty()) {
    _this->_impl_.weight_.Set(from._internal_weight(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.MemberRequest)
}

inline void MemberRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.weight_) {}

    , decltype(_impl_.metadata_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.weight_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemberRequest::~MemberRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.MemberRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemberRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.weight_.Destroy();
  _impl_.metadata_.Destroy();
}

void MemberRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.MemberRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.weight_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.MemberRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string weight = 2 [json_name = "weight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_weight();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.MemberRequest.weight"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string metadata = 3 [json_name = "metadata"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.MemberRequest.metadata"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MemberRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.MemberRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.MemberRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string weight = 2 [json_name = "weight"];
  if (!this->_internal_weight().empty()) {
    const std::string& _s = this->_internal_weight();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.MemberRequest.weight");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string metadata = 3 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.MemberRequest.metadata");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.MemberRequest)
  return target;
}

::size_t MemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.MemberRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string weight = 2 [json_name = "weight"];
  if (!this->_internal_weight().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_weight());
  }

  // string metadata = 3 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_metadata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemberRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberRequest::GetClassData() const { return &_class_data_; }


void MemberRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemberRequest*>(&to_msg);
  auto& from = static_cast<const MemberRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.MemberRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_weight().empty()) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberRequest::CopyFrom(const MemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.MemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberRequest::IsInitialized() const {
  return true;
}

void MemberRequest::InternalSwap(MemberRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weight_, lhs_arena,
                                       &other->_impl_.weight_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[1]);
}
// ===================================================================

class ThresholdDecisionPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<ThresholdDecisionPolicy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ThresholdDecisionPolicy, _impl_._has_bits_);
  static const ::cosmos::group::v1::DecisionPolicyWindows& windows(const ThresholdDecisionPolicy* msg);
  static void set_has_windows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::group::v1::DecisionPolicyWindows&
ThresholdDecisionPolicy::_Internal::windows(const ThresholdDecisionPolicy* msg) {
  return *msg->_impl_.windows_;
}
ThresholdDecisionPolicy::ThresholdDecisionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.ThresholdDecisionPolicy)
}
ThresholdDecisionPolicy::ThresholdDecisionPolicy(const ThresholdDecisionPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThresholdDecisionPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_) {}

    , decltype(_impl_.windows_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_threshold().empty()) {
    _this->_impl_.threshold_.Set(from._internal_threshold(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.windows_ = new ::cosmos::group::v1::DecisionPolicyWindows(*from._impl_.windows_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.ThresholdDecisionPolicy)
}

inline void ThresholdDecisionPolicy::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.threshold_) {}

    , decltype(_impl_.windows_){nullptr}
  };
  _impl_.threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThresholdDecisionPolicy::~ThresholdDecisionPolicy() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.ThresholdDecisionPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThresholdDecisionPolicy::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.threshold_.Destroy();
  if (this != internal_default_instance()) delete _impl_.windows_;
}

void ThresholdDecisionPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThresholdDecisionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.ThresholdDecisionPolicy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.threshold_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.windows_ != nullptr);
    _impl_.windows_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdDecisionPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string threshold = 1 [json_name = "threshold"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_threshold();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.ThresholdDecisionPolicy.threshold"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_windows(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ThresholdDecisionPolicy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.ThresholdDecisionPolicy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string threshold = 1 [json_name = "threshold"];
  if (!this->_internal_threshold().empty()) {
    const std::string& _s = this->_internal_threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.ThresholdDecisionPolicy.threshold");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::windows(this),
        _Internal::windows(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.ThresholdDecisionPolicy)
  return target;
}

::size_t ThresholdDecisionPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.ThresholdDecisionPolicy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string threshold = 1 [json_name = "threshold"];
  if (!this->_internal_threshold().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_threshold());
  }

  // .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.windows_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThresholdDecisionPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThresholdDecisionPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThresholdDecisionPolicy::GetClassData() const { return &_class_data_; }


void ThresholdDecisionPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThresholdDecisionPolicy*>(&to_msg);
  auto& from = static_cast<const ThresholdDecisionPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.ThresholdDecisionPolicy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_threshold().empty()) {
    _this->_internal_set_threshold(from._internal_threshold());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_windows()->::cosmos::group::v1::DecisionPolicyWindows::MergeFrom(
        from._internal_windows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThresholdDecisionPolicy::CopyFrom(const ThresholdDecisionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.ThresholdDecisionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdDecisionPolicy::IsInitialized() const {
  return true;
}

void ThresholdDecisionPolicy::InternalSwap(ThresholdDecisionPolicy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.threshold_, lhs_arena,
                                       &other->_impl_.threshold_, rhs_arena);
  swap(_impl_.windows_, other->_impl_.windows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdDecisionPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[2]);
}
// ===================================================================

class PercentageDecisionPolicy::_Internal {
 public:
  using HasBits = decltype(std::declval<PercentageDecisionPolicy>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PercentageDecisionPolicy, _impl_._has_bits_);
  static const ::cosmos::group::v1::DecisionPolicyWindows& windows(const PercentageDecisionPolicy* msg);
  static void set_has_windows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::group::v1::DecisionPolicyWindows&
PercentageDecisionPolicy::_Internal::windows(const PercentageDecisionPolicy* msg) {
  return *msg->_impl_.windows_;
}
PercentageDecisionPolicy::PercentageDecisionPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.PercentageDecisionPolicy)
}
PercentageDecisionPolicy::PercentageDecisionPolicy(const PercentageDecisionPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PercentageDecisionPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.percentage_) {}

    , decltype(_impl_.windows_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.percentage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.percentage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_percentage().empty()) {
    _this->_impl_.percentage_.Set(from._internal_percentage(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.windows_ = new ::cosmos::group::v1::DecisionPolicyWindows(*from._impl_.windows_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.PercentageDecisionPolicy)
}

inline void PercentageDecisionPolicy::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.percentage_) {}

    , decltype(_impl_.windows_){nullptr}
  };
  _impl_.percentage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.percentage_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PercentageDecisionPolicy::~PercentageDecisionPolicy() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.PercentageDecisionPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PercentageDecisionPolicy::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.percentage_.Destroy();
  if (this != internal_default_instance()) delete _impl_.windows_;
}

void PercentageDecisionPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PercentageDecisionPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.PercentageDecisionPolicy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.percentage_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.windows_ != nullptr);
    _impl_.windows_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PercentageDecisionPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string percentage = 1 [json_name = "percentage"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_percentage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.PercentageDecisionPolicy.percentage"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_windows(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PercentageDecisionPolicy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.PercentageDecisionPolicy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string percentage = 1 [json_name = "percentage"];
  if (!this->_internal_percentage().empty()) {
    const std::string& _s = this->_internal_percentage();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.PercentageDecisionPolicy.percentage");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::windows(this),
        _Internal::windows(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.PercentageDecisionPolicy)
  return target;
}

::size_t PercentageDecisionPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.PercentageDecisionPolicy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string percentage = 1 [json_name = "percentage"];
  if (!this->_internal_percentage().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_percentage());
  }

  // .cosmos.group.v1.DecisionPolicyWindows windows = 2 [json_name = "windows"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.windows_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PercentageDecisionPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PercentageDecisionPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PercentageDecisionPolicy::GetClassData() const { return &_class_data_; }


void PercentageDecisionPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PercentageDecisionPolicy*>(&to_msg);
  auto& from = static_cast<const PercentageDecisionPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.PercentageDecisionPolicy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_percentage().empty()) {
    _this->_internal_set_percentage(from._internal_percentage());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_windows()->::cosmos::group::v1::DecisionPolicyWindows::MergeFrom(
        from._internal_windows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PercentageDecisionPolicy::CopyFrom(const PercentageDecisionPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.PercentageDecisionPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PercentageDecisionPolicy::IsInitialized() const {
  return true;
}

void PercentageDecisionPolicy::InternalSwap(PercentageDecisionPolicy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.percentage_, lhs_arena,
                                       &other->_impl_.percentage_, rhs_arena);
  swap(_impl_.windows_, other->_impl_.windows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PercentageDecisionPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[3]);
}
// ===================================================================

class DecisionPolicyWindows::_Internal {
 public:
  using HasBits = decltype(std::declval<DecisionPolicyWindows>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DecisionPolicyWindows, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& voting_period(const DecisionPolicyWindows* msg);
  static void set_has_voting_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& min_execution_period(const DecisionPolicyWindows* msg);
  static void set_has_min_execution_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
DecisionPolicyWindows::_Internal::voting_period(const DecisionPolicyWindows* msg) {
  return *msg->_impl_.voting_period_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
DecisionPolicyWindows::_Internal::min_execution_period(const DecisionPolicyWindows* msg) {
  return *msg->_impl_.min_execution_period_;
}
void DecisionPolicyWindows::clear_voting_period() {
  if (_impl_.voting_period_ != nullptr) _impl_.voting_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DecisionPolicyWindows::clear_min_execution_period() {
  if (_impl_.min_execution_period_ != nullptr) _impl_.min_execution_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DecisionPolicyWindows::DecisionPolicyWindows(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.DecisionPolicyWindows)
}
DecisionPolicyWindows::DecisionPolicyWindows(const DecisionPolicyWindows& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DecisionPolicyWindows* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voting_period_){nullptr}
    , decltype(_impl_.min_execution_period_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.voting_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.voting_period_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.min_execution_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.min_execution_period_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.DecisionPolicyWindows)
}

inline void DecisionPolicyWindows::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voting_period_){nullptr}
    , decltype(_impl_.min_execution_period_){nullptr}
  };
}

DecisionPolicyWindows::~DecisionPolicyWindows() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.DecisionPolicyWindows)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DecisionPolicyWindows::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.voting_period_;
  if (this != internal_default_instance()) delete _impl_.min_execution_period_;
}

void DecisionPolicyWindows::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DecisionPolicyWindows::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.DecisionPolicyWindows)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.voting_period_ != nullptr);
      _impl_.voting_period_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.min_execution_period_ != nullptr);
      _impl_.min_execution_period_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DecisionPolicyWindows::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_voting_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration min_execution_period = 2 [json_name = "minExecutionPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_execution_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DecisionPolicyWindows::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.DecisionPolicyWindows)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::voting_period(this),
        _Internal::voting_period(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration min_execution_period = 2 [json_name = "minExecutionPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::min_execution_period(this),
        _Internal::min_execution_period(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.DecisionPolicyWindows)
  return target;
}

::size_t DecisionPolicyWindows::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.DecisionPolicyWindows)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voting_period_);
    }

    // .google.protobuf.Duration min_execution_period = 2 [json_name = "minExecutionPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.min_execution_period_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DecisionPolicyWindows::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DecisionPolicyWindows::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DecisionPolicyWindows::GetClassData() const { return &_class_data_; }


void DecisionPolicyWindows::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DecisionPolicyWindows*>(&to_msg);
  auto& from = static_cast<const DecisionPolicyWindows&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.DecisionPolicyWindows)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_voting_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_voting_period());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_min_execution_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_min_execution_period());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DecisionPolicyWindows::CopyFrom(const DecisionPolicyWindows& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.DecisionPolicyWindows)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionPolicyWindows::IsInitialized() const {
  return true;
}

void DecisionPolicyWindows::InternalSwap(DecisionPolicyWindows* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecisionPolicyWindows, _impl_.min_execution_period_)
      + sizeof(DecisionPolicyWindows::_impl_.min_execution_period_)
      - PROTOBUF_FIELD_OFFSET(DecisionPolicyWindows, _impl_.voting_period_)>(
          reinterpret_cast<char*>(&_impl_.voting_period_),
          reinterpret_cast<char*>(&other->_impl_.voting_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DecisionPolicyWindows::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[4]);
}
// ===================================================================

class GroupInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GroupInfo, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const GroupInfo* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GroupInfo::_Internal::created_at(const GroupInfo* msg) {
  return *msg->_impl_.created_at_;
}
void GroupInfo::clear_created_at() {
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GroupInfo::GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.GroupInfo)
}
GroupInfo::GroupInfo(const GroupInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.admin_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.total_weight_) {}

    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.version_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  _impl_.total_weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_weight_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_total_weight().empty()) {
    _this->_impl_.total_weight_.Set(from._internal_total_weight(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.GroupInfo)
}

inline void GroupInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.admin_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.total_weight_) {}

    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.version_) { ::uint64_t{0u} }

  };
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.total_weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_weight_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.GroupInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.admin_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.total_weight_.Destroy();
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void GroupInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.GroupInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.admin_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.total_weight_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.created_at_ != nullptr);
    _impl_.created_at_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 2 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.GroupInfo.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string metadata = 3 [json_name = "metadata"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.GroupInfo.metadata"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string total_weight = 5 [json_name = "totalWeight"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_total_weight();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.GroupInfo.total_weight"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp created_at = 6 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GroupInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.GroupInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // string admin = 2 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.GroupInfo.admin");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string metadata = 3 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.GroupInfo.metadata");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 version = 4 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_version(), target);
  }

  // string total_weight = 5 [json_name = "totalWeight"];
  if (!this->_internal_total_weight().empty()) {
    const std::string& _s = this->_internal_total_weight();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.GroupInfo.total_weight");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp created_at = 6 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.GroupInfo)
  return target;
}

::size_t GroupInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.GroupInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string admin = 2 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string metadata = 3 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_metadata());
  }

  // string total_weight = 5 [json_name = "totalWeight"];
  if (!this->_internal_total_weight().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_total_weight());
  }

  // .google.protobuf.Timestamp created_at = 6 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  // uint64 version = 4 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupInfo::GetClassData() const { return &_class_data_; }


void GroupInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupInfo*>(&to_msg);
  auto& from = static_cast<const GroupInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.GroupInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_total_weight().empty()) {
    _this->_internal_set_total_weight(from._internal_total_weight());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.GroupInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  return true;
}

void GroupInfo::InternalSwap(GroupInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.total_weight_, lhs_arena,
                                       &other->_impl_.total_weight_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupInfo, _impl_.version_)
      + sizeof(GroupInfo::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(GroupInfo, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[5]);
}
// ===================================================================

class GroupMember::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupMember>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GroupMember, _impl_._has_bits_);
  static const ::cosmos::group::v1::Member& member(const GroupMember* msg);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::group::v1::Member&
GroupMember::_Internal::member(const GroupMember* msg) {
  return *msg->_impl_.member_;
}
GroupMember::GroupMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.GroupMember)
}
GroupMember::GroupMember(const GroupMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_){nullptr}
    , decltype(_impl_.group_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.member_ = new ::cosmos::group::v1::Member(*from._impl_.member_);
  }
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.GroupMember)
}

inline void GroupMember::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.member_){nullptr}
    , decltype(_impl_.group_id_) { ::uint64_t{0u} }

  };
}

GroupMember::~GroupMember() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.GroupMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupMember::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.member_;
}

void GroupMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupMember::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.GroupMember)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.member_ != nullptr);
    _impl_.member_->Clear();
  }
  _impl_.group_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1 [json_name = "groupId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.group.v1.Member member = 2 [json_name = "member"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GroupMember::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.GroupMember)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_group_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.group.v1.Member member = 2 [json_name = "member"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::member(this),
        _Internal::member(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.GroupMember)
  return target;
}

::size_t GroupMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.GroupMember)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.group.v1.Member member = 2 [json_name = "member"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.member_);
  }

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMember::GetClassData() const { return &_class_data_; }


void GroupMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupMember*>(&to_msg);
  auto& from = static_cast<const GroupMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.GroupMember)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_member()->::cosmos::group::v1::Member::MergeFrom(
        from._internal_member());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMember::CopyFrom(const GroupMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.GroupMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMember::IsInitialized() const {
  return true;
}

void GroupMember::InternalSwap(GroupMember* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupMember, _impl_.group_id_)
      + sizeof(GroupMember::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(GroupMember, _impl_.member_)>(
          reinterpret_cast<char*>(&_impl_.member_),
          reinterpret_cast<char*>(&other->_impl_.member_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[6]);
}
// ===================================================================

class GroupPolicyInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupPolicyInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GroupPolicyInfo, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& decision_policy(const GroupPolicyInfo* msg);
  static void set_has_decision_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const GroupPolicyInfo* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
GroupPolicyInfo::_Internal::decision_policy(const GroupPolicyInfo* msg) {
  return *msg->_impl_.decision_policy_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GroupPolicyInfo::_Internal::created_at(const GroupPolicyInfo* msg) {
  return *msg->_impl_.created_at_;
}
void GroupPolicyInfo::clear_decision_policy() {
  if (_impl_.decision_policy_ != nullptr) _impl_.decision_policy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GroupPolicyInfo::clear_created_at() {
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GroupPolicyInfo::GroupPolicyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.GroupPolicyInfo)
}
GroupPolicyInfo::GroupPolicyInfo(const GroupPolicyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupPolicyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.decision_policy_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.group_id_) {}

    , decltype(_impl_.version_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.decision_policy_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.decision_policy_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  ::memcpy(&_impl_.group_id_, &from._impl_.group_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.GroupPolicyInfo)
}

inline void GroupPolicyInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.decision_policy_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.group_id_) { ::uint64_t{0u} }

    , decltype(_impl_.version_) { ::uint64_t{0u} }

  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupPolicyInfo::~GroupPolicyInfo() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.GroupPolicyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupPolicyInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.metadata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.decision_policy_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void GroupPolicyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupPolicyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.GroupPolicyInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.decision_policy_ != nullptr);
      _impl_.decision_policy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
  }
  ::memset(&_impl_.group_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.group_id_)) + sizeof(_impl_.version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupPolicyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.GroupPolicyInfo.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 group_id = 2 [json_name = "groupId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 3 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.GroupPolicyInfo.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string metadata = 4 [json_name = "metadata"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.GroupPolicyInfo.metadata"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 version = 5 [json_name = "version"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_decision_policy(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp created_at = 7 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GroupPolicyInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.GroupPolicyInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.GroupPolicyInfo.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 group_id = 2 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_group_id(), target);
  }

  // string admin = 3 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.GroupPolicyInfo.admin");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string metadata = 4 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.GroupPolicyInfo.metadata");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 version = 5 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_version(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::decision_policy(this),
        _Internal::decision_policy(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 7 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.GroupPolicyInfo)
  return target;
}

::size_t GroupPolicyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.GroupPolicyInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string admin = 3 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string metadata = 4 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_metadata());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Any decision_policy = 6 [json_name = "decisionPolicy", (.cosmos_proto.accepts_interface) = "cosmos.group.v1.DecisionPolicy"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.decision_policy_);
    }

    // .google.protobuf.Timestamp created_at = 7 [json_name = "createdAt", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.created_at_);
    }

  }
  // uint64 group_id = 2 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_id());
  }

  // uint64 version = 5 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupPolicyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupPolicyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupPolicyInfo::GetClassData() const { return &_class_data_; }


void GroupPolicyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupPolicyInfo*>(&to_msg);
  auto& from = static_cast<const GroupPolicyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.GroupPolicyInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_decision_policy()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_decision_policy());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_created_at());
    }
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupPolicyInfo::CopyFrom(const GroupPolicyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.GroupPolicyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupPolicyInfo::IsInitialized() const {
  return true;
}

void GroupPolicyInfo::InternalSwap(GroupPolicyInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupPolicyInfo, _impl_.version_)
      + sizeof(GroupPolicyInfo::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(GroupPolicyInfo, _impl_.decision_policy_)>(
          reinterpret_cast<char*>(&_impl_.decision_policy_),
          reinterpret_cast<char*>(&other->_impl_.decision_policy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupPolicyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[7]);
}
// ===================================================================

class Proposal::_Internal {
 public:
  using HasBits = decltype(std::declval<Proposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Proposal, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& submit_time(const Proposal* msg);
  static void set_has_submit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::group::v1::TallyResult& final_tally_result(const Proposal* msg);
  static void set_has_final_tally_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& voting_period_end(const Proposal* msg);
  static void set_has_voting_period_end(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::submit_time(const Proposal* msg) {
  return *msg->_impl_.submit_time_;
}
const ::cosmos::group::v1::TallyResult&
Proposal::_Internal::final_tally_result(const Proposal* msg) {
  return *msg->_impl_.final_tally_result_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::voting_period_end(const Proposal* msg) {
  return *msg->_impl_.voting_period_end_;
}
void Proposal::clear_submit_time() {
  if (_impl_.submit_time_ != nullptr) _impl_.submit_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Proposal::clear_voting_period_end() {
  if (_impl_.voting_period_end_ != nullptr) _impl_.voting_period_end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Proposal::clear_messages() {
  _internal_mutable_messages()->Clear();
}
Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Proposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposers_){from._impl_.proposers_}
    , decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.group_policy_address_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.title_) {}

    , decltype(_impl_.summary_) {}

    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.final_tally_result_){nullptr}
    , decltype(_impl_.voting_period_end_){nullptr}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.group_version_) {}

    , decltype(_impl_.group_policy_version_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.executor_result_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_policy_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.group_policy_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_policy_address().empty()) {
    _this->_impl_.group_policy_address_.Set(from._internal_group_policy_address(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.summary_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary().empty()) {
    _this->_impl_.summary_.Set(from._internal_summary(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.submit_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.submit_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.final_tally_result_ = new ::cosmos::group::v1::TallyResult(*from._impl_.final_tally_result_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.voting_period_end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.voting_period_end_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.executor_result_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.executor_result_));
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.Proposal)
}

inline void Proposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposers_){arena}
    , decltype(_impl_.messages_){arena}
    , decltype(_impl_.group_policy_address_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.title_) {}

    , decltype(_impl_.summary_) {}

    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.final_tally_result_){nullptr}
    , decltype(_impl_.voting_period_end_){nullptr}
    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.group_version_) { ::uint64_t{0u} }

    , decltype(_impl_.group_policy_version_) { ::uint64_t{0u} }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.executor_result_) { 0 }

  };
  _impl_.group_policy_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.group_policy_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.summary_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.Proposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Proposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_proposers()->~RepeatedPtrField();
  _internal_mutable_messages()->~RepeatedPtrField();
  _impl_.group_policy_address_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.title_.Destroy();
  _impl_.summary_.Destroy();
  if (this != internal_default_instance()) delete _impl_.submit_time_;
  if (this != internal_default_instance()) delete _impl_.final_tally_result_;
  if (this != internal_default_instance()) delete _impl_.voting_period_end_;
}

void Proposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.Proposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_proposers()->Clear();
  _internal_mutable_messages()->Clear();
  _impl_.group_policy_address_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.submit_time_ != nullptr);
      _impl_.submit_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.final_tally_result_ != nullptr);
      _impl_.final_tally_result_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.voting_period_end_ != nullptr);
      _impl_.voting_period_end_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.executor_result_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.executor_result_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group_policy_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Proposal.group_policy_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string metadata = 3 [json_name = "metadata"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Proposal.metadata"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string proposers = 4 [json_name = "proposers", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proposers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Proposal.proposers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 group_version = 6 [json_name = "groupVersion"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.group_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 group_policy_version = 7 [json_name = "groupPolicyVersion"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.group_policy_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.group.v1.ProposalStatus status = 8 [json_name = "status"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::cosmos::group::v1::ProposalStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.group.v1.TallyResult final_tally_result = 9 [json_name = "finalTallyResult", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_tally_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp voting_period_end = 10 [json_name = "votingPeriodEnd", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_voting_period_end(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.group.v1.ProposalExecutorResult executor_result = 11 [json_name = "executorResult"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_executor_result(static_cast<::cosmos::group::v1::ProposalExecutorResult>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .google.protobuf.Any messages = 12 [json_name = "messages"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string title = 13 [json_name = "title"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Proposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string summary = 14 [json_name = "summary"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Proposal.summary"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Proposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.Proposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_group_policy_address().empty()) {
    const std::string& _s = this->_internal_group_policy_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Proposal.group_policy_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string metadata = 3 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Proposal.metadata");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated string proposers = 4 [json_name = "proposers", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  for (int i = 0, n = this->_internal_proposers_size(); i < n; ++i) {
    const auto& s = this->_internal_proposers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Proposal.proposers");
    target = stream->WriteString(4, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::submit_time(this),
        _Internal::submit_time(this).GetCachedSize(), target, stream);
  }

  // uint64 group_version = 6 [json_name = "groupVersion"];
  if (this->_internal_group_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_group_version(), target);
  }

  // uint64 group_policy_version = 7 [json_name = "groupPolicyVersion"];
  if (this->_internal_group_policy_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_group_policy_version(), target);
  }

  // .cosmos.group.v1.ProposalStatus status = 8 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_status(), target);
  }

  // .cosmos.group.v1.TallyResult final_tally_result = 9 [json_name = "finalTallyResult", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::final_tally_result(this),
        _Internal::final_tally_result(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp voting_period_end = 10 [json_name = "votingPeriodEnd", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::voting_period_end(this),
        _Internal::voting_period_end(this).GetCachedSize(), target, stream);
  }

  // .cosmos.group.v1.ProposalExecutorResult executor_result = 11 [json_name = "executorResult"];
  if (this->_internal_executor_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_executor_result(), target);
  }

  // repeated .google.protobuf.Any messages = 12 [json_name = "messages"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string title = 13 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Proposal.title");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string summary = 14 [json_name = "summary"];
  if (!this->_internal_summary().empty()) {
    const std::string& _s = this->_internal_summary();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Proposal.summary");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.Proposal)
  return target;
}

::size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.Proposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proposers = 4 [json_name = "proposers", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_proposers().size());
  for (int i = 0, n = _internal_proposers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_proposers().Get(i));
  }

  // repeated .google.protobuf.Any messages = 12 [json_name = "messages"];
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_internal_messages()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string group_policy_address = 2 [json_name = "groupPolicyAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_group_policy_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_group_policy_address());
  }

  // string metadata = 3 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_metadata());
  }

  // string title = 13 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string summary = 14 [json_name = "summary"];
  if (!this->_internal_summary().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_summary());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.submit_time_);
    }

    // .cosmos.group.v1.TallyResult final_tally_result = 9 [json_name = "finalTallyResult", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.final_tally_result_);
    }

    // .google.protobuf.Timestamp voting_period_end = 10 [json_name = "votingPeriodEnd", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voting_period_end_);
    }

  }
  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  // uint64 group_version = 6 [json_name = "groupVersion"];
  if (this->_internal_group_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_version());
  }

  // uint64 group_policy_version = 7 [json_name = "groupPolicyVersion"];
  if (this->_internal_group_policy_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_policy_version());
  }

  // .cosmos.group.v1.ProposalStatus status = 8 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .cosmos.group.v1.ProposalExecutorResult executor_result = 11 [json_name = "executorResult"];
  if (this->_internal_executor_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_executor_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Proposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proposal::GetClassData() const { return &_class_data_; }


void Proposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Proposal*>(&to_msg);
  auto& from = static_cast<const Proposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.Proposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proposers()->MergeFrom(from._internal_proposers());
  _this->_internal_mutable_messages()->MergeFrom(from._internal_messages());
  if (!from._internal_group_policy_address().empty()) {
    _this->_internal_set_group_policy_address(from._internal_group_policy_address());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_submit_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_submit_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_final_tally_result()->::cosmos::group::v1::TallyResult::MergeFrom(
          from._internal_final_tally_result());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_voting_period_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_voting_period_end());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_group_version() != 0) {
    _this->_internal_set_group_version(from._internal_group_version());
  }
  if (from._internal_group_policy_version() != 0) {
    _this->_internal_set_group_policy_version(from._internal_group_policy_version());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_executor_result() != 0) {
    _this->_internal_set_executor_result(from._internal_executor_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_proposers()->InternalSwap(
      other->_internal_mutable_proposers());
  _internal_mutable_messages()->InternalSwap(other->_internal_mutable_messages());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_policy_address_, lhs_arena,
                                       &other->_impl_.group_policy_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.summary_, lhs_arena,
                                       &other->_impl_.summary_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, _impl_.executor_result_)
      + sizeof(Proposal::_impl_.executor_result_)
      - PROTOBUF_FIELD_OFFSET(Proposal, _impl_.submit_time_)>(
          reinterpret_cast<char*>(&_impl_.submit_time_),
          reinterpret_cast<char*>(&other->_impl_.submit_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[8]);
}
// ===================================================================

class TallyResult::_Internal {
 public:
};

TallyResult::TallyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.TallyResult)
}
TallyResult::TallyResult(const TallyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TallyResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.yes_count_) {}

    , decltype(_impl_.abstain_count_) {}

    , decltype(_impl_.no_count_) {}

    , decltype(_impl_.no_with_veto_count_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.yes_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.yes_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_yes_count().empty()) {
    _this->_impl_.yes_count_.Set(from._internal_yes_count(), _this->GetArenaForAllocation());
  }
  _impl_.abstain_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.abstain_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_abstain_count().empty()) {
    _this->_impl_.abstain_count_.Set(from._internal_abstain_count(), _this->GetArenaForAllocation());
  }
  _impl_.no_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_no_count().empty()) {
    _this->_impl_.no_count_.Set(from._internal_no_count(), _this->GetArenaForAllocation());
  }
  _impl_.no_with_veto_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_with_veto_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_no_with_veto_count().empty()) {
    _this->_impl_.no_with_veto_count_.Set(from._internal_no_with_veto_count(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.TallyResult)
}

inline void TallyResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.yes_count_) {}

    , decltype(_impl_.abstain_count_) {}

    , decltype(_impl_.no_count_) {}

    , decltype(_impl_.no_with_veto_count_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.yes_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.yes_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abstain_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.abstain_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.no_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.no_with_veto_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_with_veto_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TallyResult::~TallyResult() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.TallyResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TallyResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.yes_count_.Destroy();
  _impl_.abstain_count_.Destroy();
  _impl_.no_count_.Destroy();
  _impl_.no_with_veto_count_.Destroy();
}

void TallyResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TallyResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.TallyResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.yes_count_.ClearToEmpty();
  _impl_.abstain_count_.ClearToEmpty();
  _impl_.no_count_.ClearToEmpty();
  _impl_.no_with_veto_count_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TallyResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string yes_count = 1 [json_name = "yesCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_yes_count();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.TallyResult.yes_count"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string abstain_count = 2 [json_name = "abstainCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_abstain_count();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.TallyResult.abstain_count"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string no_count = 3 [json_name = "noCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_no_count();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.TallyResult.no_count"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string no_with_veto_count = 4 [json_name = "noWithVetoCount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_no_with_veto_count();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.TallyResult.no_with_veto_count"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TallyResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.TallyResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string yes_count = 1 [json_name = "yesCount"];
  if (!this->_internal_yes_count().empty()) {
    const std::string& _s = this->_internal_yes_count();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.TallyResult.yes_count");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string abstain_count = 2 [json_name = "abstainCount"];
  if (!this->_internal_abstain_count().empty()) {
    const std::string& _s = this->_internal_abstain_count();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.TallyResult.abstain_count");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string no_count = 3 [json_name = "noCount"];
  if (!this->_internal_no_count().empty()) {
    const std::string& _s = this->_internal_no_count();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.TallyResult.no_count");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string no_with_veto_count = 4 [json_name = "noWithVetoCount"];
  if (!this->_internal_no_with_veto_count().empty()) {
    const std::string& _s = this->_internal_no_with_veto_count();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.TallyResult.no_with_veto_count");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.TallyResult)
  return target;
}

::size_t TallyResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.TallyResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string yes_count = 1 [json_name = "yesCount"];
  if (!this->_internal_yes_count().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_yes_count());
  }

  // string abstain_count = 2 [json_name = "abstainCount"];
  if (!this->_internal_abstain_count().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_abstain_count());
  }

  // string no_count = 3 [json_name = "noCount"];
  if (!this->_internal_no_count().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_no_count());
  }

  // string no_with_veto_count = 4 [json_name = "noWithVetoCount"];
  if (!this->_internal_no_with_veto_count().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_no_with_veto_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TallyResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TallyResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TallyResult::GetClassData() const { return &_class_data_; }


void TallyResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TallyResult*>(&to_msg);
  auto& from = static_cast<const TallyResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.TallyResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_yes_count().empty()) {
    _this->_internal_set_yes_count(from._internal_yes_count());
  }
  if (!from._internal_abstain_count().empty()) {
    _this->_internal_set_abstain_count(from._internal_abstain_count());
  }
  if (!from._internal_no_count().empty()) {
    _this->_internal_set_no_count(from._internal_no_count());
  }
  if (!from._internal_no_with_veto_count().empty()) {
    _this->_internal_set_no_with_veto_count(from._internal_no_with_veto_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TallyResult::CopyFrom(const TallyResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.TallyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TallyResult::IsInitialized() const {
  return true;
}

void TallyResult::InternalSwap(TallyResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.yes_count_, lhs_arena,
                                       &other->_impl_.yes_count_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.abstain_count_, lhs_arena,
                                       &other->_impl_.abstain_count_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.no_count_, lhs_arena,
                                       &other->_impl_.no_count_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.no_with_veto_count_, lhs_arena,
                                       &other->_impl_.no_with_veto_count_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata TallyResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[9]);
}
// ===================================================================

class Vote::_Internal {
 public:
  using HasBits = decltype(std::declval<Vote>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vote, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& submit_time(const Vote* msg);
  static void set_has_submit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Vote::_Internal::submit_time(const Vote* msg) {
  return *msg->_impl_.submit_time_;
}
void Vote::clear_submit_time() {
  if (_impl_.submit_time_ != nullptr) _impl_.submit_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voter_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.proposal_id_) {}

    , decltype(_impl_.option_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voter().empty()) {
    _this->_impl_.voter_.Set(from._internal_voter(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.submit_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.submit_time_);
  }
  ::memcpy(&_impl_.proposal_id_, &from._impl_.proposal_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.option_) -
    reinterpret_cast<char*>(&_impl_.proposal_id_)) + sizeof(_impl_.option_));
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.Vote)
}

inline void Vote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voter_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , decltype(_impl_.option_) { 0 }

  };
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.Vote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voter_.Destroy();
  _impl_.metadata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.submit_time_;
}

void Vote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.Vote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voter_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.submit_time_ != nullptr);
    _impl_.submit_time_->Clear();
  }
  ::memset(&_impl_.proposal_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.option_) -
      reinterpret_cast<char*>(&_impl_.proposal_id_)) + sizeof(_impl_.option_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_voter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Vote.voter"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_option(static_cast<::cosmos::group::v1::VoteOption>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string metadata = 4 [json_name = "metadata"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.Vote.metadata"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.Vote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    const std::string& _s = this->_internal_voter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Vote.voter");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
  if (this->_internal_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_option(), target);
  }

  // string metadata = 4 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.Vote.metadata");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::submit_time(this),
        _Internal::submit_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.Vote)
  return target;
}

::size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.Vote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_voter());
  }

  // string metadata = 4 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_metadata());
  }

  // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.submit_time_);
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  // .cosmos.group.v1.VoteOption option = 3 [json_name = "option"];
  if (this->_internal_option() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_option());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vote::GetClassData() const { return &_class_data_; }


void Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vote*>(&to_msg);
  auto& from = static_cast<const Vote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.Vote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_voter().empty()) {
    _this->_internal_set_voter(from._internal_voter());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_submit_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_submit_time());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  if (from._internal_option() != 0) {
    _this->_internal_set_option(from._internal_option());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voter_, lhs_arena,
                                       &other->_impl_.voter_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vote, _impl_.option_)
      + sizeof(Vote::_impl_.option_)
      - PROTOBUF_FIELD_OFFSET(Vote, _impl_.submit_time_)>(
          reinterpret_cast<char*>(&_impl_.submit_time_),
          reinterpret_cast<char*>(&other->_impl_.submit_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2ftypes_2eproto[10]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::Member*
Arena::CreateMaybeMessage< ::cosmos::group::v1::Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::Member >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::MemberRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::MemberRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::MemberRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::ThresholdDecisionPolicy*
Arena::CreateMaybeMessage< ::cosmos::group::v1::ThresholdDecisionPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::ThresholdDecisionPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::PercentageDecisionPolicy*
Arena::CreateMaybeMessage< ::cosmos::group::v1::PercentageDecisionPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::PercentageDecisionPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::DecisionPolicyWindows*
Arena::CreateMaybeMessage< ::cosmos::group::v1::DecisionPolicyWindows >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::DecisionPolicyWindows >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::GroupInfo*
Arena::CreateMaybeMessage< ::cosmos::group::v1::GroupInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::GroupInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::GroupMember*
Arena::CreateMaybeMessage< ::cosmos::group::v1::GroupMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::GroupMember >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::GroupPolicyInfo*
Arena::CreateMaybeMessage< ::cosmos::group::v1::GroupPolicyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::GroupPolicyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::Proposal*
Arena::CreateMaybeMessage< ::cosmos::group::v1::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::TallyResult*
Arena::CreateMaybeMessage< ::cosmos::group::v1::TallyResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::TallyResult >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::Vote*
Arena::CreateMaybeMessage< ::cosmos::group::v1::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::Vote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

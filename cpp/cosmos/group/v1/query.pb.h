// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/group/v1/types.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgroup_2fv1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto;
namespace cosmos {
namespace group {
namespace v1 {
class QueryGroupInfoRequest;
struct QueryGroupInfoRequestDefaultTypeInternal;
extern QueryGroupInfoRequestDefaultTypeInternal _QueryGroupInfoRequest_default_instance_;
class QueryGroupInfoResponse;
struct QueryGroupInfoResponseDefaultTypeInternal;
extern QueryGroupInfoResponseDefaultTypeInternal _QueryGroupInfoResponse_default_instance_;
class QueryGroupMembersRequest;
struct QueryGroupMembersRequestDefaultTypeInternal;
extern QueryGroupMembersRequestDefaultTypeInternal _QueryGroupMembersRequest_default_instance_;
class QueryGroupMembersResponse;
struct QueryGroupMembersResponseDefaultTypeInternal;
extern QueryGroupMembersResponseDefaultTypeInternal _QueryGroupMembersResponse_default_instance_;
class QueryGroupPoliciesByAdminRequest;
struct QueryGroupPoliciesByAdminRequestDefaultTypeInternal;
extern QueryGroupPoliciesByAdminRequestDefaultTypeInternal _QueryGroupPoliciesByAdminRequest_default_instance_;
class QueryGroupPoliciesByAdminResponse;
struct QueryGroupPoliciesByAdminResponseDefaultTypeInternal;
extern QueryGroupPoliciesByAdminResponseDefaultTypeInternal _QueryGroupPoliciesByAdminResponse_default_instance_;
class QueryGroupPoliciesByGroupRequest;
struct QueryGroupPoliciesByGroupRequestDefaultTypeInternal;
extern QueryGroupPoliciesByGroupRequestDefaultTypeInternal _QueryGroupPoliciesByGroupRequest_default_instance_;
class QueryGroupPoliciesByGroupResponse;
struct QueryGroupPoliciesByGroupResponseDefaultTypeInternal;
extern QueryGroupPoliciesByGroupResponseDefaultTypeInternal _QueryGroupPoliciesByGroupResponse_default_instance_;
class QueryGroupPolicyInfoRequest;
struct QueryGroupPolicyInfoRequestDefaultTypeInternal;
extern QueryGroupPolicyInfoRequestDefaultTypeInternal _QueryGroupPolicyInfoRequest_default_instance_;
class QueryGroupPolicyInfoResponse;
struct QueryGroupPolicyInfoResponseDefaultTypeInternal;
extern QueryGroupPolicyInfoResponseDefaultTypeInternal _QueryGroupPolicyInfoResponse_default_instance_;
class QueryGroupsByAdminRequest;
struct QueryGroupsByAdminRequestDefaultTypeInternal;
extern QueryGroupsByAdminRequestDefaultTypeInternal _QueryGroupsByAdminRequest_default_instance_;
class QueryGroupsByAdminResponse;
struct QueryGroupsByAdminResponseDefaultTypeInternal;
extern QueryGroupsByAdminResponseDefaultTypeInternal _QueryGroupsByAdminResponse_default_instance_;
class QueryGroupsByMemberRequest;
struct QueryGroupsByMemberRequestDefaultTypeInternal;
extern QueryGroupsByMemberRequestDefaultTypeInternal _QueryGroupsByMemberRequest_default_instance_;
class QueryGroupsByMemberResponse;
struct QueryGroupsByMemberResponseDefaultTypeInternal;
extern QueryGroupsByMemberResponseDefaultTypeInternal _QueryGroupsByMemberResponse_default_instance_;
class QueryProposalRequest;
struct QueryProposalRequestDefaultTypeInternal;
extern QueryProposalRequestDefaultTypeInternal _QueryProposalRequest_default_instance_;
class QueryProposalResponse;
struct QueryProposalResponseDefaultTypeInternal;
extern QueryProposalResponseDefaultTypeInternal _QueryProposalResponse_default_instance_;
class QueryProposalsByGroupPolicyRequest;
struct QueryProposalsByGroupPolicyRequestDefaultTypeInternal;
extern QueryProposalsByGroupPolicyRequestDefaultTypeInternal _QueryProposalsByGroupPolicyRequest_default_instance_;
class QueryProposalsByGroupPolicyResponse;
struct QueryProposalsByGroupPolicyResponseDefaultTypeInternal;
extern QueryProposalsByGroupPolicyResponseDefaultTypeInternal _QueryProposalsByGroupPolicyResponse_default_instance_;
class QueryTallyResultRequest;
struct QueryTallyResultRequestDefaultTypeInternal;
extern QueryTallyResultRequestDefaultTypeInternal _QueryTallyResultRequest_default_instance_;
class QueryTallyResultResponse;
struct QueryTallyResultResponseDefaultTypeInternal;
extern QueryTallyResultResponseDefaultTypeInternal _QueryTallyResultResponse_default_instance_;
class QueryVoteByProposalVoterRequest;
struct QueryVoteByProposalVoterRequestDefaultTypeInternal;
extern QueryVoteByProposalVoterRequestDefaultTypeInternal _QueryVoteByProposalVoterRequest_default_instance_;
class QueryVoteByProposalVoterResponse;
struct QueryVoteByProposalVoterResponseDefaultTypeInternal;
extern QueryVoteByProposalVoterResponseDefaultTypeInternal _QueryVoteByProposalVoterResponse_default_instance_;
class QueryVotesByProposalRequest;
struct QueryVotesByProposalRequestDefaultTypeInternal;
extern QueryVotesByProposalRequestDefaultTypeInternal _QueryVotesByProposalRequest_default_instance_;
class QueryVotesByProposalResponse;
struct QueryVotesByProposalResponseDefaultTypeInternal;
extern QueryVotesByProposalResponseDefaultTypeInternal _QueryVotesByProposalResponse_default_instance_;
class QueryVotesByVoterRequest;
struct QueryVotesByVoterRequestDefaultTypeInternal;
extern QueryVotesByVoterRequestDefaultTypeInternal _QueryVotesByVoterRequest_default_instance_;
class QueryVotesByVoterResponse;
struct QueryVotesByVoterResponseDefaultTypeInternal;
extern QueryVotesByVoterResponseDefaultTypeInternal _QueryVotesByVoterResponse_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::group::v1::QueryGroupInfoRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupInfoRequest>(Arena*);
template <>
::cosmos::group::v1::QueryGroupInfoResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupInfoResponse>(Arena*);
template <>
::cosmos::group::v1::QueryGroupMembersRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupMembersRequest>(Arena*);
template <>
::cosmos::group::v1::QueryGroupMembersResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupMembersResponse>(Arena*);
template <>
::cosmos::group::v1::QueryGroupPoliciesByAdminRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupPoliciesByAdminRequest>(Arena*);
template <>
::cosmos::group::v1::QueryGroupPoliciesByAdminResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupPoliciesByAdminResponse>(Arena*);
template <>
::cosmos::group::v1::QueryGroupPoliciesByGroupRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupPoliciesByGroupRequest>(Arena*);
template <>
::cosmos::group::v1::QueryGroupPoliciesByGroupResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupPoliciesByGroupResponse>(Arena*);
template <>
::cosmos::group::v1::QueryGroupPolicyInfoRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupPolicyInfoRequest>(Arena*);
template <>
::cosmos::group::v1::QueryGroupPolicyInfoResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupPolicyInfoResponse>(Arena*);
template <>
::cosmos::group::v1::QueryGroupsByAdminRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupsByAdminRequest>(Arena*);
template <>
::cosmos::group::v1::QueryGroupsByAdminResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupsByAdminResponse>(Arena*);
template <>
::cosmos::group::v1::QueryGroupsByMemberRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupsByMemberRequest>(Arena*);
template <>
::cosmos::group::v1::QueryGroupsByMemberResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryGroupsByMemberResponse>(Arena*);
template <>
::cosmos::group::v1::QueryProposalRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryProposalRequest>(Arena*);
template <>
::cosmos::group::v1::QueryProposalResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryProposalResponse>(Arena*);
template <>
::cosmos::group::v1::QueryProposalsByGroupPolicyRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryProposalsByGroupPolicyRequest>(Arena*);
template <>
::cosmos::group::v1::QueryProposalsByGroupPolicyResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryProposalsByGroupPolicyResponse>(Arena*);
template <>
::cosmos::group::v1::QueryTallyResultRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryTallyResultRequest>(Arena*);
template <>
::cosmos::group::v1::QueryTallyResultResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryTallyResultResponse>(Arena*);
template <>
::cosmos::group::v1::QueryVoteByProposalVoterRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryVoteByProposalVoterRequest>(Arena*);
template <>
::cosmos::group::v1::QueryVoteByProposalVoterResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryVoteByProposalVoterResponse>(Arena*);
template <>
::cosmos::group::v1::QueryVotesByProposalRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryVotesByProposalRequest>(Arena*);
template <>
::cosmos::group::v1::QueryVotesByProposalResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryVotesByProposalResponse>(Arena*);
template <>
::cosmos::group::v1::QueryVotesByVoterRequest* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryVotesByVoterRequest>(Arena*);
template <>
::cosmos::group::v1::QueryVotesByVoterResponse* Arena::CreateMaybeMessage<::cosmos::group::v1::QueryVotesByVoterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace group {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryGroupInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupInfoRequest) */ {
 public:
  inline QueryGroupInfoRequest() : QueryGroupInfoRequest(nullptr) {}
  ~QueryGroupInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupInfoRequest(const QueryGroupInfoRequest& from);
  QueryGroupInfoRequest(QueryGroupInfoRequest&& from) noexcept
    : QueryGroupInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupInfoRequest& operator=(const QueryGroupInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupInfoRequest& operator=(QueryGroupInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupInfoRequest*>(
               &_QueryGroupInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryGroupInfoRequest& a, QueryGroupInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupInfoRequest& from) {
    QueryGroupInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupInfoRequest";
  }
  protected:
  explicit QueryGroupInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupInfoResponse) */ {
 public:
  inline QueryGroupInfoResponse() : QueryGroupInfoResponse(nullptr) {}
  ~QueryGroupInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupInfoResponse(const QueryGroupInfoResponse& from);
  QueryGroupInfoResponse(QueryGroupInfoResponse&& from) noexcept
    : QueryGroupInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupInfoResponse& operator=(const QueryGroupInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupInfoResponse& operator=(QueryGroupInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupInfoResponse*>(
               &_QueryGroupInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryGroupInfoResponse& a, QueryGroupInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupInfoResponse& from) {
    QueryGroupInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupInfoResponse";
  }
  protected:
  explicit QueryGroupInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .cosmos.group.v1.GroupInfo info = 1 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::cosmos::group::v1::GroupInfo& info() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::GroupInfo* release_info();
  ::cosmos::group::v1::GroupInfo* mutable_info();
  void set_allocated_info(::cosmos::group::v1::GroupInfo* info);
  private:
  const ::cosmos::group::v1::GroupInfo& _internal_info() const;
  ::cosmos::group::v1::GroupInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::cosmos::group::v1::GroupInfo* info);
  ::cosmos::group::v1::GroupInfo* unsafe_arena_release_info();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::group::v1::GroupInfo* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupPolicyInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupPolicyInfoRequest) */ {
 public:
  inline QueryGroupPolicyInfoRequest() : QueryGroupPolicyInfoRequest(nullptr) {}
  ~QueryGroupPolicyInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupPolicyInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupPolicyInfoRequest(const QueryGroupPolicyInfoRequest& from);
  QueryGroupPolicyInfoRequest(QueryGroupPolicyInfoRequest&& from) noexcept
    : QueryGroupPolicyInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupPolicyInfoRequest& operator=(const QueryGroupPolicyInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupPolicyInfoRequest& operator=(QueryGroupPolicyInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupPolicyInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupPolicyInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupPolicyInfoRequest*>(
               &_QueryGroupPolicyInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryGroupPolicyInfoRequest& a, QueryGroupPolicyInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupPolicyInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupPolicyInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupPolicyInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupPolicyInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupPolicyInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupPolicyInfoRequest& from) {
    QueryGroupPolicyInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupPolicyInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupPolicyInfoRequest";
  }
  protected:
  explicit QueryGroupPolicyInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupPolicyInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupPolicyInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupPolicyInfoResponse) */ {
 public:
  inline QueryGroupPolicyInfoResponse() : QueryGroupPolicyInfoResponse(nullptr) {}
  ~QueryGroupPolicyInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupPolicyInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupPolicyInfoResponse(const QueryGroupPolicyInfoResponse& from);
  QueryGroupPolicyInfoResponse(QueryGroupPolicyInfoResponse&& from) noexcept
    : QueryGroupPolicyInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupPolicyInfoResponse& operator=(const QueryGroupPolicyInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupPolicyInfoResponse& operator=(QueryGroupPolicyInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupPolicyInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupPolicyInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupPolicyInfoResponse*>(
               &_QueryGroupPolicyInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryGroupPolicyInfoResponse& a, QueryGroupPolicyInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupPolicyInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupPolicyInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupPolicyInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupPolicyInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupPolicyInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupPolicyInfoResponse& from) {
    QueryGroupPolicyInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupPolicyInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupPolicyInfoResponse";
  }
  protected:
  explicit QueryGroupPolicyInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .cosmos.group.v1.GroupPolicyInfo info = 1 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::cosmos::group::v1::GroupPolicyInfo& info() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::GroupPolicyInfo* release_info();
  ::cosmos::group::v1::GroupPolicyInfo* mutable_info();
  void set_allocated_info(::cosmos::group::v1::GroupPolicyInfo* info);
  private:
  const ::cosmos::group::v1::GroupPolicyInfo& _internal_info() const;
  ::cosmos::group::v1::GroupPolicyInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::cosmos::group::v1::GroupPolicyInfo* info);
  ::cosmos::group::v1::GroupPolicyInfo* unsafe_arena_release_info();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupPolicyInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::group::v1::GroupPolicyInfo* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupMembersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupMembersRequest) */ {
 public:
  inline QueryGroupMembersRequest() : QueryGroupMembersRequest(nullptr) {}
  ~QueryGroupMembersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupMembersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupMembersRequest(const QueryGroupMembersRequest& from);
  QueryGroupMembersRequest(QueryGroupMembersRequest&& from) noexcept
    : QueryGroupMembersRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupMembersRequest& operator=(const QueryGroupMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupMembersRequest& operator=(QueryGroupMembersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupMembersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupMembersRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupMembersRequest*>(
               &_QueryGroupMembersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryGroupMembersRequest& a, QueryGroupMembersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupMembersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupMembersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupMembersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupMembersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupMembersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupMembersRequest& from) {
    QueryGroupMembersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupMembersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupMembersRequest";
  }
  protected:
  explicit QueryGroupMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupMembersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupMembersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupMembersResponse) */ {
 public:
  inline QueryGroupMembersResponse() : QueryGroupMembersResponse(nullptr) {}
  ~QueryGroupMembersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupMembersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupMembersResponse(const QueryGroupMembersResponse& from);
  QueryGroupMembersResponse(QueryGroupMembersResponse&& from) noexcept
    : QueryGroupMembersResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupMembersResponse& operator=(const QueryGroupMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupMembersResponse& operator=(QueryGroupMembersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupMembersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupMembersResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupMembersResponse*>(
               &_QueryGroupMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryGroupMembersResponse& a, QueryGroupMembersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupMembersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupMembersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupMembersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupMembersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupMembersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupMembersResponse& from) {
    QueryGroupMembersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupMembersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupMembersResponse";
  }
  protected:
  explicit QueryGroupMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.GroupMember members = 1 [json_name = "members"];
  int members_size() const;
  private:
  int _internal_members_size() const;

  public:
  void clear_members() ;
  ::cosmos::group::v1::GroupMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember >*
      mutable_members();
  private:
  const ::cosmos::group::v1::GroupMember& _internal_members(int index) const;
  ::cosmos::group::v1::GroupMember* _internal_add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupMember>& _internal_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupMember>* _internal_mutable_members();
  public:
  const ::cosmos::group::v1::GroupMember& members(int index) const;
  ::cosmos::group::v1::GroupMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember >&
      members() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupMembersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember > members_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupsByAdminRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupsByAdminRequest) */ {
 public:
  inline QueryGroupsByAdminRequest() : QueryGroupsByAdminRequest(nullptr) {}
  ~QueryGroupsByAdminRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupsByAdminRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupsByAdminRequest(const QueryGroupsByAdminRequest& from);
  QueryGroupsByAdminRequest(QueryGroupsByAdminRequest&& from) noexcept
    : QueryGroupsByAdminRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupsByAdminRequest& operator=(const QueryGroupsByAdminRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupsByAdminRequest& operator=(QueryGroupsByAdminRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupsByAdminRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupsByAdminRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupsByAdminRequest*>(
               &_QueryGroupsByAdminRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryGroupsByAdminRequest& a, QueryGroupsByAdminRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupsByAdminRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupsByAdminRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupsByAdminRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupsByAdminRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupsByAdminRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupsByAdminRequest& from) {
    QueryGroupsByAdminRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupsByAdminRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupsByAdminRequest";
  }
  protected:
  explicit QueryGroupsByAdminRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupsByAdminRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupsByAdminResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupsByAdminResponse) */ {
 public:
  inline QueryGroupsByAdminResponse() : QueryGroupsByAdminResponse(nullptr) {}
  ~QueryGroupsByAdminResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupsByAdminResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupsByAdminResponse(const QueryGroupsByAdminResponse& from);
  QueryGroupsByAdminResponse(QueryGroupsByAdminResponse&& from) noexcept
    : QueryGroupsByAdminResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupsByAdminResponse& operator=(const QueryGroupsByAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupsByAdminResponse& operator=(QueryGroupsByAdminResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupsByAdminResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupsByAdminResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupsByAdminResponse*>(
               &_QueryGroupsByAdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryGroupsByAdminResponse& a, QueryGroupsByAdminResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupsByAdminResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupsByAdminResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupsByAdminResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupsByAdminResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupsByAdminResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupsByAdminResponse& from) {
    QueryGroupsByAdminResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupsByAdminResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupsByAdminResponse";
  }
  protected:
  explicit QueryGroupsByAdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;

  public:
  void clear_groups() ;
  ::cosmos::group::v1::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >*
      mutable_groups();
  private:
  const ::cosmos::group::v1::GroupInfo& _internal_groups(int index) const;
  ::cosmos::group::v1::GroupInfo* _internal_add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>& _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>* _internal_mutable_groups();
  public:
  const ::cosmos::group::v1::GroupInfo& groups(int index) const;
  ::cosmos::group::v1::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >&
      groups() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupsByAdminResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo > groups_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupPoliciesByGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupPoliciesByGroupRequest) */ {
 public:
  inline QueryGroupPoliciesByGroupRequest() : QueryGroupPoliciesByGroupRequest(nullptr) {}
  ~QueryGroupPoliciesByGroupRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupPoliciesByGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupPoliciesByGroupRequest(const QueryGroupPoliciesByGroupRequest& from);
  QueryGroupPoliciesByGroupRequest(QueryGroupPoliciesByGroupRequest&& from) noexcept
    : QueryGroupPoliciesByGroupRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupPoliciesByGroupRequest& operator=(const QueryGroupPoliciesByGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupPoliciesByGroupRequest& operator=(QueryGroupPoliciesByGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupPoliciesByGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupPoliciesByGroupRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupPoliciesByGroupRequest*>(
               &_QueryGroupPoliciesByGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryGroupPoliciesByGroupRequest& a, QueryGroupPoliciesByGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupPoliciesByGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupPoliciesByGroupRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupPoliciesByGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupPoliciesByGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupPoliciesByGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupPoliciesByGroupRequest& from) {
    QueryGroupPoliciesByGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupPoliciesByGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupPoliciesByGroupRequest";
  }
  protected:
  explicit QueryGroupPoliciesByGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t group_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupPoliciesByGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupPoliciesByGroupResponse) */ {
 public:
  inline QueryGroupPoliciesByGroupResponse() : QueryGroupPoliciesByGroupResponse(nullptr) {}
  ~QueryGroupPoliciesByGroupResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupPoliciesByGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupPoliciesByGroupResponse(const QueryGroupPoliciesByGroupResponse& from);
  QueryGroupPoliciesByGroupResponse(QueryGroupPoliciesByGroupResponse&& from) noexcept
    : QueryGroupPoliciesByGroupResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupPoliciesByGroupResponse& operator=(const QueryGroupPoliciesByGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupPoliciesByGroupResponse& operator=(QueryGroupPoliciesByGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupPoliciesByGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupPoliciesByGroupResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupPoliciesByGroupResponse*>(
               &_QueryGroupPoliciesByGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryGroupPoliciesByGroupResponse& a, QueryGroupPoliciesByGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupPoliciesByGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupPoliciesByGroupResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupPoliciesByGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupPoliciesByGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupPoliciesByGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupPoliciesByGroupResponse& from) {
    QueryGroupPoliciesByGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupPoliciesByGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupPoliciesByGroupResponse";
  }
  protected:
  explicit QueryGroupPoliciesByGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupPoliciesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
  int group_policies_size() const;
  private:
  int _internal_group_policies_size() const;

  public:
  void clear_group_policies() ;
  ::cosmos::group::v1::GroupPolicyInfo* mutable_group_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >*
      mutable_group_policies();
  private:
  const ::cosmos::group::v1::GroupPolicyInfo& _internal_group_policies(int index) const;
  ::cosmos::group::v1::GroupPolicyInfo* _internal_add_group_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>& _internal_group_policies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>* _internal_mutable_group_policies();
  public:
  const ::cosmos::group::v1::GroupPolicyInfo& group_policies(int index) const;
  ::cosmos::group::v1::GroupPolicyInfo* add_group_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >&
      group_policies() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo > group_policies_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupPoliciesByAdminRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupPoliciesByAdminRequest) */ {
 public:
  inline QueryGroupPoliciesByAdminRequest() : QueryGroupPoliciesByAdminRequest(nullptr) {}
  ~QueryGroupPoliciesByAdminRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupPoliciesByAdminRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupPoliciesByAdminRequest(const QueryGroupPoliciesByAdminRequest& from);
  QueryGroupPoliciesByAdminRequest(QueryGroupPoliciesByAdminRequest&& from) noexcept
    : QueryGroupPoliciesByAdminRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupPoliciesByAdminRequest& operator=(const QueryGroupPoliciesByAdminRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupPoliciesByAdminRequest& operator=(QueryGroupPoliciesByAdminRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupPoliciesByAdminRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupPoliciesByAdminRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupPoliciesByAdminRequest*>(
               &_QueryGroupPoliciesByAdminRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryGroupPoliciesByAdminRequest& a, QueryGroupPoliciesByAdminRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupPoliciesByAdminRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupPoliciesByAdminRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupPoliciesByAdminRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupPoliciesByAdminRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupPoliciesByAdminRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupPoliciesByAdminRequest& from) {
    QueryGroupPoliciesByAdminRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupPoliciesByAdminRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupPoliciesByAdminRequest";
  }
  protected:
  explicit QueryGroupPoliciesByAdminRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdminFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_admin() ;
  const std::string& admin() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_admin(Arg_&& arg, Args_... args);
  std::string* mutable_admin();
  PROTOBUF_NODISCARD std::string* release_admin();
  void set_allocated_admin(std::string* ptr);

  private:
  const std::string& _internal_admin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_admin(
      const std::string& value);
  std::string* _internal_mutable_admin();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr admin_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupPoliciesByAdminResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupPoliciesByAdminResponse) */ {
 public:
  inline QueryGroupPoliciesByAdminResponse() : QueryGroupPoliciesByAdminResponse(nullptr) {}
  ~QueryGroupPoliciesByAdminResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupPoliciesByAdminResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupPoliciesByAdminResponse(const QueryGroupPoliciesByAdminResponse& from);
  QueryGroupPoliciesByAdminResponse(QueryGroupPoliciesByAdminResponse&& from) noexcept
    : QueryGroupPoliciesByAdminResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupPoliciesByAdminResponse& operator=(const QueryGroupPoliciesByAdminResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupPoliciesByAdminResponse& operator=(QueryGroupPoliciesByAdminResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupPoliciesByAdminResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupPoliciesByAdminResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupPoliciesByAdminResponse*>(
               &_QueryGroupPoliciesByAdminResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryGroupPoliciesByAdminResponse& a, QueryGroupPoliciesByAdminResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupPoliciesByAdminResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupPoliciesByAdminResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupPoliciesByAdminResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupPoliciesByAdminResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupPoliciesByAdminResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupPoliciesByAdminResponse& from) {
    QueryGroupPoliciesByAdminResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupPoliciesByAdminResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupPoliciesByAdminResponse";
  }
  protected:
  explicit QueryGroupPoliciesByAdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupPoliciesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
  int group_policies_size() const;
  private:
  int _internal_group_policies_size() const;

  public:
  void clear_group_policies() ;
  ::cosmos::group::v1::GroupPolicyInfo* mutable_group_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >*
      mutable_group_policies();
  private:
  const ::cosmos::group::v1::GroupPolicyInfo& _internal_group_policies(int index) const;
  ::cosmos::group::v1::GroupPolicyInfo* _internal_add_group_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>& _internal_group_policies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>* _internal_mutable_group_policies();
  public:
  const ::cosmos::group::v1::GroupPolicyInfo& group_policies(int index) const;
  ::cosmos::group::v1::GroupPolicyInfo* add_group_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >&
      group_policies() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo > group_policies_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProposalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryProposalRequest) */ {
 public:
  inline QueryProposalRequest() : QueryProposalRequest(nullptr) {}
  ~QueryProposalRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProposalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProposalRequest(const QueryProposalRequest& from);
  QueryProposalRequest(QueryProposalRequest&& from) noexcept
    : QueryProposalRequest() {
    *this = ::std::move(from);
  }

  inline QueryProposalRequest& operator=(const QueryProposalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProposalRequest& operator=(QueryProposalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProposalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProposalRequest* internal_default_instance() {
    return reinterpret_cast<const QueryProposalRequest*>(
               &_QueryProposalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryProposalRequest& a, QueryProposalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProposalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProposalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProposalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProposalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProposalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProposalRequest& from) {
    QueryProposalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProposalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryProposalRequest";
  }
  protected:
  explicit QueryProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryProposalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProposalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryProposalResponse) */ {
 public:
  inline QueryProposalResponse() : QueryProposalResponse(nullptr) {}
  ~QueryProposalResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProposalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProposalResponse(const QueryProposalResponse& from);
  QueryProposalResponse(QueryProposalResponse&& from) noexcept
    : QueryProposalResponse() {
    *this = ::std::move(from);
  }

  inline QueryProposalResponse& operator=(const QueryProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProposalResponse& operator=(QueryProposalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProposalResponse* internal_default_instance() {
    return reinterpret_cast<const QueryProposalResponse*>(
               &_QueryProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryProposalResponse& a, QueryProposalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProposalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProposalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProposalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProposalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProposalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProposalResponse& from) {
    QueryProposalResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProposalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryProposalResponse";
  }
  protected:
  explicit QueryProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 1,
  };
  // .cosmos.group.v1.Proposal proposal = 1 [json_name = "proposal"];
  bool has_proposal() const;
  void clear_proposal() ;
  const ::cosmos::group::v1::Proposal& proposal() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::Proposal* release_proposal();
  ::cosmos::group::v1::Proposal* mutable_proposal();
  void set_allocated_proposal(::cosmos::group::v1::Proposal* proposal);
  private:
  const ::cosmos::group::v1::Proposal& _internal_proposal() const;
  ::cosmos::group::v1::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::cosmos::group::v1::Proposal* proposal);
  ::cosmos::group::v1::Proposal* unsafe_arena_release_proposal();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryProposalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::group::v1::Proposal* proposal_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProposalsByGroupPolicyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryProposalsByGroupPolicyRequest) */ {
 public:
  inline QueryProposalsByGroupPolicyRequest() : QueryProposalsByGroupPolicyRequest(nullptr) {}
  ~QueryProposalsByGroupPolicyRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProposalsByGroupPolicyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProposalsByGroupPolicyRequest(const QueryProposalsByGroupPolicyRequest& from);
  QueryProposalsByGroupPolicyRequest(QueryProposalsByGroupPolicyRequest&& from) noexcept
    : QueryProposalsByGroupPolicyRequest() {
    *this = ::std::move(from);
  }

  inline QueryProposalsByGroupPolicyRequest& operator=(const QueryProposalsByGroupPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProposalsByGroupPolicyRequest& operator=(QueryProposalsByGroupPolicyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProposalsByGroupPolicyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProposalsByGroupPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const QueryProposalsByGroupPolicyRequest*>(
               &_QueryProposalsByGroupPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryProposalsByGroupPolicyRequest& a, QueryProposalsByGroupPolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProposalsByGroupPolicyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProposalsByGroupPolicyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProposalsByGroupPolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProposalsByGroupPolicyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProposalsByGroupPolicyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProposalsByGroupPolicyRequest& from) {
    QueryProposalsByGroupPolicyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProposalsByGroupPolicyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryProposalsByGroupPolicyRequest";
  }
  protected:
  explicit QueryProposalsByGroupPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProposalsByGroupPolicyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryProposalsByGroupPolicyResponse) */ {
 public:
  inline QueryProposalsByGroupPolicyResponse() : QueryProposalsByGroupPolicyResponse(nullptr) {}
  ~QueryProposalsByGroupPolicyResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProposalsByGroupPolicyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProposalsByGroupPolicyResponse(const QueryProposalsByGroupPolicyResponse& from);
  QueryProposalsByGroupPolicyResponse(QueryProposalsByGroupPolicyResponse&& from) noexcept
    : QueryProposalsByGroupPolicyResponse() {
    *this = ::std::move(from);
  }

  inline QueryProposalsByGroupPolicyResponse& operator=(const QueryProposalsByGroupPolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProposalsByGroupPolicyResponse& operator=(QueryProposalsByGroupPolicyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProposalsByGroupPolicyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProposalsByGroupPolicyResponse* internal_default_instance() {
    return reinterpret_cast<const QueryProposalsByGroupPolicyResponse*>(
               &_QueryProposalsByGroupPolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryProposalsByGroupPolicyResponse& a, QueryProposalsByGroupPolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProposalsByGroupPolicyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProposalsByGroupPolicyResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProposalsByGroupPolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProposalsByGroupPolicyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProposalsByGroupPolicyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProposalsByGroupPolicyResponse& from) {
    QueryProposalsByGroupPolicyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProposalsByGroupPolicyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryProposalsByGroupPolicyResponse";
  }
  protected:
  explicit QueryProposalsByGroupPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.Proposal proposals = 1 [json_name = "proposals"];
  int proposals_size() const;
  private:
  int _internal_proposals_size() const;

  public:
  void clear_proposals() ;
  ::cosmos::group::v1::Proposal* mutable_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal >*
      mutable_proposals();
  private:
  const ::cosmos::group::v1::Proposal& _internal_proposals(int index) const;
  ::cosmos::group::v1::Proposal* _internal_add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Proposal>& _internal_proposals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Proposal>* _internal_mutable_proposals();
  public:
  const ::cosmos::group::v1::Proposal& proposals(int index) const;
  ::cosmos::group::v1::Proposal* add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal >&
      proposals() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal > proposals_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVoteByProposalVoterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryVoteByProposalVoterRequest) */ {
 public:
  inline QueryVoteByProposalVoterRequest() : QueryVoteByProposalVoterRequest(nullptr) {}
  ~QueryVoteByProposalVoterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVoteByProposalVoterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVoteByProposalVoterRequest(const QueryVoteByProposalVoterRequest& from);
  QueryVoteByProposalVoterRequest(QueryVoteByProposalVoterRequest&& from) noexcept
    : QueryVoteByProposalVoterRequest() {
    *this = ::std::move(from);
  }

  inline QueryVoteByProposalVoterRequest& operator=(const QueryVoteByProposalVoterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVoteByProposalVoterRequest& operator=(QueryVoteByProposalVoterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVoteByProposalVoterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVoteByProposalVoterRequest* internal_default_instance() {
    return reinterpret_cast<const QueryVoteByProposalVoterRequest*>(
               &_QueryVoteByProposalVoterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryVoteByProposalVoterRequest& a, QueryVoteByProposalVoterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVoteByProposalVoterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVoteByProposalVoterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVoteByProposalVoterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVoteByProposalVoterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVoteByProposalVoterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVoteByProposalVoterRequest& from) {
    QueryVoteByProposalVoterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVoteByProposalVoterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryVoteByProposalVoterRequest";
  }
  protected:
  explicit QueryVoteByProposalVoterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* ptr);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryVoteByProposalVoterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_;
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVoteByProposalVoterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryVoteByProposalVoterResponse) */ {
 public:
  inline QueryVoteByProposalVoterResponse() : QueryVoteByProposalVoterResponse(nullptr) {}
  ~QueryVoteByProposalVoterResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVoteByProposalVoterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVoteByProposalVoterResponse(const QueryVoteByProposalVoterResponse& from);
  QueryVoteByProposalVoterResponse(QueryVoteByProposalVoterResponse&& from) noexcept
    : QueryVoteByProposalVoterResponse() {
    *this = ::std::move(from);
  }

  inline QueryVoteByProposalVoterResponse& operator=(const QueryVoteByProposalVoterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVoteByProposalVoterResponse& operator=(QueryVoteByProposalVoterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVoteByProposalVoterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVoteByProposalVoterResponse* internal_default_instance() {
    return reinterpret_cast<const QueryVoteByProposalVoterResponse*>(
               &_QueryVoteByProposalVoterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryVoteByProposalVoterResponse& a, QueryVoteByProposalVoterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVoteByProposalVoterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVoteByProposalVoterResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVoteByProposalVoterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVoteByProposalVoterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVoteByProposalVoterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVoteByProposalVoterResponse& from) {
    QueryVoteByProposalVoterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVoteByProposalVoterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryVoteByProposalVoterResponse";
  }
  protected:
  explicit QueryVoteByProposalVoterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteFieldNumber = 1,
  };
  // .cosmos.group.v1.Vote vote = 1 [json_name = "vote"];
  bool has_vote() const;
  void clear_vote() ;
  const ::cosmos::group::v1::Vote& vote() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::Vote* release_vote();
  ::cosmos::group::v1::Vote* mutable_vote();
  void set_allocated_vote(::cosmos::group::v1::Vote* vote);
  private:
  const ::cosmos::group::v1::Vote& _internal_vote() const;
  ::cosmos::group::v1::Vote* _internal_mutable_vote();
  public:
  void unsafe_arena_set_allocated_vote(
      ::cosmos::group::v1::Vote* vote);
  ::cosmos::group::v1::Vote* unsafe_arena_release_vote();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryVoteByProposalVoterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::group::v1::Vote* vote_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVotesByProposalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryVotesByProposalRequest) */ {
 public:
  inline QueryVotesByProposalRequest() : QueryVotesByProposalRequest(nullptr) {}
  ~QueryVotesByProposalRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVotesByProposalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVotesByProposalRequest(const QueryVotesByProposalRequest& from);
  QueryVotesByProposalRequest(QueryVotesByProposalRequest&& from) noexcept
    : QueryVotesByProposalRequest() {
    *this = ::std::move(from);
  }

  inline QueryVotesByProposalRequest& operator=(const QueryVotesByProposalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVotesByProposalRequest& operator=(QueryVotesByProposalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVotesByProposalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVotesByProposalRequest* internal_default_instance() {
    return reinterpret_cast<const QueryVotesByProposalRequest*>(
               &_QueryVotesByProposalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryVotesByProposalRequest& a, QueryVotesByProposalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVotesByProposalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVotesByProposalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVotesByProposalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVotesByProposalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVotesByProposalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVotesByProposalRequest& from) {
    QueryVotesByProposalRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVotesByProposalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryVotesByProposalRequest";
  }
  protected:
  explicit QueryVotesByProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryVotesByProposalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t proposal_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVotesByProposalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryVotesByProposalResponse) */ {
 public:
  inline QueryVotesByProposalResponse() : QueryVotesByProposalResponse(nullptr) {}
  ~QueryVotesByProposalResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVotesByProposalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVotesByProposalResponse(const QueryVotesByProposalResponse& from);
  QueryVotesByProposalResponse(QueryVotesByProposalResponse&& from) noexcept
    : QueryVotesByProposalResponse() {
    *this = ::std::move(from);
  }

  inline QueryVotesByProposalResponse& operator=(const QueryVotesByProposalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVotesByProposalResponse& operator=(QueryVotesByProposalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVotesByProposalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVotesByProposalResponse* internal_default_instance() {
    return reinterpret_cast<const QueryVotesByProposalResponse*>(
               &_QueryVotesByProposalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryVotesByProposalResponse& a, QueryVotesByProposalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVotesByProposalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVotesByProposalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVotesByProposalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVotesByProposalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVotesByProposalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVotesByProposalResponse& from) {
    QueryVotesByProposalResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVotesByProposalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryVotesByProposalResponse";
  }
  protected:
  explicit QueryVotesByProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;

  public:
  void clear_votes() ;
  ::cosmos::group::v1::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >*
      mutable_votes();
  private:
  const ::cosmos::group::v1::Vote& _internal_votes(int index) const;
  ::cosmos::group::v1::Vote* _internal_add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>& _internal_votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>* _internal_mutable_votes();
  public:
  const ::cosmos::group::v1::Vote& votes(int index) const;
  ::cosmos::group::v1::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >&
      votes() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryVotesByProposalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote > votes_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVotesByVoterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryVotesByVoterRequest) */ {
 public:
  inline QueryVotesByVoterRequest() : QueryVotesByVoterRequest(nullptr) {}
  ~QueryVotesByVoterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVotesByVoterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVotesByVoterRequest(const QueryVotesByVoterRequest& from);
  QueryVotesByVoterRequest(QueryVotesByVoterRequest&& from) noexcept
    : QueryVotesByVoterRequest() {
    *this = ::std::move(from);
  }

  inline QueryVotesByVoterRequest& operator=(const QueryVotesByVoterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVotesByVoterRequest& operator=(QueryVotesByVoterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVotesByVoterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVotesByVoterRequest* internal_default_instance() {
    return reinterpret_cast<const QueryVotesByVoterRequest*>(
               &_QueryVotesByVoterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(QueryVotesByVoterRequest& a, QueryVotesByVoterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVotesByVoterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVotesByVoterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVotesByVoterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVotesByVoterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVotesByVoterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVotesByVoterRequest& from) {
    QueryVotesByVoterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVotesByVoterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryVotesByVoterRequest";
  }
  protected:
  explicit QueryVotesByVoterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string voter = 1 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* ptr);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryVotesByVoterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryVotesByVoterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryVotesByVoterResponse) */ {
 public:
  inline QueryVotesByVoterResponse() : QueryVotesByVoterResponse(nullptr) {}
  ~QueryVotesByVoterResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryVotesByVoterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryVotesByVoterResponse(const QueryVotesByVoterResponse& from);
  QueryVotesByVoterResponse(QueryVotesByVoterResponse&& from) noexcept
    : QueryVotesByVoterResponse() {
    *this = ::std::move(from);
  }

  inline QueryVotesByVoterResponse& operator=(const QueryVotesByVoterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryVotesByVoterResponse& operator=(QueryVotesByVoterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryVotesByVoterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryVotesByVoterResponse* internal_default_instance() {
    return reinterpret_cast<const QueryVotesByVoterResponse*>(
               &_QueryVotesByVoterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QueryVotesByVoterResponse& a, QueryVotesByVoterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryVotesByVoterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryVotesByVoterResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryVotesByVoterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryVotesByVoterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryVotesByVoterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryVotesByVoterResponse& from) {
    QueryVotesByVoterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryVotesByVoterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryVotesByVoterResponse";
  }
  protected:
  explicit QueryVotesByVoterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;

  public:
  void clear_votes() ;
  ::cosmos::group::v1::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >*
      mutable_votes();
  private:
  const ::cosmos::group::v1::Vote& _internal_votes(int index) const;
  ::cosmos::group::v1::Vote* _internal_add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>& _internal_votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>* _internal_mutable_votes();
  public:
  const ::cosmos::group::v1::Vote& votes(int index) const;
  ::cosmos::group::v1::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >&
      votes() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryVotesByVoterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote > votes_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupsByMemberRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupsByMemberRequest) */ {
 public:
  inline QueryGroupsByMemberRequest() : QueryGroupsByMemberRequest(nullptr) {}
  ~QueryGroupsByMemberRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupsByMemberRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupsByMemberRequest(const QueryGroupsByMemberRequest& from);
  QueryGroupsByMemberRequest(QueryGroupsByMemberRequest&& from) noexcept
    : QueryGroupsByMemberRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupsByMemberRequest& operator=(const QueryGroupsByMemberRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupsByMemberRequest& operator=(QueryGroupsByMemberRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupsByMemberRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupsByMemberRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupsByMemberRequest*>(
               &_QueryGroupsByMemberRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QueryGroupsByMemberRequest& a, QueryGroupsByMemberRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupsByMemberRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupsByMemberRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupsByMemberRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupsByMemberRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupsByMemberRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupsByMemberRequest& from) {
    QueryGroupsByMemberRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupsByMemberRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupsByMemberRequest";
  }
  protected:
  explicit QueryGroupsByMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupsByMemberRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryGroupsByMemberResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryGroupsByMemberResponse) */ {
 public:
  inline QueryGroupsByMemberResponse() : QueryGroupsByMemberResponse(nullptr) {}
  ~QueryGroupsByMemberResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGroupsByMemberResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupsByMemberResponse(const QueryGroupsByMemberResponse& from);
  QueryGroupsByMemberResponse(QueryGroupsByMemberResponse&& from) noexcept
    : QueryGroupsByMemberResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupsByMemberResponse& operator=(const QueryGroupsByMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupsByMemberResponse& operator=(QueryGroupsByMemberResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupsByMemberResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupsByMemberResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupsByMemberResponse*>(
               &_QueryGroupsByMemberResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QueryGroupsByMemberResponse& a, QueryGroupsByMemberResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupsByMemberResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupsByMemberResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupsByMemberResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupsByMemberResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupsByMemberResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupsByMemberResponse& from) {
    QueryGroupsByMemberResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupsByMemberResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryGroupsByMemberResponse";
  }
  protected:
  explicit QueryGroupsByMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;

  public:
  void clear_groups() ;
  ::cosmos::group::v1::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >*
      mutable_groups();
  private:
  const ::cosmos::group::v1::GroupInfo& _internal_groups(int index) const;
  ::cosmos::group::v1::GroupInfo* _internal_add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>& _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>* _internal_mutable_groups();
  public:
  const ::cosmos::group::v1::GroupInfo& groups(int index) const;
  ::cosmos::group::v1::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >&
      groups() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryGroupsByMemberResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo > groups_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTallyResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryTallyResultRequest) */ {
 public:
  inline QueryTallyResultRequest() : QueryTallyResultRequest(nullptr) {}
  ~QueryTallyResultRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTallyResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTallyResultRequest(const QueryTallyResultRequest& from);
  QueryTallyResultRequest(QueryTallyResultRequest&& from) noexcept
    : QueryTallyResultRequest() {
    *this = ::std::move(from);
  }

  inline QueryTallyResultRequest& operator=(const QueryTallyResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTallyResultRequest& operator=(QueryTallyResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTallyResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTallyResultRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTallyResultRequest*>(
               &_QueryTallyResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(QueryTallyResultRequest& a, QueryTallyResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTallyResultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTallyResultRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTallyResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTallyResultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTallyResultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTallyResultRequest& from) {
    QueryTallyResultRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTallyResultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryTallyResultRequest";
  }
  protected:
  explicit QueryTallyResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryTallyResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTallyResultResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.QueryTallyResultResponse) */ {
 public:
  inline QueryTallyResultResponse() : QueryTallyResultResponse(nullptr) {}
  ~QueryTallyResultResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTallyResultResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTallyResultResponse(const QueryTallyResultResponse& from);
  QueryTallyResultResponse(QueryTallyResultResponse&& from) noexcept
    : QueryTallyResultResponse() {
    *this = ::std::move(from);
  }

  inline QueryTallyResultResponse& operator=(const QueryTallyResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTallyResultResponse& operator=(QueryTallyResultResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTallyResultResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTallyResultResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTallyResultResponse*>(
               &_QueryTallyResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(QueryTallyResultResponse& a, QueryTallyResultResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTallyResultResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTallyResultResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTallyResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTallyResultResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTallyResultResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTallyResultResponse& from) {
    QueryTallyResultResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTallyResultResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.QueryTallyResultResponse";
  }
  protected:
  explicit QueryTallyResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTallyFieldNumber = 1,
  };
  // .cosmos.group.v1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_tally() const;
  void clear_tally() ;
  const ::cosmos::group::v1::TallyResult& tally() const;
  PROTOBUF_NODISCARD ::cosmos::group::v1::TallyResult* release_tally();
  ::cosmos::group::v1::TallyResult* mutable_tally();
  void set_allocated_tally(::cosmos::group::v1::TallyResult* tally);
  private:
  const ::cosmos::group::v1::TallyResult& _internal_tally() const;
  ::cosmos::group::v1::TallyResult* _internal_mutable_tally();
  public:
  void unsafe_arena_set_allocated_tally(
      ::cosmos::group::v1::TallyResult* tally);
  ::cosmos::group::v1::TallyResult* unsafe_arena_release_tally();
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.QueryTallyResultResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::group::v1::TallyResult* tally_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryGroupInfoRequest

// uint64 group_id = 1 [json_name = "groupId"];
inline void QueryGroupInfoRequest::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryGroupInfoRequest::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupInfoRequest.group_id)
  return _internal_group_id();
}
inline void QueryGroupInfoRequest::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryGroupInfoRequest.group_id)
}
inline ::uint64_t QueryGroupInfoRequest::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void QueryGroupInfoRequest::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// QueryGroupInfoResponse

// .cosmos.group.v1.GroupInfo info = 1 [json_name = "info"];
inline bool QueryGroupInfoResponse::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::cosmos::group::v1::GroupInfo& QueryGroupInfoResponse::_internal_info() const {
  const ::cosmos::group::v1::GroupInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::GroupInfo&>(
      ::cosmos::group::v1::_GroupInfo_default_instance_);
}
inline const ::cosmos::group::v1::GroupInfo& QueryGroupInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupInfoResponse.info)
  return _internal_info();
}
inline void QueryGroupInfoResponse::unsafe_arena_set_allocated_info(
    ::cosmos::group::v1::GroupInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupInfoResponse.info)
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupInfoResponse::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::GroupInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupInfoResponse.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::GroupInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupInfoResponse::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::group::v1::GroupInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupInfoResponse::mutable_info() {
  ::cosmos::group::v1::GroupInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupInfoResponse.info)
  return _msg;
}
inline void QueryGroupInfoResponse::set_allocated_info(::cosmos::group::v1::GroupInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupInfoResponse.info)
}

// -------------------------------------------------------------------

// QueryGroupPolicyInfoRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryGroupPolicyInfoRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryGroupPolicyInfoRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPolicyInfoRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGroupPolicyInfoRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryGroupPolicyInfoRequest.address)
}
inline std::string* QueryGroupPolicyInfoRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPolicyInfoRequest.address)
  return _s;
}
inline const std::string& QueryGroupPolicyInfoRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryGroupPolicyInfoRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGroupPolicyInfoRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGroupPolicyInfoRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupPolicyInfoRequest.address)
  return _impl_.address_.Release();
}
inline void QueryGroupPolicyInfoRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupPolicyInfoRequest.address)
}

// -------------------------------------------------------------------

// QueryGroupPolicyInfoResponse

// .cosmos.group.v1.GroupPolicyInfo info = 1 [json_name = "info"];
inline bool QueryGroupPolicyInfoResponse::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::cosmos::group::v1::GroupPolicyInfo& QueryGroupPolicyInfoResponse::_internal_info() const {
  const ::cosmos::group::v1::GroupPolicyInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::GroupPolicyInfo&>(
      ::cosmos::group::v1::_GroupPolicyInfo_default_instance_);
}
inline const ::cosmos::group::v1::GroupPolicyInfo& QueryGroupPolicyInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPolicyInfoResponse.info)
  return _internal_info();
}
inline void QueryGroupPolicyInfoResponse::unsafe_arena_set_allocated_info(
    ::cosmos::group::v1::GroupPolicyInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupPolicyInfoResponse.info)
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPolicyInfoResponse::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::GroupPolicyInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPolicyInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupPolicyInfoResponse.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::GroupPolicyInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPolicyInfoResponse::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::group::v1::GroupPolicyInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPolicyInfoResponse::mutable_info() {
  ::cosmos::group::v1::GroupPolicyInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPolicyInfoResponse.info)
  return _msg;
}
inline void QueryGroupPolicyInfoResponse::set_allocated_info(::cosmos::group::v1::GroupPolicyInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupPolicyInfoResponse.info)
}

// -------------------------------------------------------------------

// QueryGroupMembersRequest

// uint64 group_id = 1 [json_name = "groupId"];
inline void QueryGroupMembersRequest::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryGroupMembersRequest::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupMembersRequest.group_id)
  return _internal_group_id();
}
inline void QueryGroupMembersRequest::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryGroupMembersRequest.group_id)
}
inline ::uint64_t QueryGroupMembersRequest::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void QueryGroupMembersRequest::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryGroupMembersRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupMembersRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupMembersRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupMembersRequest.pagination)
  return _internal_pagination();
}
inline void QueryGroupMembersRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupMembersRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupMembersRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupMembersRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupMembersRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupMembersRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupMembersRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupMembersRequest.pagination)
  return _msg;
}
inline void QueryGroupMembersRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupMembersRequest.pagination)
}

// -------------------------------------------------------------------

// QueryGroupMembersResponse

// repeated .cosmos.group.v1.GroupMember members = 1 [json_name = "members"];
inline int QueryGroupMembersResponse::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int QueryGroupMembersResponse::members_size() const {
  return _internal_members_size();
}
inline ::cosmos::group::v1::GroupMember* QueryGroupMembersResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupMembersResponse.members)
  return _internal_mutable_members()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember >*
QueryGroupMembersResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.QueryGroupMembersResponse.members)
  return _internal_mutable_members();
}
inline const ::cosmos::group::v1::GroupMember& QueryGroupMembersResponse::_internal_members(int index) const {
  return _internal_members().Get(index);
}
inline const ::cosmos::group::v1::GroupMember& QueryGroupMembersResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupMembersResponse.members)
  return _internal_members(index);
}
inline ::cosmos::group::v1::GroupMember* QueryGroupMembersResponse::_internal_add_members() {
  return _internal_mutable_members()->Add();
}
inline ::cosmos::group::v1::GroupMember* QueryGroupMembersResponse::add_members() {
  ::cosmos::group::v1::GroupMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.QueryGroupMembersResponse.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember >&
QueryGroupMembersResponse::members() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.QueryGroupMembersResponse.members)
  return _internal_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupMember>&
QueryGroupMembersResponse::_internal_members() const {
  return _impl_.members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupMember>*
QueryGroupMembersResponse::_internal_mutable_members() {
  return &_impl_.members_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryGroupMembersResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupMembersResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupMembersResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupMembersResponse.pagination)
  return _internal_pagination();
}
inline void QueryGroupMembersResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupMembersResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupMembersResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupMembersResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupMembersResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupMembersResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupMembersResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupMembersResponse.pagination)
  return _msg;
}
inline void QueryGroupMembersResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupMembersResponse.pagination)
}

// -------------------------------------------------------------------

// QueryGroupsByAdminRequest

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryGroupsByAdminRequest::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& QueryGroupsByAdminRequest::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupsByAdminRequest.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGroupsByAdminRequest::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryGroupsByAdminRequest.admin)
}
inline std::string* QueryGroupsByAdminRequest::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupsByAdminRequest.admin)
  return _s;
}
inline const std::string& QueryGroupsByAdminRequest::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void QueryGroupsByAdminRequest::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGroupsByAdminRequest::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGroupsByAdminRequest::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupsByAdminRequest.admin)
  return _impl_.admin_.Release();
}
inline void QueryGroupsByAdminRequest::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupsByAdminRequest.admin)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryGroupsByAdminRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupsByAdminRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupsByAdminRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupsByAdminRequest.pagination)
  return _internal_pagination();
}
inline void QueryGroupsByAdminRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupsByAdminRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupsByAdminRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupsByAdminRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupsByAdminRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupsByAdminRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupsByAdminRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupsByAdminRequest.pagination)
  return _msg;
}
inline void QueryGroupsByAdminRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupsByAdminRequest.pagination)
}

// -------------------------------------------------------------------

// QueryGroupsByAdminResponse

// repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
inline int QueryGroupsByAdminResponse::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int QueryGroupsByAdminResponse::groups_size() const {
  return _internal_groups_size();
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupsByAdminResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupsByAdminResponse.groups)
  return _internal_mutable_groups()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >*
QueryGroupsByAdminResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.QueryGroupsByAdminResponse.groups)
  return _internal_mutable_groups();
}
inline const ::cosmos::group::v1::GroupInfo& QueryGroupsByAdminResponse::_internal_groups(int index) const {
  return _internal_groups().Get(index);
}
inline const ::cosmos::group::v1::GroupInfo& QueryGroupsByAdminResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupsByAdminResponse.groups)
  return _internal_groups(index);
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupsByAdminResponse::_internal_add_groups() {
  return _internal_mutable_groups()->Add();
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupsByAdminResponse::add_groups() {
  ::cosmos::group::v1::GroupInfo* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.QueryGroupsByAdminResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >&
QueryGroupsByAdminResponse::groups() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.QueryGroupsByAdminResponse.groups)
  return _internal_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>&
QueryGroupsByAdminResponse::_internal_groups() const {
  return _impl_.groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>*
QueryGroupsByAdminResponse::_internal_mutable_groups() {
  return &_impl_.groups_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryGroupsByAdminResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupsByAdminResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupsByAdminResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupsByAdminResponse.pagination)
  return _internal_pagination();
}
inline void QueryGroupsByAdminResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupsByAdminResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupsByAdminResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupsByAdminResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupsByAdminResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupsByAdminResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupsByAdminResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupsByAdminResponse.pagination)
  return _msg;
}
inline void QueryGroupsByAdminResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupsByAdminResponse.pagination)
}

// -------------------------------------------------------------------

// QueryGroupPoliciesByGroupRequest

// uint64 group_id = 1 [json_name = "groupId"];
inline void QueryGroupPoliciesByGroupRequest::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryGroupPoliciesByGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPoliciesByGroupRequest.group_id)
  return _internal_group_id();
}
inline void QueryGroupPoliciesByGroupRequest::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryGroupPoliciesByGroupRequest.group_id)
}
inline ::uint64_t QueryGroupPoliciesByGroupRequest::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void QueryGroupPoliciesByGroupRequest::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryGroupPoliciesByGroupRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupPoliciesByGroupRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupPoliciesByGroupRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPoliciesByGroupRequest.pagination)
  return _internal_pagination();
}
inline void QueryGroupPoliciesByGroupRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupPoliciesByGroupRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupPoliciesByGroupRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupPoliciesByGroupRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupPoliciesByGroupRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupPoliciesByGroupRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupPoliciesByGroupRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPoliciesByGroupRequest.pagination)
  return _msg;
}
inline void QueryGroupPoliciesByGroupRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupPoliciesByGroupRequest.pagination)
}

// -------------------------------------------------------------------

// QueryGroupPoliciesByGroupResponse

// repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
inline int QueryGroupPoliciesByGroupResponse::_internal_group_policies_size() const {
  return _impl_.group_policies_.size();
}
inline int QueryGroupPoliciesByGroupResponse::group_policies_size() const {
  return _internal_group_policies_size();
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPoliciesByGroupResponse::mutable_group_policies(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.group_policies)
  return _internal_mutable_group_policies()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >*
QueryGroupPoliciesByGroupResponse::mutable_group_policies() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.group_policies)
  return _internal_mutable_group_policies();
}
inline const ::cosmos::group::v1::GroupPolicyInfo& QueryGroupPoliciesByGroupResponse::_internal_group_policies(int index) const {
  return _internal_group_policies().Get(index);
}
inline const ::cosmos::group::v1::GroupPolicyInfo& QueryGroupPoliciesByGroupResponse::group_policies(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.group_policies)
  return _internal_group_policies(index);
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPoliciesByGroupResponse::_internal_add_group_policies() {
  return _internal_mutable_group_policies()->Add();
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPoliciesByGroupResponse::add_group_policies() {
  ::cosmos::group::v1::GroupPolicyInfo* _add = _internal_add_group_policies();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.group_policies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >&
QueryGroupPoliciesByGroupResponse::group_policies() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.group_policies)
  return _internal_group_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>&
QueryGroupPoliciesByGroupResponse::_internal_group_policies() const {
  return _impl_.group_policies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>*
QueryGroupPoliciesByGroupResponse::_internal_mutable_group_policies() {
  return &_impl_.group_policies_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryGroupPoliciesByGroupResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupPoliciesByGroupResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupPoliciesByGroupResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.pagination)
  return _internal_pagination();
}
inline void QueryGroupPoliciesByGroupResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupPoliciesByGroupResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupPoliciesByGroupResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupPoliciesByGroupResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupPoliciesByGroupResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.pagination)
  return _msg;
}
inline void QueryGroupPoliciesByGroupResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupPoliciesByGroupResponse.pagination)
}

// -------------------------------------------------------------------

// QueryGroupPoliciesByAdminRequest

// string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryGroupPoliciesByAdminRequest::clear_admin() {
  _impl_.admin_.ClearToEmpty();
}
inline const std::string& QueryGroupPoliciesByAdminRequest::admin() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.admin)
  return _internal_admin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGroupPoliciesByAdminRequest::set_admin(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.admin_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.admin)
}
inline std::string* QueryGroupPoliciesByAdminRequest::mutable_admin() {
  std::string* _s = _internal_mutable_admin();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.admin)
  return _s;
}
inline const std::string& QueryGroupPoliciesByAdminRequest::_internal_admin() const {
  return _impl_.admin_.Get();
}
inline void QueryGroupPoliciesByAdminRequest::_internal_set_admin(const std::string& value) {
  ;


  _impl_.admin_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGroupPoliciesByAdminRequest::_internal_mutable_admin() {
  ;
  return _impl_.admin_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGroupPoliciesByAdminRequest::release_admin() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.admin)
  return _impl_.admin_.Release();
}
inline void QueryGroupPoliciesByAdminRequest::set_allocated_admin(std::string* value) {
  _impl_.admin_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.admin_.IsDefault()) {
          _impl_.admin_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.admin)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryGroupPoliciesByAdminRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupPoliciesByAdminRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupPoliciesByAdminRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.pagination)
  return _internal_pagination();
}
inline void QueryGroupPoliciesByAdminRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupPoliciesByAdminRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupPoliciesByAdminRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupPoliciesByAdminRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupPoliciesByAdminRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.pagination)
  return _msg;
}
inline void QueryGroupPoliciesByAdminRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupPoliciesByAdminRequest.pagination)
}

// -------------------------------------------------------------------

// QueryGroupPoliciesByAdminResponse

// repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
inline int QueryGroupPoliciesByAdminResponse::_internal_group_policies_size() const {
  return _impl_.group_policies_.size();
}
inline int QueryGroupPoliciesByAdminResponse::group_policies_size() const {
  return _internal_group_policies_size();
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPoliciesByAdminResponse::mutable_group_policies(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.group_policies)
  return _internal_mutable_group_policies()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >*
QueryGroupPoliciesByAdminResponse::mutable_group_policies() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.group_policies)
  return _internal_mutable_group_policies();
}
inline const ::cosmos::group::v1::GroupPolicyInfo& QueryGroupPoliciesByAdminResponse::_internal_group_policies(int index) const {
  return _internal_group_policies().Get(index);
}
inline const ::cosmos::group::v1::GroupPolicyInfo& QueryGroupPoliciesByAdminResponse::group_policies(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.group_policies)
  return _internal_group_policies(index);
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPoliciesByAdminResponse::_internal_add_group_policies() {
  return _internal_mutable_group_policies()->Add();
}
inline ::cosmos::group::v1::GroupPolicyInfo* QueryGroupPoliciesByAdminResponse::add_group_policies() {
  ::cosmos::group::v1::GroupPolicyInfo* _add = _internal_add_group_policies();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.group_policies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >&
QueryGroupPoliciesByAdminResponse::group_policies() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.group_policies)
  return _internal_group_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>&
QueryGroupPoliciesByAdminResponse::_internal_group_policies() const {
  return _impl_.group_policies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>*
QueryGroupPoliciesByAdminResponse::_internal_mutable_group_policies() {
  return &_impl_.group_policies_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryGroupPoliciesByAdminResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupPoliciesByAdminResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupPoliciesByAdminResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.pagination)
  return _internal_pagination();
}
inline void QueryGroupPoliciesByAdminResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupPoliciesByAdminResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupPoliciesByAdminResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupPoliciesByAdminResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupPoliciesByAdminResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.pagination)
  return _msg;
}
inline void QueryGroupPoliciesByAdminResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupPoliciesByAdminResponse.pagination)
}

// -------------------------------------------------------------------

// QueryProposalRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryProposalRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryProposalRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryProposalRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryProposalRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryProposalRequest.proposal_id)
}
inline ::uint64_t QueryProposalRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryProposalRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// QueryProposalResponse

// .cosmos.group.v1.Proposal proposal = 1 [json_name = "proposal"];
inline bool QueryProposalResponse::has_proposal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposal_ != nullptr);
  return value;
}
inline const ::cosmos::group::v1::Proposal& QueryProposalResponse::_internal_proposal() const {
  const ::cosmos::group::v1::Proposal* p = _impl_.proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::Proposal&>(
      ::cosmos::group::v1::_Proposal_default_instance_);
}
inline const ::cosmos::group::v1::Proposal& QueryProposalResponse::proposal() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryProposalResponse.proposal)
  return _internal_proposal();
}
inline void QueryProposalResponse::unsafe_arena_set_allocated_proposal(
    ::cosmos::group::v1::Proposal* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposal_);
  }
  _impl_.proposal_ = proposal;
  if (proposal) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryProposalResponse.proposal)
}
inline ::cosmos::group::v1::Proposal* QueryProposalResponse::release_proposal() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::Proposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::group::v1::Proposal* QueryProposalResponse::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryProposalResponse.proposal)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::Proposal* temp = _impl_.proposal_;
  _impl_.proposal_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::Proposal* QueryProposalResponse::_internal_mutable_proposal() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::group::v1::Proposal>(GetArenaForAllocation());
    _impl_.proposal_ = p;
  }
  return _impl_.proposal_;
}
inline ::cosmos::group::v1::Proposal* QueryProposalResponse::mutable_proposal() {
  ::cosmos::group::v1::Proposal* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryProposalResponse.proposal)
  return _msg;
}
inline void QueryProposalResponse::set_allocated_proposal(::cosmos::group::v1::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposal_);
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal));
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryProposalResponse.proposal)
}

// -------------------------------------------------------------------

// QueryProposalsByGroupPolicyRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryProposalsByGroupPolicyRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryProposalsByGroupPolicyRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryProposalsByGroupPolicyRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.address)
}
inline std::string* QueryProposalsByGroupPolicyRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.address)
  return _s;
}
inline const std::string& QueryProposalsByGroupPolicyRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryProposalsByGroupPolicyRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryProposalsByGroupPolicyRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryProposalsByGroupPolicyRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.address)
  return _impl_.address_.Release();
}
inline void QueryProposalsByGroupPolicyRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.address)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryProposalsByGroupPolicyRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryProposalsByGroupPolicyRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryProposalsByGroupPolicyRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.pagination)
  return _internal_pagination();
}
inline void QueryProposalsByGroupPolicyRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryProposalsByGroupPolicyRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryProposalsByGroupPolicyRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryProposalsByGroupPolicyRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryProposalsByGroupPolicyRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.pagination)
  return _msg;
}
inline void QueryProposalsByGroupPolicyRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryProposalsByGroupPolicyRequest.pagination)
}

// -------------------------------------------------------------------

// QueryProposalsByGroupPolicyResponse

// repeated .cosmos.group.v1.Proposal proposals = 1 [json_name = "proposals"];
inline int QueryProposalsByGroupPolicyResponse::_internal_proposals_size() const {
  return _impl_.proposals_.size();
}
inline int QueryProposalsByGroupPolicyResponse::proposals_size() const {
  return _internal_proposals_size();
}
inline ::cosmos::group::v1::Proposal* QueryProposalsByGroupPolicyResponse::mutable_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.proposals)
  return _internal_mutable_proposals()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal >*
QueryProposalsByGroupPolicyResponse::mutable_proposals() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.proposals)
  return _internal_mutable_proposals();
}
inline const ::cosmos::group::v1::Proposal& QueryProposalsByGroupPolicyResponse::_internal_proposals(int index) const {
  return _internal_proposals().Get(index);
}
inline const ::cosmos::group::v1::Proposal& QueryProposalsByGroupPolicyResponse::proposals(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.proposals)
  return _internal_proposals(index);
}
inline ::cosmos::group::v1::Proposal* QueryProposalsByGroupPolicyResponse::_internal_add_proposals() {
  return _internal_mutable_proposals()->Add();
}
inline ::cosmos::group::v1::Proposal* QueryProposalsByGroupPolicyResponse::add_proposals() {
  ::cosmos::group::v1::Proposal* _add = _internal_add_proposals();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.proposals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal >&
QueryProposalsByGroupPolicyResponse::proposals() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.proposals)
  return _internal_proposals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Proposal>&
QueryProposalsByGroupPolicyResponse::_internal_proposals() const {
  return _impl_.proposals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Proposal>*
QueryProposalsByGroupPolicyResponse::_internal_mutable_proposals() {
  return &_impl_.proposals_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryProposalsByGroupPolicyResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryProposalsByGroupPolicyResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryProposalsByGroupPolicyResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.pagination)
  return _internal_pagination();
}
inline void QueryProposalsByGroupPolicyResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryProposalsByGroupPolicyResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryProposalsByGroupPolicyResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryProposalsByGroupPolicyResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryProposalsByGroupPolicyResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.pagination)
  return _msg;
}
inline void QueryProposalsByGroupPolicyResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryProposalsByGroupPolicyResponse.pagination)
}

// -------------------------------------------------------------------

// QueryVoteByProposalVoterRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryVoteByProposalVoterRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryVoteByProposalVoterRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVoteByProposalVoterRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryVoteByProposalVoterRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryVoteByProposalVoterRequest.proposal_id)
}
inline ::uint64_t QueryVoteByProposalVoterRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryVoteByProposalVoterRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryVoteByProposalVoterRequest::clear_voter() {
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& QueryVoteByProposalVoterRequest::voter() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVoteByProposalVoterRequest.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryVoteByProposalVoterRequest::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryVoteByProposalVoterRequest.voter)
}
inline std::string* QueryVoteByProposalVoterRequest::mutable_voter() {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVoteByProposalVoterRequest.voter)
  return _s;
}
inline const std::string& QueryVoteByProposalVoterRequest::_internal_voter() const {
  return _impl_.voter_.Get();
}
inline void QueryVoteByProposalVoterRequest::_internal_set_voter(const std::string& value) {
  ;


  _impl_.voter_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryVoteByProposalVoterRequest::_internal_mutable_voter() {
  ;
  return _impl_.voter_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryVoteByProposalVoterRequest::release_voter() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryVoteByProposalVoterRequest.voter)
  return _impl_.voter_.Release();
}
inline void QueryVoteByProposalVoterRequest::set_allocated_voter(std::string* value) {
  _impl_.voter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.voter_.IsDefault()) {
          _impl_.voter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryVoteByProposalVoterRequest.voter)
}

// -------------------------------------------------------------------

// QueryVoteByProposalVoterResponse

// .cosmos.group.v1.Vote vote = 1 [json_name = "vote"];
inline bool QueryVoteByProposalVoterResponse::has_vote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_ != nullptr);
  return value;
}
inline const ::cosmos::group::v1::Vote& QueryVoteByProposalVoterResponse::_internal_vote() const {
  const ::cosmos::group::v1::Vote* p = _impl_.vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::Vote&>(
      ::cosmos::group::v1::_Vote_default_instance_);
}
inline const ::cosmos::group::v1::Vote& QueryVoteByProposalVoterResponse::vote() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVoteByProposalVoterResponse.vote)
  return _internal_vote();
}
inline void QueryVoteByProposalVoterResponse::unsafe_arena_set_allocated_vote(
    ::cosmos::group::v1::Vote* vote) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vote_);
  }
  _impl_.vote_ = vote;
  if (vote) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryVoteByProposalVoterResponse.vote)
}
inline ::cosmos::group::v1::Vote* QueryVoteByProposalVoterResponse::release_vote() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::Vote* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::group::v1::Vote* QueryVoteByProposalVoterResponse::unsafe_arena_release_vote() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryVoteByProposalVoterResponse.vote)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::Vote* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::Vote* QueryVoteByProposalVoterResponse::_internal_mutable_vote() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.vote_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::group::v1::Vote>(GetArenaForAllocation());
    _impl_.vote_ = p;
  }
  return _impl_.vote_;
}
inline ::cosmos::group::v1::Vote* QueryVoteByProposalVoterResponse::mutable_vote() {
  ::cosmos::group::v1::Vote* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVoteByProposalVoterResponse.vote)
  return _msg;
}
inline void QueryVoteByProposalVoterResponse::set_allocated_vote(::cosmos::group::v1::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vote_);
  }
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vote));
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vote_ = vote;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryVoteByProposalVoterResponse.vote)
}

// -------------------------------------------------------------------

// QueryVotesByProposalRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryVotesByProposalRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryVotesByProposalRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVotesByProposalRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryVotesByProposalRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryVotesByProposalRequest.proposal_id)
}
inline ::uint64_t QueryVotesByProposalRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryVotesByProposalRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryVotesByProposalRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryVotesByProposalRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryVotesByProposalRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVotesByProposalRequest.pagination)
  return _internal_pagination();
}
inline void QueryVotesByProposalRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryVotesByProposalRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesByProposalRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesByProposalRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryVotesByProposalRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesByProposalRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesByProposalRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVotesByProposalRequest.pagination)
  return _msg;
}
inline void QueryVotesByProposalRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryVotesByProposalRequest.pagination)
}

// -------------------------------------------------------------------

// QueryVotesByProposalResponse

// repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
inline int QueryVotesByProposalResponse::_internal_votes_size() const {
  return _impl_.votes_.size();
}
inline int QueryVotesByProposalResponse::votes_size() const {
  return _internal_votes_size();
}
inline ::cosmos::group::v1::Vote* QueryVotesByProposalResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVotesByProposalResponse.votes)
  return _internal_mutable_votes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >*
QueryVotesByProposalResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.QueryVotesByProposalResponse.votes)
  return _internal_mutable_votes();
}
inline const ::cosmos::group::v1::Vote& QueryVotesByProposalResponse::_internal_votes(int index) const {
  return _internal_votes().Get(index);
}
inline const ::cosmos::group::v1::Vote& QueryVotesByProposalResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVotesByProposalResponse.votes)
  return _internal_votes(index);
}
inline ::cosmos::group::v1::Vote* QueryVotesByProposalResponse::_internal_add_votes() {
  return _internal_mutable_votes()->Add();
}
inline ::cosmos::group::v1::Vote* QueryVotesByProposalResponse::add_votes() {
  ::cosmos::group::v1::Vote* _add = _internal_add_votes();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.QueryVotesByProposalResponse.votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >&
QueryVotesByProposalResponse::votes() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.QueryVotesByProposalResponse.votes)
  return _internal_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>&
QueryVotesByProposalResponse::_internal_votes() const {
  return _impl_.votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>*
QueryVotesByProposalResponse::_internal_mutable_votes() {
  return &_impl_.votes_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryVotesByProposalResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryVotesByProposalResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryVotesByProposalResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVotesByProposalResponse.pagination)
  return _internal_pagination();
}
inline void QueryVotesByProposalResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryVotesByProposalResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesByProposalResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesByProposalResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryVotesByProposalResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesByProposalResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesByProposalResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVotesByProposalResponse.pagination)
  return _msg;
}
inline void QueryVotesByProposalResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryVotesByProposalResponse.pagination)
}

// -------------------------------------------------------------------

// QueryVotesByVoterRequest

// string voter = 1 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryVotesByVoterRequest::clear_voter() {
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& QueryVotesByVoterRequest::voter() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVotesByVoterRequest.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryVotesByVoterRequest::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryVotesByVoterRequest.voter)
}
inline std::string* QueryVotesByVoterRequest::mutable_voter() {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVotesByVoterRequest.voter)
  return _s;
}
inline const std::string& QueryVotesByVoterRequest::_internal_voter() const {
  return _impl_.voter_.Get();
}
inline void QueryVotesByVoterRequest::_internal_set_voter(const std::string& value) {
  ;


  _impl_.voter_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryVotesByVoterRequest::_internal_mutable_voter() {
  ;
  return _impl_.voter_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryVotesByVoterRequest::release_voter() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryVotesByVoterRequest.voter)
  return _impl_.voter_.Release();
}
inline void QueryVotesByVoterRequest::set_allocated_voter(std::string* value) {
  _impl_.voter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.voter_.IsDefault()) {
          _impl_.voter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryVotesByVoterRequest.voter)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryVotesByVoterRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryVotesByVoterRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryVotesByVoterRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVotesByVoterRequest.pagination)
  return _internal_pagination();
}
inline void QueryVotesByVoterRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryVotesByVoterRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesByVoterRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesByVoterRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryVotesByVoterRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesByVoterRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryVotesByVoterRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVotesByVoterRequest.pagination)
  return _msg;
}
inline void QueryVotesByVoterRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryVotesByVoterRequest.pagination)
}

// -------------------------------------------------------------------

// QueryVotesByVoterResponse

// repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
inline int QueryVotesByVoterResponse::_internal_votes_size() const {
  return _impl_.votes_.size();
}
inline int QueryVotesByVoterResponse::votes_size() const {
  return _internal_votes_size();
}
inline ::cosmos::group::v1::Vote* QueryVotesByVoterResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVotesByVoterResponse.votes)
  return _internal_mutable_votes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >*
QueryVotesByVoterResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.QueryVotesByVoterResponse.votes)
  return _internal_mutable_votes();
}
inline const ::cosmos::group::v1::Vote& QueryVotesByVoterResponse::_internal_votes(int index) const {
  return _internal_votes().Get(index);
}
inline const ::cosmos::group::v1::Vote& QueryVotesByVoterResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVotesByVoterResponse.votes)
  return _internal_votes(index);
}
inline ::cosmos::group::v1::Vote* QueryVotesByVoterResponse::_internal_add_votes() {
  return _internal_mutable_votes()->Add();
}
inline ::cosmos::group::v1::Vote* QueryVotesByVoterResponse::add_votes() {
  ::cosmos::group::v1::Vote* _add = _internal_add_votes();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.QueryVotesByVoterResponse.votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >&
QueryVotesByVoterResponse::votes() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.QueryVotesByVoterResponse.votes)
  return _internal_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>&
QueryVotesByVoterResponse::_internal_votes() const {
  return _impl_.votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>*
QueryVotesByVoterResponse::_internal_mutable_votes() {
  return &_impl_.votes_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryVotesByVoterResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryVotesByVoterResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryVotesByVoterResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryVotesByVoterResponse.pagination)
  return _internal_pagination();
}
inline void QueryVotesByVoterResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryVotesByVoterResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesByVoterResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesByVoterResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryVotesByVoterResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesByVoterResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryVotesByVoterResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryVotesByVoterResponse.pagination)
  return _msg;
}
inline void QueryVotesByVoterResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryVotesByVoterResponse.pagination)
}

// -------------------------------------------------------------------

// QueryGroupsByMemberRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryGroupsByMemberRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryGroupsByMemberRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupsByMemberRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGroupsByMemberRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryGroupsByMemberRequest.address)
}
inline std::string* QueryGroupsByMemberRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupsByMemberRequest.address)
  return _s;
}
inline const std::string& QueryGroupsByMemberRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryGroupsByMemberRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGroupsByMemberRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGroupsByMemberRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupsByMemberRequest.address)
  return _impl_.address_.Release();
}
inline void QueryGroupsByMemberRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupsByMemberRequest.address)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryGroupsByMemberRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupsByMemberRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryGroupsByMemberRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupsByMemberRequest.pagination)
  return _internal_pagination();
}
inline void QueryGroupsByMemberRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupsByMemberRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupsByMemberRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupsByMemberRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupsByMemberRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupsByMemberRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryGroupsByMemberRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupsByMemberRequest.pagination)
  return _msg;
}
inline void QueryGroupsByMemberRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupsByMemberRequest.pagination)
}

// -------------------------------------------------------------------

// QueryGroupsByMemberResponse

// repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
inline int QueryGroupsByMemberResponse::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int QueryGroupsByMemberResponse::groups_size() const {
  return _internal_groups_size();
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupsByMemberResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupsByMemberResponse.groups)
  return _internal_mutable_groups()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >*
QueryGroupsByMemberResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.QueryGroupsByMemberResponse.groups)
  return _internal_mutable_groups();
}
inline const ::cosmos::group::v1::GroupInfo& QueryGroupsByMemberResponse::_internal_groups(int index) const {
  return _internal_groups().Get(index);
}
inline const ::cosmos::group::v1::GroupInfo& QueryGroupsByMemberResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupsByMemberResponse.groups)
  return _internal_groups(index);
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupsByMemberResponse::_internal_add_groups() {
  return _internal_mutable_groups()->Add();
}
inline ::cosmos::group::v1::GroupInfo* QueryGroupsByMemberResponse::add_groups() {
  ::cosmos::group::v1::GroupInfo* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.QueryGroupsByMemberResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >&
QueryGroupsByMemberResponse::groups() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.QueryGroupsByMemberResponse.groups)
  return _internal_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>&
QueryGroupsByMemberResponse::_internal_groups() const {
  return _impl_.groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>*
QueryGroupsByMemberResponse::_internal_mutable_groups() {
  return &_impl_.groups_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryGroupsByMemberResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupsByMemberResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryGroupsByMemberResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryGroupsByMemberResponse.pagination)
  return _internal_pagination();
}
inline void QueryGroupsByMemberResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryGroupsByMemberResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupsByMemberResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupsByMemberResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryGroupsByMemberResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupsByMemberResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryGroupsByMemberResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryGroupsByMemberResponse.pagination)
  return _msg;
}
inline void QueryGroupsByMemberResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryGroupsByMemberResponse.pagination)
}

// -------------------------------------------------------------------

// QueryTallyResultRequest

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void QueryTallyResultRequest::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryTallyResultRequest::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryTallyResultRequest.proposal_id)
  return _internal_proposal_id();
}
inline void QueryTallyResultRequest::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.QueryTallyResultRequest.proposal_id)
}
inline ::uint64_t QueryTallyResultRequest::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void QueryTallyResultRequest::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// QueryTallyResultResponse

// .cosmos.group.v1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryTallyResultResponse::has_tally() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tally_ != nullptr);
  return value;
}
inline const ::cosmos::group::v1::TallyResult& QueryTallyResultResponse::_internal_tally() const {
  const ::cosmos::group::v1::TallyResult* p = _impl_.tally_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::group::v1::TallyResult&>(
      ::cosmos::group::v1::_TallyResult_default_instance_);
}
inline const ::cosmos::group::v1::TallyResult& QueryTallyResultResponse::tally() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.QueryTallyResultResponse.tally)
  return _internal_tally();
}
inline void QueryTallyResultResponse::unsafe_arena_set_allocated_tally(
    ::cosmos::group::v1::TallyResult* tally) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tally_);
  }
  _impl_.tally_ = tally;
  if (tally) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.group.v1.QueryTallyResultResponse.tally)
}
inline ::cosmos::group::v1::TallyResult* QueryTallyResultResponse::release_tally() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::TallyResult* temp = _impl_.tally_;
  _impl_.tally_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::group::v1::TallyResult* QueryTallyResultResponse::unsafe_arena_release_tally() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.QueryTallyResultResponse.tally)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::group::v1::TallyResult* temp = _impl_.tally_;
  _impl_.tally_ = nullptr;
  return temp;
}
inline ::cosmos::group::v1::TallyResult* QueryTallyResultResponse::_internal_mutable_tally() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tally_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::group::v1::TallyResult>(GetArenaForAllocation());
    _impl_.tally_ = p;
  }
  return _impl_.tally_;
}
inline ::cosmos::group::v1::TallyResult* QueryTallyResultResponse::mutable_tally() {
  ::cosmos::group::v1::TallyResult* _msg = _internal_mutable_tally();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.QueryTallyResultResponse.tally)
  return _msg;
}
inline void QueryTallyResultResponse::set_allocated_tally(::cosmos::group::v1::TallyResult* tally) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tally_);
  }
  if (tally) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tally));
    if (message_arena != submessage_arena) {
      tally = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tally, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tally_ = tally;
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.QueryTallyResultResponse.tally)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fquery_2eproto_2epb_2eh

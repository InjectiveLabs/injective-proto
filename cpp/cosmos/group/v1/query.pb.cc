// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/query.proto

#include "cosmos/group/v1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace group {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR QueryGroupInfoRequest::QueryGroupInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryGroupInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupInfoRequestDefaultTypeInternal() {}
  union {
    QueryGroupInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupInfoRequestDefaultTypeInternal _QueryGroupInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupInfoResponse::QueryGroupInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct QueryGroupInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupInfoResponseDefaultTypeInternal() {}
  union {
    QueryGroupInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupInfoResponseDefaultTypeInternal _QueryGroupInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupPolicyInfoRequest::QueryGroupPolicyInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryGroupPolicyInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupPolicyInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupPolicyInfoRequestDefaultTypeInternal() {}
  union {
    QueryGroupPolicyInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupPolicyInfoRequestDefaultTypeInternal _QueryGroupPolicyInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupPolicyInfoResponse::QueryGroupPolicyInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct QueryGroupPolicyInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupPolicyInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupPolicyInfoResponseDefaultTypeInternal() {}
  union {
    QueryGroupPolicyInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupPolicyInfoResponseDefaultTypeInternal _QueryGroupPolicyInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupMembersRequest::QueryGroupMembersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.group_id_)*/ ::uint64_t{0u}
} {}
struct QueryGroupMembersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupMembersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupMembersRequestDefaultTypeInternal() {}
  union {
    QueryGroupMembersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupMembersRequestDefaultTypeInternal _QueryGroupMembersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupMembersResponse::QueryGroupMembersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryGroupMembersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupMembersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupMembersResponseDefaultTypeInternal() {}
  union {
    QueryGroupMembersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupMembersResponseDefaultTypeInternal _QueryGroupMembersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupsByAdminRequest::QueryGroupsByAdminRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryGroupsByAdminRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupsByAdminRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupsByAdminRequestDefaultTypeInternal() {}
  union {
    QueryGroupsByAdminRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupsByAdminRequestDefaultTypeInternal _QueryGroupsByAdminRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupsByAdminResponse::QueryGroupsByAdminResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryGroupsByAdminResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupsByAdminResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupsByAdminResponseDefaultTypeInternal() {}
  union {
    QueryGroupsByAdminResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupsByAdminResponseDefaultTypeInternal _QueryGroupsByAdminResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupPoliciesByGroupRequest::QueryGroupPoliciesByGroupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.group_id_)*/ ::uint64_t{0u}
} {}
struct QueryGroupPoliciesByGroupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupPoliciesByGroupRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupPoliciesByGroupRequestDefaultTypeInternal() {}
  union {
    QueryGroupPoliciesByGroupRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupPoliciesByGroupRequestDefaultTypeInternal _QueryGroupPoliciesByGroupRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupPoliciesByGroupResponse::QueryGroupPoliciesByGroupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_policies_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryGroupPoliciesByGroupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupPoliciesByGroupResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupPoliciesByGroupResponseDefaultTypeInternal() {}
  union {
    QueryGroupPoliciesByGroupResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupPoliciesByGroupResponseDefaultTypeInternal _QueryGroupPoliciesByGroupResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupPoliciesByAdminRequest::QueryGroupPoliciesByAdminRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryGroupPoliciesByAdminRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupPoliciesByAdminRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupPoliciesByAdminRequestDefaultTypeInternal() {}
  union {
    QueryGroupPoliciesByAdminRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupPoliciesByAdminRequestDefaultTypeInternal _QueryGroupPoliciesByAdminRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupPoliciesByAdminResponse::QueryGroupPoliciesByAdminResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_policies_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryGroupPoliciesByAdminResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupPoliciesByAdminResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupPoliciesByAdminResponseDefaultTypeInternal() {}
  union {
    QueryGroupPoliciesByAdminResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupPoliciesByAdminResponseDefaultTypeInternal _QueryGroupPoliciesByAdminResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProposalRequest::QueryProposalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryProposalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProposalRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProposalRequestDefaultTypeInternal() {}
  union {
    QueryProposalRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProposalRequestDefaultTypeInternal _QueryProposalRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProposalResponse::QueryProposalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposal_)*/nullptr} {}
struct QueryProposalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProposalResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProposalResponseDefaultTypeInternal() {}
  union {
    QueryProposalResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProposalResponseDefaultTypeInternal _QueryProposalResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProposalsByGroupPolicyRequest::QueryProposalsByGroupPolicyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryProposalsByGroupPolicyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProposalsByGroupPolicyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProposalsByGroupPolicyRequestDefaultTypeInternal() {}
  union {
    QueryProposalsByGroupPolicyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProposalsByGroupPolicyRequestDefaultTypeInternal _QueryProposalsByGroupPolicyRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryProposalsByGroupPolicyResponse::QueryProposalsByGroupPolicyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposals_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryProposalsByGroupPolicyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryProposalsByGroupPolicyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryProposalsByGroupPolicyResponseDefaultTypeInternal() {}
  union {
    QueryProposalsByGroupPolicyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryProposalsByGroupPolicyResponseDefaultTypeInternal _QueryProposalsByGroupPolicyResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVoteByProposalVoterRequest::QueryVoteByProposalVoterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.voter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryVoteByProposalVoterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVoteByProposalVoterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVoteByProposalVoterRequestDefaultTypeInternal() {}
  union {
    QueryVoteByProposalVoterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVoteByProposalVoterRequestDefaultTypeInternal _QueryVoteByProposalVoterRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVoteByProposalVoterResponse::QueryVoteByProposalVoterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vote_)*/nullptr} {}
struct QueryVoteByProposalVoterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVoteByProposalVoterResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVoteByProposalVoterResponseDefaultTypeInternal() {}
  union {
    QueryVoteByProposalVoterResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVoteByProposalVoterResponseDefaultTypeInternal _QueryVoteByProposalVoterResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVotesByProposalRequest::QueryVotesByProposalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}
} {}
struct QueryVotesByProposalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVotesByProposalRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVotesByProposalRequestDefaultTypeInternal() {}
  union {
    QueryVotesByProposalRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVotesByProposalRequestDefaultTypeInternal _QueryVotesByProposalRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVotesByProposalResponse::QueryVotesByProposalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryVotesByProposalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVotesByProposalResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVotesByProposalResponseDefaultTypeInternal() {}
  union {
    QueryVotesByProposalResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVotesByProposalResponseDefaultTypeInternal _QueryVotesByProposalResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVotesByVoterRequest::QueryVotesByVoterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryVotesByVoterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVotesByVoterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVotesByVoterRequestDefaultTypeInternal() {}
  union {
    QueryVotesByVoterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVotesByVoterRequestDefaultTypeInternal _QueryVotesByVoterRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryVotesByVoterResponse::QueryVotesByVoterResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryVotesByVoterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryVotesByVoterResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryVotesByVoterResponseDefaultTypeInternal() {}
  union {
    QueryVotesByVoterResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryVotesByVoterResponseDefaultTypeInternal _QueryVotesByVoterResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupsByMemberRequest::QueryGroupsByMemberRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryGroupsByMemberRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupsByMemberRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupsByMemberRequestDefaultTypeInternal() {}
  union {
    QueryGroupsByMemberRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupsByMemberRequestDefaultTypeInternal _QueryGroupsByMemberRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryGroupsByMemberResponse::QueryGroupsByMemberResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryGroupsByMemberResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGroupsByMemberResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGroupsByMemberResponseDefaultTypeInternal() {}
  union {
    QueryGroupsByMemberResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGroupsByMemberResponseDefaultTypeInternal _QueryGroupsByMemberResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTallyResultRequest::QueryTallyResultRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTallyResultRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTallyResultRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTallyResultRequestDefaultTypeInternal() {}
  union {
    QueryTallyResultRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTallyResultRequestDefaultTypeInternal _QueryTallyResultRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTallyResultResponse::QueryTallyResultResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tally_)*/nullptr} {}
struct QueryTallyResultResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTallyResultResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTallyResultResponseDefaultTypeInternal() {}
  union {
    QueryTallyResultResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTallyResultResponseDefaultTypeInternal _QueryTallyResultResponse_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[26];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fgroup_2fv1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fgroup_2fv1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupInfoRequest, _impl_.group_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupInfoResponse, _impl_.info_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPolicyInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPolicyInfoRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPolicyInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPolicyInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPolicyInfoResponse, _impl_.info_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupMembersRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupMembersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupMembersRequest, _impl_.group_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupMembersRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupMembersResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupMembersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupMembersResponse, _impl_.members_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupMembersResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByAdminRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByAdminRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByAdminRequest, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByAdminRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByAdminResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByAdminResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByAdminResponse, _impl_.groups_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByAdminResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByGroupRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByGroupRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByGroupRequest, _impl_.group_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByGroupRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByGroupResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByGroupResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByGroupResponse, _impl_.group_policies_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByGroupResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByAdminRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByAdminRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByAdminRequest, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByAdminRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByAdminResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByAdminResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByAdminResponse, _impl_.group_policies_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupPoliciesByAdminResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalResponse, _impl_.proposal_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalsByGroupPolicyRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalsByGroupPolicyRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalsByGroupPolicyRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalsByGroupPolicyRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalsByGroupPolicyResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalsByGroupPolicyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalsByGroupPolicyResponse, _impl_.proposals_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryProposalsByGroupPolicyResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVoteByProposalVoterRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVoteByProposalVoterRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVoteByProposalVoterRequest, _impl_.voter_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVoteByProposalVoterResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVoteByProposalVoterResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVoteByProposalVoterResponse, _impl_.vote_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByProposalRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByProposalRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByProposalRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByProposalRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByProposalResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByProposalResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByProposalResponse, _impl_.votes_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByProposalResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByVoterRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByVoterRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByVoterRequest, _impl_.voter_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByVoterRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByVoterResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByVoterResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByVoterResponse, _impl_.votes_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryVotesByVoterResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByMemberRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByMemberRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByMemberRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByMemberRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByMemberResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByMemberResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByMemberResponse, _impl_.groups_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryGroupsByMemberResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryTallyResultRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryTallyResultRequest, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryTallyResultResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryTallyResultResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::QueryTallyResultResponse, _impl_.tally_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::group::v1::QueryGroupInfoRequest)},
        { 9, 18, -1, sizeof(::cosmos::group::v1::QueryGroupInfoResponse)},
        { 19, -1, -1, sizeof(::cosmos::group::v1::QueryGroupPolicyInfoRequest)},
        { 28, 37, -1, sizeof(::cosmos::group::v1::QueryGroupPolicyInfoResponse)},
        { 38, 48, -1, sizeof(::cosmos::group::v1::QueryGroupMembersRequest)},
        { 50, 60, -1, sizeof(::cosmos::group::v1::QueryGroupMembersResponse)},
        { 62, 72, -1, sizeof(::cosmos::group::v1::QueryGroupsByAdminRequest)},
        { 74, 84, -1, sizeof(::cosmos::group::v1::QueryGroupsByAdminResponse)},
        { 86, 96, -1, sizeof(::cosmos::group::v1::QueryGroupPoliciesByGroupRequest)},
        { 98, 108, -1, sizeof(::cosmos::group::v1::QueryGroupPoliciesByGroupResponse)},
        { 110, 120, -1, sizeof(::cosmos::group::v1::QueryGroupPoliciesByAdminRequest)},
        { 122, 132, -1, sizeof(::cosmos::group::v1::QueryGroupPoliciesByAdminResponse)},
        { 134, -1, -1, sizeof(::cosmos::group::v1::QueryProposalRequest)},
        { 143, 152, -1, sizeof(::cosmos::group::v1::QueryProposalResponse)},
        { 153, 163, -1, sizeof(::cosmos::group::v1::QueryProposalsByGroupPolicyRequest)},
        { 165, 175, -1, sizeof(::cosmos::group::v1::QueryProposalsByGroupPolicyResponse)},
        { 177, -1, -1, sizeof(::cosmos::group::v1::QueryVoteByProposalVoterRequest)},
        { 187, 196, -1, sizeof(::cosmos::group::v1::QueryVoteByProposalVoterResponse)},
        { 197, 207, -1, sizeof(::cosmos::group::v1::QueryVotesByProposalRequest)},
        { 209, 219, -1, sizeof(::cosmos::group::v1::QueryVotesByProposalResponse)},
        { 221, 231, -1, sizeof(::cosmos::group::v1::QueryVotesByVoterRequest)},
        { 233, 243, -1, sizeof(::cosmos::group::v1::QueryVotesByVoterResponse)},
        { 245, 255, -1, sizeof(::cosmos::group::v1::QueryGroupsByMemberRequest)},
        { 257, 267, -1, sizeof(::cosmos::group::v1::QueryGroupsByMemberResponse)},
        { 269, -1, -1, sizeof(::cosmos::group::v1::QueryTallyResultRequest)},
        { 278, 287, -1, sizeof(::cosmos::group::v1::QueryTallyResultResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::group::v1::_QueryGroupInfoRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupInfoResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupPolicyInfoRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupPolicyInfoResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupMembersRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupMembersResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupsByAdminRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupsByAdminResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupPoliciesByGroupRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupPoliciesByGroupResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupPoliciesByAdminRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupPoliciesByAdminResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryProposalRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryProposalResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryProposalsByGroupPolicyRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryProposalsByGroupPolicyResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryVoteByProposalVoterRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryVoteByProposalVoterResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryVotesByProposalRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryVotesByProposalResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryVotesByVoterRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryVotesByVoterResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupsByMemberRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryGroupsByMemberResponse_default_instance_._instance,
    &::cosmos::group::v1::_QueryTallyResultRequest_default_instance_._instance,
    &::cosmos::group::v1::_QueryTallyResultResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fgroup_2fv1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\033cosmos/group/v1/query.proto\022\017cosmos.gr"
    "oup.v1\032\024gogoproto/gogo.proto\032\034google/api"
    "/annotations.proto\032\033cosmos/group/v1/type"
    "s.proto\032*cosmos/base/query/v1beta1/pagin"
    "ation.proto\032\031cosmos_proto/cosmos.proto\032\021"
    "amino/amino.proto\"2\n\025QueryGroupInfoReque"
    "st\022\031\n\010group_id\030\001 \001(\004R\007groupId\"H\n\026QueryGr"
    "oupInfoResponse\022.\n\004info\030\001 \001(\0132\032.cosmos.g"
    "roup.v1.GroupInfoR\004info\"Q\n\033QueryGroupPol"
    "icyInfoRequest\0222\n\007address\030\001 \001(\tB\030\322\264-\024cos"
    "mos.AddressStringR\007address\"T\n\034QueryGroup"
    "PolicyInfoResponse\0224\n\004info\030\001 \001(\0132 .cosmo"
    "s.group.v1.GroupPolicyInfoR\004info\"}\n\030Quer"
    "yGroupMembersRequest\022\031\n\010group_id\030\001 \001(\004R\007"
    "groupId\022F\n\npagination\030\002 \001(\0132&.cosmos.bas"
    "e.query.v1beta1.PageRequestR\npagination\""
    "\234\001\n\031QueryGroupMembersResponse\0226\n\007members"
    "\030\001 \003(\0132\034.cosmos.group.v1.GroupMemberR\007me"
    "mbers\022G\n\npagination\030\002 \001(\0132\'.cosmos.base."
    "query.v1beta1.PageResponseR\npagination\"\223"
    "\001\n\031QueryGroupsByAdminRequest\022.\n\005admin\030\001 "
    "\001(\tB\030\322\264-\024cosmos.AddressStringR\005admin\022F\n\n"
    "pagination\030\002 \001(\0132&.cosmos.base.query.v1b"
    "eta1.PageRequestR\npagination\"\231\001\n\032QueryGr"
    "oupsByAdminResponse\0222\n\006groups\030\001 \003(\0132\032.co"
    "smos.group.v1.GroupInfoR\006groups\022G\n\npagin"
    "ation\030\002 \001(\0132\'.cosmos.base.query.v1beta1."
    "PageResponseR\npagination\"\205\001\n QueryGroupP"
    "oliciesByGroupRequest\022\031\n\010group_id\030\001 \001(\004R"
    "\007groupId\022F\n\npagination\030\002 \001(\0132&.cosmos.ba"
    "se.query.v1beta1.PageRequestR\npagination"
    "\"\265\001\n!QueryGroupPoliciesByGroupResponse\022G"
    "\n\016group_policies\030\001 \003(\0132 .cosmos.group.v1"
    ".GroupPolicyInfoR\rgroupPolicies\022G\n\npagin"
    "ation\030\002 \001(\0132\'.cosmos.base.query.v1beta1."
    "PageResponseR\npagination\"\232\001\n QueryGroupP"
    "oliciesByAdminRequest\022.\n\005admin\030\001 \001(\tB\030\322\264"
    "-\024cosmos.AddressStringR\005admin\022F\n\npaginat"
    "ion\030\002 \001(\0132&.cosmos.base.query.v1beta1.Pa"
    "geRequestR\npagination\"\265\001\n!QueryGroupPoli"
    "ciesByAdminResponse\022G\n\016group_policies\030\001 "
    "\003(\0132 .cosmos.group.v1.GroupPolicyInfoR\rg"
    "roupPolicies\022G\n\npagination\030\002 \001(\0132\'.cosmo"
    "s.base.query.v1beta1.PageResponseR\npagin"
    "ation\"7\n\024QueryProposalRequest\022\037\n\013proposa"
    "l_id\030\001 \001(\004R\nproposalId\"N\n\025QueryProposalR"
    "esponse\0225\n\010proposal\030\001 \001(\0132\031.cosmos.group"
    ".v1.ProposalR\010proposal\"\240\001\n\"QueryProposal"
    "sByGroupPolicyRequest\0222\n\007address\030\001 \001(\tB\030"
    "\322\264-\024cosmos.AddressStringR\007address\022F\n\npag"
    "ination\030\002 \001(\0132&.cosmos.base.query.v1beta"
    "1.PageRequestR\npagination\"\247\001\n#QueryPropo"
    "salsByGroupPolicyResponse\0227\n\tproposals\030\001"
    " \003(\0132\031.cosmos.group.v1.ProposalR\tproposa"
    "ls\022G\n\npagination\030\002 \001(\0132\'.cosmos.base.que"
    "ry.v1beta1.PageResponseR\npagination\"r\n\037Q"
    "ueryVoteByProposalVoterRequest\022\037\n\013propos"
    "al_id\030\001 \001(\004R\nproposalId\022.\n\005voter\030\002 \001(\tB\030"
    "\322\264-\024cosmos.AddressStringR\005voter\"M\n Query"
    "VoteByProposalVoterResponse\022)\n\004vote\030\001 \001("
    "\0132\025.cosmos.group.v1.VoteR\004vote\"\206\001\n\033Query"
    "VotesByProposalRequest\022\037\n\013proposal_id\030\001 "
    "\001(\004R\nproposalId\022F\n\npagination\030\002 \001(\0132&.co"
    "smos.base.query.v1beta1.PageRequestR\npag"
    "ination\"\224\001\n\034QueryVotesByProposalResponse"
    "\022+\n\005votes\030\001 \003(\0132\025.cosmos.group.v1.VoteR\005"
    "votes\022G\n\npagination\030\002 \001(\0132\'.cosmos.base."
    "query.v1beta1.PageResponseR\npagination\"\222"
    "\001\n\030QueryVotesByVoterRequest\022.\n\005voter\030\001 \001"
    "(\tB\030\322\264-\024cosmos.AddressStringR\005voter\022F\n\np"
    "agination\030\002 \001(\0132&.cosmos.base.query.v1be"
    "ta1.PageRequestR\npagination\"\221\001\n\031QueryVot"
    "esByVoterResponse\022+\n\005votes\030\001 \003(\0132\025.cosmo"
    "s.group.v1.VoteR\005votes\022G\n\npagination\030\002 \001"
    "(\0132\'.cosmos.base.query.v1beta1.PageRespo"
    "nseR\npagination\"\230\001\n\032QueryGroupsByMemberR"
    "equest\0222\n\007address\030\001 \001(\tB\030\322\264-\024cosmos.Addr"
    "essStringR\007address\022F\n\npagination\030\002 \001(\0132&"
    ".cosmos.base.query.v1beta1.PageRequestR\n"
    "pagination\"\232\001\n\033QueryGroupsByMemberRespon"
    "se\0222\n\006groups\030\001 \003(\0132\032.cosmos.group.v1.Gro"
    "upInfoR\006groups\022G\n\npagination\030\002 \001(\0132\'.cos"
    "mos.base.query.v1beta1.PageResponseR\npag"
    "ination\":\n\027QueryTallyResultRequest\022\037\n\013pr"
    "oposal_id\030\001 \001(\004R\nproposalId\"Y\n\030QueryTall"
    "yResultResponse\022=\n\005tally\030\001 \001(\0132\034.cosmos."
    "group.v1.TallyResultB\t\310\336\037\000\250\347\260*\001R\005tally2\205"
    "\021\n\005Query\022\214\001\n\tGroupInfo\022&.cosmos.group.v1"
    ".QueryGroupInfoRequest\032\'.cosmos.group.v1"
    ".QueryGroupInfoResponse\".\202\323\344\223\002(\022&/cosmos"
    "/group/v1/group_info/{group_id}\022\244\001\n\017Grou"
    "pPolicyInfo\022,.cosmos.group.v1.QueryGroup"
    "PolicyInfoRequest\032-.cosmos.group.v1.Quer"
    "yGroupPolicyInfoResponse\"4\202\323\344\223\002.\022,/cosmo"
    "s/group/v1/group_policy_info/{address}\022\230"
    "\001\n\014GroupMembers\022).cosmos.group.v1.QueryG"
    "roupMembersRequest\032*.cosmos.group.v1.Que"
    "ryGroupMembersResponse\"1\202\323\344\223\002+\022)/cosmos/"
    "group/v1/group_members/{group_id}\022\232\001\n\rGr"
    "oupsByAdmin\022*.cosmos.group.v1.QueryGroup"
    "sByAdminRequest\032+.cosmos.group.v1.QueryG"
    "roupsByAdminResponse\"0\202\323\344\223\002*\022(/cosmos/gr"
    "oup/v1/groups_by_admin/{admin}\022\272\001\n\024Group"
    "PoliciesByGroup\0221.cosmos.group.v1.QueryG"
    "roupPoliciesByGroupRequest\0322.cosmos.grou"
    "p.v1.QueryGroupPoliciesByGroupResponse\";"
    "\202\323\344\223\0025\0223/cosmos/group/v1/group_policies_"
    "by_group/{group_id}\022\267\001\n\024GroupPoliciesByA"
    "dmin\0221.cosmos.group.v1.QueryGroupPolicie"
    "sByAdminRequest\0322.cosmos.group.v1.QueryG"
    "roupPoliciesByAdminResponse\"8\202\323\344\223\0022\0220/co"
    "smos/group/v1/group_policies_by_admin/{a"
    "dmin}\022\212\001\n\010Proposal\022%.cosmos.group.v1.Que"
    "ryProposalRequest\032&.cosmos.group.v1.Quer"
    "yProposalResponse\"/\202\323\344\223\002)\022\'/cosmos/group"
    "/v1/proposal/{proposal_id}\022\301\001\n\026Proposals"
    "ByGroupPolicy\0223.cosmos.group.v1.QueryPro"
    "posalsByGroupPolicyRequest\0324.cosmos.grou"
    "p.v1.QueryProposalsByGroupPolicyResponse"
    "\"<\202\323\344\223\0026\0224/cosmos/group/v1/proposals_by_"
    "group_policy/{address}\022\301\001\n\023VoteByProposa"
    "lVoter\0220.cosmos.group.v1.QueryVoteByProp"
    "osalVoterRequest\0321.cosmos.group.v1.Query"
    "VoteByProposalVoterResponse\"E\202\323\344\223\002\?\022=/co"
    "smos/group/v1/vote_by_proposal_voter/{pr"
    "oposal_id}/{voter}\022\250\001\n\017VotesByProposal\022,"
    ".cosmos.group.v1.QueryVotesByProposalReq"
    "uest\032-.cosmos.group.v1.QueryVotesByPropo"
    "salResponse\"8\202\323\344\223\0022\0220/cosmos/group/v1/vo"
    "tes_by_proposal/{proposal_id}\022\226\001\n\014VotesB"
    "yVoter\022).cosmos.group.v1.QueryVotesByVot"
    "erRequest\032*.cosmos.group.v1.QueryVotesBy"
    "VoterResponse\"/\202\323\344\223\002)\022\'/cosmos/group/v1/"
    "votes_by_voter/{voter}\022\240\001\n\016GroupsByMembe"
    "r\022+.cosmos.group.v1.QueryGroupsByMemberR"
    "equest\032,.cosmos.group.v1.QueryGroupsByMe"
    "mberResponse\"3\202\323\344\223\002-\022+/cosmos/group/v1/g"
    "roups_by_member/{address}\022\232\001\n\013TallyResul"
    "t\022(.cosmos.group.v1.QueryTallyResultRequ"
    "est\032).cosmos.group.v1.QueryTallyResultRe"
    "sponse\"6\202\323\344\223\0020\022./cosmos/group/v1/proposa"
    "ls/{proposal_id}/tallyB\245\001\n\023com.cosmos.gr"
    "oup.v1B\nQueryProtoP\001Z$github.com/cosmos/"
    "cosmos-sdk/x/group\242\002\003CGX\252\002\017Cosmos.Group."
    "V1\312\002\017Cosmos\\Group\\V1\342\002\033Cosmos\\Group\\V1\\G"
    "PBMetadata\352\002\021Cosmos::Group::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_deps[6] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto = {
    false,
    false,
    5838,
    descriptor_table_protodef_cosmos_2fgroup_2fv1_2fquery_2eproto,
    "cosmos/group/v1/query.proto",
    &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
    descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_deps,
    6,
    26,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fgroup_2fv1_2fquery_2eproto::offsets,
    file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto,
    file_level_enum_descriptors_cosmos_2fgroup_2fv1_2fquery_2eproto,
    file_level_service_descriptors_cosmos_2fgroup_2fv1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter() {
  return &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fgroup_2fv1_2fquery_2eproto(&descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto);
namespace cosmos {
namespace group {
namespace v1 {
// ===================================================================

class QueryGroupInfoRequest::_Internal {
 public:
};

QueryGroupInfoRequest::QueryGroupInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupInfoRequest)
}
QueryGroupInfoRequest::QueryGroupInfoRequest(const QueryGroupInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupInfoRequest)
}

inline void QueryGroupInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.group_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryGroupInfoRequest::~QueryGroupInfoRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryGroupInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1 [json_name = "groupId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupInfoRequest)
  return target;
}

::size_t QueryGroupInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupInfoRequest::GetClassData() const { return &_class_data_; }


void QueryGroupInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupInfoRequest*>(&to_msg);
  auto& from = static_cast<const QueryGroupInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupInfoRequest::CopyFrom(const QueryGroupInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupInfoRequest::IsInitialized() const {
  return true;
}

void QueryGroupInfoRequest::InternalSwap(QueryGroupInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.group_id_, other->_impl_.group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryGroupInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupInfoResponse, _impl_._has_bits_);
  static const ::cosmos::group::v1::GroupInfo& info(const QueryGroupInfoResponse* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::group::v1::GroupInfo&
QueryGroupInfoResponse::_Internal::info(const QueryGroupInfoResponse* msg) {
  return *msg->_impl_.info_;
}
void QueryGroupInfoResponse::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupInfoResponse::QueryGroupInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupInfoResponse)
}
QueryGroupInfoResponse::QueryGroupInfoResponse(const QueryGroupInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::cosmos::group::v1::GroupInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupInfoResponse)
}

inline void QueryGroupInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}
  };
}

QueryGroupInfoResponse::~QueryGroupInfoResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void QueryGroupInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.group.v1.GroupInfo info = 1 [json_name = "info"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.group.v1.GroupInfo info = 1 [json_name = "info"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupInfoResponse)
  return target;
}

::size_t QueryGroupInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.group.v1.GroupInfo info = 1 [json_name = "info"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupInfoResponse::GetClassData() const { return &_class_data_; }


void QueryGroupInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupInfoResponse*>(&to_msg);
  auto& from = static_cast<const QueryGroupInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_info()->::cosmos::group::v1::GroupInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupInfoResponse::CopyFrom(const QueryGroupInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupInfoResponse::IsInitialized() const {
  return true;
}

void QueryGroupInfoResponse::InternalSwap(QueryGroupInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryGroupPolicyInfoRequest::_Internal {
 public:
};

QueryGroupPolicyInfoRequest::QueryGroupPolicyInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupPolicyInfoRequest)
}
QueryGroupPolicyInfoRequest::QueryGroupPolicyInfoRequest(const QueryGroupPolicyInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupPolicyInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupPolicyInfoRequest)
}

inline void QueryGroupPolicyInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryGroupPolicyInfoRequest::~QueryGroupPolicyInfoRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupPolicyInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupPolicyInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void QueryGroupPolicyInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupPolicyInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupPolicyInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupPolicyInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.QueryGroupPolicyInfoRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupPolicyInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupPolicyInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.QueryGroupPolicyInfoRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupPolicyInfoRequest)
  return target;
}

::size_t QueryGroupPolicyInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupPolicyInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupPolicyInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupPolicyInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupPolicyInfoRequest::GetClassData() const { return &_class_data_; }


void QueryGroupPolicyInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupPolicyInfoRequest*>(&to_msg);
  auto& from = static_cast<const QueryGroupPolicyInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupPolicyInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupPolicyInfoRequest::CopyFrom(const QueryGroupPolicyInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupPolicyInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupPolicyInfoRequest::IsInitialized() const {
  return true;
}

void QueryGroupPolicyInfoRequest::InternalSwap(QueryGroupPolicyInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupPolicyInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryGroupPolicyInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupPolicyInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupPolicyInfoResponse, _impl_._has_bits_);
  static const ::cosmos::group::v1::GroupPolicyInfo& info(const QueryGroupPolicyInfoResponse* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::group::v1::GroupPolicyInfo&
QueryGroupPolicyInfoResponse::_Internal::info(const QueryGroupPolicyInfoResponse* msg) {
  return *msg->_impl_.info_;
}
void QueryGroupPolicyInfoResponse::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupPolicyInfoResponse::QueryGroupPolicyInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupPolicyInfoResponse)
}
QueryGroupPolicyInfoResponse::QueryGroupPolicyInfoResponse(const QueryGroupPolicyInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupPolicyInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::cosmos::group::v1::GroupPolicyInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupPolicyInfoResponse)
}

inline void QueryGroupPolicyInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}
  };
}

QueryGroupPolicyInfoResponse::~QueryGroupPolicyInfoResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupPolicyInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupPolicyInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void QueryGroupPolicyInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupPolicyInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupPolicyInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupPolicyInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.group.v1.GroupPolicyInfo info = 1 [json_name = "info"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupPolicyInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupPolicyInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.group.v1.GroupPolicyInfo info = 1 [json_name = "info"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupPolicyInfoResponse)
  return target;
}

::size_t QueryGroupPolicyInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupPolicyInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.group.v1.GroupPolicyInfo info = 1 [json_name = "info"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupPolicyInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupPolicyInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupPolicyInfoResponse::GetClassData() const { return &_class_data_; }


void QueryGroupPolicyInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupPolicyInfoResponse*>(&to_msg);
  auto& from = static_cast<const QueryGroupPolicyInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupPolicyInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_info()->::cosmos::group::v1::GroupPolicyInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupPolicyInfoResponse::CopyFrom(const QueryGroupPolicyInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupPolicyInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupPolicyInfoResponse::IsInitialized() const {
  return true;
}

void QueryGroupPolicyInfoResponse::InternalSwap(QueryGroupPolicyInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupPolicyInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[3]);
}
// ===================================================================

class QueryGroupMembersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupMembersRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupMembersRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryGroupMembersRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryGroupMembersRequest::_Internal::pagination(const QueryGroupMembersRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupMembersRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupMembersRequest::QueryGroupMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupMembersRequest)
}
QueryGroupMembersRequest::QueryGroupMembersRequest(const QueryGroupMembersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupMembersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.group_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupMembersRequest)
}

inline void QueryGroupMembersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.group_id_) { ::uint64_t{0u} }

  };
}

QueryGroupMembersRequest::~QueryGroupMembersRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupMembersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupMembersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupMembersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupMembersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupMembersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.group_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupMembersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1 [json_name = "groupId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupMembersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupMembersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_group_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupMembersRequest)
  return target;
}

::size_t QueryGroupMembersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupMembersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupMembersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupMembersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupMembersRequest::GetClassData() const { return &_class_data_; }


void QueryGroupMembersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupMembersRequest*>(&to_msg);
  auto& from = static_cast<const QueryGroupMembersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupMembersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupMembersRequest::CopyFrom(const QueryGroupMembersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupMembersRequest::IsInitialized() const {
  return true;
}

void QueryGroupMembersRequest::InternalSwap(QueryGroupMembersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryGroupMembersRequest, _impl_.group_id_)
      + sizeof(QueryGroupMembersRequest::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(QueryGroupMembersRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupMembersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[4]);
}
// ===================================================================

class QueryGroupMembersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupMembersResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupMembersResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryGroupMembersResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryGroupMembersResponse::_Internal::pagination(const QueryGroupMembersResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupMembersResponse::clear_members() {
  _internal_mutable_members()->Clear();
}
void QueryGroupMembersResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupMembersResponse::QueryGroupMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupMembersResponse)
}
QueryGroupMembersResponse::QueryGroupMembersResponse(const QueryGroupMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupMembersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupMembersResponse)
}

inline void QueryGroupMembersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryGroupMembersResponse::~QueryGroupMembersResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupMembersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupMembersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_members()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupMembersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupMembersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_members()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupMembersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.group.v1.GroupMember members = 1 [json_name = "members"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupMembersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupMembersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupMember members = 1 [json_name = "members"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupMembersResponse)
  return target;
}

::size_t QueryGroupMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupMembersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupMember members = 1 [json_name = "members"];
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_internal_members()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupMembersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupMembersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupMembersResponse::GetClassData() const { return &_class_data_; }


void QueryGroupMembersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupMembersResponse*>(&to_msg);
  auto& from = static_cast<const QueryGroupMembersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupMembersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_members()->MergeFrom(from._internal_members());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupMembersResponse::CopyFrom(const QueryGroupMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupMembersResponse::IsInitialized() const {
  return true;
}

void QueryGroupMembersResponse::InternalSwap(QueryGroupMembersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_members()->InternalSwap(other->_internal_mutable_members());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupMembersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[5]);
}
// ===================================================================

class QueryGroupsByAdminRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupsByAdminRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupsByAdminRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryGroupsByAdminRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryGroupsByAdminRequest::_Internal::pagination(const QueryGroupsByAdminRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupsByAdminRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupsByAdminRequest::QueryGroupsByAdminRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupsByAdminRequest)
}
QueryGroupsByAdminRequest::QueryGroupsByAdminRequest(const QueryGroupsByAdminRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupsByAdminRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.admin_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupsByAdminRequest)
}

inline void QueryGroupsByAdminRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.admin_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryGroupsByAdminRequest::~QueryGroupsByAdminRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupsByAdminRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupsByAdminRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.admin_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupsByAdminRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupsByAdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupsByAdminRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.admin_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupsByAdminRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.QueryGroupsByAdminRequest.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupsByAdminRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupsByAdminRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.QueryGroupsByAdminRequest.admin");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupsByAdminRequest)
  return target;
}

::size_t QueryGroupsByAdminRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupsByAdminRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupsByAdminRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupsByAdminRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupsByAdminRequest::GetClassData() const { return &_class_data_; }


void QueryGroupsByAdminRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupsByAdminRequest*>(&to_msg);
  auto& from = static_cast<const QueryGroupsByAdminRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupsByAdminRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupsByAdminRequest::CopyFrom(const QueryGroupsByAdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupsByAdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupsByAdminRequest::IsInitialized() const {
  return true;
}

void QueryGroupsByAdminRequest::InternalSwap(QueryGroupsByAdminRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupsByAdminRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[6]);
}
// ===================================================================

class QueryGroupsByAdminResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupsByAdminResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupsByAdminResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryGroupsByAdminResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryGroupsByAdminResponse::_Internal::pagination(const QueryGroupsByAdminResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupsByAdminResponse::clear_groups() {
  _internal_mutable_groups()->Clear();
}
void QueryGroupsByAdminResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupsByAdminResponse::QueryGroupsByAdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupsByAdminResponse)
}
QueryGroupsByAdminResponse::QueryGroupsByAdminResponse(const QueryGroupsByAdminResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupsByAdminResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groups_){from._impl_.groups_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupsByAdminResponse)
}

inline void QueryGroupsByAdminResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groups_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryGroupsByAdminResponse::~QueryGroupsByAdminResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupsByAdminResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupsByAdminResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_groups()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupsByAdminResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupsByAdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupsByAdminResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groups()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupsByAdminResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupsByAdminResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupsByAdminResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupsByAdminResponse)
  return target;
}

::size_t QueryGroupsByAdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupsByAdminResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_internal_groups()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupsByAdminResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupsByAdminResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupsByAdminResponse::GetClassData() const { return &_class_data_; }


void QueryGroupsByAdminResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupsByAdminResponse*>(&to_msg);
  auto& from = static_cast<const QueryGroupsByAdminResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupsByAdminResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groups()->MergeFrom(from._internal_groups());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupsByAdminResponse::CopyFrom(const QueryGroupsByAdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupsByAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupsByAdminResponse::IsInitialized() const {
  return true;
}

void QueryGroupsByAdminResponse::InternalSwap(QueryGroupsByAdminResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_groups()->InternalSwap(other->_internal_mutable_groups());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupsByAdminResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[7]);
}
// ===================================================================

class QueryGroupPoliciesByGroupRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupPoliciesByGroupRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupPoliciesByGroupRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryGroupPoliciesByGroupRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryGroupPoliciesByGroupRequest::_Internal::pagination(const QueryGroupPoliciesByGroupRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupPoliciesByGroupRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupPoliciesByGroupRequest::QueryGroupPoliciesByGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
}
QueryGroupPoliciesByGroupRequest::QueryGroupPoliciesByGroupRequest(const QueryGroupPoliciesByGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupPoliciesByGroupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.group_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
}

inline void QueryGroupPoliciesByGroupRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.group_id_) { ::uint64_t{0u} }

  };
}

QueryGroupPoliciesByGroupRequest::~QueryGroupPoliciesByGroupRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupPoliciesByGroupRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupPoliciesByGroupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupPoliciesByGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.group_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupPoliciesByGroupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1 [json_name = "groupId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupPoliciesByGroupRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_group_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
  return target;
}

::size_t QueryGroupPoliciesByGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupPoliciesByGroupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupPoliciesByGroupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupPoliciesByGroupRequest::GetClassData() const { return &_class_data_; }


void QueryGroupPoliciesByGroupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupPoliciesByGroupRequest*>(&to_msg);
  auto& from = static_cast<const QueryGroupPoliciesByGroupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupPoliciesByGroupRequest::CopyFrom(const QueryGroupPoliciesByGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupPoliciesByGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupPoliciesByGroupRequest::IsInitialized() const {
  return true;
}

void QueryGroupPoliciesByGroupRequest::InternalSwap(QueryGroupPoliciesByGroupRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryGroupPoliciesByGroupRequest, _impl_.group_id_)
      + sizeof(QueryGroupPoliciesByGroupRequest::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(QueryGroupPoliciesByGroupRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupPoliciesByGroupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryGroupPoliciesByGroupResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupPoliciesByGroupResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupPoliciesByGroupResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryGroupPoliciesByGroupResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryGroupPoliciesByGroupResponse::_Internal::pagination(const QueryGroupPoliciesByGroupResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupPoliciesByGroupResponse::clear_group_policies() {
  _internal_mutable_group_policies()->Clear();
}
void QueryGroupPoliciesByGroupResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupPoliciesByGroupResponse::QueryGroupPoliciesByGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
}
QueryGroupPoliciesByGroupResponse::QueryGroupPoliciesByGroupResponse(const QueryGroupPoliciesByGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupPoliciesByGroupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_policies_){from._impl_.group_policies_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
}

inline void QueryGroupPoliciesByGroupResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_policies_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryGroupPoliciesByGroupResponse::~QueryGroupPoliciesByGroupResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupPoliciesByGroupResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_group_policies()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupPoliciesByGroupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupPoliciesByGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_group_policies()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupPoliciesByGroupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupPoliciesByGroupResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_policies_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_policies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
  return target;
}

::size_t QueryGroupPoliciesByGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
  total_size += 1UL * this->_internal_group_policies_size();
  for (const auto& msg : this->_internal_group_policies()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupPoliciesByGroupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupPoliciesByGroupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupPoliciesByGroupResponse::GetClassData() const { return &_class_data_; }


void QueryGroupPoliciesByGroupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupPoliciesByGroupResponse*>(&to_msg);
  auto& from = static_cast<const QueryGroupPoliciesByGroupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_group_policies()->MergeFrom(from._internal_group_policies());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupPoliciesByGroupResponse::CopyFrom(const QueryGroupPoliciesByGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupPoliciesByGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupPoliciesByGroupResponse::IsInitialized() const {
  return true;
}

void QueryGroupPoliciesByGroupResponse::InternalSwap(QueryGroupPoliciesByGroupResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_group_policies()->InternalSwap(other->_internal_mutable_group_policies());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupPoliciesByGroupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[9]);
}
// ===================================================================

class QueryGroupPoliciesByAdminRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupPoliciesByAdminRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupPoliciesByAdminRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryGroupPoliciesByAdminRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryGroupPoliciesByAdminRequest::_Internal::pagination(const QueryGroupPoliciesByAdminRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupPoliciesByAdminRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupPoliciesByAdminRequest::QueryGroupPoliciesByAdminRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
}
QueryGroupPoliciesByAdminRequest::QueryGroupPoliciesByAdminRequest(const QueryGroupPoliciesByAdminRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupPoliciesByAdminRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.admin_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
}

inline void QueryGroupPoliciesByAdminRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.admin_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryGroupPoliciesByAdminRequest::~QueryGroupPoliciesByAdminRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupPoliciesByAdminRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.admin_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupPoliciesByAdminRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupPoliciesByAdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.admin_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupPoliciesByAdminRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.QueryGroupPoliciesByAdminRequest.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupPoliciesByAdminRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.QueryGroupPoliciesByAdminRequest.admin");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
  return target;
}

::size_t QueryGroupPoliciesByAdminRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string admin = 1 [json_name = "admin", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupPoliciesByAdminRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupPoliciesByAdminRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupPoliciesByAdminRequest::GetClassData() const { return &_class_data_; }


void QueryGroupPoliciesByAdminRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupPoliciesByAdminRequest*>(&to_msg);
  auto& from = static_cast<const QueryGroupPoliciesByAdminRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupPoliciesByAdminRequest::CopyFrom(const QueryGroupPoliciesByAdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupPoliciesByAdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupPoliciesByAdminRequest::IsInitialized() const {
  return true;
}

void QueryGroupPoliciesByAdminRequest::InternalSwap(QueryGroupPoliciesByAdminRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupPoliciesByAdminRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[10]);
}
// ===================================================================

class QueryGroupPoliciesByAdminResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupPoliciesByAdminResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupPoliciesByAdminResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryGroupPoliciesByAdminResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryGroupPoliciesByAdminResponse::_Internal::pagination(const QueryGroupPoliciesByAdminResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupPoliciesByAdminResponse::clear_group_policies() {
  _internal_mutable_group_policies()->Clear();
}
void QueryGroupPoliciesByAdminResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupPoliciesByAdminResponse::QueryGroupPoliciesByAdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
}
QueryGroupPoliciesByAdminResponse::QueryGroupPoliciesByAdminResponse(const QueryGroupPoliciesByAdminResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupPoliciesByAdminResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_policies_){from._impl_.group_policies_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
}

inline void QueryGroupPoliciesByAdminResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_policies_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryGroupPoliciesByAdminResponse::~QueryGroupPoliciesByAdminResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupPoliciesByAdminResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_group_policies()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupPoliciesByAdminResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupPoliciesByAdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_group_policies()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupPoliciesByAdminResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupPoliciesByAdminResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_policies_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_policies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
  return target;
}

::size_t QueryGroupPoliciesByAdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 1 [json_name = "groupPolicies"];
  total_size += 1UL * this->_internal_group_policies_size();
  for (const auto& msg : this->_internal_group_policies()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupPoliciesByAdminResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupPoliciesByAdminResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupPoliciesByAdminResponse::GetClassData() const { return &_class_data_; }


void QueryGroupPoliciesByAdminResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupPoliciesByAdminResponse*>(&to_msg);
  auto& from = static_cast<const QueryGroupPoliciesByAdminResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_group_policies()->MergeFrom(from._internal_group_policies());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupPoliciesByAdminResponse::CopyFrom(const QueryGroupPoliciesByAdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupPoliciesByAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupPoliciesByAdminResponse::IsInitialized() const {
  return true;
}

void QueryGroupPoliciesByAdminResponse::InternalSwap(QueryGroupPoliciesByAdminResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_group_policies()->InternalSwap(other->_internal_mutable_group_policies());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupPoliciesByAdminResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryProposalRequest::_Internal {
 public:
};

QueryProposalRequest::QueryProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryProposalRequest)
}
QueryProposalRequest::QueryProposalRequest(const QueryProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryProposalRequest)
}

inline void QueryProposalRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryProposalRequest::~QueryProposalRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryProposalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProposalRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryProposalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryProposalRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProposalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProposalRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryProposalRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryProposalRequest)
  return target;
}

::size_t QueryProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryProposalRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProposalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProposalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProposalRequest::GetClassData() const { return &_class_data_; }


void QueryProposalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProposalRequest*>(&to_msg);
  auto& from = static_cast<const QueryProposalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryProposalRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProposalRequest::CopyFrom(const QueryProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProposalRequest::IsInitialized() const {
  return true;
}

void QueryProposalRequest::InternalSwap(QueryProposalRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProposalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryProposalResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryProposalResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryProposalResponse, _impl_._has_bits_);
  static const ::cosmos::group::v1::Proposal& proposal(const QueryProposalResponse* msg);
  static void set_has_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::group::v1::Proposal&
QueryProposalResponse::_Internal::proposal(const QueryProposalResponse* msg) {
  return *msg->_impl_.proposal_;
}
void QueryProposalResponse::clear_proposal() {
  if (_impl_.proposal_ != nullptr) _impl_.proposal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryProposalResponse::QueryProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryProposalResponse)
}
QueryProposalResponse::QueryProposalResponse(const QueryProposalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProposalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proposal_ = new ::cosmos::group::v1::Proposal(*from._impl_.proposal_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryProposalResponse)
}

inline void QueryProposalResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}
  };
}

QueryProposalResponse::~QueryProposalResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryProposalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProposalResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.proposal_;
}

void QueryProposalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryProposalResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proposal_ != nullptr);
    _impl_.proposal_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProposalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.group.v1.Proposal proposal = 1 [json_name = "proposal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProposalResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryProposalResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.group.v1.Proposal proposal = 1 [json_name = "proposal"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::proposal(this),
        _Internal::proposal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryProposalResponse)
  return target;
}

::size_t QueryProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryProposalResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.group.v1.Proposal proposal = 1 [json_name = "proposal"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProposalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProposalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProposalResponse::GetClassData() const { return &_class_data_; }


void QueryProposalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProposalResponse*>(&to_msg);
  auto& from = static_cast<const QueryProposalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryProposalResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proposal()->::cosmos::group::v1::Proposal::MergeFrom(
        from._internal_proposal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProposalResponse::CopyFrom(const QueryProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProposalResponse::IsInitialized() const {
  return true;
}

void QueryProposalResponse::InternalSwap(QueryProposalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.proposal_, other->_impl_.proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProposalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[13]);
}
// ===================================================================

class QueryProposalsByGroupPolicyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryProposalsByGroupPolicyRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryProposalsByGroupPolicyRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryProposalsByGroupPolicyRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryProposalsByGroupPolicyRequest::_Internal::pagination(const QueryProposalsByGroupPolicyRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryProposalsByGroupPolicyRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryProposalsByGroupPolicyRequest::QueryProposalsByGroupPolicyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
}
QueryProposalsByGroupPolicyRequest::QueryProposalsByGroupPolicyRequest(const QueryProposalsByGroupPolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProposalsByGroupPolicyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
}

inline void QueryProposalsByGroupPolicyRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryProposalsByGroupPolicyRequest::~QueryProposalsByGroupPolicyRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProposalsByGroupPolicyRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryProposalsByGroupPolicyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProposalsByGroupPolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProposalsByGroupPolicyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.QueryProposalsByGroupPolicyRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProposalsByGroupPolicyRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.QueryProposalsByGroupPolicyRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
  return target;
}

::size_t QueryProposalsByGroupPolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProposalsByGroupPolicyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProposalsByGroupPolicyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProposalsByGroupPolicyRequest::GetClassData() const { return &_class_data_; }


void QueryProposalsByGroupPolicyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProposalsByGroupPolicyRequest*>(&to_msg);
  auto& from = static_cast<const QueryProposalsByGroupPolicyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProposalsByGroupPolicyRequest::CopyFrom(const QueryProposalsByGroupPolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryProposalsByGroupPolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProposalsByGroupPolicyRequest::IsInitialized() const {
  return true;
}

void QueryProposalsByGroupPolicyRequest::InternalSwap(QueryProposalsByGroupPolicyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProposalsByGroupPolicyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[14]);
}
// ===================================================================

class QueryProposalsByGroupPolicyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryProposalsByGroupPolicyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryProposalsByGroupPolicyResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryProposalsByGroupPolicyResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryProposalsByGroupPolicyResponse::_Internal::pagination(const QueryProposalsByGroupPolicyResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryProposalsByGroupPolicyResponse::clear_proposals() {
  _internal_mutable_proposals()->Clear();
}
void QueryProposalsByGroupPolicyResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryProposalsByGroupPolicyResponse::QueryProposalsByGroupPolicyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
}
QueryProposalsByGroupPolicyResponse::QueryProposalsByGroupPolicyResponse(const QueryProposalsByGroupPolicyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryProposalsByGroupPolicyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposals_){from._impl_.proposals_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
}

inline void QueryProposalsByGroupPolicyResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposals_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryProposalsByGroupPolicyResponse::~QueryProposalsByGroupPolicyResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryProposalsByGroupPolicyResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_proposals()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryProposalsByGroupPolicyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryProposalsByGroupPolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_proposals()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryProposalsByGroupPolicyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.group.v1.Proposal proposals = 1 [json_name = "proposals"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryProposalsByGroupPolicyResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.Proposal proposals = 1 [json_name = "proposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
  return target;
}

::size_t QueryProposalsByGroupPolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.Proposal proposals = 1 [json_name = "proposals"];
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->_internal_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryProposalsByGroupPolicyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryProposalsByGroupPolicyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryProposalsByGroupPolicyResponse::GetClassData() const { return &_class_data_; }


void QueryProposalsByGroupPolicyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryProposalsByGroupPolicyResponse*>(&to_msg);
  auto& from = static_cast<const QueryProposalsByGroupPolicyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proposals()->MergeFrom(from._internal_proposals());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryProposalsByGroupPolicyResponse::CopyFrom(const QueryProposalsByGroupPolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryProposalsByGroupPolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProposalsByGroupPolicyResponse::IsInitialized() const {
  return true;
}

void QueryProposalsByGroupPolicyResponse::InternalSwap(QueryProposalsByGroupPolicyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_proposals()->InternalSwap(other->_internal_mutable_proposals());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProposalsByGroupPolicyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[15]);
}
// ===================================================================

class QueryVoteByProposalVoterRequest::_Internal {
 public:
};

QueryVoteByProposalVoterRequest::QueryVoteByProposalVoterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryVoteByProposalVoterRequest)
}
QueryVoteByProposalVoterRequest::QueryVoteByProposalVoterRequest(const QueryVoteByProposalVoterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVoteByProposalVoterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.voter_) {}

    , decltype(_impl_.proposal_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voter().empty()) {
    _this->_impl_.voter_.Set(from._internal_voter(), _this->GetArenaForAllocation());
  }
  _this->_impl_.proposal_id_ = from._impl_.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryVoteByProposalVoterRequest)
}

inline void QueryVoteByProposalVoterRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.voter_) {}

    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryVoteByProposalVoterRequest::~QueryVoteByProposalVoterRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryVoteByProposalVoterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVoteByProposalVoterRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voter_.Destroy();
}

void QueryVoteByProposalVoterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVoteByProposalVoterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryVoteByProposalVoterRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voter_.ClearToEmpty();
  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVoteByProposalVoterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_voter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.QueryVoteByProposalVoterRequest.voter"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVoteByProposalVoterRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryVoteByProposalVoterRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    const std::string& _s = this->_internal_voter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.QueryVoteByProposalVoterRequest.voter");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryVoteByProposalVoterRequest)
  return target;
}

::size_t QueryVoteByProposalVoterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryVoteByProposalVoterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_voter());
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVoteByProposalVoterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVoteByProposalVoterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVoteByProposalVoterRequest::GetClassData() const { return &_class_data_; }


void QueryVoteByProposalVoterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVoteByProposalVoterRequest*>(&to_msg);
  auto& from = static_cast<const QueryVoteByProposalVoterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryVoteByProposalVoterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_voter().empty()) {
    _this->_internal_set_voter(from._internal_voter());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVoteByProposalVoterRequest::CopyFrom(const QueryVoteByProposalVoterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryVoteByProposalVoterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVoteByProposalVoterRequest::IsInitialized() const {
  return true;
}

void QueryVoteByProposalVoterRequest::InternalSwap(QueryVoteByProposalVoterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voter_, lhs_arena,
                                       &other->_impl_.voter_, rhs_arena);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVoteByProposalVoterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[16]);
}
// ===================================================================

class QueryVoteByProposalVoterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryVoteByProposalVoterResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryVoteByProposalVoterResponse, _impl_._has_bits_);
  static const ::cosmos::group::v1::Vote& vote(const QueryVoteByProposalVoterResponse* msg);
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::group::v1::Vote&
QueryVoteByProposalVoterResponse::_Internal::vote(const QueryVoteByProposalVoterResponse* msg) {
  return *msg->_impl_.vote_;
}
void QueryVoteByProposalVoterResponse::clear_vote() {
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryVoteByProposalVoterResponse::QueryVoteByProposalVoterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryVoteByProposalVoterResponse)
}
QueryVoteByProposalVoterResponse::QueryVoteByProposalVoterResponse(const QueryVoteByProposalVoterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVoteByProposalVoterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vote_ = new ::cosmos::group::v1::Vote(*from._impl_.vote_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryVoteByProposalVoterResponse)
}

inline void QueryVoteByProposalVoterResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_){nullptr}
  };
}

QueryVoteByProposalVoterResponse::~QueryVoteByProposalVoterResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryVoteByProposalVoterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVoteByProposalVoterResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vote_;
}

void QueryVoteByProposalVoterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVoteByProposalVoterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryVoteByProposalVoterResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVoteByProposalVoterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.group.v1.Vote vote = 1 [json_name = "vote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVoteByProposalVoterResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryVoteByProposalVoterResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.group.v1.Vote vote = 1 [json_name = "vote"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vote(this),
        _Internal::vote(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryVoteByProposalVoterResponse)
  return target;
}

::size_t QueryVoteByProposalVoterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryVoteByProposalVoterResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.group.v1.Vote vote = 1 [json_name = "vote"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vote_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVoteByProposalVoterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVoteByProposalVoterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVoteByProposalVoterResponse::GetClassData() const { return &_class_data_; }


void QueryVoteByProposalVoterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVoteByProposalVoterResponse*>(&to_msg);
  auto& from = static_cast<const QueryVoteByProposalVoterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryVoteByProposalVoterResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_vote()->::cosmos::group::v1::Vote::MergeFrom(
        from._internal_vote());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVoteByProposalVoterResponse::CopyFrom(const QueryVoteByProposalVoterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryVoteByProposalVoterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVoteByProposalVoterResponse::IsInitialized() const {
  return true;
}

void QueryVoteByProposalVoterResponse::InternalSwap(QueryVoteByProposalVoterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.vote_, other->_impl_.vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVoteByProposalVoterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[17]);
}
// ===================================================================

class QueryVotesByProposalRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryVotesByProposalRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryVotesByProposalRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryVotesByProposalRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryVotesByProposalRequest::_Internal::pagination(const QueryVotesByProposalRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryVotesByProposalRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryVotesByProposalRequest::QueryVotesByProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryVotesByProposalRequest)
}
QueryVotesByProposalRequest::QueryVotesByProposalRequest(const QueryVotesByProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVotesByProposalRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.proposal_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.proposal_id_ = from._impl_.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryVotesByProposalRequest)
}

inline void QueryVotesByProposalRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

  };
}

QueryVotesByProposalRequest::~QueryVotesByProposalRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryVotesByProposalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVotesByProposalRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryVotesByProposalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVotesByProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryVotesByProposalRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.proposal_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVotesByProposalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVotesByProposalRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryVotesByProposalRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryVotesByProposalRequest)
  return target;
}

::size_t QueryVotesByProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryVotesByProposalRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVotesByProposalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVotesByProposalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVotesByProposalRequest::GetClassData() const { return &_class_data_; }


void QueryVotesByProposalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVotesByProposalRequest*>(&to_msg);
  auto& from = static_cast<const QueryVotesByProposalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryVotesByProposalRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVotesByProposalRequest::CopyFrom(const QueryVotesByProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryVotesByProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVotesByProposalRequest::IsInitialized() const {
  return true;
}

void QueryVotesByProposalRequest::InternalSwap(QueryVotesByProposalRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryVotesByProposalRequest, _impl_.proposal_id_)
      + sizeof(QueryVotesByProposalRequest::_impl_.proposal_id_)
      - PROTOBUF_FIELD_OFFSET(QueryVotesByProposalRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVotesByProposalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[18]);
}
// ===================================================================

class QueryVotesByProposalResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryVotesByProposalResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryVotesByProposalResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryVotesByProposalResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryVotesByProposalResponse::_Internal::pagination(const QueryVotesByProposalResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryVotesByProposalResponse::clear_votes() {
  _internal_mutable_votes()->Clear();
}
void QueryVotesByProposalResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryVotesByProposalResponse::QueryVotesByProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryVotesByProposalResponse)
}
QueryVotesByProposalResponse::QueryVotesByProposalResponse(const QueryVotesByProposalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVotesByProposalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.votes_){from._impl_.votes_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryVotesByProposalResponse)
}

inline void QueryVotesByProposalResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.votes_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryVotesByProposalResponse::~QueryVotesByProposalResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryVotesByProposalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVotesByProposalResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_votes()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryVotesByProposalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVotesByProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryVotesByProposalResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_votes()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVotesByProposalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVotesByProposalResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryVotesByProposalResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryVotesByProposalResponse)
  return target;
}

::size_t QueryVotesByProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryVotesByProposalResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->_internal_votes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVotesByProposalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVotesByProposalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVotesByProposalResponse::GetClassData() const { return &_class_data_; }


void QueryVotesByProposalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVotesByProposalResponse*>(&to_msg);
  auto& from = static_cast<const QueryVotesByProposalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryVotesByProposalResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_votes()->MergeFrom(from._internal_votes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVotesByProposalResponse::CopyFrom(const QueryVotesByProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryVotesByProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVotesByProposalResponse::IsInitialized() const {
  return true;
}

void QueryVotesByProposalResponse::InternalSwap(QueryVotesByProposalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_votes()->InternalSwap(other->_internal_mutable_votes());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVotesByProposalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[19]);
}
// ===================================================================

class QueryVotesByVoterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryVotesByVoterRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryVotesByVoterRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryVotesByVoterRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryVotesByVoterRequest::_Internal::pagination(const QueryVotesByVoterRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryVotesByVoterRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryVotesByVoterRequest::QueryVotesByVoterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryVotesByVoterRequest)
}
QueryVotesByVoterRequest::QueryVotesByVoterRequest(const QueryVotesByVoterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVotesByVoterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voter_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voter().empty()) {
    _this->_impl_.voter_.Set(from._internal_voter(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryVotesByVoterRequest)
}

inline void QueryVotesByVoterRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voter_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryVotesByVoterRequest::~QueryVotesByVoterRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryVotesByVoterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVotesByVoterRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.voter_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryVotesByVoterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVotesByVoterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryVotesByVoterRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.voter_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVotesByVoterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string voter = 1 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_voter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.QueryVotesByVoterRequest.voter"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVotesByVoterRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryVotesByVoterRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string voter = 1 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    const std::string& _s = this->_internal_voter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.QueryVotesByVoterRequest.voter");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryVotesByVoterRequest)
  return target;
}

::size_t QueryVotesByVoterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryVotesByVoterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voter = 1 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_voter());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVotesByVoterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVotesByVoterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVotesByVoterRequest::GetClassData() const { return &_class_data_; }


void QueryVotesByVoterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVotesByVoterRequest*>(&to_msg);
  auto& from = static_cast<const QueryVotesByVoterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryVotesByVoterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_voter().empty()) {
    _this->_internal_set_voter(from._internal_voter());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVotesByVoterRequest::CopyFrom(const QueryVotesByVoterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryVotesByVoterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVotesByVoterRequest::IsInitialized() const {
  return true;
}

void QueryVotesByVoterRequest::InternalSwap(QueryVotesByVoterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voter_, lhs_arena,
                                       &other->_impl_.voter_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVotesByVoterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[20]);
}
// ===================================================================

class QueryVotesByVoterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryVotesByVoterResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryVotesByVoterResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryVotesByVoterResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryVotesByVoterResponse::_Internal::pagination(const QueryVotesByVoterResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryVotesByVoterResponse::clear_votes() {
  _internal_mutable_votes()->Clear();
}
void QueryVotesByVoterResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryVotesByVoterResponse::QueryVotesByVoterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryVotesByVoterResponse)
}
QueryVotesByVoterResponse::QueryVotesByVoterResponse(const QueryVotesByVoterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryVotesByVoterResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.votes_){from._impl_.votes_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryVotesByVoterResponse)
}

inline void QueryVotesByVoterResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.votes_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryVotesByVoterResponse::~QueryVotesByVoterResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryVotesByVoterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryVotesByVoterResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_votes()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryVotesByVoterResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryVotesByVoterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryVotesByVoterResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_votes()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryVotesByVoterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryVotesByVoterResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryVotesByVoterResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryVotesByVoterResponse)
  return target;
}

::size_t QueryVotesByVoterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryVotesByVoterResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.Vote votes = 1 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->_internal_votes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryVotesByVoterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryVotesByVoterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryVotesByVoterResponse::GetClassData() const { return &_class_data_; }


void QueryVotesByVoterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryVotesByVoterResponse*>(&to_msg);
  auto& from = static_cast<const QueryVotesByVoterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryVotesByVoterResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_votes()->MergeFrom(from._internal_votes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryVotesByVoterResponse::CopyFrom(const QueryVotesByVoterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryVotesByVoterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVotesByVoterResponse::IsInitialized() const {
  return true;
}

void QueryVotesByVoterResponse::InternalSwap(QueryVotesByVoterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_votes()->InternalSwap(other->_internal_mutable_votes());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryVotesByVoterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[21]);
}
// ===================================================================

class QueryGroupsByMemberRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupsByMemberRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupsByMemberRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryGroupsByMemberRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryGroupsByMemberRequest::_Internal::pagination(const QueryGroupsByMemberRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupsByMemberRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupsByMemberRequest::QueryGroupsByMemberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupsByMemberRequest)
}
QueryGroupsByMemberRequest::QueryGroupsByMemberRequest(const QueryGroupsByMemberRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupsByMemberRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupsByMemberRequest)
}

inline void QueryGroupsByMemberRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryGroupsByMemberRequest::~QueryGroupsByMemberRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupsByMemberRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupsByMemberRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupsByMemberRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupsByMemberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupsByMemberRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupsByMemberRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.QueryGroupsByMemberRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupsByMemberRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupsByMemberRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.QueryGroupsByMemberRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupsByMemberRequest)
  return target;
}

::size_t QueryGroupsByMemberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupsByMemberRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupsByMemberRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupsByMemberRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupsByMemberRequest::GetClassData() const { return &_class_data_; }


void QueryGroupsByMemberRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupsByMemberRequest*>(&to_msg);
  auto& from = static_cast<const QueryGroupsByMemberRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupsByMemberRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupsByMemberRequest::CopyFrom(const QueryGroupsByMemberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupsByMemberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupsByMemberRequest::IsInitialized() const {
  return true;
}

void QueryGroupsByMemberRequest::InternalSwap(QueryGroupsByMemberRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupsByMemberRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[22]);
}
// ===================================================================

class QueryGroupsByMemberResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryGroupsByMemberResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryGroupsByMemberResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryGroupsByMemberResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryGroupsByMemberResponse::_Internal::pagination(const QueryGroupsByMemberResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryGroupsByMemberResponse::clear_groups() {
  _internal_mutable_groups()->Clear();
}
void QueryGroupsByMemberResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryGroupsByMemberResponse::QueryGroupsByMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryGroupsByMemberResponse)
}
QueryGroupsByMemberResponse::QueryGroupsByMemberResponse(const QueryGroupsByMemberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGroupsByMemberResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groups_){from._impl_.groups_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryGroupsByMemberResponse)
}

inline void QueryGroupsByMemberResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.groups_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryGroupsByMemberResponse::~QueryGroupsByMemberResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryGroupsByMemberResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGroupsByMemberResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_groups()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryGroupsByMemberResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGroupsByMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryGroupsByMemberResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groups()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGroupsByMemberResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGroupsByMemberResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryGroupsByMemberResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryGroupsByMemberResponse)
  return target;
}

::size_t QueryGroupsByMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryGroupsByMemberResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupInfo groups = 1 [json_name = "groups"];
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_internal_groups()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGroupsByMemberResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGroupsByMemberResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGroupsByMemberResponse::GetClassData() const { return &_class_data_; }


void QueryGroupsByMemberResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGroupsByMemberResponse*>(&to_msg);
  auto& from = static_cast<const QueryGroupsByMemberResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryGroupsByMemberResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groups()->MergeFrom(from._internal_groups());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGroupsByMemberResponse::CopyFrom(const QueryGroupsByMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryGroupsByMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGroupsByMemberResponse::IsInitialized() const {
  return true;
}

void QueryGroupsByMemberResponse::InternalSwap(QueryGroupsByMemberResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_groups()->InternalSwap(other->_internal_mutable_groups());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGroupsByMemberResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[23]);
}
// ===================================================================

class QueryTallyResultRequest::_Internal {
 public:
};

QueryTallyResultRequest::QueryTallyResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryTallyResultRequest)
}
QueryTallyResultRequest::QueryTallyResultRequest(const QueryTallyResultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryTallyResultRequest)
}

inline void QueryTallyResultRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTallyResultRequest::~QueryTallyResultRequest() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryTallyResultRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTallyResultRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryTallyResultRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTallyResultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryTallyResultRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTallyResultRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTallyResultRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryTallyResultRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryTallyResultRequest)
  return target;
}

::size_t QueryTallyResultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryTallyResultRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTallyResultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTallyResultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTallyResultRequest::GetClassData() const { return &_class_data_; }


void QueryTallyResultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTallyResultRequest*>(&to_msg);
  auto& from = static_cast<const QueryTallyResultRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryTallyResultRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTallyResultRequest::CopyFrom(const QueryTallyResultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryTallyResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTallyResultRequest::IsInitialized() const {
  return true;
}

void QueryTallyResultRequest::InternalSwap(QueryTallyResultRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTallyResultRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[24]);
}
// ===================================================================

class QueryTallyResultResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryTallyResultResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryTallyResultResponse, _impl_._has_bits_);
  static const ::cosmos::group::v1::TallyResult& tally(const QueryTallyResultResponse* msg);
  static void set_has_tally(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::group::v1::TallyResult&
QueryTallyResultResponse::_Internal::tally(const QueryTallyResultResponse* msg) {
  return *msg->_impl_.tally_;
}
void QueryTallyResultResponse::clear_tally() {
  if (_impl_.tally_ != nullptr) _impl_.tally_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryTallyResultResponse::QueryTallyResultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.QueryTallyResultResponse)
}
QueryTallyResultResponse::QueryTallyResultResponse(const QueryTallyResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTallyResultResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tally_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tally_ = new ::cosmos::group::v1::TallyResult(*from._impl_.tally_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.QueryTallyResultResponse)
}

inline void QueryTallyResultResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tally_){nullptr}
  };
}

QueryTallyResultResponse::~QueryTallyResultResponse() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.QueryTallyResultResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTallyResultResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tally_;
}

void QueryTallyResultResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTallyResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.QueryTallyResultResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.tally_ != nullptr);
    _impl_.tally_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTallyResultResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.group.v1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tally(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTallyResultResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.QueryTallyResultResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.group.v1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tally(this),
        _Internal::tally(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.QueryTallyResultResponse)
  return target;
}

::size_t QueryTallyResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.QueryTallyResultResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.group.v1.TallyResult tally = 1 [json_name = "tally", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tally_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTallyResultResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTallyResultResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTallyResultResponse::GetClassData() const { return &_class_data_; }


void QueryTallyResultResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTallyResultResponse*>(&to_msg);
  auto& from = static_cast<const QueryTallyResultResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.QueryTallyResultResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_tally()->::cosmos::group::v1::TallyResult::MergeFrom(
        from._internal_tally());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTallyResultResponse::CopyFrom(const QueryTallyResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.QueryTallyResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTallyResultResponse::IsInitialized() const {
  return true;
}

void QueryTallyResultResponse::InternalSwap(QueryTallyResultResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.tally_, other->_impl_.tally_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTallyResultResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fquery_2eproto[25]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupInfoRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupInfoResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupPolicyInfoRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupPolicyInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupPolicyInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupPolicyInfoResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupPolicyInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupPolicyInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupMembersRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupMembersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupMembersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupMembersResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupMembersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupsByAdminRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupsByAdminRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupsByAdminRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupsByAdminResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupsByAdminResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupsByAdminResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupPoliciesByGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupPoliciesByGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupPoliciesByAdminRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupPoliciesByAdminResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryProposalRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryProposalResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryProposalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryProposalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryProposalsByGroupPolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryProposalsByGroupPolicyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryVoteByProposalVoterRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryVoteByProposalVoterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryVoteByProposalVoterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryVoteByProposalVoterResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryVoteByProposalVoterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryVoteByProposalVoterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryVotesByProposalRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryVotesByProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryVotesByProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryVotesByProposalResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryVotesByProposalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryVotesByProposalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryVotesByVoterRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryVotesByVoterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryVotesByVoterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryVotesByVoterResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryVotesByVoterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryVotesByVoterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupsByMemberRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupsByMemberRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupsByMemberRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryGroupsByMemberResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryGroupsByMemberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryGroupsByMemberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryTallyResultRequest*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryTallyResultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryTallyResultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::QueryTallyResultResponse*
Arena::CreateMaybeMessage< ::cosmos::group::v1::QueryTallyResultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::QueryTallyResultResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

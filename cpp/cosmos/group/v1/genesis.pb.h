// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/group/v1/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgroup_2fv1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgroup_2fv1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto;
namespace cosmos {
namespace group {
namespace v1 {
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::group::v1::GenesisState* Arena::CreateMaybeMessage<::cosmos::group::v1::GenesisState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace group {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 2,
    kGroupMembersFieldNumber = 3,
    kGroupPoliciesFieldNumber = 5,
    kProposalsFieldNumber = 7,
    kVotesFieldNumber = 8,
    kGroupSeqFieldNumber = 1,
    kGroupPolicySeqFieldNumber = 4,
    kProposalSeqFieldNumber = 6,
  };
  // repeated .cosmos.group.v1.GroupInfo groups = 2 [json_name = "groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;

  public:
  void clear_groups() ;
  ::cosmos::group::v1::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >*
      mutable_groups();
  private:
  const ::cosmos::group::v1::GroupInfo& _internal_groups(int index) const;
  ::cosmos::group::v1::GroupInfo* _internal_add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>& _internal_groups() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>* _internal_mutable_groups();
  public:
  const ::cosmos::group::v1::GroupInfo& groups(int index) const;
  ::cosmos::group::v1::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >&
      groups() const;
  // repeated .cosmos.group.v1.GroupMember group_members = 3 [json_name = "groupMembers"];
  int group_members_size() const;
  private:
  int _internal_group_members_size() const;

  public:
  void clear_group_members() ;
  ::cosmos::group::v1::GroupMember* mutable_group_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember >*
      mutable_group_members();
  private:
  const ::cosmos::group::v1::GroupMember& _internal_group_members(int index) const;
  ::cosmos::group::v1::GroupMember* _internal_add_group_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupMember>& _internal_group_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupMember>* _internal_mutable_group_members();
  public:
  const ::cosmos::group::v1::GroupMember& group_members(int index) const;
  ::cosmos::group::v1::GroupMember* add_group_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember >&
      group_members() const;
  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 5 [json_name = "groupPolicies"];
  int group_policies_size() const;
  private:
  int _internal_group_policies_size() const;

  public:
  void clear_group_policies() ;
  ::cosmos::group::v1::GroupPolicyInfo* mutable_group_policies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >*
      mutable_group_policies();
  private:
  const ::cosmos::group::v1::GroupPolicyInfo& _internal_group_policies(int index) const;
  ::cosmos::group::v1::GroupPolicyInfo* _internal_add_group_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>& _internal_group_policies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>* _internal_mutable_group_policies();
  public:
  const ::cosmos::group::v1::GroupPolicyInfo& group_policies(int index) const;
  ::cosmos::group::v1::GroupPolicyInfo* add_group_policies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >&
      group_policies() const;
  // repeated .cosmos.group.v1.Proposal proposals = 7 [json_name = "proposals"];
  int proposals_size() const;
  private:
  int _internal_proposals_size() const;

  public:
  void clear_proposals() ;
  ::cosmos::group::v1::Proposal* mutable_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal >*
      mutable_proposals();
  private:
  const ::cosmos::group::v1::Proposal& _internal_proposals(int index) const;
  ::cosmos::group::v1::Proposal* _internal_add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Proposal>& _internal_proposals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Proposal>* _internal_mutable_proposals();
  public:
  const ::cosmos::group::v1::Proposal& proposals(int index) const;
  ::cosmos::group::v1::Proposal* add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal >&
      proposals() const;
  // repeated .cosmos.group.v1.Vote votes = 8 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;

  public:
  void clear_votes() ;
  ::cosmos::group::v1::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >*
      mutable_votes();
  private:
  const ::cosmos::group::v1::Vote& _internal_votes(int index) const;
  ::cosmos::group::v1::Vote* _internal_add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>& _internal_votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>* _internal_mutable_votes();
  public:
  const ::cosmos::group::v1::Vote& votes(int index) const;
  ::cosmos::group::v1::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >&
      votes() const;
  // uint64 group_seq = 1 [json_name = "groupSeq"];
  void clear_group_seq() ;
  ::uint64_t group_seq() const;
  void set_group_seq(::uint64_t value);

  private:
  ::uint64_t _internal_group_seq() const;
  void _internal_set_group_seq(::uint64_t value);

  public:
  // uint64 group_policy_seq = 4 [json_name = "groupPolicySeq"];
  void clear_group_policy_seq() ;
  ::uint64_t group_policy_seq() const;
  void set_group_policy_seq(::uint64_t value);

  private:
  ::uint64_t _internal_group_policy_seq() const;
  void _internal_set_group_policy_seq(::uint64_t value);

  public:
  // uint64 proposal_seq = 6 [json_name = "proposalSeq"];
  void clear_proposal_seq() ;
  ::uint64_t proposal_seq() const;
  void set_proposal_seq(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_seq() const;
  void _internal_set_proposal_seq(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo > groups_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember > group_members_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo > group_policies_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal > proposals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote > votes_;
    ::uint64_t group_seq_;
    ::uint64_t group_policy_seq_;
    ::uint64_t proposal_seq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// uint64 group_seq = 1 [json_name = "groupSeq"];
inline void GenesisState::clear_group_seq() {
  _impl_.group_seq_ = ::uint64_t{0u};
}
inline ::uint64_t GenesisState::group_seq() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GenesisState.group_seq)
  return _internal_group_seq();
}
inline void GenesisState::set_group_seq(::uint64_t value) {
  _internal_set_group_seq(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GenesisState.group_seq)
}
inline ::uint64_t GenesisState::_internal_group_seq() const {
  return _impl_.group_seq_;
}
inline void GenesisState::_internal_set_group_seq(::uint64_t value) {
  ;
  _impl_.group_seq_ = value;
}

// repeated .cosmos.group.v1.GroupInfo groups = 2 [json_name = "groups"];
inline int GenesisState::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int GenesisState::groups_size() const {
  return _internal_groups_size();
}
inline ::cosmos::group::v1::GroupInfo* GenesisState::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GenesisState.groups)
  return _internal_mutable_groups()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >*
GenesisState::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.GenesisState.groups)
  return _internal_mutable_groups();
}
inline const ::cosmos::group::v1::GroupInfo& GenesisState::_internal_groups(int index) const {
  return _internal_groups().Get(index);
}
inline const ::cosmos::group::v1::GroupInfo& GenesisState::groups(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GenesisState.groups)
  return _internal_groups(index);
}
inline ::cosmos::group::v1::GroupInfo* GenesisState::_internal_add_groups() {
  return _internal_mutable_groups()->Add();
}
inline ::cosmos::group::v1::GroupInfo* GenesisState::add_groups() {
  ::cosmos::group::v1::GroupInfo* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.GenesisState.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupInfo >&
GenesisState::groups() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.GenesisState.groups)
  return _internal_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>&
GenesisState::_internal_groups() const {
  return _impl_.groups_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupInfo>*
GenesisState::_internal_mutable_groups() {
  return &_impl_.groups_;
}

// repeated .cosmos.group.v1.GroupMember group_members = 3 [json_name = "groupMembers"];
inline int GenesisState::_internal_group_members_size() const {
  return _impl_.group_members_.size();
}
inline int GenesisState::group_members_size() const {
  return _internal_group_members_size();
}
inline ::cosmos::group::v1::GroupMember* GenesisState::mutable_group_members(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GenesisState.group_members)
  return _internal_mutable_group_members()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember >*
GenesisState::mutable_group_members() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.GenesisState.group_members)
  return _internal_mutable_group_members();
}
inline const ::cosmos::group::v1::GroupMember& GenesisState::_internal_group_members(int index) const {
  return _internal_group_members().Get(index);
}
inline const ::cosmos::group::v1::GroupMember& GenesisState::group_members(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GenesisState.group_members)
  return _internal_group_members(index);
}
inline ::cosmos::group::v1::GroupMember* GenesisState::_internal_add_group_members() {
  return _internal_mutable_group_members()->Add();
}
inline ::cosmos::group::v1::GroupMember* GenesisState::add_group_members() {
  ::cosmos::group::v1::GroupMember* _add = _internal_add_group_members();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.GenesisState.group_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupMember >&
GenesisState::group_members() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.GenesisState.group_members)
  return _internal_group_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupMember>&
GenesisState::_internal_group_members() const {
  return _impl_.group_members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupMember>*
GenesisState::_internal_mutable_group_members() {
  return &_impl_.group_members_;
}

// uint64 group_policy_seq = 4 [json_name = "groupPolicySeq"];
inline void GenesisState::clear_group_policy_seq() {
  _impl_.group_policy_seq_ = ::uint64_t{0u};
}
inline ::uint64_t GenesisState::group_policy_seq() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GenesisState.group_policy_seq)
  return _internal_group_policy_seq();
}
inline void GenesisState::set_group_policy_seq(::uint64_t value) {
  _internal_set_group_policy_seq(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GenesisState.group_policy_seq)
}
inline ::uint64_t GenesisState::_internal_group_policy_seq() const {
  return _impl_.group_policy_seq_;
}
inline void GenesisState::_internal_set_group_policy_seq(::uint64_t value) {
  ;
  _impl_.group_policy_seq_ = value;
}

// repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 5 [json_name = "groupPolicies"];
inline int GenesisState::_internal_group_policies_size() const {
  return _impl_.group_policies_.size();
}
inline int GenesisState::group_policies_size() const {
  return _internal_group_policies_size();
}
inline ::cosmos::group::v1::GroupPolicyInfo* GenesisState::mutable_group_policies(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GenesisState.group_policies)
  return _internal_mutable_group_policies()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >*
GenesisState::mutable_group_policies() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.GenesisState.group_policies)
  return _internal_mutable_group_policies();
}
inline const ::cosmos::group::v1::GroupPolicyInfo& GenesisState::_internal_group_policies(int index) const {
  return _internal_group_policies().Get(index);
}
inline const ::cosmos::group::v1::GroupPolicyInfo& GenesisState::group_policies(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GenesisState.group_policies)
  return _internal_group_policies(index);
}
inline ::cosmos::group::v1::GroupPolicyInfo* GenesisState::_internal_add_group_policies() {
  return _internal_mutable_group_policies()->Add();
}
inline ::cosmos::group::v1::GroupPolicyInfo* GenesisState::add_group_policies() {
  ::cosmos::group::v1::GroupPolicyInfo* _add = _internal_add_group_policies();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.GenesisState.group_policies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::GroupPolicyInfo >&
GenesisState::group_policies() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.GenesisState.group_policies)
  return _internal_group_policies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>&
GenesisState::_internal_group_policies() const {
  return _impl_.group_policies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::GroupPolicyInfo>*
GenesisState::_internal_mutable_group_policies() {
  return &_impl_.group_policies_;
}

// uint64 proposal_seq = 6 [json_name = "proposalSeq"];
inline void GenesisState::clear_proposal_seq() {
  _impl_.proposal_seq_ = ::uint64_t{0u};
}
inline ::uint64_t GenesisState::proposal_seq() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GenesisState.proposal_seq)
  return _internal_proposal_seq();
}
inline void GenesisState::set_proposal_seq(::uint64_t value) {
  _internal_set_proposal_seq(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.GenesisState.proposal_seq)
}
inline ::uint64_t GenesisState::_internal_proposal_seq() const {
  return _impl_.proposal_seq_;
}
inline void GenesisState::_internal_set_proposal_seq(::uint64_t value) {
  ;
  _impl_.proposal_seq_ = value;
}

// repeated .cosmos.group.v1.Proposal proposals = 7 [json_name = "proposals"];
inline int GenesisState::_internal_proposals_size() const {
  return _impl_.proposals_.size();
}
inline int GenesisState::proposals_size() const {
  return _internal_proposals_size();
}
inline ::cosmos::group::v1::Proposal* GenesisState::mutable_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GenesisState.proposals)
  return _internal_mutable_proposals()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal >*
GenesisState::mutable_proposals() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.GenesisState.proposals)
  return _internal_mutable_proposals();
}
inline const ::cosmos::group::v1::Proposal& GenesisState::_internal_proposals(int index) const {
  return _internal_proposals().Get(index);
}
inline const ::cosmos::group::v1::Proposal& GenesisState::proposals(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GenesisState.proposals)
  return _internal_proposals(index);
}
inline ::cosmos::group::v1::Proposal* GenesisState::_internal_add_proposals() {
  return _internal_mutable_proposals()->Add();
}
inline ::cosmos::group::v1::Proposal* GenesisState::add_proposals() {
  ::cosmos::group::v1::Proposal* _add = _internal_add_proposals();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.GenesisState.proposals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Proposal >&
GenesisState::proposals() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.GenesisState.proposals)
  return _internal_proposals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Proposal>&
GenesisState::_internal_proposals() const {
  return _impl_.proposals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Proposal>*
GenesisState::_internal_mutable_proposals() {
  return &_impl_.proposals_;
}

// repeated .cosmos.group.v1.Vote votes = 8 [json_name = "votes"];
inline int GenesisState::_internal_votes_size() const {
  return _impl_.votes_.size();
}
inline int GenesisState::votes_size() const {
  return _internal_votes_size();
}
inline ::cosmos::group::v1::Vote* GenesisState::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.GenesisState.votes)
  return _internal_mutable_votes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >*
GenesisState::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.group.v1.GenesisState.votes)
  return _internal_mutable_votes();
}
inline const ::cosmos::group::v1::Vote& GenesisState::_internal_votes(int index) const {
  return _internal_votes().Get(index);
}
inline const ::cosmos::group::v1::Vote& GenesisState::votes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.GenesisState.votes)
  return _internal_votes(index);
}
inline ::cosmos::group::v1::Vote* GenesisState::_internal_add_votes() {
  return _internal_mutable_votes()->Add();
}
inline ::cosmos::group::v1::Vote* GenesisState::add_votes() {
  ::cosmos::group::v1::Vote* _add = _internal_add_votes();
  // @@protoc_insertion_point(field_add:cosmos.group.v1.GenesisState.votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::group::v1::Vote >&
GenesisState::votes() const {
  // @@protoc_insertion_point(field_list:cosmos.group.v1.GenesisState.votes)
  return _internal_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>&
GenesisState::_internal_votes() const {
  return _impl_.votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::group::v1::Vote>*
GenesisState::_internal_mutable_votes() {
  return &_impl_.votes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fgenesis_2eproto_2epb_2eh

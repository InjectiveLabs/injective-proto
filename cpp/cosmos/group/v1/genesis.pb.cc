// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/genesis.proto

#include "cosmos/group/v1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace group {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groups_)*/{}
  , /*decltype(_impl_.group_members_)*/{}
  , /*decltype(_impl_.group_policies_)*/{}
  , /*decltype(_impl_.proposals_)*/{}
  , /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_.group_seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.group_policy_seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.proposal_seq_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fgroup_2fv1_2fgenesis_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fgroup_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fgroup_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fgroup_2fv1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _impl_.group_seq_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _impl_.groups_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _impl_.group_members_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _impl_.group_policy_seq_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _impl_.group_policies_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _impl_.proposal_seq_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _impl_.proposals_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::GenesisState, _impl_.votes_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::group::v1::GenesisState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::group::v1::_GenesisState_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fgroup_2fv1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035cosmos/group/v1/genesis.proto\022\017cosmos."
    "group.v1\032\033cosmos/group/v1/types.proto\"\236\003"
    "\n\014GenesisState\022\033\n\tgroup_seq\030\001 \001(\004R\010group"
    "Seq\0222\n\006groups\030\002 \003(\0132\032.cosmos.group.v1.Gr"
    "oupInfoR\006groups\022A\n\rgroup_members\030\003 \003(\0132\034"
    ".cosmos.group.v1.GroupMemberR\014groupMembe"
    "rs\022(\n\020group_policy_seq\030\004 \001(\004R\016groupPolic"
    "ySeq\022G\n\016group_policies\030\005 \003(\0132 .cosmos.gr"
    "oup.v1.GroupPolicyInfoR\rgroupPolicies\022!\n"
    "\014proposal_seq\030\006 \001(\004R\013proposalSeq\0227\n\tprop"
    "osals\030\007 \003(\0132\031.cosmos.group.v1.ProposalR\t"
    "proposals\022+\n\005votes\030\010 \003(\0132\025.cosmos.group."
    "v1.VoteR\005votesB\247\001\n\023com.cosmos.group.v1B\014"
    "GenesisProtoP\001Z$github.com/cosmos/cosmos"
    "-sdk/x/group\242\002\003CGX\252\002\017Cosmos.Group.V1\312\002\017C"
    "osmos\\Group\\V1\342\002\033Cosmos\\Group\\V1\\GPBMeta"
    "data\352\002\021Cosmos::Group::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto_deps[1] =
    {
        &::descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto = {
    false,
    false,
    672,
    descriptor_table_protodef_cosmos_2fgroup_2fv1_2fgenesis_2eproto,
    "cosmos/group/v1/genesis.proto",
    &descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto_once,
    descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fgroup_2fv1_2fgenesis_2eproto::offsets,
    file_level_metadata_cosmos_2fgroup_2fv1_2fgenesis_2eproto,
    file_level_enum_descriptors_cosmos_2fgroup_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_cosmos_2fgroup_2fv1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto_getter() {
  return &descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fgroup_2fv1_2fgenesis_2eproto(&descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto);
namespace cosmos {
namespace group {
namespace v1 {
// ===================================================================

class GenesisState::_Internal {
 public:
};

void GenesisState::clear_groups() {
  _internal_mutable_groups()->Clear();
}
void GenesisState::clear_group_members() {
  _internal_mutable_group_members()->Clear();
}
void GenesisState::clear_group_policies() {
  _internal_mutable_group_policies()->Clear();
}
void GenesisState::clear_proposals() {
  _internal_mutable_proposals()->Clear();
}
void GenesisState::clear_votes() {
  _internal_mutable_votes()->Clear();
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){from._impl_.groups_}
    , decltype(_impl_.group_members_){from._impl_.group_members_}
    , decltype(_impl_.group_policies_){from._impl_.group_policies_}
    , decltype(_impl_.proposals_){from._impl_.proposals_}
    , decltype(_impl_.votes_){from._impl_.votes_}
    , decltype(_impl_.group_seq_) {}

    , decltype(_impl_.group_policy_seq_) {}

    , decltype(_impl_.proposal_seq_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.group_seq_, &from._impl_.group_seq_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.proposal_seq_) -
    reinterpret_cast<char*>(&_impl_.group_seq_)) + sizeof(_impl_.proposal_seq_));
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.groups_){arena}
    , decltype(_impl_.group_members_){arena}
    , decltype(_impl_.group_policies_){arena}
    , decltype(_impl_.proposals_){arena}
    , decltype(_impl_.votes_){arena}
    , decltype(_impl_.group_seq_) { ::uint64_t{0u} }

    , decltype(_impl_.group_policy_seq_) { ::uint64_t{0u} }

    , decltype(_impl_.proposal_seq_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_groups()->~RepeatedPtrField();
  _internal_mutable_group_members()->~RepeatedPtrField();
  _internal_mutable_group_policies()->~RepeatedPtrField();
  _internal_mutable_proposals()->~RepeatedPtrField();
  _internal_mutable_votes()->~RepeatedPtrField();
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_groups()->Clear();
  _internal_mutable_group_members()->Clear();
  _internal_mutable_group_policies()->Clear();
  _internal_mutable_proposals()->Clear();
  _internal_mutable_votes()->Clear();
  ::memset(&_impl_.group_seq_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.proposal_seq_) -
      reinterpret_cast<char*>(&_impl_.group_seq_)) + sizeof(_impl_.proposal_seq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_seq = 1 [json_name = "groupSeq"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.group_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.group.v1.GroupInfo groups = 2 [json_name = "groups"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.group.v1.GroupMember group_members = 3 [json_name = "groupMembers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 group_policy_seq = 4 [json_name = "groupPolicySeq"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.group_policy_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 5 [json_name = "groupPolicies"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_group_policies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 proposal_seq = 6 [json_name = "proposalSeq"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.proposal_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.group.v1.Proposal proposals = 7 [json_name = "proposals"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.group.v1.Vote votes = 8 [json_name = "votes"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_seq = 1 [json_name = "groupSeq"];
  if (this->_internal_group_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_group_seq(), target);
  }

  // repeated .cosmos.group.v1.GroupInfo groups = 2 [json_name = "groups"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.group.v1.GroupMember group_members = 3 [json_name = "groupMembers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 group_policy_seq = 4 [json_name = "groupPolicySeq"];
  if (this->_internal_group_policy_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_group_policy_seq(), target);
  }

  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 5 [json_name = "groupPolicies"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_group_policies_size()); i < n; i++) {
    const auto& repfield = this->_internal_group_policies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 proposal_seq = 6 [json_name = "proposalSeq"];
  if (this->_internal_proposal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_proposal_seq(), target);
  }

  // repeated .cosmos.group.v1.Proposal proposals = 7 [json_name = "proposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.group.v1.Vote votes = 8 [json_name = "votes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.group.v1.GroupInfo groups = 2 [json_name = "groups"];
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->_internal_groups()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.group.v1.GroupMember group_members = 3 [json_name = "groupMembers"];
  total_size += 1UL * this->_internal_group_members_size();
  for (const auto& msg : this->_internal_group_members()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.group.v1.GroupPolicyInfo group_policies = 5 [json_name = "groupPolicies"];
  total_size += 1UL * this->_internal_group_policies_size();
  for (const auto& msg : this->_internal_group_policies()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.group.v1.Proposal proposals = 7 [json_name = "proposals"];
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->_internal_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.group.v1.Vote votes = 8 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->_internal_votes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 group_seq = 1 [json_name = "groupSeq"];
  if (this->_internal_group_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_seq());
  }

  // uint64 group_policy_seq = 4 [json_name = "groupPolicySeq"];
  if (this->_internal_group_policy_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_policy_seq());
  }

  // uint64 proposal_seq = 6 [json_name = "proposalSeq"];
  if (this->_internal_proposal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_groups()->MergeFrom(from._internal_groups());
  _this->_internal_mutable_group_members()->MergeFrom(from._internal_group_members());
  _this->_internal_mutable_group_policies()->MergeFrom(from._internal_group_policies());
  _this->_internal_mutable_proposals()->MergeFrom(from._internal_proposals());
  _this->_internal_mutable_votes()->MergeFrom(from._internal_votes());
  if (from._internal_group_seq() != 0) {
    _this->_internal_set_group_seq(from._internal_group_seq());
  }
  if (from._internal_group_policy_seq() != 0) {
    _this->_internal_set_group_policy_seq(from._internal_group_policy_seq());
  }
  if (from._internal_proposal_seq() != 0) {
    _this->_internal_set_proposal_seq(from._internal_proposal_seq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_groups()->InternalSwap(other->_internal_mutable_groups());
  _internal_mutable_group_members()->InternalSwap(other->_internal_mutable_group_members());
  _internal_mutable_group_policies()->InternalSwap(other->_internal_mutable_group_policies());
  _internal_mutable_proposals()->InternalSwap(other->_internal_mutable_proposals());
  _internal_mutable_votes()->InternalSwap(other->_internal_mutable_votes());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.proposal_seq_)
      + sizeof(GenesisState::_impl_.proposal_seq_)
      - PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.group_seq_)>(
          reinterpret_cast<char*>(&_impl_.group_seq_),
          reinterpret_cast<char*>(&other->_impl_.group_seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fgenesis_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::GenesisState*
Arena::CreateMaybeMessage< ::cosmos::group::v1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::GenesisState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

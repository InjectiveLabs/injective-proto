// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/events.proto

#include "cosmos/group/v1/events.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace group {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR EventCreateGroup::EventCreateGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventCreateGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventCreateGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventCreateGroupDefaultTypeInternal() {}
  union {
    EventCreateGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventCreateGroupDefaultTypeInternal _EventCreateGroup_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventUpdateGroup::EventUpdateGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventUpdateGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventUpdateGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventUpdateGroupDefaultTypeInternal() {}
  union {
    EventUpdateGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventUpdateGroupDefaultTypeInternal _EventUpdateGroup_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventCreateGroupPolicy::EventCreateGroupPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventCreateGroupPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventCreateGroupPolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventCreateGroupPolicyDefaultTypeInternal() {}
  union {
    EventCreateGroupPolicy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventCreateGroupPolicyDefaultTypeInternal _EventCreateGroupPolicy_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventUpdateGroupPolicy::EventUpdateGroupPolicy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventUpdateGroupPolicyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventUpdateGroupPolicyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventUpdateGroupPolicyDefaultTypeInternal() {}
  union {
    EventUpdateGroupPolicy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventUpdateGroupPolicyDefaultTypeInternal _EventUpdateGroupPolicy_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventSubmitProposal::EventSubmitProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventSubmitProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventSubmitProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventSubmitProposalDefaultTypeInternal() {}
  union {
    EventSubmitProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventSubmitProposalDefaultTypeInternal _EventSubmitProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventWithdrawProposal::EventWithdrawProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventWithdrawProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventWithdrawProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventWithdrawProposalDefaultTypeInternal() {}
  union {
    EventWithdrawProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventWithdrawProposalDefaultTypeInternal _EventWithdrawProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventVote::EventVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventVoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventVoteDefaultTypeInternal() {}
  union {
    EventVote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventVoteDefaultTypeInternal _EventVote_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventExec::EventExec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logs_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.result_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventExecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventExecDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventExecDefaultTypeInternal() {}
  union {
    EventExec _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventExecDefaultTypeInternal _EventExec_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventLeaveGroup::EventLeaveGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.group_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventLeaveGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventLeaveGroupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventLeaveGroupDefaultTypeInternal() {}
  union {
    EventLeaveGroup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventLeaveGroupDefaultTypeInternal _EventLeaveGroup_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fgroup_2fv1_2fevents_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fgroup_2fv1_2fevents_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventCreateGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventCreateGroup, _impl_.group_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventUpdateGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventUpdateGroup, _impl_.group_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventCreateGroupPolicy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventCreateGroupPolicy, _impl_.address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventUpdateGroupPolicy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventUpdateGroupPolicy, _impl_.address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventSubmitProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventSubmitProposal, _impl_.proposal_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventWithdrawProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventWithdrawProposal, _impl_.proposal_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventVote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventVote, _impl_.proposal_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventExec, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventExec, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventExec, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventExec, _impl_.logs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventLeaveGroup, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventLeaveGroup, _impl_.group_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::group::v1::EventLeaveGroup, _impl_.address_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::group::v1::EventCreateGroup)},
        { 9, -1, -1, sizeof(::cosmos::group::v1::EventUpdateGroup)},
        { 18, -1, -1, sizeof(::cosmos::group::v1::EventCreateGroupPolicy)},
        { 27, -1, -1, sizeof(::cosmos::group::v1::EventUpdateGroupPolicy)},
        { 36, -1, -1, sizeof(::cosmos::group::v1::EventSubmitProposal)},
        { 45, -1, -1, sizeof(::cosmos::group::v1::EventWithdrawProposal)},
        { 54, -1, -1, sizeof(::cosmos::group::v1::EventVote)},
        { 63, -1, -1, sizeof(::cosmos::group::v1::EventExec)},
        { 74, -1, -1, sizeof(::cosmos::group::v1::EventLeaveGroup)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::group::v1::_EventCreateGroup_default_instance_._instance,
    &::cosmos::group::v1::_EventUpdateGroup_default_instance_._instance,
    &::cosmos::group::v1::_EventCreateGroupPolicy_default_instance_._instance,
    &::cosmos::group::v1::_EventUpdateGroupPolicy_default_instance_._instance,
    &::cosmos::group::v1::_EventSubmitProposal_default_instance_._instance,
    &::cosmos::group::v1::_EventWithdrawProposal_default_instance_._instance,
    &::cosmos::group::v1::_EventVote_default_instance_._instance,
    &::cosmos::group::v1::_EventExec_default_instance_._instance,
    &::cosmos::group::v1::_EventLeaveGroup_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fgroup_2fv1_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034cosmos/group/v1/events.proto\022\017cosmos.g"
    "roup.v1\032\031cosmos_proto/cosmos.proto\032\033cosm"
    "os/group/v1/types.proto\"-\n\020EventCreateGr"
    "oup\022\031\n\010group_id\030\001 \001(\004R\007groupId\"-\n\020EventU"
    "pdateGroup\022\031\n\010group_id\030\001 \001(\004R\007groupId\"L\n"
    "\026EventCreateGroupPolicy\0222\n\007address\030\001 \001(\t"
    "B\030\322\264-\024cosmos.AddressStringR\007address\"L\n\026E"
    "ventUpdateGroupPolicy\0222\n\007address\030\001 \001(\tB\030"
    "\322\264-\024cosmos.AddressStringR\007address\"6\n\023Eve"
    "ntSubmitProposal\022\037\n\013proposal_id\030\001 \001(\004R\np"
    "roposalId\"8\n\025EventWithdrawProposal\022\037\n\013pr"
    "oposal_id\030\001 \001(\004R\nproposalId\",\n\tEventVote"
    "\022\037\n\013proposal_id\030\001 \001(\004R\nproposalId\"\201\001\n\tEv"
    "entExec\022\037\n\013proposal_id\030\001 \001(\004R\nproposalId"
    "\022\?\n\006result\030\002 \001(\0162\'.cosmos.group.v1.Propo"
    "salExecutorResultR\006result\022\022\n\004logs\030\003 \001(\tR"
    "\004logs\"`\n\017EventLeaveGroup\022\031\n\010group_id\030\001 \001"
    "(\004R\007groupId\0222\n\007address\030\002 \001(\tB\030\322\264-\024cosmos"
    ".AddressStringR\007addressB\246\001\n\023com.cosmos.g"
    "roup.v1B\013EventsProtoP\001Z$github.com/cosmo"
    "s/cosmos-sdk/x/group\242\002\003CGX\252\002\017Cosmos.Grou"
    "p.V1\312\002\017Cosmos\\Group\\V1\342\002\033Cosmos\\Group\\V1"
    "\\GPBMetadata\352\002\021Cosmos::Group::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fgroup_2fv1_2ftypes_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto = {
    false,
    false,
    920,
    descriptor_table_protodef_cosmos_2fgroup_2fv1_2fevents_2eproto,
    "cosmos/group/v1/events.proto",
    &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
    descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_deps,
    2,
    9,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto::offsets,
    file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto,
    file_level_enum_descriptors_cosmos_2fgroup_2fv1_2fevents_2eproto,
    file_level_service_descriptors_cosmos_2fgroup_2fv1_2fevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter() {
  return &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fgroup_2fv1_2fevents_2eproto(&descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto);
namespace cosmos {
namespace group {
namespace v1 {
// ===================================================================

class EventCreateGroup::_Internal {
 public:
};

EventCreateGroup::EventCreateGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventCreateGroup)
}
EventCreateGroup::EventCreateGroup(const EventCreateGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventCreateGroup)
}

inline void EventCreateGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.group_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventCreateGroup::~EventCreateGroup() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventCreateGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventCreateGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventCreateGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventCreateGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventCreateGroup)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventCreateGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1 [json_name = "groupId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventCreateGroup::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventCreateGroup)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventCreateGroup)
  return target;
}

::size_t EventCreateGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventCreateGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventCreateGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventCreateGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventCreateGroup::GetClassData() const { return &_class_data_; }


void EventCreateGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventCreateGroup*>(&to_msg);
  auto& from = static_cast<const EventCreateGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventCreateGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventCreateGroup::CopyFrom(const EventCreateGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventCreateGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCreateGroup::IsInitialized() const {
  return true;
}

void EventCreateGroup::InternalSwap(EventCreateGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.group_id_, other->_impl_.group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventCreateGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[0]);
}
// ===================================================================

class EventUpdateGroup::_Internal {
 public:
};

EventUpdateGroup::EventUpdateGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventUpdateGroup)
}
EventUpdateGroup::EventUpdateGroup(const EventUpdateGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventUpdateGroup)
}

inline void EventUpdateGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.group_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventUpdateGroup::~EventUpdateGroup() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventUpdateGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventUpdateGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventUpdateGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventUpdateGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventUpdateGroup)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventUpdateGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1 [json_name = "groupId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventUpdateGroup::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventUpdateGroup)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventUpdateGroup)
  return target;
}

::size_t EventUpdateGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventUpdateGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventUpdateGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventUpdateGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventUpdateGroup::GetClassData() const { return &_class_data_; }


void EventUpdateGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventUpdateGroup*>(&to_msg);
  auto& from = static_cast<const EventUpdateGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventUpdateGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventUpdateGroup::CopyFrom(const EventUpdateGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventUpdateGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUpdateGroup::IsInitialized() const {
  return true;
}

void EventUpdateGroup::InternalSwap(EventUpdateGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.group_id_, other->_impl_.group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventUpdateGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[1]);
}
// ===================================================================

class EventCreateGroupPolicy::_Internal {
 public:
};

EventCreateGroupPolicy::EventCreateGroupPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventCreateGroupPolicy)
}
EventCreateGroupPolicy::EventCreateGroupPolicy(const EventCreateGroupPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventCreateGroupPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventCreateGroupPolicy)
}

inline void EventCreateGroupPolicy::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventCreateGroupPolicy::~EventCreateGroupPolicy() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventCreateGroupPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventCreateGroupPolicy::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void EventCreateGroupPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventCreateGroupPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventCreateGroupPolicy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventCreateGroupPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.EventCreateGroupPolicy.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventCreateGroupPolicy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventCreateGroupPolicy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.EventCreateGroupPolicy.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventCreateGroupPolicy)
  return target;
}

::size_t EventCreateGroupPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventCreateGroupPolicy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventCreateGroupPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventCreateGroupPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventCreateGroupPolicy::GetClassData() const { return &_class_data_; }


void EventCreateGroupPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventCreateGroupPolicy*>(&to_msg);
  auto& from = static_cast<const EventCreateGroupPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventCreateGroupPolicy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventCreateGroupPolicy::CopyFrom(const EventCreateGroupPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventCreateGroupPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCreateGroupPolicy::IsInitialized() const {
  return true;
}

void EventCreateGroupPolicy::InternalSwap(EventCreateGroupPolicy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventCreateGroupPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[2]);
}
// ===================================================================

class EventUpdateGroupPolicy::_Internal {
 public:
};

EventUpdateGroupPolicy::EventUpdateGroupPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventUpdateGroupPolicy)
}
EventUpdateGroupPolicy::EventUpdateGroupPolicy(const EventUpdateGroupPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventUpdateGroupPolicy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventUpdateGroupPolicy)
}

inline void EventUpdateGroupPolicy::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventUpdateGroupPolicy::~EventUpdateGroupPolicy() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventUpdateGroupPolicy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventUpdateGroupPolicy::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void EventUpdateGroupPolicy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventUpdateGroupPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventUpdateGroupPolicy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventUpdateGroupPolicy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.EventUpdateGroupPolicy.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventUpdateGroupPolicy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventUpdateGroupPolicy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.EventUpdateGroupPolicy.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventUpdateGroupPolicy)
  return target;
}

::size_t EventUpdateGroupPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventUpdateGroupPolicy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventUpdateGroupPolicy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventUpdateGroupPolicy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventUpdateGroupPolicy::GetClassData() const { return &_class_data_; }


void EventUpdateGroupPolicy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventUpdateGroupPolicy*>(&to_msg);
  auto& from = static_cast<const EventUpdateGroupPolicy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventUpdateGroupPolicy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventUpdateGroupPolicy::CopyFrom(const EventUpdateGroupPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventUpdateGroupPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUpdateGroupPolicy::IsInitialized() const {
  return true;
}

void EventUpdateGroupPolicy::InternalSwap(EventUpdateGroupPolicy* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventUpdateGroupPolicy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[3]);
}
// ===================================================================

class EventSubmitProposal::_Internal {
 public:
};

EventSubmitProposal::EventSubmitProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventSubmitProposal)
}
EventSubmitProposal::EventSubmitProposal(const EventSubmitProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventSubmitProposal)
}

inline void EventSubmitProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventSubmitProposal::~EventSubmitProposal() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventSubmitProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventSubmitProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventSubmitProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventSubmitProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventSubmitProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSubmitProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventSubmitProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventSubmitProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventSubmitProposal)
  return target;
}

::size_t EventSubmitProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventSubmitProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventSubmitProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventSubmitProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventSubmitProposal::GetClassData() const { return &_class_data_; }


void EventSubmitProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventSubmitProposal*>(&to_msg);
  auto& from = static_cast<const EventSubmitProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventSubmitProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventSubmitProposal::CopyFrom(const EventSubmitProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventSubmitProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSubmitProposal::IsInitialized() const {
  return true;
}

void EventSubmitProposal::InternalSwap(EventSubmitProposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSubmitProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[4]);
}
// ===================================================================

class EventWithdrawProposal::_Internal {
 public:
};

EventWithdrawProposal::EventWithdrawProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventWithdrawProposal)
}
EventWithdrawProposal::EventWithdrawProposal(const EventWithdrawProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventWithdrawProposal)
}

inline void EventWithdrawProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventWithdrawProposal::~EventWithdrawProposal() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventWithdrawProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventWithdrawProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventWithdrawProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventWithdrawProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventWithdrawProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventWithdrawProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventWithdrawProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventWithdrawProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventWithdrawProposal)
  return target;
}

::size_t EventWithdrawProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventWithdrawProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventWithdrawProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventWithdrawProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventWithdrawProposal::GetClassData() const { return &_class_data_; }


void EventWithdrawProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventWithdrawProposal*>(&to_msg);
  auto& from = static_cast<const EventWithdrawProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventWithdrawProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventWithdrawProposal::CopyFrom(const EventWithdrawProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventWithdrawProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventWithdrawProposal::IsInitialized() const {
  return true;
}

void EventWithdrawProposal::InternalSwap(EventWithdrawProposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventWithdrawProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[5]);
}
// ===================================================================

class EventVote::_Internal {
 public:
};

EventVote::EventVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventVote)
}
EventVote::EventVote(const EventVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventVote)
}

inline void EventVote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventVote::~EventVote() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventVote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventVote::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventVote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventVote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventVote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventVote)
  return target;
}

::size_t EventVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventVote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventVote::GetClassData() const { return &_class_data_; }


void EventVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventVote*>(&to_msg);
  auto& from = static_cast<const EventVote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventVote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventVote::CopyFrom(const EventVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventVote::IsInitialized() const {
  return true;
}

void EventVote::InternalSwap(EventVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventVote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[6]);
}
// ===================================================================

class EventExec::_Internal {
 public:
};

EventExec::EventExec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventExec)
}
EventExec::EventExec(const EventExec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventExec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_) {}

    , decltype(_impl_.proposal_id_) {}

    , decltype(_impl_.result_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.logs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logs().empty()) {
    _this->_impl_.logs_.Set(from._internal_logs(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.proposal_id_, &from._impl_.proposal_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.proposal_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventExec)
}

inline void EventExec::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_) {}

    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , decltype(_impl_.result_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.logs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logs_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventExec::~EventExec() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventExec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventExec::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.logs_.Destroy();
}

void EventExec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventExec::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventExec)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logs_.ClearToEmpty();
  ::memset(&_impl_.proposal_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.proposal_id_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventExec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::cosmos::group::v1::ProposalExecutorResult>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string logs = 3 [json_name = "logs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_logs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.EventExec.logs"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventExec::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventExec)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  // .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_result(), target);
  }

  // string logs = 3 [json_name = "logs"];
  if (!this->_internal_logs().empty()) {
    const std::string& _s = this->_internal_logs();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.EventExec.logs");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventExec)
  return target;
}

::size_t EventExec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventExec)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logs = 3 [json_name = "logs"];
  if (!this->_internal_logs().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_logs());
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  // .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventExec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventExec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventExec::GetClassData() const { return &_class_data_; }


void EventExec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventExec*>(&to_msg);
  auto& from = static_cast<const EventExec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventExec)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_logs().empty()) {
    _this->_internal_set_logs(from._internal_logs());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventExec::CopyFrom(const EventExec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventExec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventExec::IsInitialized() const {
  return true;
}

void EventExec::InternalSwap(EventExec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.logs_, lhs_arena,
                                       &other->_impl_.logs_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventExec, _impl_.result_)
      + sizeof(EventExec::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(EventExec, _impl_.proposal_id_)>(
          reinterpret_cast<char*>(&_impl_.proposal_id_),
          reinterpret_cast<char*>(&other->_impl_.proposal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventExec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[7]);
}
// ===================================================================

class EventLeaveGroup::_Internal {
 public:
};

EventLeaveGroup::EventLeaveGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.group.v1.EventLeaveGroup)
}
EventLeaveGroup::EventLeaveGroup(const EventLeaveGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventLeaveGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.group_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.group_id_ = from._impl_.group_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.group.v1.EventLeaveGroup)
}

inline void EventLeaveGroup::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.group_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventLeaveGroup::~EventLeaveGroup() {
  // @@protoc_insertion_point(destructor:cosmos.group.v1.EventLeaveGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventLeaveGroup::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void EventLeaveGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventLeaveGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.group.v1.EventLeaveGroup)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.group_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventLeaveGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 group_id = 1 [json_name = "groupId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.group.v1.EventLeaveGroup.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventLeaveGroup::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.group.v1.EventLeaveGroup)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_group_id(), target);
  }

  // string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.group.v1.EventLeaveGroup.address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.group.v1.EventLeaveGroup)
  return target;
}

::size_t EventLeaveGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.group.v1.EventLeaveGroup)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // uint64 group_id = 1 [json_name = "groupId"];
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventLeaveGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventLeaveGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventLeaveGroup::GetClassData() const { return &_class_data_; }


void EventLeaveGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventLeaveGroup*>(&to_msg);
  auto& from = static_cast<const EventLeaveGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.group.v1.EventLeaveGroup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventLeaveGroup::CopyFrom(const EventLeaveGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.group.v1.EventLeaveGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLeaveGroup::IsInitialized() const {
  return true;
}

void EventLeaveGroup::InternalSwap(EventLeaveGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);

  swap(_impl_.group_id_, other->_impl_.group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventLeaveGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_getter, &descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto_once,
      file_level_metadata_cosmos_2fgroup_2fv1_2fevents_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventCreateGroup*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventCreateGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventCreateGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventUpdateGroup*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventUpdateGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventUpdateGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventCreateGroupPolicy*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventCreateGroupPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventCreateGroupPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventUpdateGroupPolicy*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventUpdateGroupPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventUpdateGroupPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventSubmitProposal*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventSubmitProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventSubmitProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventWithdrawProposal*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventWithdrawProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventWithdrawProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventVote*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventVote >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventExec*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventExec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventExec >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::group::v1::EventLeaveGroup*
Arena::CreateMaybeMessage< ::cosmos::group::v1::EventLeaveGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::group::v1::EventLeaveGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fevents_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fevents_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/group/v1/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgroup_2fv1_2fevents_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fgroup_2fv1_2fevents_2eproto;
namespace cosmos {
namespace group {
namespace v1 {
class EventCreateGroup;
struct EventCreateGroupDefaultTypeInternal;
extern EventCreateGroupDefaultTypeInternal _EventCreateGroup_default_instance_;
class EventCreateGroupPolicy;
struct EventCreateGroupPolicyDefaultTypeInternal;
extern EventCreateGroupPolicyDefaultTypeInternal _EventCreateGroupPolicy_default_instance_;
class EventExec;
struct EventExecDefaultTypeInternal;
extern EventExecDefaultTypeInternal _EventExec_default_instance_;
class EventLeaveGroup;
struct EventLeaveGroupDefaultTypeInternal;
extern EventLeaveGroupDefaultTypeInternal _EventLeaveGroup_default_instance_;
class EventSubmitProposal;
struct EventSubmitProposalDefaultTypeInternal;
extern EventSubmitProposalDefaultTypeInternal _EventSubmitProposal_default_instance_;
class EventUpdateGroup;
struct EventUpdateGroupDefaultTypeInternal;
extern EventUpdateGroupDefaultTypeInternal _EventUpdateGroup_default_instance_;
class EventUpdateGroupPolicy;
struct EventUpdateGroupPolicyDefaultTypeInternal;
extern EventUpdateGroupPolicyDefaultTypeInternal _EventUpdateGroupPolicy_default_instance_;
class EventVote;
struct EventVoteDefaultTypeInternal;
extern EventVoteDefaultTypeInternal _EventVote_default_instance_;
class EventWithdrawProposal;
struct EventWithdrawProposalDefaultTypeInternal;
extern EventWithdrawProposalDefaultTypeInternal _EventWithdrawProposal_default_instance_;
}  // namespace v1
}  // namespace group
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::group::v1::EventCreateGroup* Arena::CreateMaybeMessage<::cosmos::group::v1::EventCreateGroup>(Arena*);
template <>
::cosmos::group::v1::EventCreateGroupPolicy* Arena::CreateMaybeMessage<::cosmos::group::v1::EventCreateGroupPolicy>(Arena*);
template <>
::cosmos::group::v1::EventExec* Arena::CreateMaybeMessage<::cosmos::group::v1::EventExec>(Arena*);
template <>
::cosmos::group::v1::EventLeaveGroup* Arena::CreateMaybeMessage<::cosmos::group::v1::EventLeaveGroup>(Arena*);
template <>
::cosmos::group::v1::EventSubmitProposal* Arena::CreateMaybeMessage<::cosmos::group::v1::EventSubmitProposal>(Arena*);
template <>
::cosmos::group::v1::EventUpdateGroup* Arena::CreateMaybeMessage<::cosmos::group::v1::EventUpdateGroup>(Arena*);
template <>
::cosmos::group::v1::EventUpdateGroupPolicy* Arena::CreateMaybeMessage<::cosmos::group::v1::EventUpdateGroupPolicy>(Arena*);
template <>
::cosmos::group::v1::EventVote* Arena::CreateMaybeMessage<::cosmos::group::v1::EventVote>(Arena*);
template <>
::cosmos::group::v1::EventWithdrawProposal* Arena::CreateMaybeMessage<::cosmos::group::v1::EventWithdrawProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace group {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class EventCreateGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventCreateGroup) */ {
 public:
  inline EventCreateGroup() : EventCreateGroup(nullptr) {}
  ~EventCreateGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventCreateGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventCreateGroup(const EventCreateGroup& from);
  EventCreateGroup(EventCreateGroup&& from) noexcept
    : EventCreateGroup() {
    *this = ::std::move(from);
  }

  inline EventCreateGroup& operator=(const EventCreateGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCreateGroup& operator=(EventCreateGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventCreateGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventCreateGroup* internal_default_instance() {
    return reinterpret_cast<const EventCreateGroup*>(
               &_EventCreateGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventCreateGroup& a, EventCreateGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(EventCreateGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventCreateGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventCreateGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventCreateGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventCreateGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventCreateGroup& from) {
    EventCreateGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventCreateGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventCreateGroup";
  }
  protected:
  explicit EventCreateGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventCreateGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventUpdateGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventUpdateGroup) */ {
 public:
  inline EventUpdateGroup() : EventUpdateGroup(nullptr) {}
  ~EventUpdateGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventUpdateGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventUpdateGroup(const EventUpdateGroup& from);
  EventUpdateGroup(EventUpdateGroup&& from) noexcept
    : EventUpdateGroup() {
    *this = ::std::move(from);
  }

  inline EventUpdateGroup& operator=(const EventUpdateGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventUpdateGroup& operator=(EventUpdateGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventUpdateGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventUpdateGroup* internal_default_instance() {
    return reinterpret_cast<const EventUpdateGroup*>(
               &_EventUpdateGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventUpdateGroup& a, EventUpdateGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(EventUpdateGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventUpdateGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventUpdateGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventUpdateGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventUpdateGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventUpdateGroup& from) {
    EventUpdateGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventUpdateGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventUpdateGroup";
  }
  protected:
  explicit EventUpdateGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventUpdateGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventCreateGroupPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventCreateGroupPolicy) */ {
 public:
  inline EventCreateGroupPolicy() : EventCreateGroupPolicy(nullptr) {}
  ~EventCreateGroupPolicy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventCreateGroupPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventCreateGroupPolicy(const EventCreateGroupPolicy& from);
  EventCreateGroupPolicy(EventCreateGroupPolicy&& from) noexcept
    : EventCreateGroupPolicy() {
    *this = ::std::move(from);
  }

  inline EventCreateGroupPolicy& operator=(const EventCreateGroupPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventCreateGroupPolicy& operator=(EventCreateGroupPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventCreateGroupPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventCreateGroupPolicy* internal_default_instance() {
    return reinterpret_cast<const EventCreateGroupPolicy*>(
               &_EventCreateGroupPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventCreateGroupPolicy& a, EventCreateGroupPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(EventCreateGroupPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventCreateGroupPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventCreateGroupPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventCreateGroupPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventCreateGroupPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventCreateGroupPolicy& from) {
    EventCreateGroupPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventCreateGroupPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventCreateGroupPolicy";
  }
  protected:
  explicit EventCreateGroupPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventCreateGroupPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventUpdateGroupPolicy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventUpdateGroupPolicy) */ {
 public:
  inline EventUpdateGroupPolicy() : EventUpdateGroupPolicy(nullptr) {}
  ~EventUpdateGroupPolicy() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventUpdateGroupPolicy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventUpdateGroupPolicy(const EventUpdateGroupPolicy& from);
  EventUpdateGroupPolicy(EventUpdateGroupPolicy&& from) noexcept
    : EventUpdateGroupPolicy() {
    *this = ::std::move(from);
  }

  inline EventUpdateGroupPolicy& operator=(const EventUpdateGroupPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventUpdateGroupPolicy& operator=(EventUpdateGroupPolicy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventUpdateGroupPolicy& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventUpdateGroupPolicy* internal_default_instance() {
    return reinterpret_cast<const EventUpdateGroupPolicy*>(
               &_EventUpdateGroupPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventUpdateGroupPolicy& a, EventUpdateGroupPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(EventUpdateGroupPolicy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventUpdateGroupPolicy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventUpdateGroupPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventUpdateGroupPolicy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventUpdateGroupPolicy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventUpdateGroupPolicy& from) {
    EventUpdateGroupPolicy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventUpdateGroupPolicy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventUpdateGroupPolicy";
  }
  protected:
  explicit EventUpdateGroupPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventUpdateGroupPolicy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventSubmitProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventSubmitProposal) */ {
 public:
  inline EventSubmitProposal() : EventSubmitProposal(nullptr) {}
  ~EventSubmitProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventSubmitProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventSubmitProposal(const EventSubmitProposal& from);
  EventSubmitProposal(EventSubmitProposal&& from) noexcept
    : EventSubmitProposal() {
    *this = ::std::move(from);
  }

  inline EventSubmitProposal& operator=(const EventSubmitProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventSubmitProposal& operator=(EventSubmitProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventSubmitProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventSubmitProposal* internal_default_instance() {
    return reinterpret_cast<const EventSubmitProposal*>(
               &_EventSubmitProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventSubmitProposal& a, EventSubmitProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(EventSubmitProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventSubmitProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventSubmitProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventSubmitProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventSubmitProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventSubmitProposal& from) {
    EventSubmitProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventSubmitProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventSubmitProposal";
  }
  protected:
  explicit EventSubmitProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventSubmitProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventWithdrawProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventWithdrawProposal) */ {
 public:
  inline EventWithdrawProposal() : EventWithdrawProposal(nullptr) {}
  ~EventWithdrawProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventWithdrawProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventWithdrawProposal(const EventWithdrawProposal& from);
  EventWithdrawProposal(EventWithdrawProposal&& from) noexcept
    : EventWithdrawProposal() {
    *this = ::std::move(from);
  }

  inline EventWithdrawProposal& operator=(const EventWithdrawProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventWithdrawProposal& operator=(EventWithdrawProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventWithdrawProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventWithdrawProposal* internal_default_instance() {
    return reinterpret_cast<const EventWithdrawProposal*>(
               &_EventWithdrawProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EventWithdrawProposal& a, EventWithdrawProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(EventWithdrawProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventWithdrawProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventWithdrawProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventWithdrawProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventWithdrawProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventWithdrawProposal& from) {
    EventWithdrawProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventWithdrawProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventWithdrawProposal";
  }
  protected:
  explicit EventWithdrawProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventWithdrawProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventVote) */ {
 public:
  inline EventVote() : EventVote(nullptr) {}
  ~EventVote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventVote(const EventVote& from);
  EventVote(EventVote&& from) noexcept
    : EventVote() {
    *this = ::std::move(from);
  }

  inline EventVote& operator=(const EventVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventVote& operator=(EventVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventVote* internal_default_instance() {
    return reinterpret_cast<const EventVote*>(
               &_EventVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EventVote& a, EventVote& b) {
    a.Swap(&b);
  }
  inline void Swap(EventVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventVote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventVote& from) {
    EventVote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventVote";
  }
  protected:
  explicit EventVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalIdFieldNumber = 1,
  };
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventExec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventExec) */ {
 public:
  inline EventExec() : EventExec(nullptr) {}
  ~EventExec() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventExec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventExec(const EventExec& from);
  EventExec(EventExec&& from) noexcept
    : EventExec() {
    *this = ::std::move(from);
  }

  inline EventExec& operator=(const EventExec& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventExec& operator=(EventExec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventExec& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventExec* internal_default_instance() {
    return reinterpret_cast<const EventExec*>(
               &_EventExec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EventExec& a, EventExec& b) {
    a.Swap(&b);
  }
  inline void Swap(EventExec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventExec* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventExec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventExec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventExec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventExec& from) {
    EventExec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventExec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventExec";
  }
  protected:
  explicit EventExec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 3,
    kProposalIdFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string logs = 3 [json_name = "logs"];
  void clear_logs() ;
  const std::string& logs() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logs(Arg_&& arg, Args_... args);
  std::string* mutable_logs();
  PROTOBUF_NODISCARD std::string* release_logs();
  void set_allocated_logs(std::string* ptr);

  private:
  const std::string& _internal_logs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logs(
      const std::string& value);
  std::string* _internal_mutable_logs();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
  void clear_result() ;
  ::cosmos::group::v1::ProposalExecutorResult result() const;
  void set_result(::cosmos::group::v1::ProposalExecutorResult value);

  private:
  ::cosmos::group::v1::ProposalExecutorResult _internal_result() const;
  void _internal_set_result(::cosmos::group::v1::ProposalExecutorResult value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventExec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logs_;
    ::uint64_t proposal_id_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};// -------------------------------------------------------------------

class EventLeaveGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.group.v1.EventLeaveGroup) */ {
 public:
  inline EventLeaveGroup() : EventLeaveGroup(nullptr) {}
  ~EventLeaveGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventLeaveGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventLeaveGroup(const EventLeaveGroup& from);
  EventLeaveGroup(EventLeaveGroup&& from) noexcept
    : EventLeaveGroup() {
    *this = ::std::move(from);
  }

  inline EventLeaveGroup& operator=(const EventLeaveGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventLeaveGroup& operator=(EventLeaveGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventLeaveGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventLeaveGroup* internal_default_instance() {
    return reinterpret_cast<const EventLeaveGroup*>(
               &_EventLeaveGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EventLeaveGroup& a, EventLeaveGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(EventLeaveGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventLeaveGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventLeaveGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventLeaveGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventLeaveGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventLeaveGroup& from) {
    EventLeaveGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventLeaveGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.group.v1.EventLeaveGroup";
  }
  protected:
  explicit EventLeaveGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // uint64 group_id = 1 [json_name = "groupId"];
  void clear_group_id() ;
  ::uint64_t group_id() const;
  void set_group_id(::uint64_t value);

  private:
  ::uint64_t _internal_group_id() const;
  void _internal_set_group_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.group.v1.EventLeaveGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::uint64_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgroup_2fv1_2fevents_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventCreateGroup

// uint64 group_id = 1 [json_name = "groupId"];
inline void EventCreateGroup::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventCreateGroup::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventCreateGroup.group_id)
  return _internal_group_id();
}
inline void EventCreateGroup::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventCreateGroup.group_id)
}
inline ::uint64_t EventCreateGroup::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void EventCreateGroup::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// EventUpdateGroup

// uint64 group_id = 1 [json_name = "groupId"];
inline void EventUpdateGroup::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventUpdateGroup::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventUpdateGroup.group_id)
  return _internal_group_id();
}
inline void EventUpdateGroup::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventUpdateGroup.group_id)
}
inline ::uint64_t EventUpdateGroup::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void EventUpdateGroup::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// -------------------------------------------------------------------

// EventCreateGroupPolicy

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void EventCreateGroupPolicy::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& EventCreateGroupPolicy::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventCreateGroupPolicy.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventCreateGroupPolicy::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventCreateGroupPolicy.address)
}
inline std::string* EventCreateGroupPolicy::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventCreateGroupPolicy.address)
  return _s;
}
inline const std::string& EventCreateGroupPolicy::_internal_address() const {
  return _impl_.address_.Get();
}
inline void EventCreateGroupPolicy::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* EventCreateGroupPolicy::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* EventCreateGroupPolicy::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventCreateGroupPolicy.address)
  return _impl_.address_.Release();
}
inline void EventCreateGroupPolicy::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventCreateGroupPolicy.address)
}

// -------------------------------------------------------------------

// EventUpdateGroupPolicy

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void EventUpdateGroupPolicy::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& EventUpdateGroupPolicy::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventUpdateGroupPolicy.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventUpdateGroupPolicy::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventUpdateGroupPolicy.address)
}
inline std::string* EventUpdateGroupPolicy::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventUpdateGroupPolicy.address)
  return _s;
}
inline const std::string& EventUpdateGroupPolicy::_internal_address() const {
  return _impl_.address_.Get();
}
inline void EventUpdateGroupPolicy::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* EventUpdateGroupPolicy::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* EventUpdateGroupPolicy::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventUpdateGroupPolicy.address)
  return _impl_.address_.Release();
}
inline void EventUpdateGroupPolicy::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventUpdateGroupPolicy.address)
}

// -------------------------------------------------------------------

// EventSubmitProposal

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventSubmitProposal::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventSubmitProposal::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventSubmitProposal.proposal_id)
  return _internal_proposal_id();
}
inline void EventSubmitProposal::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventSubmitProposal.proposal_id)
}
inline ::uint64_t EventSubmitProposal::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void EventSubmitProposal::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// EventWithdrawProposal

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventWithdrawProposal::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventWithdrawProposal::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventWithdrawProposal.proposal_id)
  return _internal_proposal_id();
}
inline void EventWithdrawProposal::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventWithdrawProposal.proposal_id)
}
inline ::uint64_t EventWithdrawProposal::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void EventWithdrawProposal::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// EventVote

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventVote::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventVote::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventVote.proposal_id)
  return _internal_proposal_id();
}
inline void EventVote::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventVote.proposal_id)
}
inline ::uint64_t EventVote::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void EventVote::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// -------------------------------------------------------------------

// EventExec

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void EventExec::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventExec::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventExec.proposal_id)
  return _internal_proposal_id();
}
inline void EventExec::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventExec.proposal_id)
}
inline ::uint64_t EventExec::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void EventExec::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// .cosmos.group.v1.ProposalExecutorResult result = 2 [json_name = "result"];
inline void EventExec::clear_result() {
  _impl_.result_ = 0;
}
inline ::cosmos::group::v1::ProposalExecutorResult EventExec::result() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventExec.result)
  return _internal_result();
}
inline void EventExec::set_result(::cosmos::group::v1::ProposalExecutorResult value) {
   _internal_set_result(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventExec.result)
}
inline ::cosmos::group::v1::ProposalExecutorResult EventExec::_internal_result() const {
  return static_cast<::cosmos::group::v1::ProposalExecutorResult>(_impl_.result_);
}
inline void EventExec::_internal_set_result(::cosmos::group::v1::ProposalExecutorResult value) {
  ;
  _impl_.result_ = value;
}

// string logs = 3 [json_name = "logs"];
inline void EventExec::clear_logs() {
  _impl_.logs_.ClearToEmpty();
}
inline const std::string& EventExec::logs() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventExec.logs)
  return _internal_logs();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventExec::set_logs(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.logs_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventExec.logs)
}
inline std::string* EventExec::mutable_logs() {
  std::string* _s = _internal_mutable_logs();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventExec.logs)
  return _s;
}
inline const std::string& EventExec::_internal_logs() const {
  return _impl_.logs_.Get();
}
inline void EventExec::_internal_set_logs(const std::string& value) {
  ;


  _impl_.logs_.Set(value, GetArenaForAllocation());
}
inline std::string* EventExec::_internal_mutable_logs() {
  ;
  return _impl_.logs_.Mutable( GetArenaForAllocation());
}
inline std::string* EventExec::release_logs() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventExec.logs)
  return _impl_.logs_.Release();
}
inline void EventExec::set_allocated_logs(std::string* value) {
  _impl_.logs_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logs_.IsDefault()) {
          _impl_.logs_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventExec.logs)
}

// -------------------------------------------------------------------

// EventLeaveGroup

// uint64 group_id = 1 [json_name = "groupId"];
inline void EventLeaveGroup::clear_group_id() {
  _impl_.group_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventLeaveGroup::group_id() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventLeaveGroup.group_id)
  return _internal_group_id();
}
inline void EventLeaveGroup::set_group_id(::uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventLeaveGroup.group_id)
}
inline ::uint64_t EventLeaveGroup::_internal_group_id() const {
  return _impl_.group_id_;
}
inline void EventLeaveGroup::_internal_set_group_id(::uint64_t value) {
  ;
  _impl_.group_id_ = value;
}

// string address = 2 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void EventLeaveGroup::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& EventLeaveGroup::address() const {
  // @@protoc_insertion_point(field_get:cosmos.group.v1.EventLeaveGroup.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventLeaveGroup::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.group.v1.EventLeaveGroup.address)
}
inline std::string* EventLeaveGroup::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.group.v1.EventLeaveGroup.address)
  return _s;
}
inline const std::string& EventLeaveGroup::_internal_address() const {
  return _impl_.address_.Get();
}
inline void EventLeaveGroup::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* EventLeaveGroup::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* EventLeaveGroup::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.group.v1.EventLeaveGroup.address)
  return _impl_.address_.Release();
}
inline void EventLeaveGroup::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.group.v1.EventLeaveGroup.address)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace group
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgroup_2fv1_2fevents_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/group/v1/tx.proto

#include "cosmos/group/v1/tx.pb.h"
#include "cosmos/group/v1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace group {
namespace v1 {

static const char* Msg_method_names[] = {
  "/cosmos.group.v1.Msg/CreateGroup",
  "/cosmos.group.v1.Msg/UpdateGroupMembers",
  "/cosmos.group.v1.Msg/UpdateGroupAdmin",
  "/cosmos.group.v1.Msg/UpdateGroupMetadata",
  "/cosmos.group.v1.Msg/CreateGroupPolicy",
  "/cosmos.group.v1.Msg/CreateGroupWithPolicy",
  "/cosmos.group.v1.Msg/UpdateGroupPolicyAdmin",
  "/cosmos.group.v1.Msg/UpdateGroupPolicyDecisionPolicy",
  "/cosmos.group.v1.Msg/UpdateGroupPolicyMetadata",
  "/cosmos.group.v1.Msg/SubmitProposal",
  "/cosmos.group.v1.Msg/WithdrawProposal",
  "/cosmos.group.v1.Msg/Vote",
  "/cosmos.group.v1.Msg/Exec",
  "/cosmos.group.v1.Msg/LeaveGroup",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateGroup_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroupMembers_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroupAdmin_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroupMetadata_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateGroupPolicy_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateGroupWithPolicy_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroupPolicyAdmin_(Msg_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroupPolicyDecisionPolicy_(Msg_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateGroupPolicyMetadata_(Msg_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitProposal_(Msg_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WithdrawProposal_(Msg_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Vote_(Msg_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Exec_(Msg_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeaveGroup_(Msg_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::cosmos::group::v1::MsgCreateGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgCreateGroup, ::cosmos::group::v1::MsgCreateGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateGroup_, context, request, response);
}

void Msg::Stub::async::CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgCreateGroup, ::cosmos::group::v1::MsgCreateGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupResponse>* Msg::Stub::PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgCreateGroupResponse, ::cosmos::group::v1::MsgCreateGroup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupResponse>* Msg::Stub::AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgUpdateGroupMembers, ::cosmos::group::v1::MsgUpdateGroupMembersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateGroupMembers_, context, request, response);
}

void Msg::Stub::async::UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgUpdateGroupMembers, ::cosmos::group::v1::MsgUpdateGroupMembersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupMembers_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupMembers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* Msg::Stub::PrepareAsyncUpdateGroupMembersRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgUpdateGroupMembersResponse, ::cosmos::group::v1::MsgUpdateGroupMembers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGroupMembers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* Msg::Stub::AsyncUpdateGroupMembersRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGroupMembersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgUpdateGroupAdmin, ::cosmos::group::v1::MsgUpdateGroupAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateGroupAdmin_, context, request, response);
}

void Msg::Stub::async::UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgUpdateGroupAdmin, ::cosmos::group::v1::MsgUpdateGroupAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupAdmin_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupAdmin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* Msg::Stub::PrepareAsyncUpdateGroupAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgUpdateGroupAdminResponse, ::cosmos::group::v1::MsgUpdateGroupAdmin, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGroupAdmin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* Msg::Stub::AsyncUpdateGroupAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGroupAdminRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgUpdateGroupMetadata, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateGroupMetadata_, context, request, response);
}

void Msg::Stub::async::UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgUpdateGroupMetadata, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupMetadata_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* Msg::Stub::PrepareAsyncUpdateGroupMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse, ::cosmos::group::v1::MsgUpdateGroupMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGroupMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* Msg::Stub::AsyncUpdateGroupMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGroupMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgCreateGroupPolicy, ::cosmos::group::v1::MsgCreateGroupPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateGroupPolicy_, context, request, response);
}

void Msg::Stub::async::CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgCreateGroupPolicy, ::cosmos::group::v1::MsgCreateGroupPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroupPolicy_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroupPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* Msg::Stub::PrepareAsyncCreateGroupPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgCreateGroupPolicyResponse, ::cosmos::group::v1::MsgCreateGroupPolicy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateGroupPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* Msg::Stub::AsyncCreateGroupPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateGroupPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateGroupWithPolicy_, context, request, response);
}

void Msg::Stub::async::CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroupWithPolicy_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateGroupWithPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* Msg::Stub::PrepareAsyncCreateGroupWithPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse, ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateGroupWithPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* Msg::Stub::AsyncCreateGroupWithPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateGroupWithPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateGroupPolicyAdmin_, context, request, response);
}

void Msg::Stub::async::UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupPolicyAdmin_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupPolicyAdmin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* Msg::Stub::PrepareAsyncUpdateGroupPolicyAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse, ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGroupPolicyAdmin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* Msg::Stub::AsyncUpdateGroupPolicyAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGroupPolicyAdminRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateGroupPolicyDecisionPolicy_, context, request, response);
}

void Msg::Stub::async::UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupPolicyDecisionPolicy_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupPolicyDecisionPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* Msg::Stub::PrepareAsyncUpdateGroupPolicyDecisionPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGroupPolicyDecisionPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* Msg::Stub::AsyncUpdateGroupPolicyDecisionPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGroupPolicyDecisionPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateGroupPolicyMetadata_, context, request, response);
}

void Msg::Stub::async::UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupPolicyMetadata_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateGroupPolicyMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* Msg::Stub::PrepareAsyncUpdateGroupPolicyMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateGroupPolicyMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* Msg::Stub::AsyncUpdateGroupPolicyMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateGroupPolicyMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::cosmos::group::v1::MsgSubmitProposalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgSubmitProposal, ::cosmos::group::v1::MsgSubmitProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitProposal_, context, request, response);
}

void Msg::Stub::async::SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgSubmitProposal, ::cosmos::group::v1::MsgSubmitProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitProposal_, context, request, response, std::move(f));
}

void Msg::Stub::async::SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitProposal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgSubmitProposalResponse>* Msg::Stub::PrepareAsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgSubmitProposalResponse, ::cosmos::group::v1::MsgSubmitProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitProposal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgSubmitProposalResponse>* Msg::Stub::AsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitProposalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgWithdrawProposal, ::cosmos::group::v1::MsgWithdrawProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WithdrawProposal_, context, request, response);
}

void Msg::Stub::async::WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgWithdrawProposal, ::cosmos::group::v1::MsgWithdrawProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawProposal_, context, request, response, std::move(f));
}

void Msg::Stub::async::WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WithdrawProposal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgWithdrawProposalResponse>* Msg::Stub::PrepareAsyncWithdrawProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgWithdrawProposalResponse, ::cosmos::group::v1::MsgWithdrawProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WithdrawProposal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgWithdrawProposalResponse>* Msg::Stub::AsyncWithdrawProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWithdrawProposalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::cosmos::group::v1::MsgVoteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgVote, ::cosmos::group::v1::MsgVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Vote_, context, request, response);
}

void Msg::Stub::async::Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgVote, ::cosmos::group::v1::MsgVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Vote_, context, request, response, std::move(f));
}

void Msg::Stub::async::Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Vote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgVoteResponse>* Msg::Stub::PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgVoteResponse, ::cosmos::group::v1::MsgVote, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Vote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgVoteResponse>* Msg::Stub::AsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::cosmos::group::v1::MsgExecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgExec, ::cosmos::group::v1::MsgExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void Msg::Stub::async::Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgExec, ::cosmos::group::v1::MsgExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void Msg::Stub::async::Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgExecResponse>* Msg::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgExecResponse, ::cosmos::group::v1::MsgExec, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgExecResponse>* Msg::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::cosmos::group::v1::MsgLeaveGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::group::v1::MsgLeaveGroup, ::cosmos::group::v1::MsgLeaveGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeaveGroup_, context, request, response);
}

void Msg::Stub::async::LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::group::v1::MsgLeaveGroup, ::cosmos::group::v1::MsgLeaveGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveGroup_, context, request, response, std::move(f));
}

void Msg::Stub::async::LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeaveGroup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgLeaveGroupResponse>* Msg::Stub::PrepareAsyncLeaveGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::group::v1::MsgLeaveGroupResponse, ::cosmos::group::v1::MsgLeaveGroup, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeaveGroup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgLeaveGroupResponse>* Msg::Stub::AsyncLeaveGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeaveGroupRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgCreateGroup, ::cosmos::group::v1::MsgCreateGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgCreateGroup* req,
             ::cosmos::group::v1::MsgCreateGroupResponse* resp) {
               return service->CreateGroup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgUpdateGroupMembers, ::cosmos::group::v1::MsgUpdateGroupMembersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgUpdateGroupMembers* req,
             ::cosmos::group::v1::MsgUpdateGroupMembersResponse* resp) {
               return service->UpdateGroupMembers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgUpdateGroupAdmin, ::cosmos::group::v1::MsgUpdateGroupAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgUpdateGroupAdmin* req,
             ::cosmos::group::v1::MsgUpdateGroupAdminResponse* resp) {
               return service->UpdateGroupAdmin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgUpdateGroupMetadata, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgUpdateGroupMetadata* req,
             ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* resp) {
               return service->UpdateGroupMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgCreateGroupPolicy, ::cosmos::group::v1::MsgCreateGroupPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgCreateGroupPolicy* req,
             ::cosmos::group::v1::MsgCreateGroupPolicyResponse* resp) {
               return service->CreateGroupPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgCreateGroupWithPolicy* req,
             ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* resp) {
               return service->CreateGroupWithPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* req,
             ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* resp) {
               return service->UpdateGroupPolicyAdmin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* req,
             ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* resp) {
               return service->UpdateGroupPolicyDecisionPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* req,
             ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* resp) {
               return service->UpdateGroupPolicyMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgSubmitProposal, ::cosmos::group::v1::MsgSubmitProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgSubmitProposal* req,
             ::cosmos::group::v1::MsgSubmitProposalResponse* resp) {
               return service->SubmitProposal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgWithdrawProposal, ::cosmos::group::v1::MsgWithdrawProposalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgWithdrawProposal* req,
             ::cosmos::group::v1::MsgWithdrawProposalResponse* resp) {
               return service->WithdrawProposal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgVote, ::cosmos::group::v1::MsgVoteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgVote* req,
             ::cosmos::group::v1::MsgVoteResponse* resp) {
               return service->Vote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgExec, ::cosmos::group::v1::MsgExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgExec* req,
             ::cosmos::group::v1::MsgExecResponse* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::group::v1::MsgLeaveGroup, ::cosmos::group::v1::MsgLeaveGroupResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::group::v1::MsgLeaveGroup* req,
             ::cosmos::group::v1::MsgLeaveGroupResponse* resp) {
               return service->LeaveGroup(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::CreateGroup(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateGroupMembers(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateGroupAdmin(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateGroupMetadata(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreateGroupPolicy(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreateGroupWithPolicy(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateGroupPolicyAdmin(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateGroupPolicyMetadata(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SubmitProposal(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::WithdrawProposal(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Vote(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Exec(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::LeaveGroup(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace group
}  // namespace v1


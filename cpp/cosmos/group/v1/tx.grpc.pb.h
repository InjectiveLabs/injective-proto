// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/group/v1/tx.proto
// Original file comments:
// Since: cosmos-sdk 0.46
#ifndef GRPC_cosmos_2fgroup_2fv1_2ftx_2eproto__INCLUDED
#define GRPC_cosmos_2fgroup_2fv1_2ftx_2eproto__INCLUDED

#include "cosmos/group/v1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace group {
namespace v1 {

// Msg is the cosmos.group.v1 Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.group.v1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
    virtual ::grpc::Status CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::cosmos::group::v1::MsgCreateGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupResponse>> AsyncCreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupResponse>>(AsyncCreateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupResponse>> PrepareAsyncCreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupResponse>>(PrepareAsyncCreateGroupRaw(context, request, cq));
    }
    // UpdateGroupMembers updates the group members with given group id and admin address.
    virtual ::grpc::Status UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>> AsyncUpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>>(AsyncUpdateGroupMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>> PrepareAsyncUpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>>(PrepareAsyncUpdateGroupMembersRaw(context, request, cq));
    }
    // UpdateGroupAdmin updates the group admin with given group id and previous admin address.
    virtual ::grpc::Status UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>> AsyncUpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>>(AsyncUpdateGroupAdminRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>> PrepareAsyncUpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>>(PrepareAsyncUpdateGroupAdminRaw(context, request, cq));
    }
    // UpdateGroupMetadata updates the group metadata with given group id and admin address.
    virtual ::grpc::Status UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>> AsyncUpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>>(AsyncUpdateGroupMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>> PrepareAsyncUpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>>(PrepareAsyncUpdateGroupMetadataRaw(context, request, cq));
    }
    // CreateGroupPolicy creates a new group policy using given DecisionPolicy.
    virtual ::grpc::Status CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>> AsyncCreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>>(AsyncCreateGroupPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>> PrepareAsyncCreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>>(PrepareAsyncCreateGroupPolicyRaw(context, request, cq));
    }
    // CreateGroupWithPolicy creates a new group with policy.
    virtual ::grpc::Status CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>> AsyncCreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>>(AsyncCreateGroupWithPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>> PrepareAsyncCreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>>(PrepareAsyncCreateGroupWithPolicyRaw(context, request, cq));
    }
    // UpdateGroupPolicyAdmin updates a group policy admin.
    virtual ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>> AsyncUpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>>(AsyncUpdateGroupPolicyAdminRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>> PrepareAsyncUpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>>(PrepareAsyncUpdateGroupPolicyAdminRaw(context, request, cq));
    }
    // UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
    virtual ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>> AsyncUpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>>(AsyncUpdateGroupPolicyDecisionPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>> PrepareAsyncUpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>>(PrepareAsyncUpdateGroupPolicyDecisionPolicyRaw(context, request, cq));
    }
    // UpdateGroupPolicyMetadata updates a group policy metadata.
    virtual ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>> AsyncUpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>>(AsyncUpdateGroupPolicyMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>> PrepareAsyncUpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>>(PrepareAsyncUpdateGroupPolicyMetadataRaw(context, request, cq));
    }
    // SubmitProposal submits a new proposal.
    virtual ::grpc::Status SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::cosmos::group::v1::MsgSubmitProposalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgSubmitProposalResponse>> AsyncSubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgSubmitProposalResponse>>(AsyncSubmitProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgSubmitProposalResponse>> PrepareAsyncSubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgSubmitProposalResponse>>(PrepareAsyncSubmitProposalRaw(context, request, cq));
    }
    // WithdrawProposal withdraws a proposal.
    virtual ::grpc::Status WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgWithdrawProposalResponse>> AsyncWithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgWithdrawProposalResponse>>(AsyncWithdrawProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgWithdrawProposalResponse>> PrepareAsyncWithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgWithdrawProposalResponse>>(PrepareAsyncWithdrawProposalRaw(context, request, cq));
    }
    // Vote allows a voter to vote on a proposal.
    virtual ::grpc::Status Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::cosmos::group::v1::MsgVoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgVoteResponse>> AsyncVote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgVoteResponse>>(AsyncVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgVoteResponse>> PrepareAsyncVote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgVoteResponse>>(PrepareAsyncVoteRaw(context, request, cq));
    }
    // Exec executes a proposal.
    virtual ::grpc::Status Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::cosmos::group::v1::MsgExecResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgExecResponse>> AsyncExec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgExecResponse>>(AsyncExecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgExecResponse>> PrepareAsyncExec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgExecResponse>>(PrepareAsyncExecRaw(context, request, cq));
    }
    // LeaveGroup allows a group member to leave the group.
    virtual ::grpc::Status LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::cosmos::group::v1::MsgLeaveGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgLeaveGroupResponse>> AsyncLeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgLeaveGroupResponse>>(AsyncLeaveGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgLeaveGroupResponse>> PrepareAsyncLeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgLeaveGroupResponse>>(PrepareAsyncLeaveGroupRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
      virtual void CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateGroupMembers updates the group members with given group id and admin address.
      virtual void UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateGroupAdmin updates the group admin with given group id and previous admin address.
      virtual void UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateGroupMetadata updates the group metadata with given group id and admin address.
      virtual void UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CreateGroupPolicy creates a new group policy using given DecisionPolicy.
      virtual void CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CreateGroupWithPolicy creates a new group with policy.
      virtual void CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateGroupPolicyAdmin updates a group policy admin.
      virtual void UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
      virtual void UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateGroupPolicyMetadata updates a group policy metadata.
      virtual void UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SubmitProposal submits a new proposal.
      virtual void SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // WithdrawProposal withdraws a proposal.
      virtual void WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Vote allows a voter to vote on a proposal.
      virtual void Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Exec executes a proposal.
      virtual void Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // LeaveGroup allows a group member to leave the group.
      virtual void LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupResponse>* AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupResponse>* PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* AsyncUpdateGroupMembersRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* PrepareAsyncUpdateGroupMembersRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* AsyncUpdateGroupAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* PrepareAsyncUpdateGroupAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* AsyncUpdateGroupMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* PrepareAsyncUpdateGroupMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* AsyncCreateGroupPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* PrepareAsyncCreateGroupPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* AsyncCreateGroupWithPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* PrepareAsyncCreateGroupWithPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* AsyncUpdateGroupPolicyAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* PrepareAsyncUpdateGroupPolicyAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* AsyncUpdateGroupPolicyDecisionPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* PrepareAsyncUpdateGroupPolicyDecisionPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* AsyncUpdateGroupPolicyMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* PrepareAsyncUpdateGroupPolicyMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgSubmitProposalResponse>* AsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgSubmitProposalResponse>* PrepareAsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgWithdrawProposalResponse>* AsyncWithdrawProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgWithdrawProposalResponse>* PrepareAsyncWithdrawProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgVoteResponse>* AsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgVoteResponse>* PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgExecResponse>* AsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgExecResponse>* PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgLeaveGroupResponse>* AsyncLeaveGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::group::v1::MsgLeaveGroupResponse>* PrepareAsyncLeaveGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::cosmos::group::v1::MsgCreateGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupResponse>> AsyncCreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupResponse>>(AsyncCreateGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupResponse>> PrepareAsyncCreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupResponse>>(PrepareAsyncCreateGroupRaw(context, request, cq));
    }
    ::grpc::Status UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>> AsyncUpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>>(AsyncUpdateGroupMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>> PrepareAsyncUpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>>(PrepareAsyncUpdateGroupMembersRaw(context, request, cq));
    }
    ::grpc::Status UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>> AsyncUpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>>(AsyncUpdateGroupAdminRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>> PrepareAsyncUpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>>(PrepareAsyncUpdateGroupAdminRaw(context, request, cq));
    }
    ::grpc::Status UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>> AsyncUpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>>(AsyncUpdateGroupMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>> PrepareAsyncUpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>>(PrepareAsyncUpdateGroupMetadataRaw(context, request, cq));
    }
    ::grpc::Status CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>> AsyncCreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>>(AsyncCreateGroupPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>> PrepareAsyncCreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>>(PrepareAsyncCreateGroupPolicyRaw(context, request, cq));
    }
    ::grpc::Status CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>> AsyncCreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>>(AsyncCreateGroupWithPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>> PrepareAsyncCreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>>(PrepareAsyncCreateGroupWithPolicyRaw(context, request, cq));
    }
    ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>> AsyncUpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>>(AsyncUpdateGroupPolicyAdminRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>> PrepareAsyncUpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>>(PrepareAsyncUpdateGroupPolicyAdminRaw(context, request, cq));
    }
    ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>> AsyncUpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>>(AsyncUpdateGroupPolicyDecisionPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>> PrepareAsyncUpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>>(PrepareAsyncUpdateGroupPolicyDecisionPolicyRaw(context, request, cq));
    }
    ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>> AsyncUpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>>(AsyncUpdateGroupPolicyMetadataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>> PrepareAsyncUpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>>(PrepareAsyncUpdateGroupPolicyMetadataRaw(context, request, cq));
    }
    ::grpc::Status SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::cosmos::group::v1::MsgSubmitProposalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgSubmitProposalResponse>> AsyncSubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgSubmitProposalResponse>>(AsyncSubmitProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgSubmitProposalResponse>> PrepareAsyncSubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgSubmitProposalResponse>>(PrepareAsyncSubmitProposalRaw(context, request, cq));
    }
    ::grpc::Status WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgWithdrawProposalResponse>> AsyncWithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgWithdrawProposalResponse>>(AsyncWithdrawProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgWithdrawProposalResponse>> PrepareAsyncWithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgWithdrawProposalResponse>>(PrepareAsyncWithdrawProposalRaw(context, request, cq));
    }
    ::grpc::Status Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::cosmos::group::v1::MsgVoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgVoteResponse>> AsyncVote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgVoteResponse>>(AsyncVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgVoteResponse>> PrepareAsyncVote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgVoteResponse>>(PrepareAsyncVoteRaw(context, request, cq));
    }
    ::grpc::Status Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::cosmos::group::v1::MsgExecResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgExecResponse>> AsyncExec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgExecResponse>>(AsyncExecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgExecResponse>> PrepareAsyncExec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgExecResponse>>(PrepareAsyncExecRaw(context, request, cq));
    }
    ::grpc::Status LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::cosmos::group::v1::MsgLeaveGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgLeaveGroupResponse>> AsyncLeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgLeaveGroupResponse>>(AsyncLeaveGroupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgLeaveGroupResponse>> PrepareAsyncLeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgLeaveGroupResponse>>(PrepareAsyncLeaveGroupRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateGroupMembers(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateGroupAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateGroupMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateGroupPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateGroupWithPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateGroupPolicyAdmin(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateGroupPolicyDecisionPolicy(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateGroupPolicyMetadata(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response, std::function<void(::grpc::Status)>) override;
      void WithdrawProposal(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response, std::function<void(::grpc::Status)>) override;
      void Vote(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response, std::function<void(::grpc::Status)>) override;
      void Exec(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void LeaveGroup(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupResponse>* AsyncCreateGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupResponse>* PrepareAsyncCreateGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroup& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* AsyncUpdateGroupMembersRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* PrepareAsyncUpdateGroupMembersRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* AsyncUpdateGroupAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* PrepareAsyncUpdateGroupAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* AsyncUpdateGroupMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* PrepareAsyncUpdateGroupMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* AsyncCreateGroupPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* PrepareAsyncCreateGroupPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* AsyncCreateGroupWithPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* PrepareAsyncCreateGroupWithPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* AsyncUpdateGroupPolicyAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* PrepareAsyncUpdateGroupPolicyAdminRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* AsyncUpdateGroupPolicyDecisionPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* PrepareAsyncUpdateGroupPolicyDecisionPolicyRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* AsyncUpdateGroupPolicyMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* PrepareAsyncUpdateGroupPolicyMetadataRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgSubmitProposalResponse>* AsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgSubmitProposalResponse>* PrepareAsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgWithdrawProposalResponse>* AsyncWithdrawProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgWithdrawProposalResponse>* PrepareAsyncWithdrawProposalRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgWithdrawProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgVoteResponse>* AsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgVoteResponse>* PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgExecResponse>* AsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgExecResponse>* PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgExec& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgLeaveGroupResponse>* AsyncLeaveGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::group::v1::MsgLeaveGroupResponse>* PrepareAsyncLeaveGroupRaw(::grpc::ClientContext* context, const ::cosmos::group::v1::MsgLeaveGroup& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateGroup_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGroupMembers_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGroupAdmin_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGroupMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateGroupPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateGroupWithPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGroupPolicyAdmin_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGroupPolicyDecisionPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateGroupPolicyMetadata_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitProposal_;
    const ::grpc::internal::RpcMethod rpcmethod_WithdrawProposal_;
    const ::grpc::internal::RpcMethod rpcmethod_Vote_;
    const ::grpc::internal::RpcMethod rpcmethod_Exec_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveGroup_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
    virtual ::grpc::Status CreateGroup(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response);
    // UpdateGroupMembers updates the group members with given group id and admin address.
    virtual ::grpc::Status UpdateGroupMembers(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response);
    // UpdateGroupAdmin updates the group admin with given group id and previous admin address.
    virtual ::grpc::Status UpdateGroupAdmin(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response);
    // UpdateGroupMetadata updates the group metadata with given group id and admin address.
    virtual ::grpc::Status UpdateGroupMetadata(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response);
    // CreateGroupPolicy creates a new group policy using given DecisionPolicy.
    virtual ::grpc::Status CreateGroupPolicy(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response);
    // CreateGroupWithPolicy creates a new group with policy.
    virtual ::grpc::Status CreateGroupWithPolicy(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response);
    // UpdateGroupPolicyAdmin updates a group policy admin.
    virtual ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response);
    // UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
    virtual ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response);
    // UpdateGroupPolicyMetadata updates a group policy metadata.
    virtual ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response);
    // SubmitProposal submits a new proposal.
    virtual ::grpc::Status SubmitProposal(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response);
    // WithdrawProposal withdraws a proposal.
    virtual ::grpc::Status WithdrawProposal(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response);
    // Vote allows a voter to vote on a proposal.
    virtual ::grpc::Status Vote(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response);
    // Exec executes a proposal.
    virtual ::grpc::Status Exec(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response);
    // LeaveGroup allows a group member to leave the group.
    virtual ::grpc::Status LeaveGroup(::grpc::ServerContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateGroup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroup* /*request*/, ::cosmos::group::v1::MsgCreateGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroup(::grpc::ServerContext* context, ::cosmos::group::v1::MsgCreateGroup* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgCreateGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGroupMembers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMembers(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMembers* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupMembers(::grpc::ServerContext* context, ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGroupAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGroupAdmin() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateGroupAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupAdmin(::grpc::ServerContext* context, ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGroupMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGroupMetadata() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateGroupMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupMetadata(::grpc::ServerContext* context, ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateGroupPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateGroupPolicy() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateGroupPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroupPolicy(::grpc::ServerContext* context, ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateGroupWithPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateGroupWithPolicy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CreateGroupWithPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupWithPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroupWithPolicy(::grpc::ServerContext* context, ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGroupPolicyAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGroupPolicyAdmin() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateGroupPolicyAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupPolicyAdmin(::grpc::ServerContext* context, ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGroupPolicyDecisionPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGroupPolicyDecisionPolicy() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpdateGroupPolicyDecisionPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* context, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateGroupPolicyMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateGroupPolicyMetadata() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpdateGroupPolicyMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupPolicyMetadata(::grpc::ServerContext* context, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgSubmitProposal* /*request*/, ::cosmos::group::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitProposal(::grpc::ServerContext* context, ::cosmos::group::v1::MsgSubmitProposal* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgSubmitProposalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithdrawProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WithdrawProposal() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_WithdrawProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgWithdrawProposal* /*request*/, ::cosmos::group::v1::MsgWithdrawProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawProposal(::grpc::ServerContext* context, ::cosmos::group::v1::MsgWithdrawProposal* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgWithdrawProposalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Vote() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgVote* /*request*/, ::cosmos::group::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVote(::grpc::ServerContext* context, ::cosmos::group::v1::MsgVote* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgVoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Exec() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgExec* /*request*/, ::cosmos::group::v1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExec(::grpc::ServerContext* context, ::cosmos::group::v1::MsgExec* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgExecResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LeaveGroup() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_LeaveGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgLeaveGroup* /*request*/, ::cosmos::group::v1::MsgLeaveGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveGroup(::grpc::ServerContext* context, ::cosmos::group::v1::MsgLeaveGroup* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::group::v1::MsgLeaveGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateGroup<WithAsyncMethod_UpdateGroupMembers<WithAsyncMethod_UpdateGroupAdmin<WithAsyncMethod_UpdateGroupMetadata<WithAsyncMethod_CreateGroupPolicy<WithAsyncMethod_CreateGroupWithPolicy<WithAsyncMethod_UpdateGroupPolicyAdmin<WithAsyncMethod_UpdateGroupPolicyDecisionPolicy<WithAsyncMethod_UpdateGroupPolicyMetadata<WithAsyncMethod_SubmitProposal<WithAsyncMethod_WithdrawProposal<WithAsyncMethod_Vote<WithAsyncMethod_Exec<WithAsyncMethod_LeaveGroup<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateGroup() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgCreateGroup, ::cosmos::group::v1::MsgCreateGroupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgCreateGroup* request, ::cosmos::group::v1::MsgCreateGroupResponse* response) { return this->CreateGroup(context, request, response); }));}
    void SetMessageAllocatorFor_CreateGroup(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgCreateGroup, ::cosmos::group::v1::MsgCreateGroupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgCreateGroup, ::cosmos::group::v1::MsgCreateGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroup* /*request*/, ::cosmos::group::v1::MsgCreateGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroup* /*request*/, ::cosmos::group::v1::MsgCreateGroupResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateGroupMembers() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupMembers, ::cosmos::group::v1::MsgUpdateGroupMembersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupMembers* request, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* response) { return this->UpdateGroupMembers(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGroupMembers(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgUpdateGroupMembers, ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupMembers, ::cosmos::group::v1::MsgUpdateGroupMembersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMembers(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMembers* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupMembers(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMembers* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateGroupAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateGroupAdmin() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupAdmin, ::cosmos::group::v1::MsgUpdateGroupAdminResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupAdmin* request, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* response) { return this->UpdateGroupAdmin(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGroupAdmin(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgUpdateGroupAdmin, ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupAdmin, ::cosmos::group::v1::MsgUpdateGroupAdminResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateGroupAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupAdmin(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateGroupMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateGroupMetadata() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupMetadata, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupMetadata* request, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* response) { return this->UpdateGroupMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGroupMetadata(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgUpdateGroupMetadata, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupMetadata, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateGroupMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateGroupPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateGroupPolicy() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgCreateGroupPolicy, ::cosmos::group::v1::MsgCreateGroupPolicyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgCreateGroupPolicy* request, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* response) { return this->CreateGroupPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_CreateGroupPolicy(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgCreateGroupPolicy, ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgCreateGroupPolicy, ::cosmos::group::v1::MsgCreateGroupPolicyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateGroupPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateGroupPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateGroupWithPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateGroupWithPolicy() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* request, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* response) { return this->CreateGroupWithPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_CreateGroupWithPolicy(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateGroupWithPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupWithPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateGroupWithPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateGroupPolicyAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateGroupPolicyAdmin() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* request, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* response) { return this->UpdateGroupPolicyAdmin(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGroupPolicyAdmin(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateGroupPolicyAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupPolicyAdmin(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateGroupPolicyDecisionPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateGroupPolicyDecisionPolicy() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* request, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* response) { return this->UpdateGroupPolicyDecisionPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGroupPolicyDecisionPolicy(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateGroupPolicyDecisionPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupPolicyDecisionPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateGroupPolicyMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateGroupPolicyMetadata() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* request, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* response) { return this->UpdateGroupPolicyMetadata(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateGroupPolicyMetadata(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateGroupPolicyMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupPolicyMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgSubmitProposal, ::cosmos::group::v1::MsgSubmitProposalResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgSubmitProposal* request, ::cosmos::group::v1::MsgSubmitProposalResponse* response) { return this->SubmitProposal(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitProposal(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgSubmitProposal, ::cosmos::group::v1::MsgSubmitProposalResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgSubmitProposal, ::cosmos::group::v1::MsgSubmitProposalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgSubmitProposal* /*request*/, ::cosmos::group::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgSubmitProposal* /*request*/, ::cosmos::group::v1::MsgSubmitProposalResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WithdrawProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WithdrawProposal() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgWithdrawProposal, ::cosmos::group::v1::MsgWithdrawProposalResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgWithdrawProposal* request, ::cosmos::group::v1::MsgWithdrawProposalResponse* response) { return this->WithdrawProposal(context, request, response); }));}
    void SetMessageAllocatorFor_WithdrawProposal(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgWithdrawProposal, ::cosmos::group::v1::MsgWithdrawProposalResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgWithdrawProposal, ::cosmos::group::v1::MsgWithdrawProposalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WithdrawProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgWithdrawProposal* /*request*/, ::cosmos::group::v1::MsgWithdrawProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgWithdrawProposal* /*request*/, ::cosmos::group::v1::MsgWithdrawProposalResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Vote() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgVote, ::cosmos::group::v1::MsgVoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgVote* request, ::cosmos::group::v1::MsgVoteResponse* response) { return this->Vote(context, request, response); }));}
    void SetMessageAllocatorFor_Vote(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgVote, ::cosmos::group::v1::MsgVoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgVote, ::cosmos::group::v1::MsgVoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgVote* /*request*/, ::cosmos::group::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Vote(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgVote* /*request*/, ::cosmos::group::v1::MsgVoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Exec() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgExec, ::cosmos::group::v1::MsgExecResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgExec* request, ::cosmos::group::v1::MsgExecResponse* response) { return this->Exec(context, request, response); }));}
    void SetMessageAllocatorFor_Exec(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgExec, ::cosmos::group::v1::MsgExecResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgExec, ::cosmos::group::v1::MsgExecResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgExec* /*request*/, ::cosmos::group::v1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Exec(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgExec* /*request*/, ::cosmos::group::v1::MsgExecResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LeaveGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LeaveGroup() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgLeaveGroup, ::cosmos::group::v1::MsgLeaveGroupResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::group::v1::MsgLeaveGroup* request, ::cosmos::group::v1::MsgLeaveGroupResponse* response) { return this->LeaveGroup(context, request, response); }));}
    void SetMessageAllocatorFor_LeaveGroup(
        ::grpc::MessageAllocator< ::cosmos::group::v1::MsgLeaveGroup, ::cosmos::group::v1::MsgLeaveGroupResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::group::v1::MsgLeaveGroup, ::cosmos::group::v1::MsgLeaveGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LeaveGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgLeaveGroup* /*request*/, ::cosmos::group::v1::MsgLeaveGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::group::v1::MsgLeaveGroup* /*request*/, ::cosmos::group::v1::MsgLeaveGroupResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateGroup<WithCallbackMethod_UpdateGroupMembers<WithCallbackMethod_UpdateGroupAdmin<WithCallbackMethod_UpdateGroupMetadata<WithCallbackMethod_CreateGroupPolicy<WithCallbackMethod_CreateGroupWithPolicy<WithCallbackMethod_UpdateGroupPolicyAdmin<WithCallbackMethod_UpdateGroupPolicyDecisionPolicy<WithCallbackMethod_UpdateGroupPolicyMetadata<WithCallbackMethod_SubmitProposal<WithCallbackMethod_WithdrawProposal<WithCallbackMethod_Vote<WithCallbackMethod_Exec<WithCallbackMethod_LeaveGroup<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateGroup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroup* /*request*/, ::cosmos::group::v1::MsgCreateGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGroupMembers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMembers(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMembers* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGroupAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGroupAdmin() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateGroupAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGroupMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGroupMetadata() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateGroupMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateGroupPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateGroupPolicy() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateGroupPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateGroupWithPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateGroupWithPolicy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CreateGroupWithPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupWithPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGroupPolicyAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGroupPolicyAdmin() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateGroupPolicyAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGroupPolicyDecisionPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGroupPolicyDecisionPolicy() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpdateGroupPolicyDecisionPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateGroupPolicyMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateGroupPolicyMetadata() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpdateGroupPolicyMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgSubmitProposal* /*request*/, ::cosmos::group::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithdrawProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WithdrawProposal() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_WithdrawProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgWithdrawProposal* /*request*/, ::cosmos::group::v1::MsgWithdrawProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Vote() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgVote* /*request*/, ::cosmos::group::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Exec() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgExec* /*request*/, ::cosmos::group::v1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LeaveGroup() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_LeaveGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgLeaveGroup* /*request*/, ::cosmos::group::v1::MsgLeaveGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateGroup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroup* /*request*/, ::cosmos::group::v1::MsgCreateGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGroupMembers() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMembers(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMembers* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupMembers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGroupAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGroupAdmin() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateGroupAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupAdmin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGroupMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGroupMetadata() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateGroupMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateGroupPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateGroupPolicy() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateGroupPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroupPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateGroupWithPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateGroupWithPolicy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CreateGroupWithPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupWithPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateGroupWithPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGroupPolicyAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGroupPolicyAdmin() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpdateGroupPolicyAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupPolicyAdmin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGroupPolicyDecisionPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGroupPolicyDecisionPolicy() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpdateGroupPolicyDecisionPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateGroupPolicyMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateGroupPolicyMetadata() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UpdateGroupPolicyMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateGroupPolicyMetadata(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgSubmitProposal* /*request*/, ::cosmos::group::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitProposal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WithdrawProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WithdrawProposal() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_WithdrawProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgWithdrawProposal* /*request*/, ::cosmos::group::v1::MsgWithdrawProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawProposal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Vote() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgVote* /*request*/, ::cosmos::group::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Exec() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgExec* /*request*/, ::cosmos::group::v1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExec(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LeaveGroup() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_LeaveGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgLeaveGroup* /*request*/, ::cosmos::group::v1::MsgLeaveGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveGroup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateGroup() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroup* /*request*/, ::cosmos::group::v1::MsgCreateGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateGroupMembers() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGroupMembers(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMembers(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMembers* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupMembers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateGroupAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateGroupAdmin() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGroupAdmin(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateGroupAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupAdmin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateGroupMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateGroupMetadata() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGroupMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateGroupMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateGroupPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateGroupPolicy() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateGroupPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateGroupPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateGroupPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateGroupWithPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateGroupWithPolicy() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateGroupWithPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateGroupWithPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateGroupWithPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateGroupWithPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateGroupPolicyAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateGroupPolicyAdmin() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGroupPolicyAdmin(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateGroupPolicyAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupPolicyAdmin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateGroupPolicyDecisionPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateGroupPolicyDecisionPolicy() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGroupPolicyDecisionPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateGroupPolicyDecisionPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupPolicyDecisionPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateGroupPolicyMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateGroupPolicyMetadata() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateGroupPolicyMetadata(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateGroupPolicyMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateGroupPolicyMetadata(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitProposal(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgSubmitProposal* /*request*/, ::cosmos::group::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WithdrawProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WithdrawProposal() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WithdrawProposal(context, request, response); }));
    }
    ~WithRawCallbackMethod_WithdrawProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgWithdrawProposal* /*request*/, ::cosmos::group::v1::MsgWithdrawProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Vote() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Vote(context, request, response); }));
    }
    ~WithRawCallbackMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgVote* /*request*/, ::cosmos::group::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Vote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Exec() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Exec(context, request, response); }));
    }
    ~WithRawCallbackMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgExec* /*request*/, ::cosmos::group::v1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Exec(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LeaveGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LeaveGroup() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LeaveGroup(context, request, response); }));
    }
    ~WithRawCallbackMethod_LeaveGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgLeaveGroup* /*request*/, ::cosmos::group::v1::MsgLeaveGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LeaveGroup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateGroup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgCreateGroup, ::cosmos::group::v1::MsgCreateGroupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgCreateGroup, ::cosmos::group::v1::MsgCreateGroupResponse>* streamer) {
                       return this->StreamedCreateGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroup* /*request*/, ::cosmos::group::v1::MsgCreateGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgCreateGroup,::cosmos::group::v1::MsgCreateGroupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGroupMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGroupMembers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgUpdateGroupMembers, ::cosmos::group::v1::MsgUpdateGroupMembersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgUpdateGroupMembers, ::cosmos::group::v1::MsgUpdateGroupMembersResponse>* streamer) {
                       return this->StreamedUpdateGroupMembers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGroupMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGroupMembers(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMembers* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGroupMembers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgUpdateGroupMembers,::cosmos::group::v1::MsgUpdateGroupMembersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGroupAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGroupAdmin() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgUpdateGroupAdmin, ::cosmos::group::v1::MsgUpdateGroupAdminResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgUpdateGroupAdmin, ::cosmos::group::v1::MsgUpdateGroupAdminResponse>* streamer) {
                       return this->StreamedUpdateGroupAdmin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGroupAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGroupAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGroupAdmin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgUpdateGroupAdmin,::cosmos::group::v1::MsgUpdateGroupAdminResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGroupMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGroupMetadata() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgUpdateGroupMetadata, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgUpdateGroupMetadata, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* streamer) {
                       return this->StreamedUpdateGroupMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGroupMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGroupMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGroupMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgUpdateGroupMetadata,::cosmos::group::v1::MsgUpdateGroupMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateGroupPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateGroupPolicy() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgCreateGroupPolicy, ::cosmos::group::v1::MsgCreateGroupPolicyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgCreateGroupPolicy, ::cosmos::group::v1::MsgCreateGroupPolicyResponse>* streamer) {
                       return this->StreamedCreateGroupPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateGroupPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateGroupPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateGroupPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgCreateGroupPolicy,::cosmos::group::v1::MsgCreateGroupPolicyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateGroupWithPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateGroupWithPolicy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgCreateGroupWithPolicy, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* streamer) {
                       return this->StreamedCreateGroupWithPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateGroupWithPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateGroupWithPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgCreateGroupWithPolicy* /*request*/, ::cosmos::group::v1::MsgCreateGroupWithPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateGroupWithPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgCreateGroupWithPolicy,::cosmos::group::v1::MsgCreateGroupWithPolicyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGroupPolicyAdmin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGroupPolicyAdmin() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* streamer) {
                       return this->StreamedUpdateGroupPolicyAdmin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGroupPolicyAdmin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGroupPolicyAdmin(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGroupPolicyAdmin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgUpdateGroupPolicyAdmin,::cosmos::group::v1::MsgUpdateGroupPolicyAdminResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGroupPolicyDecisionPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGroupPolicyDecisionPolicy() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* streamer) {
                       return this->StreamedUpdateGroupPolicyDecisionPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGroupPolicyDecisionPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGroupPolicyDecisionPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicy,::cosmos::group::v1::MsgUpdateGroupPolicyDecisionPolicyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateGroupPolicyMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateGroupPolicyMetadata() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* streamer) {
                       return this->StreamedUpdateGroupPolicyMetadata(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateGroupPolicyMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateGroupPolicyMetadata(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata* /*request*/, ::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateGroupPolicyMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgUpdateGroupPolicyMetadata,::cosmos::group::v1::MsgUpdateGroupPolicyMetadataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgSubmitProposal, ::cosmos::group::v1::MsgSubmitProposalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgSubmitProposal, ::cosmos::group::v1::MsgSubmitProposalResponse>* streamer) {
                       return this->StreamedSubmitProposal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgSubmitProposal* /*request*/, ::cosmos::group::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitProposal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgSubmitProposal,::cosmos::group::v1::MsgSubmitProposalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithdrawProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WithdrawProposal() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgWithdrawProposal, ::cosmos::group::v1::MsgWithdrawProposalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgWithdrawProposal, ::cosmos::group::v1::MsgWithdrawProposalResponse>* streamer) {
                       return this->StreamedWithdrawProposal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WithdrawProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithdrawProposal(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgWithdrawProposal* /*request*/, ::cosmos::group::v1::MsgWithdrawProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithdrawProposal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgWithdrawProposal,::cosmos::group::v1::MsgWithdrawProposalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Vote() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgVote, ::cosmos::group::v1::MsgVoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgVote, ::cosmos::group::v1::MsgVoteResponse>* streamer) {
                       return this->StreamedVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgVote* /*request*/, ::cosmos::group::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgVote,::cosmos::group::v1::MsgVoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Exec() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgExec, ::cosmos::group::v1::MsgExecResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgExec, ::cosmos::group::v1::MsgExecResponse>* streamer) {
                       return this->StreamedExec(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgExec* /*request*/, ::cosmos::group::v1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExec(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgExec,::cosmos::group::v1::MsgExecResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveGroup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LeaveGroup() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::group::v1::MsgLeaveGroup, ::cosmos::group::v1::MsgLeaveGroupResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::group::v1::MsgLeaveGroup, ::cosmos::group::v1::MsgLeaveGroupResponse>* streamer) {
                       return this->StreamedLeaveGroup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LeaveGroup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveGroup(::grpc::ServerContext* /*context*/, const ::cosmos::group::v1::MsgLeaveGroup* /*request*/, ::cosmos::group::v1::MsgLeaveGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveGroup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::group::v1::MsgLeaveGroup,::cosmos::group::v1::MsgLeaveGroupResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateGroup<WithStreamedUnaryMethod_UpdateGroupMembers<WithStreamedUnaryMethod_UpdateGroupAdmin<WithStreamedUnaryMethod_UpdateGroupMetadata<WithStreamedUnaryMethod_CreateGroupPolicy<WithStreamedUnaryMethod_CreateGroupWithPolicy<WithStreamedUnaryMethod_UpdateGroupPolicyAdmin<WithStreamedUnaryMethod_UpdateGroupPolicyDecisionPolicy<WithStreamedUnaryMethod_UpdateGroupPolicyMetadata<WithStreamedUnaryMethod_SubmitProposal<WithStreamedUnaryMethod_WithdrawProposal<WithStreamedUnaryMethod_Vote<WithStreamedUnaryMethod_Exec<WithStreamedUnaryMethod_LeaveGroup<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateGroup<WithStreamedUnaryMethod_UpdateGroupMembers<WithStreamedUnaryMethod_UpdateGroupAdmin<WithStreamedUnaryMethod_UpdateGroupMetadata<WithStreamedUnaryMethod_CreateGroupPolicy<WithStreamedUnaryMethod_CreateGroupWithPolicy<WithStreamedUnaryMethod_UpdateGroupPolicyAdmin<WithStreamedUnaryMethod_UpdateGroupPolicyDecisionPolicy<WithStreamedUnaryMethod_UpdateGroupPolicyMetadata<WithStreamedUnaryMethod_SubmitProposal<WithStreamedUnaryMethod_WithdrawProposal<WithStreamedUnaryMethod_Vote<WithStreamedUnaryMethod_Exec<WithStreamedUnaryMethod_LeaveGroup<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace group
}  // namespace cosmos


#endif  // GRPC_cosmos_2fgroup_2fv1_2ftx_2eproto__INCLUDED

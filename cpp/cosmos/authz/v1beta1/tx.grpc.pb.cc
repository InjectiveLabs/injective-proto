// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/authz/v1beta1/tx.proto

#include "cosmos/authz/v1beta1/tx.pb.h"
#include "cosmos/authz/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace authz {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/cosmos.authz.v1beta1.Msg/Grant",
  "/cosmos.authz.v1beta1.Msg/Exec",
  "/cosmos.authz.v1beta1.Msg/Revoke",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Grant_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Exec_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Revoke_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::cosmos::authz::v1beta1::MsgGrantResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::authz::v1beta1::MsgGrant, ::cosmos::authz::v1beta1::MsgGrantResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Grant_, context, request, response);
}

void Msg::Stub::async::Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::authz::v1beta1::MsgGrant, ::cosmos::authz::v1beta1::MsgGrantResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Grant_, context, request, response, std::move(f));
}

void Msg::Stub::async::Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Grant_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgGrantResponse>* Msg::Stub::PrepareAsyncGrantRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::authz::v1beta1::MsgGrantResponse, ::cosmos::authz::v1beta1::MsgGrant, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Grant_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgGrantResponse>* Msg::Stub::AsyncGrantRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGrantRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::cosmos::authz::v1beta1::MsgExecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::authz::v1beta1::MsgExec, ::cosmos::authz::v1beta1::MsgExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void Msg::Stub::async::Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::authz::v1beta1::MsgExec, ::cosmos::authz::v1beta1::MsgExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void Msg::Stub::async::Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgExecResponse>* Msg::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::authz::v1beta1::MsgExecResponse, ::cosmos::authz::v1beta1::MsgExec, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgExecResponse>* Msg::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::authz::v1beta1::MsgRevoke, ::cosmos::authz::v1beta1::MsgRevokeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Revoke_, context, request, response);
}

void Msg::Stub::async::Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::authz::v1beta1::MsgRevoke, ::cosmos::authz::v1beta1::MsgRevokeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Revoke_, context, request, response, std::move(f));
}

void Msg::Stub::async::Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Revoke_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgRevokeResponse>* Msg::Stub::PrepareAsyncRevokeRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::authz::v1beta1::MsgRevokeResponse, ::cosmos::authz::v1beta1::MsgRevoke, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Revoke_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgRevokeResponse>* Msg::Stub::AsyncRevokeRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRevokeRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::authz::v1beta1::MsgGrant, ::cosmos::authz::v1beta1::MsgGrantResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::authz::v1beta1::MsgGrant* req,
             ::cosmos::authz::v1beta1::MsgGrantResponse* resp) {
               return service->Grant(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::authz::v1beta1::MsgExec, ::cosmos::authz::v1beta1::MsgExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::authz::v1beta1::MsgExec* req,
             ::cosmos::authz::v1beta1::MsgExecResponse* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::authz::v1beta1::MsgRevoke, ::cosmos::authz::v1beta1::MsgRevokeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::authz::v1beta1::MsgRevoke* req,
             ::cosmos::authz::v1beta1::MsgRevokeResponse* resp) {
               return service->Revoke(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::Grant(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Exec(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Revoke(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace authz
}  // namespace v1beta1


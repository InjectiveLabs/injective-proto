// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/authz/v1beta1/tx.proto
// Original file comments:
// Since: cosmos-sdk 0.43
#ifndef GRPC_cosmos_2fauthz_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_cosmos_2fauthz_2fv1beta1_2ftx_2eproto__INCLUDED

#include "cosmos/authz/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace authz {
namespace v1beta1 {

// Msg defines the authz Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.authz.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Grant grants the provided authorization to the grantee on the granter's
    // account with the provided expiration time. If there is already a grant
    // for the given (granter, grantee, Authorization) triple, then the grant
    // will be overwritten.
    virtual ::grpc::Status Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::cosmos::authz::v1beta1::MsgGrantResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgGrantResponse>> AsyncGrant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgGrantResponse>>(AsyncGrantRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgGrantResponse>> PrepareAsyncGrant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgGrantResponse>>(PrepareAsyncGrantRaw(context, request, cq));
    }
    // Exec attempts to execute the provided messages using
    // authorizations granted to the grantee. Each message should have only
    // one signer corresponding to the granter of the authorization.
    virtual ::grpc::Status Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::cosmos::authz::v1beta1::MsgExecResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgExecResponse>> AsyncExec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgExecResponse>>(AsyncExecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgExecResponse>> PrepareAsyncExec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgExecResponse>>(PrepareAsyncExecRaw(context, request, cq));
    }
    // Revoke revokes any authorization corresponding to the provided method name on the
    // granter's account that has been granted to the grantee.
    virtual ::grpc::Status Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgRevokeResponse>> AsyncRevoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgRevokeResponse>>(AsyncRevokeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgRevokeResponse>> PrepareAsyncRevoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgRevokeResponse>>(PrepareAsyncRevokeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Grant grants the provided authorization to the grantee on the granter's
      // account with the provided expiration time. If there is already a grant
      // for the given (granter, grantee, Authorization) triple, then the grant
      // will be overwritten.
      virtual void Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Exec attempts to execute the provided messages using
      // authorizations granted to the grantee. Each message should have only
      // one signer corresponding to the granter of the authorization.
      virtual void Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Revoke revokes any authorization corresponding to the provided method name on the
      // granter's account that has been granted to the grantee.
      virtual void Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgGrantResponse>* AsyncGrantRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgGrantResponse>* PrepareAsyncGrantRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgExecResponse>* AsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgExecResponse>* PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgRevokeResponse>* AsyncRevokeRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::MsgRevokeResponse>* PrepareAsyncRevokeRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::cosmos::authz::v1beta1::MsgGrantResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgGrantResponse>> AsyncGrant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgGrantResponse>>(AsyncGrantRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgGrantResponse>> PrepareAsyncGrant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgGrantResponse>>(PrepareAsyncGrantRaw(context, request, cq));
    }
    ::grpc::Status Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::cosmos::authz::v1beta1::MsgExecResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgExecResponse>> AsyncExec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgExecResponse>>(AsyncExecRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgExecResponse>> PrepareAsyncExec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgExecResponse>>(PrepareAsyncExecRaw(context, request, cq));
    }
    ::grpc::Status Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgRevokeResponse>> AsyncRevoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgRevokeResponse>>(AsyncRevokeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgRevokeResponse>> PrepareAsyncRevoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgRevokeResponse>>(PrepareAsyncRevokeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response, std::function<void(::grpc::Status)>) override;
      void Grant(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response, std::function<void(::grpc::Status)>) override;
      void Exec(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response, std::function<void(::grpc::Status)>) override;
      void Revoke(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgGrantResponse>* AsyncGrantRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgGrantResponse>* PrepareAsyncGrantRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgGrant& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgExecResponse>* AsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgExecResponse>* PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgExec& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgRevokeResponse>* AsyncRevokeRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::MsgRevokeResponse>* PrepareAsyncRevokeRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::MsgRevoke& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Grant_;
    const ::grpc::internal::RpcMethod rpcmethod_Exec_;
    const ::grpc::internal::RpcMethod rpcmethod_Revoke_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Grant grants the provided authorization to the grantee on the granter's
    // account with the provided expiration time. If there is already a grant
    // for the given (granter, grantee, Authorization) triple, then the grant
    // will be overwritten.
    virtual ::grpc::Status Grant(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response);
    // Exec attempts to execute the provided messages using
    // authorizations granted to the grantee. Each message should have only
    // one signer corresponding to the granter of the authorization.
    virtual ::grpc::Status Exec(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response);
    // Revoke revokes any authorization corresponding to the provided method name on the
    // granter's account that has been granted to the grantee.
    virtual ::grpc::Status Revoke(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Grant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Grant() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Grant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grant(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgGrant* /*request*/, ::cosmos::authz::v1beta1::MsgGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGrant(::grpc::ServerContext* context, ::cosmos::authz::v1beta1::MsgGrant* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::authz::v1beta1::MsgGrantResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Exec() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgExec* /*request*/, ::cosmos::authz::v1beta1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExec(::grpc::ServerContext* context, ::cosmos::authz::v1beta1::MsgExec* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::authz::v1beta1::MsgExecResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Revoke() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgRevoke* /*request*/, ::cosmos::authz::v1beta1::MsgRevokeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRevoke(::grpc::ServerContext* context, ::cosmos::authz::v1beta1::MsgRevoke* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::authz::v1beta1::MsgRevokeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Grant<WithAsyncMethod_Exec<WithAsyncMethod_Revoke<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Grant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Grant() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::MsgGrant, ::cosmos::authz::v1beta1::MsgGrantResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::authz::v1beta1::MsgGrant* request, ::cosmos::authz::v1beta1::MsgGrantResponse* response) { return this->Grant(context, request, response); }));}
    void SetMessageAllocatorFor_Grant(
        ::grpc::MessageAllocator< ::cosmos::authz::v1beta1::MsgGrant, ::cosmos::authz::v1beta1::MsgGrantResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::MsgGrant, ::cosmos::authz::v1beta1::MsgGrantResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Grant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grant(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgGrant* /*request*/, ::cosmos::authz::v1beta1::MsgGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Grant(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgGrant* /*request*/, ::cosmos::authz::v1beta1::MsgGrantResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Exec() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::MsgExec, ::cosmos::authz::v1beta1::MsgExecResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::authz::v1beta1::MsgExec* request, ::cosmos::authz::v1beta1::MsgExecResponse* response) { return this->Exec(context, request, response); }));}
    void SetMessageAllocatorFor_Exec(
        ::grpc::MessageAllocator< ::cosmos::authz::v1beta1::MsgExec, ::cosmos::authz::v1beta1::MsgExecResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::MsgExec, ::cosmos::authz::v1beta1::MsgExecResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgExec* /*request*/, ::cosmos::authz::v1beta1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Exec(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgExec* /*request*/, ::cosmos::authz::v1beta1::MsgExecResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Revoke() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::MsgRevoke, ::cosmos::authz::v1beta1::MsgRevokeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::authz::v1beta1::MsgRevoke* request, ::cosmos::authz::v1beta1::MsgRevokeResponse* response) { return this->Revoke(context, request, response); }));}
    void SetMessageAllocatorFor_Revoke(
        ::grpc::MessageAllocator< ::cosmos::authz::v1beta1::MsgRevoke, ::cosmos::authz::v1beta1::MsgRevokeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::MsgRevoke, ::cosmos::authz::v1beta1::MsgRevokeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgRevoke* /*request*/, ::cosmos::authz::v1beta1::MsgRevokeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Revoke(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgRevoke* /*request*/, ::cosmos::authz::v1beta1::MsgRevokeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Grant<WithCallbackMethod_Exec<WithCallbackMethod_Revoke<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Grant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Grant() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Grant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grant(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgGrant* /*request*/, ::cosmos::authz::v1beta1::MsgGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Exec() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgExec* /*request*/, ::cosmos::authz::v1beta1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Revoke() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgRevoke* /*request*/, ::cosmos::authz::v1beta1::MsgRevokeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Grant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Grant() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Grant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grant(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgGrant* /*request*/, ::cosmos::authz::v1beta1::MsgGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGrant(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Exec() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgExec* /*request*/, ::cosmos::authz::v1beta1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExec(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Revoke() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgRevoke* /*request*/, ::cosmos::authz::v1beta1::MsgRevokeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRevoke(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Grant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Grant() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Grant(context, request, response); }));
    }
    ~WithRawCallbackMethod_Grant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grant(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgGrant* /*request*/, ::cosmos::authz::v1beta1::MsgGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Grant(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Exec() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Exec(context, request, response); }));
    }
    ~WithRawCallbackMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgExec* /*request*/, ::cosmos::authz::v1beta1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Exec(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Revoke() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Revoke(context, request, response); }));
    }
    ~WithRawCallbackMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgRevoke* /*request*/, ::cosmos::authz::v1beta1::MsgRevokeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Revoke(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Grant : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Grant() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::authz::v1beta1::MsgGrant, ::cosmos::authz::v1beta1::MsgGrantResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::authz::v1beta1::MsgGrant, ::cosmos::authz::v1beta1::MsgGrantResponse>* streamer) {
                       return this->StreamedGrant(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Grant() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Grant(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgGrant* /*request*/, ::cosmos::authz::v1beta1::MsgGrantResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGrant(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::authz::v1beta1::MsgGrant,::cosmos::authz::v1beta1::MsgGrantResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Exec : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Exec() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::authz::v1beta1::MsgExec, ::cosmos::authz::v1beta1::MsgExecResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::authz::v1beta1::MsgExec, ::cosmos::authz::v1beta1::MsgExecResponse>* streamer) {
                       return this->StreamedExec(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Exec() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Exec(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgExec* /*request*/, ::cosmos::authz::v1beta1::MsgExecResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExec(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::authz::v1beta1::MsgExec,::cosmos::authz::v1beta1::MsgExecResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Revoke : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Revoke() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::authz::v1beta1::MsgRevoke, ::cosmos::authz::v1beta1::MsgRevokeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::authz::v1beta1::MsgRevoke, ::cosmos::authz::v1beta1::MsgRevokeResponse>* streamer) {
                       return this->StreamedRevoke(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Revoke() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Revoke(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::MsgRevoke* /*request*/, ::cosmos::authz::v1beta1::MsgRevokeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRevoke(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::authz::v1beta1::MsgRevoke,::cosmos::authz::v1beta1::MsgRevokeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Grant<WithStreamedUnaryMethod_Exec<WithStreamedUnaryMethod_Revoke<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Grant<WithStreamedUnaryMethod_Exec<WithStreamedUnaryMethod_Revoke<Service > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace authz
}  // namespace cosmos


#endif  // GRPC_cosmos_2fauthz_2fv1beta1_2ftx_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/authz/v1beta1/query.proto
// Original file comments:
// Since: cosmos-sdk 0.43
#ifndef GRPC_cosmos_2fauthz_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fauthz_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/authz/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace authz {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.authz.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns list of `Authorization`, granted to the grantee by the granter.
    virtual ::grpc::Status Grants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::cosmos::authz::v1beta1::QueryGrantsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGrantsResponse>> AsyncGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGrantsResponse>>(AsyncGrantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGrantsResponse>> PrepareAsyncGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGrantsResponse>>(PrepareAsyncGrantsRaw(context, request, cq));
    }
    // GranterGrants returns list of `GrantAuthorization`, granted by granter.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status GranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>> AsyncGranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>>(AsyncGranterGrantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>> PrepareAsyncGranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>>(PrepareAsyncGranterGrantsRaw(context, request, cq));
    }
    // GranteeGrants returns a list of `GrantAuthorization` by grantee.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status GranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>> AsyncGranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>>(AsyncGranteeGrantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>> PrepareAsyncGranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>>(PrepareAsyncGranteeGrantsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Returns list of `Authorization`, granted to the grantee by the granter.
      virtual void Grants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGrantsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Grants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGrantsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GranterGrants returns list of `GrantAuthorization`, granted by granter.
      //
      // Since: cosmos-sdk 0.46
      virtual void GranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GranteeGrants returns a list of `GrantAuthorization` by grantee.
      //
      // Since: cosmos-sdk 0.46
      virtual void GranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGrantsResponse>* AsyncGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGrantsResponse>* PrepareAsyncGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>* AsyncGranterGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>* PrepareAsyncGranterGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>* AsyncGranteeGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>* PrepareAsyncGranteeGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Grants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::cosmos::authz::v1beta1::QueryGrantsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGrantsResponse>> AsyncGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGrantsResponse>>(AsyncGrantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGrantsResponse>> PrepareAsyncGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGrantsResponse>>(PrepareAsyncGrantsRaw(context, request, cq));
    }
    ::grpc::Status GranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>> AsyncGranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>>(AsyncGranterGrantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>> PrepareAsyncGranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>>(PrepareAsyncGranterGrantsRaw(context, request, cq));
    }
    ::grpc::Status GranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>> AsyncGranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>>(AsyncGranteeGrantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>> PrepareAsyncGranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>>(PrepareAsyncGranteeGrantsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Grants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGrantsResponse* response, std::function<void(::grpc::Status)>) override;
      void Grants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGrantsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* response, std::function<void(::grpc::Status)>) override;
      void GranterGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* response, std::function<void(::grpc::Status)>) override;
      void GranteeGrants(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGrantsResponse>* AsyncGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGrantsResponse>* PrepareAsyncGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>* AsyncGranterGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>* PrepareAsyncGranterGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>* AsyncGranteeGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>* PrepareAsyncGranteeGrantsRaw(::grpc::ClientContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Grants_;
    const ::grpc::internal::RpcMethod rpcmethod_GranterGrants_;
    const ::grpc::internal::RpcMethod rpcmethod_GranteeGrants_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns list of `Authorization`, granted to the grantee by the granter.
    virtual ::grpc::Status Grants(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGrantsResponse* response);
    // GranterGrants returns list of `GrantAuthorization`, granted by granter.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status GranterGrants(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* response);
    // GranteeGrants returns a list of `GrantAuthorization` by grantee.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status GranteeGrants(::grpc::ServerContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Grants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Grants() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Grants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGrants(::grpc::ServerContext* context, ::cosmos::authz::v1beta1::QueryGrantsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::authz::v1beta1::QueryGrantsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GranterGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GranterGrants() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GranterGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranterGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGranterGrants(::grpc::ServerContext* context, ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GranteeGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GranteeGrants() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GranteeGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranteeGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGranteeGrants(::grpc::ServerContext* context, ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Grants<WithAsyncMethod_GranterGrants<WithAsyncMethod_GranteeGrants<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Grants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Grants() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::QueryGrantsRequest, ::cosmos::authz::v1beta1::QueryGrantsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::authz::v1beta1::QueryGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGrantsResponse* response) { return this->Grants(context, request, response); }));}
    void SetMessageAllocatorFor_Grants(
        ::grpc::MessageAllocator< ::cosmos::authz::v1beta1::QueryGrantsRequest, ::cosmos::authz::v1beta1::QueryGrantsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::QueryGrantsRequest, ::cosmos::authz::v1beta1::QueryGrantsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Grants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Grants(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGrantsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GranterGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GranterGrants() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::QueryGranterGrantsRequest, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* response) { return this->GranterGrants(context, request, response); }));}
    void SetMessageAllocatorFor_GranterGrants(
        ::grpc::MessageAllocator< ::cosmos::authz::v1beta1::QueryGranterGrantsRequest, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::QueryGranterGrantsRequest, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GranterGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranterGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GranterGrants(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GranteeGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GranteeGrants() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* request, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* response) { return this->GranteeGrants(context, request, response); }));}
    void SetMessageAllocatorFor_GranteeGrants(
        ::grpc::MessageAllocator< ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GranteeGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranteeGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GranteeGrants(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Grants<WithCallbackMethod_GranterGrants<WithCallbackMethod_GranteeGrants<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Grants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Grants() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Grants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GranterGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GranterGrants() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GranterGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranterGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GranteeGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GranteeGrants() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GranteeGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranteeGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Grants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Grants() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Grants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGrants(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GranterGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GranterGrants() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GranterGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranterGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGranterGrants(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GranteeGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GranteeGrants() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GranteeGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranteeGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGranteeGrants(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Grants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Grants() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Grants(context, request, response); }));
    }
    ~WithRawCallbackMethod_Grants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Grants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Grants(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GranterGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GranterGrants() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GranterGrants(context, request, response); }));
    }
    ~WithRawCallbackMethod_GranterGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranterGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GranterGrants(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GranteeGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GranteeGrants() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GranteeGrants(context, request, response); }));
    }
    ~WithRawCallbackMethod_GranteeGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GranteeGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GranteeGrants(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Grants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Grants() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::authz::v1beta1::QueryGrantsRequest, ::cosmos::authz::v1beta1::QueryGrantsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::authz::v1beta1::QueryGrantsRequest, ::cosmos::authz::v1beta1::QueryGrantsResponse>* streamer) {
                       return this->StreamedGrants(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Grants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Grants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGrants(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::authz::v1beta1::QueryGrantsRequest,::cosmos::authz::v1beta1::QueryGrantsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GranterGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GranterGrants() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::authz::v1beta1::QueryGranterGrantsRequest, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::authz::v1beta1::QueryGranterGrantsRequest, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse>* streamer) {
                       return this->StreamedGranterGrants(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GranterGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GranterGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranterGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranterGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGranterGrants(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::authz::v1beta1::QueryGranterGrantsRequest,::cosmos::authz::v1beta1::QueryGranterGrantsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GranteeGrants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GranteeGrants() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>* streamer) {
                       return this->StreamedGranteeGrants(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GranteeGrants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GranteeGrants(::grpc::ServerContext* /*context*/, const ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest* /*request*/, ::cosmos::authz::v1beta1::QueryGranteeGrantsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGranteeGrants(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::authz::v1beta1::QueryGranteeGrantsRequest,::cosmos::authz::v1beta1::QueryGranteeGrantsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Grants<WithStreamedUnaryMethod_GranterGrants<WithStreamedUnaryMethod_GranteeGrants<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Grants<WithStreamedUnaryMethod_GranterGrants<WithStreamedUnaryMethod_GranteeGrants<Service > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace authz
}  // namespace cosmos


#endif  // GRPC_cosmos_2fauthz_2fv1beta1_2fquery_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/authz/v1beta1/authz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "amino/amino.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto;
namespace cosmos {
namespace authz {
namespace v1beta1 {
class GenericAuthorization;
struct GenericAuthorizationDefaultTypeInternal;
extern GenericAuthorizationDefaultTypeInternal _GenericAuthorization_default_instance_;
class Grant;
struct GrantDefaultTypeInternal;
extern GrantDefaultTypeInternal _Grant_default_instance_;
class GrantAuthorization;
struct GrantAuthorizationDefaultTypeInternal;
extern GrantAuthorizationDefaultTypeInternal _GrantAuthorization_default_instance_;
class GrantQueueItem;
struct GrantQueueItemDefaultTypeInternal;
extern GrantQueueItemDefaultTypeInternal _GrantQueueItem_default_instance_;
}  // namespace v1beta1
}  // namespace authz
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::authz::v1beta1::GenericAuthorization* Arena::CreateMaybeMessage<::cosmos::authz::v1beta1::GenericAuthorization>(Arena*);
template <>
::cosmos::authz::v1beta1::Grant* Arena::CreateMaybeMessage<::cosmos::authz::v1beta1::Grant>(Arena*);
template <>
::cosmos::authz::v1beta1::GrantAuthorization* Arena::CreateMaybeMessage<::cosmos::authz::v1beta1::GrantAuthorization>(Arena*);
template <>
::cosmos::authz::v1beta1::GrantQueueItem* Arena::CreateMaybeMessage<::cosmos::authz::v1beta1::GrantQueueItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace authz {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GenericAuthorization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.authz.v1beta1.GenericAuthorization) */ {
 public:
  inline GenericAuthorization() : GenericAuthorization(nullptr) {}
  ~GenericAuthorization() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenericAuthorization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericAuthorization(const GenericAuthorization& from);
  GenericAuthorization(GenericAuthorization&& from) noexcept
    : GenericAuthorization() {
    *this = ::std::move(from);
  }

  inline GenericAuthorization& operator=(const GenericAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericAuthorization& operator=(GenericAuthorization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenericAuthorization& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericAuthorization* internal_default_instance() {
    return reinterpret_cast<const GenericAuthorization*>(
               &_GenericAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenericAuthorization& a, GenericAuthorization& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericAuthorization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericAuthorization* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericAuthorization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericAuthorization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenericAuthorization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenericAuthorization& from) {
    GenericAuthorization::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericAuthorization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.authz.v1beta1.GenericAuthorization";
  }
  protected:
  explicit GenericAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg() ;
  const std::string& msg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* ptr);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.authz.v1beta1.GenericAuthorization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class Grant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.authz.v1beta1.Grant) */ {
 public:
  inline Grant() : Grant(nullptr) {}
  ~Grant() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Grant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Grant(const Grant& from);
  Grant(Grant&& from) noexcept
    : Grant() {
    *this = ::std::move(from);
  }

  inline Grant& operator=(const Grant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grant& operator=(Grant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Grant& default_instance() {
    return *internal_default_instance();
  }
  static inline const Grant* internal_default_instance() {
    return reinterpret_cast<const Grant*>(
               &_Grant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Grant& a, Grant& b) {
    a.Swap(&b);
  }
  inline void Swap(Grant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grant* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Grant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Grant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Grant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Grant& from) {
    Grant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.authz.v1beta1.Grant";
  }
  protected:
  explicit Grant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorizationFieldNumber = 1,
    kExpirationFieldNumber = 2,
  };
  // .google.protobuf.Any authorization = 1 [json_name = "authorization", (.cosmos_proto.accepts_interface) = "cosmos.authz.v1beta1.Authorization"];
  bool has_authorization() const;
  void clear_authorization() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& authorization() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_authorization();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_authorization();
  void set_allocated_authorization(::PROTOBUF_NAMESPACE_ID::Any* authorization);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_authorization() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_authorization();
  public:
  void unsafe_arena_set_allocated_authorization(
      ::PROTOBUF_NAMESPACE_ID::Any* authorization);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_authorization();
  // .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];
  bool has_expiration() const;
  void clear_expiration() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration();
  void set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration();
  public:
  void unsafe_arena_set_allocated_expiration(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration();
  // @@protoc_insertion_point(class_scope:cosmos.authz.v1beta1.Grant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* authorization_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class GrantAuthorization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.authz.v1beta1.GrantAuthorization) */ {
 public:
  inline GrantAuthorization() : GrantAuthorization(nullptr) {}
  ~GrantAuthorization() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GrantAuthorization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantAuthorization(const GrantAuthorization& from);
  GrantAuthorization(GrantAuthorization&& from) noexcept
    : GrantAuthorization() {
    *this = ::std::move(from);
  }

  inline GrantAuthorization& operator=(const GrantAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantAuthorization& operator=(GrantAuthorization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantAuthorization& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantAuthorization* internal_default_instance() {
    return reinterpret_cast<const GrantAuthorization*>(
               &_GrantAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GrantAuthorization& a, GrantAuthorization& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantAuthorization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantAuthorization* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantAuthorization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantAuthorization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantAuthorization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantAuthorization& from) {
    GrantAuthorization::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantAuthorization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.authz.v1beta1.GrantAuthorization";
  }
  protected:
  explicit GrantAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGranterFieldNumber = 1,
    kGranteeFieldNumber = 2,
    kAuthorizationFieldNumber = 3,
    kExpirationFieldNumber = 4,
  };
  // string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_granter() ;
  const std::string& granter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter(Arg_&& arg, Args_... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* ptr);

  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(
      const std::string& value);
  std::string* _internal_mutable_granter();

  public:
  // string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_grantee() ;
  const std::string& grantee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_grantee(Arg_&& arg, Args_... args);
  std::string* mutable_grantee();
  PROTOBUF_NODISCARD std::string* release_grantee();
  void set_allocated_grantee(std::string* ptr);

  private:
  const std::string& _internal_grantee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_grantee(
      const std::string& value);
  std::string* _internal_mutable_grantee();

  public:
  // .google.protobuf.Any authorization = 3 [json_name = "authorization", (.cosmos_proto.accepts_interface) = "cosmos.authz.v1beta1.Authorization"];
  bool has_authorization() const;
  void clear_authorization() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& authorization() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_authorization();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_authorization();
  void set_allocated_authorization(::PROTOBUF_NAMESPACE_ID::Any* authorization);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_authorization() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_authorization();
  public:
  void unsafe_arena_set_allocated_authorization(
      ::PROTOBUF_NAMESPACE_ID::Any* authorization);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_authorization();
  // .google.protobuf.Timestamp expiration = 4 [json_name = "expiration", (.gogoproto.stdtime) = true];
  bool has_expiration() const;
  void clear_expiration() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration();
  void set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration();
  public:
  void unsafe_arena_set_allocated_expiration(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration();
  // @@protoc_insertion_point(class_scope:cosmos.authz.v1beta1.GrantAuthorization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grantee_;
    ::PROTOBUF_NAMESPACE_ID::Any* authorization_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class GrantQueueItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.authz.v1beta1.GrantQueueItem) */ {
 public:
  inline GrantQueueItem() : GrantQueueItem(nullptr) {}
  ~GrantQueueItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GrantQueueItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GrantQueueItem(const GrantQueueItem& from);
  GrantQueueItem(GrantQueueItem&& from) noexcept
    : GrantQueueItem() {
    *this = ::std::move(from);
  }

  inline GrantQueueItem& operator=(const GrantQueueItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GrantQueueItem& operator=(GrantQueueItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GrantQueueItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GrantQueueItem* internal_default_instance() {
    return reinterpret_cast<const GrantQueueItem*>(
               &_GrantQueueItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GrantQueueItem& a, GrantQueueItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GrantQueueItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GrantQueueItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GrantQueueItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GrantQueueItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GrantQueueItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GrantQueueItem& from) {
    GrantQueueItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GrantQueueItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.authz.v1beta1.GrantQueueItem";
  }
  protected:
  explicit GrantQueueItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeUrlsFieldNumber = 1,
  };
  // repeated string msg_type_urls = 1 [json_name = "msgTypeUrls"];
  int msg_type_urls_size() const;
  private:
  int _internal_msg_type_urls_size() const;

  public:
  void clear_msg_type_urls() ;
  const std::string& msg_type_urls(int index) const;
  std::string* mutable_msg_type_urls(int index);
  void set_msg_type_urls(int index, const std::string& value);
  void set_msg_type_urls(int index, std::string&& value);
  void set_msg_type_urls(int index, const char* value);
  void set_msg_type_urls(int index, const char* value, std::size_t size);
  void set_msg_type_urls(int index, absl::string_view value);
  std::string* add_msg_type_urls();
  void add_msg_type_urls(const std::string& value);
  void add_msg_type_urls(std::string&& value);
  void add_msg_type_urls(const char* value);
  void add_msg_type_urls(const char* value, std::size_t size);
  void add_msg_type_urls(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msg_type_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msg_type_urls();

  private:
  const std::string& _internal_msg_type_urls(int index) const;
  std::string* _internal_add_msg_type_urls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_msg_type_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_msg_type_urls();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.authz.v1beta1.GrantQueueItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msg_type_urls_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenericAuthorization

// string msg = 1 [json_name = "msg"];
inline void GenericAuthorization::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& GenericAuthorization::msg() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.GenericAuthorization.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenericAuthorization::set_msg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.GenericAuthorization.msg)
}
inline std::string* GenericAuthorization::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.GenericAuthorization.msg)
  return _s;
}
inline const std::string& GenericAuthorization::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void GenericAuthorization::_internal_set_msg(const std::string& value) {
  ;


  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GenericAuthorization::_internal_mutable_msg() {
  ;
  return _impl_.msg_.Mutable( GetArenaForAllocation());
}
inline std::string* GenericAuthorization::release_msg() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.GenericAuthorization.msg)
  return _impl_.msg_.Release();
}
inline void GenericAuthorization::set_allocated_msg(std::string* value) {
  _impl_.msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.GenericAuthorization.msg)
}

// -------------------------------------------------------------------

// Grant

// .google.protobuf.Any authorization = 1 [json_name = "authorization", (.cosmos_proto.accepts_interface) = "cosmos.authz.v1beta1.Authorization"];
inline bool Grant::has_authorization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authorization_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Grant::_internal_authorization() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.authorization_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Grant::authorization() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.Grant.authorization)
  return _internal_authorization();
}
inline void Grant::unsafe_arena_set_allocated_authorization(
    ::PROTOBUF_NAMESPACE_ID::Any* authorization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authorization_);
  }
  _impl_.authorization_ = authorization;
  if (authorization) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.authz.v1beta1.Grant.authorization)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::release_authorization() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.authorization_;
  _impl_.authorization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::unsafe_arena_release_authorization() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.Grant.authorization)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.authorization_;
  _impl_.authorization_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::_internal_mutable_authorization() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.authorization_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.authorization_ = p;
  }
  return _impl_.authorization_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Grant::mutable_authorization() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_authorization();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.Grant.authorization)
  return _msg;
}
inline void Grant::set_allocated_authorization(::PROTOBUF_NAMESPACE_ID::Any* authorization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authorization_);
  }
  if (authorization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authorization));
    if (message_arena != submessage_arena) {
      authorization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authorization, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authorization_ = authorization;
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.Grant.authorization)
}

// .google.protobuf.Timestamp expiration = 2 [json_name = "expiration", (.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];
inline bool Grant::has_expiration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Grant::_internal_expiration() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expiration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Grant::expiration() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.Grant.expiration)
  return _internal_expiration();
}
inline void Grant::unsafe_arena_set_allocated_expiration(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_);
  }
  _impl_.expiration_ = expiration;
  if (expiration) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.authz.v1beta1.Grant.expiration)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Grant::release_expiration() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Grant::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.Grant.expiration)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Grant::_internal_mutable_expiration() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expiration_ = p;
  }
  return _impl_.expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Grant::mutable_expiration() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.Grant.expiration)
  return _msg;
}
inline void Grant::set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration));
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.Grant.expiration)
}

// -------------------------------------------------------------------

// GrantAuthorization

// string granter = 1 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void GrantAuthorization::clear_granter() {
  _impl_.granter_.ClearToEmpty();
}
inline const std::string& GrantAuthorization::granter() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.GrantAuthorization.granter)
  return _internal_granter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantAuthorization::set_granter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.granter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.GrantAuthorization.granter)
}
inline std::string* GrantAuthorization::mutable_granter() {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.GrantAuthorization.granter)
  return _s;
}
inline const std::string& GrantAuthorization::_internal_granter() const {
  return _impl_.granter_.Get();
}
inline void GrantAuthorization::_internal_set_granter(const std::string& value) {
  ;


  _impl_.granter_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantAuthorization::_internal_mutable_granter() {
  ;
  return _impl_.granter_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantAuthorization::release_granter() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.GrantAuthorization.granter)
  return _impl_.granter_.Release();
}
inline void GrantAuthorization::set_allocated_granter(std::string* value) {
  _impl_.granter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.granter_.IsDefault()) {
          _impl_.granter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.GrantAuthorization.granter)
}

// string grantee = 2 [json_name = "grantee", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void GrantAuthorization::clear_grantee() {
  _impl_.grantee_.ClearToEmpty();
}
inline const std::string& GrantAuthorization::grantee() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.GrantAuthorization.grantee)
  return _internal_grantee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GrantAuthorization::set_grantee(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.grantee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.GrantAuthorization.grantee)
}
inline std::string* GrantAuthorization::mutable_grantee() {
  std::string* _s = _internal_mutable_grantee();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.GrantAuthorization.grantee)
  return _s;
}
inline const std::string& GrantAuthorization::_internal_grantee() const {
  return _impl_.grantee_.Get();
}
inline void GrantAuthorization::_internal_set_grantee(const std::string& value) {
  ;


  _impl_.grantee_.Set(value, GetArenaForAllocation());
}
inline std::string* GrantAuthorization::_internal_mutable_grantee() {
  ;
  return _impl_.grantee_.Mutable( GetArenaForAllocation());
}
inline std::string* GrantAuthorization::release_grantee() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.GrantAuthorization.grantee)
  return _impl_.grantee_.Release();
}
inline void GrantAuthorization::set_allocated_grantee(std::string* value) {
  _impl_.grantee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.grantee_.IsDefault()) {
          _impl_.grantee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.GrantAuthorization.grantee)
}

// .google.protobuf.Any authorization = 3 [json_name = "authorization", (.cosmos_proto.accepts_interface) = "cosmos.authz.v1beta1.Authorization"];
inline bool GrantAuthorization::has_authorization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authorization_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GrantAuthorization::_internal_authorization() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.authorization_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& GrantAuthorization::authorization() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.GrantAuthorization.authorization)
  return _internal_authorization();
}
inline void GrantAuthorization::unsafe_arena_set_allocated_authorization(
    ::PROTOBUF_NAMESPACE_ID::Any* authorization) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authorization_);
  }
  _impl_.authorization_ = authorization;
  if (authorization) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.authz.v1beta1.GrantAuthorization.authorization)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GrantAuthorization::release_authorization() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.authorization_;
  _impl_.authorization_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GrantAuthorization::unsafe_arena_release_authorization() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.GrantAuthorization.authorization)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.authorization_;
  _impl_.authorization_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GrantAuthorization::_internal_mutable_authorization() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.authorization_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.authorization_ = p;
  }
  return _impl_.authorization_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* GrantAuthorization::mutable_authorization() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_authorization();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.GrantAuthorization.authorization)
  return _msg;
}
inline void GrantAuthorization::set_allocated_authorization(::PROTOBUF_NAMESPACE_ID::Any* authorization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authorization_);
  }
  if (authorization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authorization));
    if (message_arena != submessage_arena) {
      authorization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authorization, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authorization_ = authorization;
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.GrantAuthorization.authorization)
}

// .google.protobuf.Timestamp expiration = 4 [json_name = "expiration", (.gogoproto.stdtime) = true];
inline bool GrantAuthorization::has_expiration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expiration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GrantAuthorization::_internal_expiration() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expiration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GrantAuthorization::expiration() const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.GrantAuthorization.expiration)
  return _internal_expiration();
}
inline void GrantAuthorization::unsafe_arena_set_allocated_expiration(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_);
  }
  _impl_.expiration_ = expiration;
  if (expiration) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.authz.v1beta1.GrantAuthorization.expiration)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GrantAuthorization::release_expiration() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GrantAuthorization::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_release:cosmos.authz.v1beta1.GrantAuthorization.expiration)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiration_;
  _impl_.expiration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GrantAuthorization::_internal_mutable_expiration() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expiration_ = p;
  }
  return _impl_.expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GrantAuthorization::mutable_expiration() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.GrantAuthorization.expiration)
  return _msg;
}
inline void GrantAuthorization::set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration));
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:cosmos.authz.v1beta1.GrantAuthorization.expiration)
}

// -------------------------------------------------------------------

// GrantQueueItem

// repeated string msg_type_urls = 1 [json_name = "msgTypeUrls"];
inline int GrantQueueItem::_internal_msg_type_urls_size() const {
  return _impl_.msg_type_urls_.size();
}
inline int GrantQueueItem::msg_type_urls_size() const {
  return _internal_msg_type_urls_size();
}
inline void GrantQueueItem::clear_msg_type_urls() {
  _internal_mutable_msg_type_urls()->Clear();
}
inline std::string* GrantQueueItem::add_msg_type_urls() {
  std::string* _s = _internal_add_msg_type_urls();
  // @@protoc_insertion_point(field_add_mutable:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
  return _s;
}
inline const std::string& GrantQueueItem::msg_type_urls(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
  return _internal_msg_type_urls(index);
}
inline std::string* GrantQueueItem::mutable_msg_type_urls(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
  return _internal_mutable_msg_type_urls()->Mutable(index);
}
inline void GrantQueueItem::set_msg_type_urls(int index, const std::string& value) {
  _internal_mutable_msg_type_urls()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::set_msg_type_urls(int index, std::string&& value) {
  _internal_mutable_msg_type_urls()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::set_msg_type_urls(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_msg_type_urls()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::set_msg_type_urls(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_msg_type_urls()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::set_msg_type_urls(int index, absl::string_view value) {
  _internal_mutable_msg_type_urls()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::add_msg_type_urls(const std::string& value) {
  _internal_mutable_msg_type_urls()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::add_msg_type_urls(std::string&& value) {
  _internal_mutable_msg_type_urls()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::add_msg_type_urls(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_msg_type_urls()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::add_msg_type_urls(const char* value, std::size_t size) {
  _internal_mutable_msg_type_urls()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline void GrantQueueItem::add_msg_type_urls(absl::string_view value) {
  _internal_mutable_msg_type_urls()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GrantQueueItem::msg_type_urls() const {
  // @@protoc_insertion_point(field_list:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
  return _internal_msg_type_urls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GrantQueueItem::mutable_msg_type_urls() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.authz.v1beta1.GrantQueueItem.msg_type_urls)
  return _internal_mutable_msg_type_urls();
}
inline const std::string& GrantQueueItem::_internal_msg_type_urls(int index) const {
  return _internal_msg_type_urls().Get(index);
}
inline std::string* GrantQueueItem::_internal_add_msg_type_urls() {
  return _internal_mutable_msg_type_urls()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GrantQueueItem::_internal_msg_type_urls() const {
  return _impl_.msg_type_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GrantQueueItem::_internal_mutable_msg_type_urls() {
  return &_impl_.msg_type_urls_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace authz
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauthz_2fv1beta1_2fauthz_2eproto_2epb_2eh

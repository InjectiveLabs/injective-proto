// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/mint/v1beta1/mint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fmint_2fv1beta1_2fmint_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fmint_2fv1beta1_2fmint_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fmint_2fv1beta1_2fmint_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fmint_2fv1beta1_2fmint_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto;
namespace cosmos {
namespace mint {
namespace v1beta1 {
class Minter;
struct MinterDefaultTypeInternal;
extern MinterDefaultTypeInternal _Minter_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace mint
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::mint::v1beta1::Minter* Arena::CreateMaybeMessage<::cosmos::mint::v1beta1::Minter>(Arena*);
template <>
::cosmos::mint::v1beta1::Params* Arena::CreateMaybeMessage<::cosmos::mint::v1beta1::Params>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace mint {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Minter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.mint.v1beta1.Minter) */ {
 public:
  inline Minter() : Minter(nullptr) {}
  ~Minter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Minter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Minter(const Minter& from);
  Minter(Minter&& from) noexcept
    : Minter() {
    *this = ::std::move(from);
  }

  inline Minter& operator=(const Minter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Minter& operator=(Minter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Minter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Minter* internal_default_instance() {
    return reinterpret_cast<const Minter*>(
               &_Minter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Minter& a, Minter& b) {
    a.Swap(&b);
  }
  inline void Swap(Minter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Minter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Minter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Minter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Minter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Minter& from) {
    Minter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Minter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.mint.v1beta1.Minter";
  }
  protected:
  explicit Minter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInflationFieldNumber = 1,
    kAnnualProvisionsFieldNumber = 2,
  };
  // string inflation = 1 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_inflation() ;
  const std::string& inflation() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation(Arg_&& arg, Args_... args);
  std::string* mutable_inflation();
  PROTOBUF_NODISCARD std::string* release_inflation();
  void set_allocated_inflation(std::string* ptr);

  private:
  const std::string& _internal_inflation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation(
      const std::string& value);
  std::string* _internal_mutable_inflation();

  public:
  // string annual_provisions = 2 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_annual_provisions() ;
  const std::string& annual_provisions() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_annual_provisions(Arg_&& arg, Args_... args);
  std::string* mutable_annual_provisions();
  PROTOBUF_NODISCARD std::string* release_annual_provisions();
  void set_allocated_annual_provisions(std::string* ptr);

  private:
  const std::string& _internal_annual_provisions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_annual_provisions(
      const std::string& value);
  std::string* _internal_mutable_annual_provisions();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.mint.v1beta1.Minter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inflation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr annual_provisions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fmint_2fv1beta1_2fmint_2eproto;
};// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.mint.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.mint.v1beta1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMintDenomFieldNumber = 1,
    kInflationRateChangeFieldNumber = 2,
    kInflationMaxFieldNumber = 3,
    kInflationMinFieldNumber = 4,
    kGoalBondedFieldNumber = 5,
    kBlocksPerYearFieldNumber = 6,
  };
  // string mint_denom = 1 [json_name = "mintDenom"];
  void clear_mint_denom() ;
  const std::string& mint_denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mint_denom(Arg_&& arg, Args_... args);
  std::string* mutable_mint_denom();
  PROTOBUF_NODISCARD std::string* release_mint_denom();
  void set_allocated_mint_denom(std::string* ptr);

  private:
  const std::string& _internal_mint_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mint_denom(
      const std::string& value);
  std::string* _internal_mutable_mint_denom();

  public:
  // string inflation_rate_change = 2 [json_name = "inflationRateChange", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_inflation_rate_change() ;
  const std::string& inflation_rate_change() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation_rate_change(Arg_&& arg, Args_... args);
  std::string* mutable_inflation_rate_change();
  PROTOBUF_NODISCARD std::string* release_inflation_rate_change();
  void set_allocated_inflation_rate_change(std::string* ptr);

  private:
  const std::string& _internal_inflation_rate_change() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation_rate_change(
      const std::string& value);
  std::string* _internal_mutable_inflation_rate_change();

  public:
  // string inflation_max = 3 [json_name = "inflationMax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_inflation_max() ;
  const std::string& inflation_max() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation_max(Arg_&& arg, Args_... args);
  std::string* mutable_inflation_max();
  PROTOBUF_NODISCARD std::string* release_inflation_max();
  void set_allocated_inflation_max(std::string* ptr);

  private:
  const std::string& _internal_inflation_max() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation_max(
      const std::string& value);
  std::string* _internal_mutable_inflation_max();

  public:
  // string inflation_min = 4 [json_name = "inflationMin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_inflation_min() ;
  const std::string& inflation_min() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_inflation_min(Arg_&& arg, Args_... args);
  std::string* mutable_inflation_min();
  PROTOBUF_NODISCARD std::string* release_inflation_min();
  void set_allocated_inflation_min(std::string* ptr);

  private:
  const std::string& _internal_inflation_min() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_inflation_min(
      const std::string& value);
  std::string* _internal_mutable_inflation_min();

  public:
  // string goal_bonded = 5 [json_name = "goalBonded", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_goal_bonded() ;
  const std::string& goal_bonded() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_goal_bonded(Arg_&& arg, Args_... args);
  std::string* mutable_goal_bonded();
  PROTOBUF_NODISCARD std::string* release_goal_bonded();
  void set_allocated_goal_bonded(std::string* ptr);

  private:
  const std::string& _internal_goal_bonded() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goal_bonded(
      const std::string& value);
  std::string* _internal_mutable_goal_bonded();

  public:
  // uint64 blocks_per_year = 6 [json_name = "blocksPerYear"];
  void clear_blocks_per_year() ;
  ::uint64_t blocks_per_year() const;
  void set_blocks_per_year(::uint64_t value);

  private:
  ::uint64_t _internal_blocks_per_year() const;
  void _internal_set_blocks_per_year(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.mint.v1beta1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mint_denom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inflation_rate_change_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inflation_max_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inflation_min_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goal_bonded_;
    ::uint64_t blocks_per_year_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fmint_2fv1beta1_2fmint_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Minter

// string inflation = 1 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Minter::clear_inflation() {
  _impl_.inflation_.ClearToEmpty();
}
inline const std::string& Minter::inflation() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Minter.inflation)
  return _internal_inflation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Minter::set_inflation(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.inflation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Minter.inflation)
}
inline std::string* Minter::mutable_inflation() {
  std::string* _s = _internal_mutable_inflation();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Minter.inflation)
  return _s;
}
inline const std::string& Minter::_internal_inflation() const {
  return _impl_.inflation_.Get();
}
inline void Minter::_internal_set_inflation(const std::string& value) {
  ;


  _impl_.inflation_.Set(value, GetArenaForAllocation());
}
inline std::string* Minter::_internal_mutable_inflation() {
  ;
  return _impl_.inflation_.Mutable( GetArenaForAllocation());
}
inline std::string* Minter::release_inflation() {
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Minter.inflation)
  return _impl_.inflation_.Release();
}
inline void Minter::set_allocated_inflation(std::string* value) {
  _impl_.inflation_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.inflation_.IsDefault()) {
          _impl_.inflation_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Minter.inflation)
}

// string annual_provisions = 2 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Minter::clear_annual_provisions() {
  _impl_.annual_provisions_.ClearToEmpty();
}
inline const std::string& Minter::annual_provisions() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Minter.annual_provisions)
  return _internal_annual_provisions();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Minter::set_annual_provisions(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.annual_provisions_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Minter.annual_provisions)
}
inline std::string* Minter::mutable_annual_provisions() {
  std::string* _s = _internal_mutable_annual_provisions();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Minter.annual_provisions)
  return _s;
}
inline const std::string& Minter::_internal_annual_provisions() const {
  return _impl_.annual_provisions_.Get();
}
inline void Minter::_internal_set_annual_provisions(const std::string& value) {
  ;


  _impl_.annual_provisions_.Set(value, GetArenaForAllocation());
}
inline std::string* Minter::_internal_mutable_annual_provisions() {
  ;
  return _impl_.annual_provisions_.Mutable( GetArenaForAllocation());
}
inline std::string* Minter::release_annual_provisions() {
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Minter.annual_provisions)
  return _impl_.annual_provisions_.Release();
}
inline void Minter::set_allocated_annual_provisions(std::string* value) {
  _impl_.annual_provisions_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.annual_provisions_.IsDefault()) {
          _impl_.annual_provisions_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Minter.annual_provisions)
}

// -------------------------------------------------------------------

// Params

// string mint_denom = 1 [json_name = "mintDenom"];
inline void Params::clear_mint_denom() {
  _impl_.mint_denom_.ClearToEmpty();
}
inline const std::string& Params::mint_denom() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.mint_denom)
  return _internal_mint_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_mint_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.mint_denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.mint_denom)
}
inline std::string* Params::mutable_mint_denom() {
  std::string* _s = _internal_mutable_mint_denom();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.mint_denom)
  return _s;
}
inline const std::string& Params::_internal_mint_denom() const {
  return _impl_.mint_denom_.Get();
}
inline void Params::_internal_set_mint_denom(const std::string& value) {
  ;


  _impl_.mint_denom_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_mint_denom() {
  ;
  return _impl_.mint_denom_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_mint_denom() {
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.mint_denom)
  return _impl_.mint_denom_.Release();
}
inline void Params::set_allocated_mint_denom(std::string* value) {
  _impl_.mint_denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mint_denom_.IsDefault()) {
          _impl_.mint_denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.mint_denom)
}

// string inflation_rate_change = 2 [json_name = "inflationRateChange", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Params::clear_inflation_rate_change() {
  _impl_.inflation_rate_change_.ClearToEmpty();
}
inline const std::string& Params::inflation_rate_change() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.inflation_rate_change)
  return _internal_inflation_rate_change();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_inflation_rate_change(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.inflation_rate_change_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.inflation_rate_change)
}
inline std::string* Params::mutable_inflation_rate_change() {
  std::string* _s = _internal_mutable_inflation_rate_change();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.inflation_rate_change)
  return _s;
}
inline const std::string& Params::_internal_inflation_rate_change() const {
  return _impl_.inflation_rate_change_.Get();
}
inline void Params::_internal_set_inflation_rate_change(const std::string& value) {
  ;


  _impl_.inflation_rate_change_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_inflation_rate_change() {
  ;
  return _impl_.inflation_rate_change_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_inflation_rate_change() {
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.inflation_rate_change)
  return _impl_.inflation_rate_change_.Release();
}
inline void Params::set_allocated_inflation_rate_change(std::string* value) {
  _impl_.inflation_rate_change_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.inflation_rate_change_.IsDefault()) {
          _impl_.inflation_rate_change_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.inflation_rate_change)
}

// string inflation_max = 3 [json_name = "inflationMax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Params::clear_inflation_max() {
  _impl_.inflation_max_.ClearToEmpty();
}
inline const std::string& Params::inflation_max() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.inflation_max)
  return _internal_inflation_max();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_inflation_max(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.inflation_max_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.inflation_max)
}
inline std::string* Params::mutable_inflation_max() {
  std::string* _s = _internal_mutable_inflation_max();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.inflation_max)
  return _s;
}
inline const std::string& Params::_internal_inflation_max() const {
  return _impl_.inflation_max_.Get();
}
inline void Params::_internal_set_inflation_max(const std::string& value) {
  ;


  _impl_.inflation_max_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_inflation_max() {
  ;
  return _impl_.inflation_max_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_inflation_max() {
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.inflation_max)
  return _impl_.inflation_max_.Release();
}
inline void Params::set_allocated_inflation_max(std::string* value) {
  _impl_.inflation_max_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.inflation_max_.IsDefault()) {
          _impl_.inflation_max_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.inflation_max)
}

// string inflation_min = 4 [json_name = "inflationMin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Params::clear_inflation_min() {
  _impl_.inflation_min_.ClearToEmpty();
}
inline const std::string& Params::inflation_min() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.inflation_min)
  return _internal_inflation_min();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_inflation_min(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.inflation_min_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.inflation_min)
}
inline std::string* Params::mutable_inflation_min() {
  std::string* _s = _internal_mutable_inflation_min();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.inflation_min)
  return _s;
}
inline const std::string& Params::_internal_inflation_min() const {
  return _impl_.inflation_min_.Get();
}
inline void Params::_internal_set_inflation_min(const std::string& value) {
  ;


  _impl_.inflation_min_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_inflation_min() {
  ;
  return _impl_.inflation_min_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_inflation_min() {
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.inflation_min)
  return _impl_.inflation_min_.Release();
}
inline void Params::set_allocated_inflation_min(std::string* value) {
  _impl_.inflation_min_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.inflation_min_.IsDefault()) {
          _impl_.inflation_min_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.inflation_min)
}

// string goal_bonded = 5 [json_name = "goalBonded", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Params::clear_goal_bonded() {
  _impl_.goal_bonded_.ClearToEmpty();
}
inline const std::string& Params::goal_bonded() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.goal_bonded)
  return _internal_goal_bonded();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_goal_bonded(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.goal_bonded_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.goal_bonded)
}
inline std::string* Params::mutable_goal_bonded() {
  std::string* _s = _internal_mutable_goal_bonded();
  // @@protoc_insertion_point(field_mutable:cosmos.mint.v1beta1.Params.goal_bonded)
  return _s;
}
inline const std::string& Params::_internal_goal_bonded() const {
  return _impl_.goal_bonded_.Get();
}
inline void Params::_internal_set_goal_bonded(const std::string& value) {
  ;


  _impl_.goal_bonded_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_goal_bonded() {
  ;
  return _impl_.goal_bonded_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_goal_bonded() {
  // @@protoc_insertion_point(field_release:cosmos.mint.v1beta1.Params.goal_bonded)
  return _impl_.goal_bonded_.Release();
}
inline void Params::set_allocated_goal_bonded(std::string* value) {
  _impl_.goal_bonded_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.goal_bonded_.IsDefault()) {
          _impl_.goal_bonded_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.mint.v1beta1.Params.goal_bonded)
}

// uint64 blocks_per_year = 6 [json_name = "blocksPerYear"];
inline void Params::clear_blocks_per_year() {
  _impl_.blocks_per_year_ = ::uint64_t{0u};
}
inline ::uint64_t Params::blocks_per_year() const {
  // @@protoc_insertion_point(field_get:cosmos.mint.v1beta1.Params.blocks_per_year)
  return _internal_blocks_per_year();
}
inline void Params::set_blocks_per_year(::uint64_t value) {
  _internal_set_blocks_per_year(value);
  // @@protoc_insertion_point(field_set:cosmos.mint.v1beta1.Params.blocks_per_year)
}
inline ::uint64_t Params::_internal_blocks_per_year() const {
  return _impl_.blocks_per_year_;
}
inline void Params::_internal_set_blocks_per_year(::uint64_t value) {
  ;
  _impl_.blocks_per_year_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace mint
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fmint_2fv1beta1_2fmint_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/mint/v1beta1/mint.proto

#include "cosmos/mint/v1beta1/mint.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace mint {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Minter::Minter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inflation_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.annual_provisions_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinterDefaultTypeInternal() {}
  union {
    Minter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinterDefaultTypeInternal _Minter_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mint_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.inflation_rate_change_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.inflation_max_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.inflation_min_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.goal_bonded_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.blocks_per_year_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace mint
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fmint_2fv1beta1_2fmint_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fmint_2fv1beta1_2fmint_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fmint_2fv1beta1_2fmint_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fmint_2fv1beta1_2fmint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Minter, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Minter, _impl_.inflation_),
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Minter, _impl_.annual_provisions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Params, _impl_.mint_denom_),
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Params, _impl_.inflation_rate_change_),
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Params, _impl_.inflation_max_),
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Params, _impl_.inflation_min_),
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Params, _impl_.goal_bonded_),
    PROTOBUF_FIELD_OFFSET(::cosmos::mint::v1beta1::Params, _impl_.blocks_per_year_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::mint::v1beta1::Minter)},
        { 10, -1, -1, sizeof(::cosmos::mint::v1beta1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::mint::v1beta1::_Minter_default_instance_._instance,
    &::cosmos::mint::v1beta1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fmint_2fv1beta1_2fmint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036cosmos/mint/v1beta1/mint.proto\022\023cosmos"
    ".mint.v1beta1\032\024gogoproto/gogo.proto\032\031cos"
    "mos_proto/cosmos.proto\032\021amino/amino.prot"
    "o\"\317\001\n\006Minter\022Z\n\tinflation\030\001 \001(\tB<\310\336\037\000\332\336\037"
    "&github.com/cosmos/cosmos-sdk/types.Dec\322"
    "\264-\ncosmos.DecR\tinflation\022i\n\021annual_provi"
    "sions\030\002 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos/c"
    "osmos-sdk/types.Dec\322\264-\ncosmos.DecR\020annua"
    "lProvisions\"\211\004\n\006Params\022\035\n\nmint_denom\030\001 \001"
    "(\tR\tmintDenom\022p\n\025inflation_rate_change\030\002"
    " \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos/cosmos-s"
    "dk/types.Dec\322\264-\ncosmos.DecR\023inflationRat"
    "eChange\022a\n\rinflation_max\030\003 \001(\tB<\310\336\037\000\332\336\037&"
    "github.com/cosmos/cosmos-sdk/types.Dec\322\264"
    "-\ncosmos.DecR\014inflationMax\022a\n\rinflation_"
    "min\030\004 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos/cos"
    "mos-sdk/types.Dec\322\264-\ncosmos.DecR\014inflati"
    "onMin\022]\n\013goal_bonded\030\005 \001(\tB<\310\336\037\000\332\336\037&gith"
    "ub.com/cosmos/cosmos-sdk/types.Dec\322\264-\nco"
    "smos.DecR\ngoalBonded\022&\n\017blocks_per_year\030"
    "\006 \001(\004R\rblocksPerYear:!\230\240\037\000\212\347\260*\030cosmos-sd"
    "k/x/mint/ParamsB\275\001\n\027com.cosmos.mint.v1be"
    "ta1B\tMintProtoP\001Z)github.com/cosmos/cosm"
    "os-sdk/x/mint/types\242\002\003CMX\252\002\023Cosmos.Mint."
    "V1beta1\312\002\023Cosmos\\Mint\\V1beta1\342\002\037Cosmos\\M"
    "int\\V1beta1\\GPBMetadata\352\002\025Cosmos::Mint::"
    "V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_deps[3] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto = {
    false,
    false,
    1055,
    descriptor_table_protodef_cosmos_2fmint_2fv1beta1_2fmint_2eproto,
    "cosmos/mint/v1beta1/mint.proto",
    &descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_once,
    descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fmint_2fv1beta1_2fmint_2eproto::offsets,
    file_level_metadata_cosmos_2fmint_2fv1beta1_2fmint_2eproto,
    file_level_enum_descriptors_cosmos_2fmint_2fv1beta1_2fmint_2eproto,
    file_level_service_descriptors_cosmos_2fmint_2fv1beta1_2fmint_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_getter() {
  return &descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fmint_2fv1beta1_2fmint_2eproto(&descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto);
namespace cosmos {
namespace mint {
namespace v1beta1 {
// ===================================================================

class Minter::_Internal {
 public:
};

Minter::Minter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.mint.v1beta1.Minter)
}
Minter::Minter(const Minter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Minter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inflation_) {}

    , decltype(_impl_.annual_provisions_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.inflation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inflation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inflation().empty()) {
    _this->_impl_.inflation_.Set(from._internal_inflation(), _this->GetArenaForAllocation());
  }
  _impl_.annual_provisions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.annual_provisions_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_annual_provisions().empty()) {
    _this->_impl_.annual_provisions_.Set(from._internal_annual_provisions(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.mint.v1beta1.Minter)
}

inline void Minter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.inflation_) {}

    , decltype(_impl_.annual_provisions_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.inflation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inflation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.annual_provisions_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.annual_provisions_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Minter::~Minter() {
  // @@protoc_insertion_point(destructor:cosmos.mint.v1beta1.Minter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Minter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inflation_.Destroy();
  _impl_.annual_provisions_.Destroy();
}

void Minter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Minter::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.mint.v1beta1.Minter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inflation_.ClearToEmpty();
  _impl_.annual_provisions_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Minter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string inflation = 1 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inflation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.mint.v1beta1.Minter.inflation"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string annual_provisions = 2 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_annual_provisions();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.mint.v1beta1.Minter.annual_provisions"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Minter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.mint.v1beta1.Minter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string inflation = 1 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_inflation().empty()) {
    const std::string& _s = this->_internal_inflation();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.mint.v1beta1.Minter.inflation");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string annual_provisions = 2 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_annual_provisions().empty()) {
    const std::string& _s = this->_internal_annual_provisions();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.mint.v1beta1.Minter.annual_provisions");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.mint.v1beta1.Minter)
  return target;
}

::size_t Minter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.mint.v1beta1.Minter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string inflation = 1 [json_name = "inflation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_inflation().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_inflation());
  }

  // string annual_provisions = 2 [json_name = "annualProvisions", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_annual_provisions().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_annual_provisions());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Minter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Minter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Minter::GetClassData() const { return &_class_data_; }


void Minter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Minter*>(&to_msg);
  auto& from = static_cast<const Minter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.mint.v1beta1.Minter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_inflation().empty()) {
    _this->_internal_set_inflation(from._internal_inflation());
  }
  if (!from._internal_annual_provisions().empty()) {
    _this->_internal_set_annual_provisions(from._internal_annual_provisions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Minter::CopyFrom(const Minter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.mint.v1beta1.Minter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Minter::IsInitialized() const {
  return true;
}

void Minter::InternalSwap(Minter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inflation_, lhs_arena,
                                       &other->_impl_.inflation_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.annual_provisions_, lhs_arena,
                                       &other->_impl_.annual_provisions_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Minter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_getter, &descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_once,
      file_level_metadata_cosmos_2fmint_2fv1beta1_2fmint_2eproto[0]);
}
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.mint.v1beta1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mint_denom_) {}

    , decltype(_impl_.inflation_rate_change_) {}

    , decltype(_impl_.inflation_max_) {}

    , decltype(_impl_.inflation_min_) {}

    , decltype(_impl_.goal_bonded_) {}

    , decltype(_impl_.blocks_per_year_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mint_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mint_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mint_denom().empty()) {
    _this->_impl_.mint_denom_.Set(from._internal_mint_denom(), _this->GetArenaForAllocation());
  }
  _impl_.inflation_rate_change_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inflation_rate_change_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inflation_rate_change().empty()) {
    _this->_impl_.inflation_rate_change_.Set(from._internal_inflation_rate_change(), _this->GetArenaForAllocation());
  }
  _impl_.inflation_max_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inflation_max_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inflation_max().empty()) {
    _this->_impl_.inflation_max_.Set(from._internal_inflation_max(), _this->GetArenaForAllocation());
  }
  _impl_.inflation_min_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inflation_min_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inflation_min().empty()) {
    _this->_impl_.inflation_min_.Set(from._internal_inflation_min(), _this->GetArenaForAllocation());
  }
  _impl_.goal_bonded_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.goal_bonded_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_goal_bonded().empty()) {
    _this->_impl_.goal_bonded_.Set(from._internal_goal_bonded(), _this->GetArenaForAllocation());
  }
  _this->_impl_.blocks_per_year_ = from._impl_.blocks_per_year_;
  // @@protoc_insertion_point(copy_constructor:cosmos.mint.v1beta1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.mint_denom_) {}

    , decltype(_impl_.inflation_rate_change_) {}

    , decltype(_impl_.inflation_max_) {}

    , decltype(_impl_.inflation_min_) {}

    , decltype(_impl_.goal_bonded_) {}

    , decltype(_impl_.blocks_per_year_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mint_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mint_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inflation_rate_change_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inflation_rate_change_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inflation_max_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inflation_max_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.inflation_min_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.inflation_min_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.goal_bonded_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.goal_bonded_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:cosmos.mint.v1beta1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mint_denom_.Destroy();
  _impl_.inflation_rate_change_.Destroy();
  _impl_.inflation_max_.Destroy();
  _impl_.inflation_min_.Destroy();
  _impl_.goal_bonded_.Destroy();
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.mint.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mint_denom_.ClearToEmpty();
  _impl_.inflation_rate_change_.ClearToEmpty();
  _impl_.inflation_max_.ClearToEmpty();
  _impl_.inflation_min_.ClearToEmpty();
  _impl_.goal_bonded_.ClearToEmpty();
  _impl_.blocks_per_year_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mint_denom = 1 [json_name = "mintDenom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mint_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.mint.v1beta1.Params.mint_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string inflation_rate_change = 2 [json_name = "inflationRateChange", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_inflation_rate_change();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.mint.v1beta1.Params.inflation_rate_change"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string inflation_max = 3 [json_name = "inflationMax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_inflation_max();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.mint.v1beta1.Params.inflation_max"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string inflation_min = 4 [json_name = "inflationMin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_inflation_min();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.mint.v1beta1.Params.inflation_min"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string goal_bonded = 5 [json_name = "goalBonded", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_goal_bonded();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.mint.v1beta1.Params.goal_bonded"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 blocks_per_year = 6 [json_name = "blocksPerYear"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.blocks_per_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.mint.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mint_denom = 1 [json_name = "mintDenom"];
  if (!this->_internal_mint_denom().empty()) {
    const std::string& _s = this->_internal_mint_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.mint.v1beta1.Params.mint_denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string inflation_rate_change = 2 [json_name = "inflationRateChange", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_inflation_rate_change().empty()) {
    const std::string& _s = this->_internal_inflation_rate_change();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.mint.v1beta1.Params.inflation_rate_change");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string inflation_max = 3 [json_name = "inflationMax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_inflation_max().empty()) {
    const std::string& _s = this->_internal_inflation_max();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.mint.v1beta1.Params.inflation_max");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string inflation_min = 4 [json_name = "inflationMin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_inflation_min().empty()) {
    const std::string& _s = this->_internal_inflation_min();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.mint.v1beta1.Params.inflation_min");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string goal_bonded = 5 [json_name = "goalBonded", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_goal_bonded().empty()) {
    const std::string& _s = this->_internal_goal_bonded();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.mint.v1beta1.Params.goal_bonded");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // uint64 blocks_per_year = 6 [json_name = "blocksPerYear"];
  if (this->_internal_blocks_per_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_blocks_per_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.mint.v1beta1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.mint.v1beta1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mint_denom = 1 [json_name = "mintDenom"];
  if (!this->_internal_mint_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mint_denom());
  }

  // string inflation_rate_change = 2 [json_name = "inflationRateChange", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_inflation_rate_change().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_inflation_rate_change());
  }

  // string inflation_max = 3 [json_name = "inflationMax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_inflation_max().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_inflation_max());
  }

  // string inflation_min = 4 [json_name = "inflationMin", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_inflation_min().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_inflation_min());
  }

  // string goal_bonded = 5 [json_name = "goalBonded", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_goal_bonded().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_goal_bonded());
  }

  // uint64 blocks_per_year = 6 [json_name = "blocksPerYear"];
  if (this->_internal_blocks_per_year() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_blocks_per_year());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.mint.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mint_denom().empty()) {
    _this->_internal_set_mint_denom(from._internal_mint_denom());
  }
  if (!from._internal_inflation_rate_change().empty()) {
    _this->_internal_set_inflation_rate_change(from._internal_inflation_rate_change());
  }
  if (!from._internal_inflation_max().empty()) {
    _this->_internal_set_inflation_max(from._internal_inflation_max());
  }
  if (!from._internal_inflation_min().empty()) {
    _this->_internal_set_inflation_min(from._internal_inflation_min());
  }
  if (!from._internal_goal_bonded().empty()) {
    _this->_internal_set_goal_bonded(from._internal_goal_bonded());
  }
  if (from._internal_blocks_per_year() != 0) {
    _this->_internal_set_blocks_per_year(from._internal_blocks_per_year());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.mint.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mint_denom_, lhs_arena,
                                       &other->_impl_.mint_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inflation_rate_change_, lhs_arena,
                                       &other->_impl_.inflation_rate_change_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inflation_max_, lhs_arena,
                                       &other->_impl_.inflation_max_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inflation_min_, lhs_arena,
                                       &other->_impl_.inflation_min_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.goal_bonded_, lhs_arena,
                                       &other->_impl_.goal_bonded_, rhs_arena);

  swap(_impl_.blocks_per_year_, other->_impl_.blocks_per_year_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_getter, &descriptor_table_cosmos_2fmint_2fv1beta1_2fmint_2eproto_once,
      file_level_metadata_cosmos_2fmint_2fv1beta1_2fmint_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace mint
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::mint::v1beta1::Minter*
Arena::CreateMaybeMessage< ::cosmos::mint::v1beta1::Minter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::mint::v1beta1::Minter >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::mint::v1beta1::Params*
Arena::CreateMaybeMessage< ::cosmos::mint::v1beta1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::mint::v1beta1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

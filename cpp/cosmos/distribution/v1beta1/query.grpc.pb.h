// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/distribution/v1beta1/query.proto
#ifndef GRPC_cosmos_2fdistribution_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fdistribution_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/distribution/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace distribution {
namespace v1beta1 {

// Query defines the gRPC querier service for distribution module.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.distribution.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Params queries params of the distribution module.
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
    virtual ::grpc::Status ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>> AsyncValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>>(AsyncValidatorDistributionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>> PrepareAsyncValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>>(PrepareAsyncValidatorDistributionInfoRaw(context, request, cq));
    }
    // ValidatorOutstandingRewards queries rewards of a validator address.
    virtual ::grpc::Status ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>> AsyncValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>>(AsyncValidatorOutstandingRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>> PrepareAsyncValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>>(PrepareAsyncValidatorOutstandingRewardsRaw(context, request, cq));
    }
    // ValidatorCommission queries accumulated commission for a validator.
    virtual ::grpc::Status ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>> AsyncValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>>(AsyncValidatorCommissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>> PrepareAsyncValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>>(PrepareAsyncValidatorCommissionRaw(context, request, cq));
    }
    // ValidatorSlashes queries slash events of a validator.
    virtual ::grpc::Status ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>> AsyncValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>>(AsyncValidatorSlashesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>> PrepareAsyncValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>>(PrepareAsyncValidatorSlashesRaw(context, request, cq));
    }
    // DelegationRewards queries the total rewards accrued by a delegation.
    virtual ::grpc::Status DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>> AsyncDelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>>(AsyncDelegationRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>> PrepareAsyncDelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>>(PrepareAsyncDelegationRewardsRaw(context, request, cq));
    }
    // DelegationTotalRewards queries the total rewards accrued by a each
    // validator.
    virtual ::grpc::Status DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>> AsyncDelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>>(AsyncDelegationTotalRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>> PrepareAsyncDelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>>(PrepareAsyncDelegationTotalRewardsRaw(context, request, cq));
    }
    // DelegatorValidators queries the validators of a delegator.
    virtual ::grpc::Status DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>> AsyncDelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>>(AsyncDelegatorValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>> PrepareAsyncDelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>>(PrepareAsyncDelegatorValidatorsRaw(context, request, cq));
    }
    // DelegatorWithdrawAddress queries withdraw address of a delegator.
    virtual ::grpc::Status DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>> AsyncDelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>>(AsyncDelegatorWithdrawAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>> PrepareAsyncDelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>>(PrepareAsyncDelegatorWithdrawAddressRaw(context, request, cq));
    }
    // CommunityPool queries the community pool coins.
    virtual ::grpc::Status CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>> AsyncCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>>(AsyncCommunityPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>> PrepareAsyncCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>>(PrepareAsyncCommunityPoolRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Params queries params of the distribution module.
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
      virtual void ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ValidatorOutstandingRewards queries rewards of a validator address.
      virtual void ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ValidatorCommission queries accumulated commission for a validator.
      virtual void ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ValidatorSlashes queries slash events of a validator.
      virtual void ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DelegationRewards queries the total rewards accrued by a delegation.
      virtual void DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DelegationTotalRewards queries the total rewards accrued by a each
      // validator.
      virtual void DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DelegatorValidators queries the validators of a delegator.
      virtual void DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DelegatorWithdrawAddress queries withdraw address of a delegator.
      virtual void DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CommunityPool queries the community pool coins.
      virtual void CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* AsyncValidatorDistributionInfoRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* PrepareAsyncValidatorDistributionInfoRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* AsyncValidatorOutstandingRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* PrepareAsyncValidatorOutstandingRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* AsyncValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* PrepareAsyncValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* AsyncValidatorSlashesRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* PrepareAsyncValidatorSlashesRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* AsyncDelegationRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* PrepareAsyncDelegationRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* AsyncDelegationTotalRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* PrepareAsyncDelegationTotalRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* AsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* PrepareAsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* AsyncDelegatorWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* PrepareAsyncDelegatorWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* AsyncCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* PrepareAsyncCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>> AsyncValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>>(AsyncValidatorDistributionInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>> PrepareAsyncValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>>(PrepareAsyncValidatorDistributionInfoRaw(context, request, cq));
    }
    ::grpc::Status ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>> AsyncValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>>(AsyncValidatorOutstandingRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>> PrepareAsyncValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>>(PrepareAsyncValidatorOutstandingRewardsRaw(context, request, cq));
    }
    ::grpc::Status ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>> AsyncValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>>(AsyncValidatorCommissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>> PrepareAsyncValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>>(PrepareAsyncValidatorCommissionRaw(context, request, cq));
    }
    ::grpc::Status ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>> AsyncValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>>(AsyncValidatorSlashesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>> PrepareAsyncValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>>(PrepareAsyncValidatorSlashesRaw(context, request, cq));
    }
    ::grpc::Status DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>> AsyncDelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>>(AsyncDelegationRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>> PrepareAsyncDelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>>(PrepareAsyncDelegationRewardsRaw(context, request, cq));
    }
    ::grpc::Status DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>> AsyncDelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>>(AsyncDelegationTotalRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>> PrepareAsyncDelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>>(PrepareAsyncDelegationTotalRewardsRaw(context, request, cq));
    }
    ::grpc::Status DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>> AsyncDelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>>(AsyncDelegatorValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>> PrepareAsyncDelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>>(PrepareAsyncDelegatorValidatorsRaw(context, request, cq));
    }
    ::grpc::Status DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>> AsyncDelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>>(AsyncDelegatorWithdrawAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>> PrepareAsyncDelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>>(PrepareAsyncDelegatorWithdrawAddressRaw(context, request, cq));
    }
    ::grpc::Status CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>> AsyncCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>>(AsyncCommunityPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>> PrepareAsyncCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>>(PrepareAsyncCommunityPoolRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response, std::function<void(::grpc::Status)>) override;
      void DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response, std::function<void(::grpc::Status)>) override;
      void DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response, std::function<void(::grpc::Status)>) override;
      void DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response, std::function<void(::grpc::Status)>) override;
      void CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* AsyncValidatorDistributionInfoRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* PrepareAsyncValidatorDistributionInfoRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* AsyncValidatorOutstandingRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* PrepareAsyncValidatorOutstandingRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* AsyncValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* PrepareAsyncValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* AsyncValidatorSlashesRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* PrepareAsyncValidatorSlashesRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* AsyncDelegationRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* PrepareAsyncDelegationRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* AsyncDelegationTotalRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* PrepareAsyncDelegationTotalRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* AsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* PrepareAsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* AsyncDelegatorWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* PrepareAsyncDelegatorWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* AsyncCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* PrepareAsyncCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidatorDistributionInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidatorOutstandingRewards_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidatorCommission_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidatorSlashes_;
    const ::grpc::internal::RpcMethod rpcmethod_DelegationRewards_;
    const ::grpc::internal::RpcMethod rpcmethod_DelegationTotalRewards_;
    const ::grpc::internal::RpcMethod rpcmethod_DelegatorValidators_;
    const ::grpc::internal::RpcMethod rpcmethod_DelegatorWithdrawAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_CommunityPool_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Params queries params of the distribution module.
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response);
    // ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
    virtual ::grpc::Status ValidatorDistributionInfo(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response);
    // ValidatorOutstandingRewards queries rewards of a validator address.
    virtual ::grpc::Status ValidatorOutstandingRewards(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response);
    // ValidatorCommission queries accumulated commission for a validator.
    virtual ::grpc::Status ValidatorCommission(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response);
    // ValidatorSlashes queries slash events of a validator.
    virtual ::grpc::Status ValidatorSlashes(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response);
    // DelegationRewards queries the total rewards accrued by a delegation.
    virtual ::grpc::Status DelegationRewards(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response);
    // DelegationTotalRewards queries the total rewards accrued by a each
    // validator.
    virtual ::grpc::Status DelegationTotalRewards(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response);
    // DelegatorValidators queries the validators of a delegator.
    virtual ::grpc::Status DelegatorValidators(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response);
    // DelegatorWithdrawAddress queries withdraw address of a delegator.
    virtual ::grpc::Status DelegatorWithdrawAddress(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response);
    // CommunityPool queries the community pool coins.
    virtual ::grpc::Status CommunityPool(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidatorDistributionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidatorDistributionInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ValidatorDistributionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDistributionInfo(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorDistributionInfo(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidatorOutstandingRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidatorOutstandingRewards() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ValidatorOutstandingRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorOutstandingRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorOutstandingRewards(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidatorCommission() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorCommission(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidatorSlashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidatorSlashes() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ValidatorSlashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorSlashes(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorSlashes(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelegationRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelegationRewards() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DelegationRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegationRewards(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelegationTotalRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelegationTotalRewards() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DelegationTotalRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationTotalRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegationTotalRewards(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorValidators(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelegatorWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelegatorWithdrawAddress() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DelegatorWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorWithdrawAddress(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CommunityPool() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommunityPool(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Params<WithAsyncMethod_ValidatorDistributionInfo<WithAsyncMethod_ValidatorOutstandingRewards<WithAsyncMethod_ValidatorCommission<WithAsyncMethod_ValidatorSlashes<WithAsyncMethod_DelegationRewards<WithAsyncMethod_DelegationTotalRewards<WithAsyncMethod_DelegatorValidators<WithAsyncMethod_DelegatorWithdrawAddress<WithAsyncMethod_CommunityPool<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryParamsRequest, ::cosmos::distribution::v1beta1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryParamsRequest, ::cosmos::distribution::v1beta1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryParamsRequest, ::cosmos::distribution::v1beta1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidatorDistributionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidatorDistributionInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response) { return this->ValidatorDistributionInfo(context, request, response); }));}
    void SetMessageAllocatorFor_ValidatorDistributionInfo(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidatorDistributionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDistributionInfo(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorDistributionInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidatorOutstandingRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidatorOutstandingRewards() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response) { return this->ValidatorOutstandingRewards(context, request, response); }));}
    void SetMessageAllocatorFor_ValidatorOutstandingRewards(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidatorOutstandingRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorOutstandingRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorOutstandingRewards(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidatorCommission() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response) { return this->ValidatorCommission(context, request, response); }));}
    void SetMessageAllocatorFor_ValidatorCommission(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorCommission(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidatorSlashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidatorSlashes() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response) { return this->ValidatorSlashes(context, request, response); }));}
    void SetMessageAllocatorFor_ValidatorSlashes(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidatorSlashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorSlashes(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorSlashes(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelegationRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelegationRewards() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response) { return this->DelegationRewards(context, request, response); }));}
    void SetMessageAllocatorFor_DelegationRewards(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DelegationRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegationRewards(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelegationTotalRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelegationTotalRewards() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response) { return this->DelegationTotalRewards(context, request, response); }));}
    void SetMessageAllocatorFor_DelegationTotalRewards(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DelegationTotalRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationTotalRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegationTotalRewards(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response) { return this->DelegatorValidators(context, request, response); }));}
    void SetMessageAllocatorFor_DelegatorValidators(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorValidators(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelegatorWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelegatorWithdrawAddress() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response) { return this->DelegatorWithdrawAddress(context, request, response); }));}
    void SetMessageAllocatorFor_DelegatorWithdrawAddress(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DelegatorWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorWithdrawAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CommunityPool() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response) { return this->CommunityPool(context, request, response); }));}
    void SetMessageAllocatorFor_CommunityPool(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommunityPool(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Params<WithCallbackMethod_ValidatorDistributionInfo<WithCallbackMethod_ValidatorOutstandingRewards<WithCallbackMethod_ValidatorCommission<WithCallbackMethod_ValidatorSlashes<WithCallbackMethod_DelegationRewards<WithCallbackMethod_DelegationTotalRewards<WithCallbackMethod_DelegatorValidators<WithCallbackMethod_DelegatorWithdrawAddress<WithCallbackMethod_CommunityPool<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidatorDistributionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidatorDistributionInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ValidatorDistributionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDistributionInfo(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidatorOutstandingRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidatorOutstandingRewards() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ValidatorOutstandingRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorOutstandingRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidatorCommission() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidatorSlashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidatorSlashes() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ValidatorSlashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorSlashes(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelegationRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelegationRewards() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DelegationRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelegationTotalRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelegationTotalRewards() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DelegationTotalRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationTotalRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelegatorWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelegatorWithdrawAddress() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DelegatorWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CommunityPool() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidatorDistributionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidatorDistributionInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ValidatorDistributionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDistributionInfo(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorDistributionInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidatorOutstandingRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidatorOutstandingRewards() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ValidatorOutstandingRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorOutstandingRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorOutstandingRewards(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidatorCommission() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorCommission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidatorSlashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidatorSlashes() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ValidatorSlashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorSlashes(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorSlashes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelegationRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelegationRewards() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DelegationRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegationRewards(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelegationTotalRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelegationTotalRewards() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DelegationTotalRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationTotalRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegationTotalRewards(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorValidators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelegatorWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelegatorWithdrawAddress() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DelegatorWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorWithdrawAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CommunityPool() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommunityPool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidatorDistributionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidatorDistributionInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidatorDistributionInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidatorDistributionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDistributionInfo(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorDistributionInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidatorOutstandingRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidatorOutstandingRewards() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidatorOutstandingRewards(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidatorOutstandingRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorOutstandingRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorOutstandingRewards(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidatorCommission() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidatorCommission(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorCommission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidatorSlashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidatorSlashes() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidatorSlashes(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidatorSlashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorSlashes(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorSlashes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelegationRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelegationRewards() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelegationRewards(context, request, response); }));
    }
    ~WithRawCallbackMethod_DelegationRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegationRewards(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelegationTotalRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelegationTotalRewards() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelegationTotalRewards(context, request, response); }));
    }
    ~WithRawCallbackMethod_DelegationTotalRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegationTotalRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegationTotalRewards(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelegatorValidators(context, request, response); }));
    }
    ~WithRawCallbackMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorValidators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelegatorWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelegatorWithdrawAddress() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelegatorWithdrawAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_DelegatorWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorWithdrawAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CommunityPool() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CommunityPool(context, request, response); }));
    }
    ~WithRawCallbackMethod_CommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommunityPool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryParamsRequest, ::cosmos::distribution::v1beta1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryParamsRequest, ::cosmos::distribution::v1beta1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryParamsRequest,::cosmos::distribution::v1beta1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidatorDistributionInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidatorDistributionInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* streamer) {
                       return this->StreamedValidatorDistributionInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidatorDistributionInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidatorDistributionInfo(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidatorDistributionInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest,::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidatorOutstandingRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidatorOutstandingRewards() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* streamer) {
                       return this->StreamedValidatorOutstandingRewards(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidatorOutstandingRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidatorOutstandingRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidatorOutstandingRewards(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest,::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidatorCommission() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* streamer) {
                       return this->StreamedValidatorCommission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidatorCommission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest,::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidatorSlashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidatorSlashes() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* streamer) {
                       return this->StreamedValidatorSlashes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidatorSlashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidatorSlashes(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidatorSlashes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest,::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelegationRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelegationRewards() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* streamer) {
                       return this->StreamedDelegationRewards(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelegationRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelegationRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegationRewards(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest,::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelegationTotalRewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelegationTotalRewards() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* streamer) {
                       return this->StreamedDelegationTotalRewards(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelegationTotalRewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelegationTotalRewards(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegationTotalRewards(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest,::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* streamer) {
                       return this->StreamedDelegatorValidators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegatorValidators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest,::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelegatorWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelegatorWithdrawAddress() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* streamer) {
                       return this->StreamedDelegatorWithdrawAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelegatorWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelegatorWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegatorWithdrawAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest,::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CommunityPool() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* streamer) {
                       return this->StreamedCommunityPool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* /*request*/, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommunityPool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest,::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_ValidatorDistributionInfo<WithStreamedUnaryMethod_ValidatorOutstandingRewards<WithStreamedUnaryMethod_ValidatorCommission<WithStreamedUnaryMethod_ValidatorSlashes<WithStreamedUnaryMethod_DelegationRewards<WithStreamedUnaryMethod_DelegationTotalRewards<WithStreamedUnaryMethod_DelegatorValidators<WithStreamedUnaryMethod_DelegatorWithdrawAddress<WithStreamedUnaryMethod_CommunityPool<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_ValidatorDistributionInfo<WithStreamedUnaryMethod_ValidatorOutstandingRewards<WithStreamedUnaryMethod_ValidatorCommission<WithStreamedUnaryMethod_ValidatorSlashes<WithStreamedUnaryMethod_DelegationRewards<WithStreamedUnaryMethod_DelegationTotalRewards<WithStreamedUnaryMethod_DelegatorValidators<WithStreamedUnaryMethod_DelegatorWithdrawAddress<WithStreamedUnaryMethod_CommunityPool<Service > > > > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos


#endif  // GRPC_cosmos_2fdistribution_2fv1beta1_2fquery_2eproto__INCLUDED

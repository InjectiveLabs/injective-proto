// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/distribution/v1beta1/genesis.proto

#include "cosmos/distribution/v1beta1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace distribution {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR DelegatorWithdrawInfo::DelegatorWithdrawInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.delegator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.withdraw_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DelegatorWithdrawInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelegatorWithdrawInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelegatorWithdrawInfoDefaultTypeInternal() {}
  union {
    DelegatorWithdrawInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelegatorWithdrawInfoDefaultTypeInternal _DelegatorWithdrawInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorOutstandingRewardsRecord::ValidatorOutstandingRewardsRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.outstanding_rewards_)*/{}
  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorOutstandingRewardsRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorOutstandingRewardsRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorOutstandingRewardsRecordDefaultTypeInternal() {}
  union {
    ValidatorOutstandingRewardsRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorOutstandingRewardsRecordDefaultTypeInternal _ValidatorOutstandingRewardsRecord_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorAccumulatedCommissionRecord::ValidatorAccumulatedCommissionRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.accumulated_)*/nullptr} {}
struct ValidatorAccumulatedCommissionRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorAccumulatedCommissionRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorAccumulatedCommissionRecordDefaultTypeInternal() {}
  union {
    ValidatorAccumulatedCommissionRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorAccumulatedCommissionRecordDefaultTypeInternal _ValidatorAccumulatedCommissionRecord_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorHistoricalRewardsRecord::ValidatorHistoricalRewardsRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rewards_)*/nullptr
  , /*decltype(_impl_.period_)*/ ::uint64_t{0u}
} {}
struct ValidatorHistoricalRewardsRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorHistoricalRewardsRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorHistoricalRewardsRecordDefaultTypeInternal() {}
  union {
    ValidatorHistoricalRewardsRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorHistoricalRewardsRecordDefaultTypeInternal _ValidatorHistoricalRewardsRecord_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorCurrentRewardsRecord::ValidatorCurrentRewardsRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rewards_)*/nullptr} {}
struct ValidatorCurrentRewardsRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorCurrentRewardsRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorCurrentRewardsRecordDefaultTypeInternal() {}
  union {
    ValidatorCurrentRewardsRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorCurrentRewardsRecordDefaultTypeInternal _ValidatorCurrentRewardsRecord_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DelegatorStartingInfoRecord::DelegatorStartingInfoRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delegator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.starting_info_)*/nullptr} {}
struct DelegatorStartingInfoRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelegatorStartingInfoRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelegatorStartingInfoRecordDefaultTypeInternal() {}
  union {
    DelegatorStartingInfoRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelegatorStartingInfoRecordDefaultTypeInternal _DelegatorStartingInfoRecord_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorSlashEventRecord::ValidatorSlashEventRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_slash_event_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.period_)*/ ::uint64_t{0u}
} {}
struct ValidatorSlashEventRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorSlashEventRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorSlashEventRecordDefaultTypeInternal() {}
  union {
    ValidatorSlashEventRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorSlashEventRecordDefaultTypeInternal _ValidatorSlashEventRecord_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delegator_withdraw_infos_)*/{}
  , /*decltype(_impl_.outstanding_rewards_)*/{}
  , /*decltype(_impl_.validator_accumulated_commissions_)*/{}
  , /*decltype(_impl_.validator_historical_rewards_)*/{}
  , /*decltype(_impl_.validator_current_rewards_)*/{}
  , /*decltype(_impl_.delegator_starting_infos_)*/{}
  , /*decltype(_impl_.validator_slash_events_)*/{}
  , /*decltype(_impl_.previous_proposer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.fee_pool_)*/nullptr} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorWithdrawInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorWithdrawInfo, _impl_.delegator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorWithdrawInfo, _impl_.withdraw_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorOutstandingRewardsRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorOutstandingRewardsRecord, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorOutstandingRewardsRecord, _impl_.outstanding_rewards_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorAccumulatedCommissionRecord, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorAccumulatedCommissionRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorAccumulatedCommissionRecord, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorAccumulatedCommissionRecord, _impl_.accumulated_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord, _impl_.period_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord, _impl_.rewards_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorCurrentRewardsRecord, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorCurrentRewardsRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorCurrentRewardsRecord, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorCurrentRewardsRecord, _impl_.rewards_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord, _impl_.delegator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord, _impl_.starting_info_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEventRecord, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEventRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEventRecord, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEventRecord, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEventRecord, _impl_.period_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEventRecord, _impl_.validator_slash_event_),
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.fee_pool_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.delegator_withdraw_infos_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.previous_proposer_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.outstanding_rewards_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.validator_accumulated_commissions_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.validator_historical_rewards_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.validator_current_rewards_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.delegator_starting_infos_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::GenesisState, _impl_.validator_slash_events_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::distribution::v1beta1::DelegatorWithdrawInfo)},
        { 10, -1, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorOutstandingRewardsRecord)},
        { 20, 30, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorAccumulatedCommissionRecord)},
        { 32, 43, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord)},
        { 46, 56, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorCurrentRewardsRecord)},
        { 58, 69, -1, sizeof(::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord)},
        { 72, 84, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorSlashEventRecord)},
        { 88, 106, -1, sizeof(::cosmos::distribution::v1beta1::GenesisState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::distribution::v1beta1::_DelegatorWithdrawInfo_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorOutstandingRewardsRecord_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorAccumulatedCommissionRecord_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorHistoricalRewardsRecord_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorCurrentRewardsRecord_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_DelegatorStartingInfoRecord_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorSlashEventRecord_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_GenesisState_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)cosmos/distribution/v1beta1/genesis.pr"
    "oto\022\033cosmos.distribution.v1beta1\032\024gogopr"
    "oto/gogo.proto\032\036cosmos/base/v1beta1/coin"
    ".proto\032.cosmos/distribution/v1beta1/dist"
    "ribution.proto\032\031cosmos_proto/cosmos.prot"
    "o\032\021amino/amino.proto\"\255\001\n\025DelegatorWithdr"
    "awInfo\022E\n\021delegator_address\030\001 \001(\tB\030\322\264-\024c"
    "osmos.AddressStringR\020delegatorAddress\022C\n"
    "\020withdraw_address\030\002 \001(\tB\030\322\264-\024cosmos.Addr"
    "essStringR\017withdrawAddress:\010\210\240\037\000\350\240\037\000\"\376\001\n"
    "!ValidatorOutstandingRewardsRecord\022E\n\021va"
    "lidator_address\030\001 \001(\tB\030\322\264-\024cosmos.Addres"
    "sStringR\020validatorAddress\022\207\001\n\023outstandin"
    "g_rewards\030\002 \003(\0132\034.cosmos.base.v1beta1.De"
    "cCoinB8\310\336\037\000\252\337\037+github.com/cosmos/cosmos-"
    "sdk/types.DecCoins\250\347\260*\001R\022outstandingRewa"
    "rds:\010\210\240\037\000\350\240\037\000\"\341\001\n$ValidatorAccumulatedCo"
    "mmissionRecord\022E\n\021validator_address\030\001 \001("
    "\tB\030\322\264-\024cosmos.AddressStringR\020validatorAd"
    "dress\022h\n\013accumulated\030\002 \001(\0132;.cosmos.dist"
    "ribution.v1beta1.ValidatorAccumulatedCom"
    "missionB\t\310\336\037\000\250\347\260*\001R\013accumulated:\010\210\240\037\000\350\240\037"
    "\000\"\351\001\n ValidatorHistoricalRewardsRecord\022E"
    "\n\021validator_address\030\001 \001(\tB\030\322\264-\024cosmos.Ad"
    "dressStringR\020validatorAddress\022\026\n\006period\030"
    "\002 \001(\004R\006period\022\\\n\007rewards\030\003 \001(\01327.cosmos."
    "distribution.v1beta1.ValidatorHistorical"
    "RewardsB\t\310\336\037\000\250\347\260*\001R\007rewards:\010\210\240\037\000\350\240\037\000\"\313\001"
    "\n\035ValidatorCurrentRewardsRecord\022E\n\021valid"
    "ator_address\030\001 \001(\tB\030\322\264-\024cosmos.AddressSt"
    "ringR\020validatorAddress\022Y\n\007rewards\030\002 \001(\0132"
    "4.cosmos.distribution.v1beta1.ValidatorC"
    "urrentRewardsB\t\310\336\037\000\250\347\260*\001R\007rewards:\010\210\240\037\000\350"
    "\240\037\000\"\231\002\n\033DelegatorStartingInfoRecord\022E\n\021d"
    "elegator_address\030\001 \001(\tB\030\322\264-\024cosmos.Addre"
    "ssStringR\020delegatorAddress\022E\n\021validator_"
    "address\030\002 \001(\tB\030\322\264-\024cosmos.AddressStringR"
    "\020validatorAddress\022b\n\rstarting_info\030\003 \001(\013"
    "22.cosmos.distribution.v1beta1.Delegator"
    "StartingInfoB\t\310\336\037\000\250\347\260*\001R\014startingInfo:\010\210"
    "\240\037\000\350\240\037\000\"\215\002\n\031ValidatorSlashEventRecord\022E\n"
    "\021validator_address\030\001 \001(\tB\030\322\264-\024cosmos.Add"
    "ressStringR\020validatorAddress\022\026\n\006height\030\002"
    " \001(\004R\006height\022\026\n\006period\030\003 \001(\004R\006period\022o\n\025"
    "validator_slash_event\030\004 \001(\01320.cosmos.dis"
    "tribution.v1beta1.ValidatorSlashEventB\t\310"
    "\336\037\000\250\347\260*\001R\023validatorSlashEvent:\010\210\240\037\000\350\240\037\000\""
    "\214\t\n\014GenesisState\022F\n\006params\030\001 \001(\0132#.cosmo"
    "s.distribution.v1beta1.ParamsB\t\310\336\037\000\250\347\260*\001"
    "R\006params\022J\n\010fee_pool\030\002 \001(\0132$.cosmos.dist"
    "ribution.v1beta1.FeePoolB\t\310\336\037\000\250\347\260*\001R\007fee"
    "Pool\022w\n\030delegator_withdraw_infos\030\003 \003(\01322"
    ".cosmos.distribution.v1beta1.DelegatorWi"
    "thdrawInfoB\t\310\336\037\000\250\347\260*\001R\026delegatorWithdraw"
    "Infos\022E\n\021previous_proposer\030\004 \001(\tB\030\322\264-\024co"
    "smos.AddressStringR\020previousProposer\022z\n\023"
    "outstanding_rewards\030\005 \003(\0132>.cosmos.distr"
    "ibution.v1beta1.ValidatorOutstandingRewa"
    "rdsRecordB\t\310\336\037\000\250\347\260*\001R\022outstandingRewards"
    "\022\230\001\n!validator_accumulated_commissions\030\006"
    " \003(\0132A.cosmos.distribution.v1beta1.Valid"
    "atorAccumulatedCommissionRecordB\t\310\336\037\000\250\347\260"
    "*\001R\037validatorAccumulatedCommissions\022\212\001\n\034"
    "validator_historical_rewards\030\007 \003(\0132=.cos"
    "mos.distribution.v1beta1.ValidatorHistor"
    "icalRewardsRecordB\t\310\336\037\000\250\347\260*\001R\032validatorH"
    "istoricalRewards\022\201\001\n\031validator_current_r"
    "ewards\030\010 \003(\0132:.cosmos.distribution.v1bet"
    "a1.ValidatorCurrentRewardsRecordB\t\310\336\037\000\250\347"
    "\260*\001R\027validatorCurrentRewards\022}\n\030delegato"
    "r_starting_infos\030\t \003(\01328.cosmos.distribu"
    "tion.v1beta1.DelegatorStartingInfoRecord"
    "B\t\310\336\037\000\250\347\260*\001R\026delegatorStartingInfos\022w\n\026v"
    "alidator_slash_events\030\n \003(\01326.cosmos.dis"
    "tribution.v1beta1.ValidatorSlashEventRec"
    "ordB\t\310\336\037\000\250\347\260*\001R\024validatorSlashEvents:\010\210\240"
    "\037\000\350\240\037\000B\364\001\n\037com.cosmos.distribution.v1bet"
    "a1B\014GenesisProtoP\001Z1github.com/cosmos/co"
    "smos-sdk/x/distribution/types\242\002\003CDX\252\002\033Co"
    "smos.Distribution.V1beta1\312\002\033Cosmos\\Distr"
    "ibution\\V1beta1\342\002\'Cosmos\\Distribution\\V1"
    "beta1\\GPBMetadata\352\002\035Cosmos::Distribution"
    "::V1beta1\250\342\036\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_deps[5] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto = {
    false,
    false,
    3301,
    descriptor_table_protodef_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto,
    "cosmos/distribution/v1beta1/genesis.proto",
    &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
    descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_deps,
    5,
    8,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto::offsets,
    file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto,
    file_level_enum_descriptors_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto,
    file_level_service_descriptors_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter() {
  return &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto(&descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto);
namespace cosmos {
namespace distribution {
namespace v1beta1 {
// ===================================================================

class DelegatorWithdrawInfo::_Internal {
 public:
};

DelegatorWithdrawInfo::DelegatorWithdrawInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
}
DelegatorWithdrawInfo::DelegatorWithdrawInfo(const DelegatorWithdrawInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelegatorWithdrawInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.withdraw_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_address().empty()) {
    _this->_impl_.delegator_address_.Set(from._internal_delegator_address(), _this->GetArenaForAllocation());
  }
  _impl_.withdraw_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.withdraw_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_withdraw_address().empty()) {
    _this->_impl_.withdraw_address_.Set(from._internal_withdraw_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
}

inline void DelegatorWithdrawInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.withdraw_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.withdraw_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.withdraw_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelegatorWithdrawInfo::~DelegatorWithdrawInfo() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelegatorWithdrawInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delegator_address_.Destroy();
  _impl_.withdraw_address_.Destroy();
}

void DelegatorWithdrawInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelegatorWithdrawInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delegator_address_.ClearToEmpty();
  _impl_.withdraw_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatorWithdrawInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.DelegatorWithdrawInfo.delegator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string withdraw_address = 2 [json_name = "withdrawAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_withdraw_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.DelegatorWithdrawInfo.withdraw_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DelegatorWithdrawInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    const std::string& _s = this->_internal_delegator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.DelegatorWithdrawInfo.delegator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string withdraw_address = 2 [json_name = "withdrawAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_withdraw_address().empty()) {
    const std::string& _s = this->_internal_withdraw_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.DelegatorWithdrawInfo.withdraw_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
  return target;
}

::size_t DelegatorWithdrawInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_address());
  }

  // string withdraw_address = 2 [json_name = "withdrawAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_withdraw_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_withdraw_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegatorWithdrawInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelegatorWithdrawInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegatorWithdrawInfo::GetClassData() const { return &_class_data_; }


void DelegatorWithdrawInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelegatorWithdrawInfo*>(&to_msg);
  auto& from = static_cast<const DelegatorWithdrawInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delegator_address().empty()) {
    _this->_internal_set_delegator_address(from._internal_delegator_address());
  }
  if (!from._internal_withdraw_address().empty()) {
    _this->_internal_set_withdraw_address(from._internal_withdraw_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegatorWithdrawInfo::CopyFrom(const DelegatorWithdrawInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.DelegatorWithdrawInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatorWithdrawInfo::IsInitialized() const {
  return true;
}

void DelegatorWithdrawInfo::InternalSwap(DelegatorWithdrawInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_address_, lhs_arena,
                                       &other->_impl_.delegator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.withdraw_address_, lhs_arena,
                                       &other->_impl_.withdraw_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatorWithdrawInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[0]);
}
// ===================================================================

class ValidatorOutstandingRewardsRecord::_Internal {
 public:
};

void ValidatorOutstandingRewardsRecord::clear_outstanding_rewards() {
  _internal_mutable_outstanding_rewards()->Clear();
}
ValidatorOutstandingRewardsRecord::ValidatorOutstandingRewardsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
}
ValidatorOutstandingRewardsRecord::ValidatorOutstandingRewardsRecord(const ValidatorOutstandingRewardsRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorOutstandingRewardsRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.outstanding_rewards_){from._impl_.outstanding_rewards_}
    , decltype(_impl_.validator_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
}

inline void ValidatorOutstandingRewardsRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.outstanding_rewards_){arena}
    , decltype(_impl_.validator_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorOutstandingRewardsRecord::~ValidatorOutstandingRewardsRecord() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorOutstandingRewardsRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_outstanding_rewards()->~RepeatedPtrField();
  _impl_.validator_address_.Destroy();
}

void ValidatorOutstandingRewardsRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorOutstandingRewardsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_outstanding_rewards()->Clear();
  _impl_.validator_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorOutstandingRewardsRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.DecCoin outstanding_rewards = 2 [json_name = "outstandingRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outstanding_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorOutstandingRewardsRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord.validator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .cosmos.base.v1beta1.DecCoin outstanding_rewards = 2 [json_name = "outstandingRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outstanding_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_outstanding_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
  return target;
}

::size_t ValidatorOutstandingRewardsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin outstanding_rewards = 2 [json_name = "outstandingRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_outstanding_rewards_size();
  for (const auto& msg : this->_internal_outstanding_rewards()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorOutstandingRewardsRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorOutstandingRewardsRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorOutstandingRewardsRecord::GetClassData() const { return &_class_data_; }


void ValidatorOutstandingRewardsRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorOutstandingRewardsRecord*>(&to_msg);
  auto& from = static_cast<const ValidatorOutstandingRewardsRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_outstanding_rewards()->MergeFrom(from._internal_outstanding_rewards());
  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorOutstandingRewardsRecord::CopyFrom(const ValidatorOutstandingRewardsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorOutstandingRewardsRecord::IsInitialized() const {
  return true;
}

void ValidatorOutstandingRewardsRecord::InternalSwap(ValidatorOutstandingRewardsRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_outstanding_rewards()->InternalSwap(other->_internal_mutable_outstanding_rewards());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorOutstandingRewardsRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[1]);
}
// ===================================================================

class ValidatorAccumulatedCommissionRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidatorAccumulatedCommissionRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValidatorAccumulatedCommissionRecord, _impl_._has_bits_);
  static const ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission& accumulated(const ValidatorAccumulatedCommissionRecord* msg);
  static void set_has_accumulated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission&
ValidatorAccumulatedCommissionRecord::_Internal::accumulated(const ValidatorAccumulatedCommissionRecord* msg) {
  return *msg->_impl_.accumulated_;
}
void ValidatorAccumulatedCommissionRecord::clear_accumulated() {
  if (_impl_.accumulated_ != nullptr) _impl_.accumulated_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ValidatorAccumulatedCommissionRecord::ValidatorAccumulatedCommissionRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
}
ValidatorAccumulatedCommissionRecord::ValidatorAccumulatedCommissionRecord(const ValidatorAccumulatedCommissionRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorAccumulatedCommissionRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.accumulated_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.accumulated_ = new ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission(*from._impl_.accumulated_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
}

inline void ValidatorAccumulatedCommissionRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.accumulated_){nullptr}
  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorAccumulatedCommissionRecord::~ValidatorAccumulatedCommissionRecord() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorAccumulatedCommissionRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validator_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.accumulated_;
}

void ValidatorAccumulatedCommissionRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorAccumulatedCommissionRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.accumulated_ != nullptr);
    _impl_.accumulated_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorAccumulatedCommissionRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.distribution.v1beta1.ValidatorAccumulatedCommission accumulated = 2 [json_name = "accumulated", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_accumulated(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorAccumulatedCommissionRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord.validator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.distribution.v1beta1.ValidatorAccumulatedCommission accumulated = 2 [json_name = "accumulated", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::accumulated(this),
        _Internal::accumulated(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
  return target;
}

::size_t ValidatorAccumulatedCommissionRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  // .cosmos.distribution.v1beta1.ValidatorAccumulatedCommission accumulated = 2 [json_name = "accumulated", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.accumulated_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorAccumulatedCommissionRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorAccumulatedCommissionRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorAccumulatedCommissionRecord::GetClassData() const { return &_class_data_; }


void ValidatorAccumulatedCommissionRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorAccumulatedCommissionRecord*>(&to_msg);
  auto& from = static_cast<const ValidatorAccumulatedCommissionRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_accumulated()->::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission::MergeFrom(
        from._internal_accumulated());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorAccumulatedCommissionRecord::CopyFrom(const ValidatorAccumulatedCommissionRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorAccumulatedCommissionRecord::IsInitialized() const {
  return true;
}

void ValidatorAccumulatedCommissionRecord::InternalSwap(ValidatorAccumulatedCommissionRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  swap(_impl_.accumulated_, other->_impl_.accumulated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorAccumulatedCommissionRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[2]);
}
// ===================================================================

class ValidatorHistoricalRewardsRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidatorHistoricalRewardsRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValidatorHistoricalRewardsRecord, _impl_._has_bits_);
  static const ::cosmos::distribution::v1beta1::ValidatorHistoricalRewards& rewards(const ValidatorHistoricalRewardsRecord* msg);
  static void set_has_rewards(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::distribution::v1beta1::ValidatorHistoricalRewards&
ValidatorHistoricalRewardsRecord::_Internal::rewards(const ValidatorHistoricalRewardsRecord* msg) {
  return *msg->_impl_.rewards_;
}
void ValidatorHistoricalRewardsRecord::clear_rewards() {
  if (_impl_.rewards_ != nullptr) _impl_.rewards_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ValidatorHistoricalRewardsRecord::ValidatorHistoricalRewardsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
}
ValidatorHistoricalRewardsRecord::ValidatorHistoricalRewardsRecord(const ValidatorHistoricalRewardsRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorHistoricalRewardsRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.rewards_){nullptr}
    , decltype(_impl_.period_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rewards_ = new ::cosmos::distribution::v1beta1::ValidatorHistoricalRewards(*from._impl_.rewards_);
  }
  _this->_impl_.period_ = from._impl_.period_;
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
}

inline void ValidatorHistoricalRewardsRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.rewards_){nullptr}
    , decltype(_impl_.period_) { ::uint64_t{0u} }

  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorHistoricalRewardsRecord::~ValidatorHistoricalRewardsRecord() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorHistoricalRewardsRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validator_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rewards_;
}

void ValidatorHistoricalRewardsRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorHistoricalRewardsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.rewards_ != nullptr);
    _impl_.rewards_->Clear();
  }
  _impl_.period_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorHistoricalRewardsRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 period = 2 [json_name = "period"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.distribution.v1beta1.ValidatorHistoricalRewards rewards = 3 [json_name = "rewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewards(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorHistoricalRewardsRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord.validator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 period = 2 [json_name = "period"];
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_period(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.distribution.v1beta1.ValidatorHistoricalRewards rewards = 3 [json_name = "rewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rewards(this),
        _Internal::rewards(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
  return target;
}

::size_t ValidatorHistoricalRewardsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  // .cosmos.distribution.v1beta1.ValidatorHistoricalRewards rewards = 3 [json_name = "rewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewards_);
  }

  // uint64 period = 2 [json_name = "period"];
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorHistoricalRewardsRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorHistoricalRewardsRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorHistoricalRewardsRecord::GetClassData() const { return &_class_data_; }


void ValidatorHistoricalRewardsRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorHistoricalRewardsRecord*>(&to_msg);
  auto& from = static_cast<const ValidatorHistoricalRewardsRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_rewards()->::cosmos::distribution::v1beta1::ValidatorHistoricalRewards::MergeFrom(
        from._internal_rewards());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorHistoricalRewardsRecord::CopyFrom(const ValidatorHistoricalRewardsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorHistoricalRewardsRecord::IsInitialized() const {
  return true;
}

void ValidatorHistoricalRewardsRecord::InternalSwap(ValidatorHistoricalRewardsRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorHistoricalRewardsRecord, _impl_.period_)
      + sizeof(ValidatorHistoricalRewardsRecord::_impl_.period_)
      - PROTOBUF_FIELD_OFFSET(ValidatorHistoricalRewardsRecord, _impl_.rewards_)>(
          reinterpret_cast<char*>(&_impl_.rewards_),
          reinterpret_cast<char*>(&other->_impl_.rewards_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorHistoricalRewardsRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[3]);
}
// ===================================================================

class ValidatorCurrentRewardsRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidatorCurrentRewardsRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValidatorCurrentRewardsRecord, _impl_._has_bits_);
  static const ::cosmos::distribution::v1beta1::ValidatorCurrentRewards& rewards(const ValidatorCurrentRewardsRecord* msg);
  static void set_has_rewards(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::distribution::v1beta1::ValidatorCurrentRewards&
ValidatorCurrentRewardsRecord::_Internal::rewards(const ValidatorCurrentRewardsRecord* msg) {
  return *msg->_impl_.rewards_;
}
void ValidatorCurrentRewardsRecord::clear_rewards() {
  if (_impl_.rewards_ != nullptr) _impl_.rewards_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ValidatorCurrentRewardsRecord::ValidatorCurrentRewardsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
}
ValidatorCurrentRewardsRecord::ValidatorCurrentRewardsRecord(const ValidatorCurrentRewardsRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorCurrentRewardsRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.rewards_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.rewards_ = new ::cosmos::distribution::v1beta1::ValidatorCurrentRewards(*from._impl_.rewards_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
}

inline void ValidatorCurrentRewardsRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.rewards_){nullptr}
  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorCurrentRewardsRecord::~ValidatorCurrentRewardsRecord() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorCurrentRewardsRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validator_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rewards_;
}

void ValidatorCurrentRewardsRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorCurrentRewardsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.rewards_ != nullptr);
    _impl_.rewards_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorCurrentRewardsRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.distribution.v1beta1.ValidatorCurrentRewards rewards = 2 [json_name = "rewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewards(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorCurrentRewardsRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord.validator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.distribution.v1beta1.ValidatorCurrentRewards rewards = 2 [json_name = "rewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewards(this),
        _Internal::rewards(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
  return target;
}

::size_t ValidatorCurrentRewardsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  // .cosmos.distribution.v1beta1.ValidatorCurrentRewards rewards = 2 [json_name = "rewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewards_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorCurrentRewardsRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorCurrentRewardsRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorCurrentRewardsRecord::GetClassData() const { return &_class_data_; }


void ValidatorCurrentRewardsRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorCurrentRewardsRecord*>(&to_msg);
  auto& from = static_cast<const ValidatorCurrentRewardsRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_rewards()->::cosmos::distribution::v1beta1::ValidatorCurrentRewards::MergeFrom(
        from._internal_rewards());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorCurrentRewardsRecord::CopyFrom(const ValidatorCurrentRewardsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorCurrentRewardsRecord::IsInitialized() const {
  return true;
}

void ValidatorCurrentRewardsRecord::InternalSwap(ValidatorCurrentRewardsRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  swap(_impl_.rewards_, other->_impl_.rewards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorCurrentRewardsRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[4]);
}
// ===================================================================

class DelegatorStartingInfoRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<DelegatorStartingInfoRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DelegatorStartingInfoRecord, _impl_._has_bits_);
  static const ::cosmos::distribution::v1beta1::DelegatorStartingInfo& starting_info(const DelegatorStartingInfoRecord* msg);
  static void set_has_starting_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::distribution::v1beta1::DelegatorStartingInfo&
DelegatorStartingInfoRecord::_Internal::starting_info(const DelegatorStartingInfoRecord* msg) {
  return *msg->_impl_.starting_info_;
}
void DelegatorStartingInfoRecord::clear_starting_info() {
  if (_impl_.starting_info_ != nullptr) _impl_.starting_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DelegatorStartingInfoRecord::DelegatorStartingInfoRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
}
DelegatorStartingInfoRecord::DelegatorStartingInfoRecord(const DelegatorStartingInfoRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelegatorStartingInfoRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.starting_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_address().empty()) {
    _this->_impl_.delegator_address_.Set(from._internal_delegator_address(), _this->GetArenaForAllocation());
  }
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.starting_info_ = new ::cosmos::distribution::v1beta1::DelegatorStartingInfo(*from._impl_.starting_info_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
}

inline void DelegatorStartingInfoRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.starting_info_){nullptr}
  };
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelegatorStartingInfoRecord::~DelegatorStartingInfoRecord() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelegatorStartingInfoRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delegator_address_.Destroy();
  _impl_.validator_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.starting_info_;
}

void DelegatorStartingInfoRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelegatorStartingInfoRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delegator_address_.ClearToEmpty();
  _impl_.validator_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.starting_info_ != nullptr);
    _impl_.starting_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatorStartingInfoRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.delegator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.distribution.v1beta1.DelegatorStartingInfo starting_info = 3 [json_name = "startingInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_starting_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DelegatorStartingInfoRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    const std::string& _s = this->_internal_delegator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.delegator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.DelegatorStartingInfoRecord.validator_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.distribution.v1beta1.DelegatorStartingInfo starting_info = 3 [json_name = "startingInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::starting_info(this),
        _Internal::starting_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
  return target;
}

::size_t DelegatorStartingInfoRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_address());
  }

  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  // .cosmos.distribution.v1beta1.DelegatorStartingInfo starting_info = 3 [json_name = "startingInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.starting_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegatorStartingInfoRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelegatorStartingInfoRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegatorStartingInfoRecord::GetClassData() const { return &_class_data_; }


void DelegatorStartingInfoRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelegatorStartingInfoRecord*>(&to_msg);
  auto& from = static_cast<const DelegatorStartingInfoRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delegator_address().empty()) {
    _this->_internal_set_delegator_address(from._internal_delegator_address());
  }
  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_starting_info()->::cosmos::distribution::v1beta1::DelegatorStartingInfo::MergeFrom(
        from._internal_starting_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegatorStartingInfoRecord::CopyFrom(const DelegatorStartingInfoRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.DelegatorStartingInfoRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatorStartingInfoRecord::IsInitialized() const {
  return true;
}

void DelegatorStartingInfoRecord::InternalSwap(DelegatorStartingInfoRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_address_, lhs_arena,
                                       &other->_impl_.delegator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  swap(_impl_.starting_info_, other->_impl_.starting_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatorStartingInfoRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[5]);
}
// ===================================================================

class ValidatorSlashEventRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidatorSlashEventRecord>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValidatorSlashEventRecord, _impl_._has_bits_);
  static const ::cosmos::distribution::v1beta1::ValidatorSlashEvent& validator_slash_event(const ValidatorSlashEventRecord* msg);
  static void set_has_validator_slash_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::distribution::v1beta1::ValidatorSlashEvent&
ValidatorSlashEventRecord::_Internal::validator_slash_event(const ValidatorSlashEventRecord* msg) {
  return *msg->_impl_.validator_slash_event_;
}
void ValidatorSlashEventRecord::clear_validator_slash_event() {
  if (_impl_.validator_slash_event_ != nullptr) _impl_.validator_slash_event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ValidatorSlashEventRecord::ValidatorSlashEventRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
}
ValidatorSlashEventRecord::ValidatorSlashEventRecord(const ValidatorSlashEventRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorSlashEventRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.validator_slash_event_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.period_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.validator_slash_event_ = new ::cosmos::distribution::v1beta1::ValidatorSlashEvent(*from._impl_.validator_slash_event_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.period_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.period_));
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
}

inline void ValidatorSlashEventRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.validator_slash_event_){nullptr}
    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.period_) { ::uint64_t{0u} }

  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorSlashEventRecord::~ValidatorSlashEventRecord() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorSlashEventRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validator_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.validator_slash_event_;
}

void ValidatorSlashEventRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorSlashEventRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.validator_slash_event_ != nullptr);
    _impl_.validator_slash_event_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.period_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.period_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorSlashEventRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.ValidatorSlashEventRecord.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 period = 3 [json_name = "period"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_event = 4 [json_name = "validatorSlashEvent", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_slash_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorSlashEventRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.ValidatorSlashEventRecord.validator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_height(), target);
  }

  // uint64 period = 3 [json_name = "period"];
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_period(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_event = 4 [json_name = "validatorSlashEvent", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::validator_slash_event(this),
        _Internal::validator_slash_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
  return target;
}

::size_t ValidatorSlashEventRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  // .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_event = 4 [json_name = "validatorSlashEvent", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.validator_slash_event_);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // uint64 period = 3 [json_name = "period"];
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorSlashEventRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorSlashEventRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorSlashEventRecord::GetClassData() const { return &_class_data_; }


void ValidatorSlashEventRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorSlashEventRecord*>(&to_msg);
  auto& from = static_cast<const ValidatorSlashEventRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_validator_slash_event()->::cosmos::distribution::v1beta1::ValidatorSlashEvent::MergeFrom(
        from._internal_validator_slash_event());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorSlashEventRecord::CopyFrom(const ValidatorSlashEventRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorSlashEventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorSlashEventRecord::IsInitialized() const {
  return true;
}

void ValidatorSlashEventRecord::InternalSwap(ValidatorSlashEventRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorSlashEventRecord, _impl_.period_)
      + sizeof(ValidatorSlashEventRecord::_impl_.period_)
      - PROTOBUF_FIELD_OFFSET(ValidatorSlashEventRecord, _impl_.validator_slash_event_)>(
          reinterpret_cast<char*>(&_impl_.validator_slash_event_),
          reinterpret_cast<char*>(&other->_impl_.validator_slash_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorSlashEventRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[6]);
}
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::cosmos::distribution::v1beta1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::distribution::v1beta1::FeePool& fee_pool(const GenesisState* msg);
  static void set_has_fee_pool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::distribution::v1beta1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
const ::cosmos::distribution::v1beta1::FeePool&
GenesisState::_Internal::fee_pool(const GenesisState* msg) {
  return *msg->_impl_.fee_pool_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GenesisState::clear_fee_pool() {
  if (_impl_.fee_pool_ != nullptr) _impl_.fee_pool_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delegator_withdraw_infos_){from._impl_.delegator_withdraw_infos_}
    , decltype(_impl_.outstanding_rewards_){from._impl_.outstanding_rewards_}
    , decltype(_impl_.validator_accumulated_commissions_){from._impl_.validator_accumulated_commissions_}
    , decltype(_impl_.validator_historical_rewards_){from._impl_.validator_historical_rewards_}
    , decltype(_impl_.validator_current_rewards_){from._impl_.validator_current_rewards_}
    , decltype(_impl_.delegator_starting_infos_){from._impl_.delegator_starting_infos_}
    , decltype(_impl_.validator_slash_events_){from._impl_.validator_slash_events_}
    , decltype(_impl_.previous_proposer_) {}

    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.fee_pool_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.previous_proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.previous_proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_previous_proposer().empty()) {
    _this->_impl_.previous_proposer_.Set(from._internal_previous_proposer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::cosmos::distribution::v1beta1::Params(*from._impl_.params_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.fee_pool_ = new ::cosmos::distribution::v1beta1::FeePool(*from._impl_.fee_pool_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delegator_withdraw_infos_){arena}
    , decltype(_impl_.outstanding_rewards_){arena}
    , decltype(_impl_.validator_accumulated_commissions_){arena}
    , decltype(_impl_.validator_historical_rewards_){arena}
    , decltype(_impl_.validator_current_rewards_){arena}
    , decltype(_impl_.delegator_starting_infos_){arena}
    , decltype(_impl_.validator_slash_events_){arena}
    , decltype(_impl_.previous_proposer_) {}

    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.fee_pool_){nullptr}
  };
  _impl_.previous_proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.previous_proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_delegator_withdraw_infos()->~RepeatedPtrField();
  _internal_mutable_outstanding_rewards()->~RepeatedPtrField();
  _internal_mutable_validator_accumulated_commissions()->~RepeatedPtrField();
  _internal_mutable_validator_historical_rewards()->~RepeatedPtrField();
  _internal_mutable_validator_current_rewards()->~RepeatedPtrField();
  _internal_mutable_delegator_starting_infos()->~RepeatedPtrField();
  _internal_mutable_validator_slash_events()->~RepeatedPtrField();
  _impl_.previous_proposer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
  if (this != internal_default_instance()) delete _impl_.fee_pool_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_delegator_withdraw_infos()->Clear();
  _internal_mutable_outstanding_rewards()->Clear();
  _internal_mutable_validator_accumulated_commissions()->Clear();
  _internal_mutable_validator_historical_rewards()->Clear();
  _internal_mutable_validator_current_rewards()->Clear();
  _internal_mutable_delegator_starting_infos()->Clear();
  _internal_mutable_validator_slash_events()->Clear();
  _impl_.previous_proposer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.params_ != nullptr);
      _impl_.params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fee_pool_ != nullptr);
      _impl_.fee_pool_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.distribution.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.distribution.v1beta1.FeePool fee_pool = 2 [json_name = "feePool", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_pool(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.distribution.v1beta1.DelegatorWithdrawInfo delegator_withdraw_infos = 3 [json_name = "delegatorWithdrawInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegator_withdraw_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string previous_proposer = 4 [json_name = "previousProposer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_previous_proposer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.GenesisState.previous_proposer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord outstanding_rewards = 5 [json_name = "outstandingRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outstanding_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord validator_accumulated_commissions = 6 [json_name = "validatorAccumulatedCommissions", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validator_accumulated_commissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord validator_historical_rewards = 7 [json_name = "validatorHistoricalRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validator_historical_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord validator_current_rewards = 8 [json_name = "validatorCurrentRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validator_current_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.distribution.v1beta1.DelegatorStartingInfoRecord delegator_starting_infos = 9 [json_name = "delegatorStartingInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegator_starting_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.distribution.v1beta1.ValidatorSlashEventRecord validator_slash_events = 10 [json_name = "validatorSlashEvents", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validator_slash_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.distribution.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // .cosmos.distribution.v1beta1.FeePool fee_pool = 2 [json_name = "feePool", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fee_pool(this),
        _Internal::fee_pool(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.distribution.v1beta1.DelegatorWithdrawInfo delegator_withdraw_infos = 3 [json_name = "delegatorWithdrawInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delegator_withdraw_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_delegator_withdraw_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string previous_proposer = 4 [json_name = "previousProposer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_previous_proposer().empty()) {
    const std::string& _s = this->_internal_previous_proposer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.GenesisState.previous_proposer");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord outstanding_rewards = 5 [json_name = "outstandingRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_outstanding_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_outstanding_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord validator_accumulated_commissions = 6 [json_name = "validatorAccumulatedCommissions", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validator_accumulated_commissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_validator_accumulated_commissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord validator_historical_rewards = 7 [json_name = "validatorHistoricalRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validator_historical_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_validator_historical_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord validator_current_rewards = 8 [json_name = "validatorCurrentRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validator_current_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_validator_current_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.distribution.v1beta1.DelegatorStartingInfoRecord delegator_starting_infos = 9 [json_name = "delegatorStartingInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delegator_starting_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_delegator_starting_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorSlashEventRecord validator_slash_events = 10 [json_name = "validatorSlashEvents", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validator_slash_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_validator_slash_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.distribution.v1beta1.DelegatorWithdrawInfo delegator_withdraw_infos = 3 [json_name = "delegatorWithdrawInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_delegator_withdraw_infos_size();
  for (const auto& msg : this->_internal_delegator_withdraw_infos()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord outstanding_rewards = 5 [json_name = "outstandingRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_outstanding_rewards_size();
  for (const auto& msg : this->_internal_outstanding_rewards()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord validator_accumulated_commissions = 6 [json_name = "validatorAccumulatedCommissions", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_validator_accumulated_commissions_size();
  for (const auto& msg : this->_internal_validator_accumulated_commissions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord validator_historical_rewards = 7 [json_name = "validatorHistoricalRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_validator_historical_rewards_size();
  for (const auto& msg : this->_internal_validator_historical_rewards()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord validator_current_rewards = 8 [json_name = "validatorCurrentRewards", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_validator_current_rewards_size();
  for (const auto& msg : this->_internal_validator_current_rewards()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.distribution.v1beta1.DelegatorStartingInfoRecord delegator_starting_infos = 9 [json_name = "delegatorStartingInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_delegator_starting_infos_size();
  for (const auto& msg : this->_internal_delegator_starting_infos()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.distribution.v1beta1.ValidatorSlashEventRecord validator_slash_events = 10 [json_name = "validatorSlashEvents", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_validator_slash_events_size();
  for (const auto& msg : this->_internal_validator_slash_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string previous_proposer = 4 [json_name = "previousProposer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_previous_proposer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_previous_proposer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.distribution.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.params_);
    }

    // .cosmos.distribution.v1beta1.FeePool fee_pool = 2 [json_name = "feePool", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fee_pool_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_delegator_withdraw_infos()->MergeFrom(from._internal_delegator_withdraw_infos());
  _this->_internal_mutable_outstanding_rewards()->MergeFrom(from._internal_outstanding_rewards());
  _this->_internal_mutable_validator_accumulated_commissions()->MergeFrom(from._internal_validator_accumulated_commissions());
  _this->_internal_mutable_validator_historical_rewards()->MergeFrom(from._internal_validator_historical_rewards());
  _this->_internal_mutable_validator_current_rewards()->MergeFrom(from._internal_validator_current_rewards());
  _this->_internal_mutable_delegator_starting_infos()->MergeFrom(from._internal_delegator_starting_infos());
  _this->_internal_mutable_validator_slash_events()->MergeFrom(from._internal_validator_slash_events());
  if (!from._internal_previous_proposer().empty()) {
    _this->_internal_set_previous_proposer(from._internal_previous_proposer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_params()->::cosmos::distribution::v1beta1::Params::MergeFrom(
          from._internal_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_fee_pool()->::cosmos::distribution::v1beta1::FeePool::MergeFrom(
          from._internal_fee_pool());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_delegator_withdraw_infos()->InternalSwap(other->_internal_mutable_delegator_withdraw_infos());
  _internal_mutable_outstanding_rewards()->InternalSwap(other->_internal_mutable_outstanding_rewards());
  _internal_mutable_validator_accumulated_commissions()->InternalSwap(other->_internal_mutable_validator_accumulated_commissions());
  _internal_mutable_validator_historical_rewards()->InternalSwap(other->_internal_mutable_validator_historical_rewards());
  _internal_mutable_validator_current_rewards()->InternalSwap(other->_internal_mutable_validator_current_rewards());
  _internal_mutable_delegator_starting_infos()->InternalSwap(other->_internal_mutable_delegator_starting_infos());
  _internal_mutable_validator_slash_events()->InternalSwap(other->_internal_mutable_validator_slash_events());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.previous_proposer_, lhs_arena,
                                       &other->_impl_.previous_proposer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.fee_pool_)
      + sizeof(GenesisState::_impl_.fee_pool_)
      - PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.params_)>(
          reinterpret_cast<char*>(&_impl_.params_),
          reinterpret_cast<char*>(&other->_impl_.params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fgenesis_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::DelegatorWithdrawInfo*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::DelegatorWithdrawInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::DelegatorWithdrawInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorOutstandingRewardsRecord*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorOutstandingRewardsRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorOutstandingRewardsRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommissionRecord*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommissionRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommissionRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorHistoricalRewardsRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorCurrentRewardsRecord*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorCurrentRewardsRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorCurrentRewardsRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::DelegatorStartingInfoRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorSlashEventRecord*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorSlashEventRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorSlashEventRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::GenesisState*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::GenesisState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

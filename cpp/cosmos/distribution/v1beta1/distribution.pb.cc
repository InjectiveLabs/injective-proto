// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/distribution/v1beta1/distribution.proto

#include "cosmos/distribution/v1beta1/distribution.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace distribution {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.community_tax_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_proposer_reward_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bonus_proposer_reward_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.withdraw_addr_enabled_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorHistoricalRewards::ValidatorHistoricalRewards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cumulative_reward_ratio_)*/{}
  , /*decltype(_impl_.reference_count_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorHistoricalRewardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorHistoricalRewardsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorHistoricalRewardsDefaultTypeInternal() {}
  union {
    ValidatorHistoricalRewards _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorHistoricalRewardsDefaultTypeInternal _ValidatorHistoricalRewards_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorCurrentRewards::ValidatorCurrentRewards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rewards_)*/{}
  , /*decltype(_impl_.period_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorCurrentRewardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorCurrentRewardsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorCurrentRewardsDefaultTypeInternal() {}
  union {
    ValidatorCurrentRewards _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorCurrentRewardsDefaultTypeInternal _ValidatorCurrentRewards_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorAccumulatedCommission::ValidatorAccumulatedCommission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.commission_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorAccumulatedCommissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorAccumulatedCommissionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorAccumulatedCommissionDefaultTypeInternal() {}
  union {
    ValidatorAccumulatedCommission _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorAccumulatedCommissionDefaultTypeInternal _ValidatorAccumulatedCommission_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorOutstandingRewards::ValidatorOutstandingRewards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rewards_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorOutstandingRewardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorOutstandingRewardsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorOutstandingRewardsDefaultTypeInternal() {}
  union {
    ValidatorOutstandingRewards _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorOutstandingRewardsDefaultTypeInternal _ValidatorOutstandingRewards_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorSlashEvent::ValidatorSlashEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fraction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_period_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorSlashEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorSlashEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorSlashEventDefaultTypeInternal() {}
  union {
    ValidatorSlashEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorSlashEventDefaultTypeInternal _ValidatorSlashEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorSlashEvents::ValidatorSlashEvents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.validator_slash_events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorSlashEventsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorSlashEventsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorSlashEventsDefaultTypeInternal() {}
  union {
    ValidatorSlashEvents _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorSlashEventsDefaultTypeInternal _ValidatorSlashEvents_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FeePool::FeePool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.community_pool_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeePoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeePoolDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeePoolDefaultTypeInternal() {}
  union {
    FeePool _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeePoolDefaultTypeInternal _FeePool_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CommunityPoolSpendProposal::CommunityPoolSpendProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.recipient_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommunityPoolSpendProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommunityPoolSpendProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommunityPoolSpendProposalDefaultTypeInternal() {}
  union {
    CommunityPoolSpendProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommunityPoolSpendProposalDefaultTypeInternal _CommunityPoolSpendProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DelegatorStartingInfo::DelegatorStartingInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stake_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.previous_period_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DelegatorStartingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelegatorStartingInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelegatorStartingInfoDefaultTypeInternal() {}
  union {
    DelegatorStartingInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelegatorStartingInfoDefaultTypeInternal _DelegatorStartingInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DelegationDelegatorReward::DelegationDelegatorReward(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reward_)*/{}
  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DelegationDelegatorRewardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelegationDelegatorRewardDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelegationDelegatorRewardDefaultTypeInternal() {}
  union {
    DelegationDelegatorReward _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelegationDelegatorRewardDefaultTypeInternal _DelegationDelegatorReward_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CommunityPoolSpendProposalWithDeposit::CommunityPoolSpendProposalWithDeposit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.recipient_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deposit_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommunityPoolSpendProposalWithDepositDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommunityPoolSpendProposalWithDepositDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommunityPoolSpendProposalWithDepositDefaultTypeInternal() {}
  union {
    CommunityPoolSpendProposalWithDeposit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommunityPoolSpendProposalWithDepositDefaultTypeInternal _CommunityPoolSpendProposalWithDeposit_default_instance_;
}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[12];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::Params, _impl_.community_tax_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::Params, _impl_.base_proposer_reward_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::Params, _impl_.bonus_proposer_reward_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::Params, _impl_.withdraw_addr_enabled_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorHistoricalRewards, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorHistoricalRewards, _impl_.cumulative_reward_ratio_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorHistoricalRewards, _impl_.reference_count_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorCurrentRewards, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorCurrentRewards, _impl_.rewards_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorCurrentRewards, _impl_.period_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission, _impl_.commission_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorOutstandingRewards, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorOutstandingRewards, _impl_.rewards_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEvent, _impl_.validator_period_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEvent, _impl_.fraction_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEvents, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::ValidatorSlashEvents, _impl_.validator_slash_events_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::FeePool, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::FeePool, _impl_.community_pool_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposal, _impl_.recipient_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposal, _impl_.amount_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfo, _impl_.previous_period_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfo, _impl_.stake_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegatorStartingInfo, _impl_.height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegationDelegatorReward, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegationDelegatorReward, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::DelegationDelegatorReward, _impl_.reward_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit, _impl_.recipient_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit, _impl_.deposit_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::distribution::v1beta1::Params)},
        { 12, -1, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorHistoricalRewards)},
        { 22, -1, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorCurrentRewards)},
        { 32, -1, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission)},
        { 41, -1, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorOutstandingRewards)},
        { 50, -1, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorSlashEvent)},
        { 60, -1, -1, sizeof(::cosmos::distribution::v1beta1::ValidatorSlashEvents)},
        { 69, -1, -1, sizeof(::cosmos::distribution::v1beta1::FeePool)},
        { 78, -1, -1, sizeof(::cosmos::distribution::v1beta1::CommunityPoolSpendProposal)},
        { 90, -1, -1, sizeof(::cosmos::distribution::v1beta1::DelegatorStartingInfo)},
        { 101, -1, -1, sizeof(::cosmos::distribution::v1beta1::DelegationDelegatorReward)},
        { 111, -1, -1, sizeof(::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::distribution::v1beta1::_Params_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorHistoricalRewards_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorCurrentRewards_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorAccumulatedCommission_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorOutstandingRewards_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorSlashEvent_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_ValidatorSlashEvents_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_FeePool_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_CommunityPoolSpendProposal_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_DelegatorStartingInfo_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_DelegationDelegatorReward_default_instance_._instance,
    &::cosmos::distribution::v1beta1::_CommunityPoolSpendProposalWithDeposit_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n.cosmos/distribution/v1beta1/distributi"
    "on.proto\022\033cosmos.distribution.v1beta1\032\024g"
    "ogoproto/gogo.proto\032\036cosmos/base/v1beta1"
    "/coin.proto\032\031cosmos_proto/cosmos.proto\032\021"
    "amino/amino.proto\"\260\003\n\006Params\022a\n\rcommunit"
    "y_tax\030\001 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos/c"
    "osmos-sdk/types.Dec\322\264-\ncosmos.DecR\014commu"
    "nityTax\022p\n\024base_proposer_reward\030\002 \001(\tB>\030"
    "\001\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.Dec\322\264-\ncosmos.DecR\022baseProposerRewar"
    "d\022r\n\025bonus_proposer_reward\030\003 \001(\tB>\030\001\310\336\037\000"
    "\332\336\037&github.com/cosmos/cosmos-sdk/types.D"
    "ec\322\264-\ncosmos.DecR\023bonusProposerReward\0222\n"
    "\025withdraw_addr_enabled\030\004 \001(\010R\023withdrawAd"
    "drEnabled:)\230\240\037\000\212\347\260* cosmos-sdk/x/distrib"
    "ution/Params\"\326\001\n\032ValidatorHistoricalRewa"
    "rds\022\216\001\n\027cumulative_reward_ratio\030\001 \003(\0132\034."
    "cosmos.base.v1beta1.DecCoinB8\310\336\037\000\252\337\037+git"
    "hub.com/cosmos/cosmos-sdk/types.DecCoins"
    "\250\347\260*\001R\025cumulativeRewardRatio\022\'\n\017referenc"
    "e_count\030\002 \001(\rR\016referenceCount\"\243\001\n\027Valida"
    "torCurrentRewards\022p\n\007rewards\030\001 \003(\0132\034.cos"
    "mos.base.v1beta1.DecCoinB8\310\336\037\000\252\337\037+github"
    ".com/cosmos/cosmos-sdk/types.DecCoins\250\347\260"
    "*\001R\007rewards\022\026\n\006period\030\002 \001(\004R\006period\"\230\001\n\036"
    "ValidatorAccumulatedCommission\022v\n\ncommis"
    "sion\030\001 \003(\0132\034.cosmos.base.v1beta1.DecCoin"
    "B8\310\336\037\000\252\337\037+github.com/cosmos/cosmos-sdk/t"
    "ypes.DecCoins\250\347\260*\001R\ncommission\"\217\001\n\033Valid"
    "atorOutstandingRewards\022p\n\007rewards\030\001 \003(\0132"
    "\034.cosmos.base.v1beta1.DecCoinB8\310\336\037\000\252\337\037+g"
    "ithub.com/cosmos/cosmos-sdk/types.DecCoi"
    "ns\250\347\260*\001R\007rewards\"\232\001\n\023ValidatorSlashEvent"
    "\022)\n\020validator_period\030\001 \001(\004R\017validatorPer"
    "iod\022X\n\010fraction\030\002 \001(\tB<\310\336\037\000\332\336\037&github.co"
    "m/cosmos/cosmos-sdk/types.Dec\322\264-\ncosmos."
    "DecR\010fraction\"\217\001\n\024ValidatorSlashEvents\022q"
    "\n\026validator_slash_events\030\001 \003(\01320.cosmos."
    "distribution.v1beta1.ValidatorSlashEvent"
    "B\t\310\336\037\000\250\347\260*\001R\024validatorSlashEvents:\004\230\240\037\000\""
    "\210\001\n\007FeePool\022}\n\016community_pool\030\001 \003(\0132\034.co"
    "smos.base.v1beta1.DecCoinB8\310\336\037\000\252\337\037+githu"
    "b.com/cosmos/cosmos-sdk/types.DecCoins\250\347"
    "\260*\001R\rcommunityPool\"\212\002\n\032CommunityPoolSpen"
    "dProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descr"
    "iption\030\002 \001(\tR\013description\022\034\n\trecipient\030\003"
    " \001(\tR\trecipient\022h\n\006amount\030\004 \003(\0132\031.cosmos"
    ".base.v1beta1.CoinB5\310\336\037\000\252\337\037(github.com/c"
    "osmos/cosmos-sdk/types.Coins\250\347\260*\001R\006amoun"
    "t:,\030\001\210\240\037\000\230\240\037\000\350\240\037\000\312\264-\032cosmos.gov.v1beta1."
    "Content\"\332\001\n\025DelegatorStartingInfo\022\'\n\017pre"
    "vious_period\030\001 \001(\004R\016previousPeriod\022R\n\005st"
    "ake\030\002 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos/cos"
    "mos-sdk/types.Dec\322\264-\ncosmos.DecR\005stake\022D"
    "\n\006height\030\003 \001(\004B,\352\336\037\017creation_height\242\347\260*\017"
    "creation_height\250\347\260*\001R\006height\"\334\001\n\031Delegat"
    "ionDelegatorReward\022E\n\021validator_address\030"
    "\001 \001(\tB\030\322\264-\024cosmos.AddressStringR\020validat"
    "orAddress\022n\n\006reward\030\002 \003(\0132\034.cosmos.base."
    "v1beta1.DecCoinB8\310\336\037\000\252\337\037+github.com/cosm"
    "os/cosmos-sdk/types.DecCoins\250\347\260*\001R\006rewar"
    "d:\010\210\240\037\000\230\240\037\001\"\327\001\n%CommunityPoolSpendPropos"
    "alWithDeposit\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013d"
    "escription\030\002 \001(\tR\013description\022\034\n\trecipie"
    "nt\030\003 \001(\tR\trecipient\022\026\n\006amount\030\004 \001(\tR\006amo"
    "unt\022\030\n\007deposit\030\005 \001(\tR\007deposit:&\210\240\037\000\230\240\037\001\312"
    "\264-\032cosmos.gov.v1beta1.ContentB\371\001\n\037com.co"
    "smos.distribution.v1beta1B\021DistributionP"
    "rotoP\001Z1github.com/cosmos/cosmos-sdk/x/d"
    "istribution/types\242\002\003CDX\252\002\033Cosmos.Distrib"
    "ution.V1beta1\312\002\033Cosmos\\Distribution\\V1be"
    "ta1\342\002\'Cosmos\\Distribution\\V1beta1\\GPBMet"
    "adata\352\002\035Cosmos::Distribution::V1beta1\250\342\036"
    "\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto = {
    false,
    false,
    2929,
    descriptor_table_protodef_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto,
    "cosmos/distribution/v1beta1/distribution.proto",
    &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
    descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_deps,
    4,
    12,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto::offsets,
    file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto,
    file_level_enum_descriptors_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto,
    file_level_service_descriptors_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter() {
  return &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto(&descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto);
namespace cosmos {
namespace distribution {
namespace v1beta1 {
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.community_tax_) {}

    , decltype(_impl_.base_proposer_reward_) {}

    , decltype(_impl_.bonus_proposer_reward_) {}

    , decltype(_impl_.withdraw_addr_enabled_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.community_tax_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.community_tax_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_community_tax().empty()) {
    _this->_impl_.community_tax_.Set(from._internal_community_tax(), _this->GetArenaForAllocation());
  }
  _impl_.base_proposer_reward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_proposer_reward_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_proposer_reward().empty()) {
    _this->_impl_.base_proposer_reward_.Set(from._internal_base_proposer_reward(), _this->GetArenaForAllocation());
  }
  _impl_.bonus_proposer_reward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bonus_proposer_reward_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bonus_proposer_reward().empty()) {
    _this->_impl_.bonus_proposer_reward_.Set(from._internal_bonus_proposer_reward(), _this->GetArenaForAllocation());
  }
  _this->_impl_.withdraw_addr_enabled_ = from._impl_.withdraw_addr_enabled_;
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.community_tax_) {}

    , decltype(_impl_.base_proposer_reward_) {}

    , decltype(_impl_.bonus_proposer_reward_) {}

    , decltype(_impl_.withdraw_addr_enabled_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.community_tax_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.community_tax_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_proposer_reward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_proposer_reward_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bonus_proposer_reward_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bonus_proposer_reward_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.community_tax_.Destroy();
  _impl_.base_proposer_reward_.Destroy();
  _impl_.bonus_proposer_reward_.Destroy();
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.community_tax_.ClearToEmpty();
  _impl_.base_proposer_reward_.ClearToEmpty();
  _impl_.bonus_proposer_reward_.ClearToEmpty();
  _impl_.withdraw_addr_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string community_tax = 1 [json_name = "communityTax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_community_tax();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.Params.community_tax"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base_proposer_reward = 2 [json_name = "baseProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base_proposer_reward();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.Params.base_proposer_reward"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string bonus_proposer_reward = 3 [json_name = "bonusProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bonus_proposer_reward();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.Params.bonus_proposer_reward"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool withdraw_addr_enabled = 4 [json_name = "withdrawAddrEnabled"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.withdraw_addr_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string community_tax = 1 [json_name = "communityTax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_community_tax().empty()) {
    const std::string& _s = this->_internal_community_tax();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.Params.community_tax");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string base_proposer_reward = 2 [json_name = "baseProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_base_proposer_reward().empty()) {
    const std::string& _s = this->_internal_base_proposer_reward();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.Params.base_proposer_reward");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string bonus_proposer_reward = 3 [json_name = "bonusProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_bonus_proposer_reward().empty()) {
    const std::string& _s = this->_internal_bonus_proposer_reward();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.Params.bonus_proposer_reward");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool withdraw_addr_enabled = 4 [json_name = "withdrawAddrEnabled"];
  if (this->_internal_withdraw_addr_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_withdraw_addr_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string community_tax = 1 [json_name = "communityTax", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_community_tax().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_community_tax());
  }

  // string base_proposer_reward = 2 [json_name = "baseProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_base_proposer_reward().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_proposer_reward());
  }

  // string bonus_proposer_reward = 3 [json_name = "bonusProposerReward", deprecated = true, (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_bonus_proposer_reward().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bonus_proposer_reward());
  }

  // bool withdraw_addr_enabled = 4 [json_name = "withdrawAddrEnabled"];
  if (this->_internal_withdraw_addr_enabled() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_community_tax().empty()) {
    _this->_internal_set_community_tax(from._internal_community_tax());
  }
  if (!from._internal_base_proposer_reward().empty()) {
    _this->_internal_set_base_proposer_reward(from._internal_base_proposer_reward());
  }
  if (!from._internal_bonus_proposer_reward().empty()) {
    _this->_internal_set_bonus_proposer_reward(from._internal_bonus_proposer_reward());
  }
  if (from._internal_withdraw_addr_enabled() != 0) {
    _this->_internal_set_withdraw_addr_enabled(from._internal_withdraw_addr_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.community_tax_, lhs_arena,
                                       &other->_impl_.community_tax_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_proposer_reward_, lhs_arena,
                                       &other->_impl_.base_proposer_reward_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bonus_proposer_reward_, lhs_arena,
                                       &other->_impl_.bonus_proposer_reward_, rhs_arena);

  swap(_impl_.withdraw_addr_enabled_, other->_impl_.withdraw_addr_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[0]);
}
// ===================================================================

class ValidatorHistoricalRewards::_Internal {
 public:
};

void ValidatorHistoricalRewards::clear_cumulative_reward_ratio() {
  _internal_mutable_cumulative_reward_ratio()->Clear();
}
ValidatorHistoricalRewards::ValidatorHistoricalRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
}
ValidatorHistoricalRewards::ValidatorHistoricalRewards(const ValidatorHistoricalRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorHistoricalRewards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cumulative_reward_ratio_){from._impl_.cumulative_reward_ratio_}
    , decltype(_impl_.reference_count_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reference_count_ = from._impl_.reference_count_;
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
}

inline void ValidatorHistoricalRewards::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.cumulative_reward_ratio_){arena}
    , decltype(_impl_.reference_count_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorHistoricalRewards::~ValidatorHistoricalRewards() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorHistoricalRewards::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_cumulative_reward_ratio()->~RepeatedPtrField();
}

void ValidatorHistoricalRewards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorHistoricalRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_cumulative_reward_ratio()->Clear();
  _impl_.reference_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorHistoricalRewards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1 [json_name = "cumulativeRewardRatio", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cumulative_reward_ratio(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 reference_count = 2 [json_name = "referenceCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.reference_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorHistoricalRewards::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1 [json_name = "cumulativeRewardRatio", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cumulative_reward_ratio_size()); i < n; i++) {
    const auto& repfield = this->_internal_cumulative_reward_ratio(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 reference_count = 2 [json_name = "referenceCount"];
  if (this->_internal_reference_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_reference_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
  return target;
}

::size_t ValidatorHistoricalRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1 [json_name = "cumulativeRewardRatio", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_cumulative_reward_ratio_size();
  for (const auto& msg : this->_internal_cumulative_reward_ratio()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 reference_count = 2 [json_name = "referenceCount"];
  if (this->_internal_reference_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_reference_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorHistoricalRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorHistoricalRewards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorHistoricalRewards::GetClassData() const { return &_class_data_; }


void ValidatorHistoricalRewards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorHistoricalRewards*>(&to_msg);
  auto& from = static_cast<const ValidatorHistoricalRewards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cumulative_reward_ratio()->MergeFrom(from._internal_cumulative_reward_ratio());
  if (from._internal_reference_count() != 0) {
    _this->_internal_set_reference_count(from._internal_reference_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorHistoricalRewards::CopyFrom(const ValidatorHistoricalRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorHistoricalRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorHistoricalRewards::IsInitialized() const {
  return true;
}

void ValidatorHistoricalRewards::InternalSwap(ValidatorHistoricalRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_cumulative_reward_ratio()->InternalSwap(other->_internal_mutable_cumulative_reward_ratio());

  swap(_impl_.reference_count_, other->_impl_.reference_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorHistoricalRewards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[1]);
}
// ===================================================================

class ValidatorCurrentRewards::_Internal {
 public:
};

void ValidatorCurrentRewards::clear_rewards() {
  _internal_mutable_rewards()->Clear();
}
ValidatorCurrentRewards::ValidatorCurrentRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
}
ValidatorCurrentRewards::ValidatorCurrentRewards(const ValidatorCurrentRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorCurrentRewards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){from._impl_.rewards_}
    , decltype(_impl_.period_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.period_ = from._impl_.period_;
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
}

inline void ValidatorCurrentRewards::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){arena}
    , decltype(_impl_.period_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorCurrentRewards::~ValidatorCurrentRewards() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorCurrentRewards::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rewards()->~RepeatedPtrField();
}

void ValidatorCurrentRewards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorCurrentRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rewards()->Clear();
  _impl_.period_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorCurrentRewards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 period = 2 [json_name = "period"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorCurrentRewards::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 period = 2 [json_name = "period"];
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
  return target;
}

::size_t ValidatorCurrentRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->_internal_rewards()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 period = 2 [json_name = "period"];
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorCurrentRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorCurrentRewards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorCurrentRewards::GetClassData() const { return &_class_data_; }


void ValidatorCurrentRewards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorCurrentRewards*>(&to_msg);
  auto& from = static_cast<const ValidatorCurrentRewards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rewards()->MergeFrom(from._internal_rewards());
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorCurrentRewards::CopyFrom(const ValidatorCurrentRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorCurrentRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorCurrentRewards::IsInitialized() const {
  return true;
}

void ValidatorCurrentRewards::InternalSwap(ValidatorCurrentRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rewards()->InternalSwap(other->_internal_mutable_rewards());

  swap(_impl_.period_, other->_impl_.period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorCurrentRewards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[2]);
}
// ===================================================================

class ValidatorAccumulatedCommission::_Internal {
 public:
};

void ValidatorAccumulatedCommission::clear_commission() {
  _internal_mutable_commission()->Clear();
}
ValidatorAccumulatedCommission::ValidatorAccumulatedCommission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
}
ValidatorAccumulatedCommission::ValidatorAccumulatedCommission(const ValidatorAccumulatedCommission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorAccumulatedCommission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.commission_){from._impl_.commission_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
}

inline void ValidatorAccumulatedCommission::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.commission_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorAccumulatedCommission::~ValidatorAccumulatedCommission() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorAccumulatedCommission::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_commission()->~RepeatedPtrField();
}

void ValidatorAccumulatedCommission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorAccumulatedCommission::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_commission()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorAccumulatedCommission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.DecCoin commission = 1 [json_name = "commission", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commission(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorAccumulatedCommission::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin commission = 1 [json_name = "commission", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commission_size()); i < n; i++) {
    const auto& repfield = this->_internal_commission(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
  return target;
}

::size_t ValidatorAccumulatedCommission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin commission = 1 [json_name = "commission", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_commission_size();
  for (const auto& msg : this->_internal_commission()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorAccumulatedCommission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorAccumulatedCommission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorAccumulatedCommission::GetClassData() const { return &_class_data_; }


void ValidatorAccumulatedCommission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorAccumulatedCommission*>(&to_msg);
  auto& from = static_cast<const ValidatorAccumulatedCommission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_commission()->MergeFrom(from._internal_commission());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorAccumulatedCommission::CopyFrom(const ValidatorAccumulatedCommission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorAccumulatedCommission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorAccumulatedCommission::IsInitialized() const {
  return true;
}

void ValidatorAccumulatedCommission::InternalSwap(ValidatorAccumulatedCommission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_commission()->InternalSwap(other->_internal_mutable_commission());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorAccumulatedCommission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[3]);
}
// ===================================================================

class ValidatorOutstandingRewards::_Internal {
 public:
};

void ValidatorOutstandingRewards::clear_rewards() {
  _internal_mutable_rewards()->Clear();
}
ValidatorOutstandingRewards::ValidatorOutstandingRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
}
ValidatorOutstandingRewards::ValidatorOutstandingRewards(const ValidatorOutstandingRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorOutstandingRewards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){from._impl_.rewards_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
}

inline void ValidatorOutstandingRewards::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rewards_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorOutstandingRewards::~ValidatorOutstandingRewards() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorOutstandingRewards::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_rewards()->~RepeatedPtrField();
}

void ValidatorOutstandingRewards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorOutstandingRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rewards()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorOutstandingRewards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorOutstandingRewards::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rewards_size()); i < n; i++) {
    const auto& repfield = this->_internal_rewards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
  return target;
}

::size_t ValidatorOutstandingRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin rewards = 1 [json_name = "rewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->_internal_rewards()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorOutstandingRewards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorOutstandingRewards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorOutstandingRewards::GetClassData() const { return &_class_data_; }


void ValidatorOutstandingRewards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorOutstandingRewards*>(&to_msg);
  auto& from = static_cast<const ValidatorOutstandingRewards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rewards()->MergeFrom(from._internal_rewards());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorOutstandingRewards::CopyFrom(const ValidatorOutstandingRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorOutstandingRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorOutstandingRewards::IsInitialized() const {
  return true;
}

void ValidatorOutstandingRewards::InternalSwap(ValidatorOutstandingRewards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_rewards()->InternalSwap(other->_internal_mutable_rewards());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorOutstandingRewards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[4]);
}
// ===================================================================

class ValidatorSlashEvent::_Internal {
 public:
};

ValidatorSlashEvent::ValidatorSlashEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorSlashEvent)
}
ValidatorSlashEvent::ValidatorSlashEvent(const ValidatorSlashEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorSlashEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fraction_) {}

    , decltype(_impl_.validator_period_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fraction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fraction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fraction().empty()) {
    _this->_impl_.fraction_.Set(from._internal_fraction(), _this->GetArenaForAllocation());
  }
  _this->_impl_.validator_period_ = from._impl_.validator_period_;
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorSlashEvent)
}

inline void ValidatorSlashEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fraction_) {}

    , decltype(_impl_.validator_period_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.fraction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fraction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorSlashEvent::~ValidatorSlashEvent() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorSlashEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorSlashEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fraction_.Destroy();
}

void ValidatorSlashEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorSlashEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorSlashEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fraction_.ClearToEmpty();
  _impl_.validator_period_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorSlashEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 validator_period = 1 [json_name = "validatorPeriod"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.validator_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string fraction = 2 [json_name = "fraction", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fraction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.ValidatorSlashEvent.fraction"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorSlashEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorSlashEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 validator_period = 1 [json_name = "validatorPeriod"];
  if (this->_internal_validator_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_validator_period(), target);
  }

  // string fraction = 2 [json_name = "fraction", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_fraction().empty()) {
    const std::string& _s = this->_internal_fraction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.ValidatorSlashEvent.fraction");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorSlashEvent)
  return target;
}

::size_t ValidatorSlashEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorSlashEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fraction = 2 [json_name = "fraction", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_fraction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fraction());
  }

  // uint64 validator_period = 1 [json_name = "validatorPeriod"];
  if (this->_internal_validator_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_validator_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorSlashEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorSlashEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorSlashEvent::GetClassData() const { return &_class_data_; }


void ValidatorSlashEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorSlashEvent*>(&to_msg);
  auto& from = static_cast<const ValidatorSlashEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorSlashEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fraction().empty()) {
    _this->_internal_set_fraction(from._internal_fraction());
  }
  if (from._internal_validator_period() != 0) {
    _this->_internal_set_validator_period(from._internal_validator_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorSlashEvent::CopyFrom(const ValidatorSlashEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorSlashEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorSlashEvent::IsInitialized() const {
  return true;
}

void ValidatorSlashEvent::InternalSwap(ValidatorSlashEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fraction_, lhs_arena,
                                       &other->_impl_.fraction_, rhs_arena);

  swap(_impl_.validator_period_, other->_impl_.validator_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorSlashEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[5]);
}
// ===================================================================

class ValidatorSlashEvents::_Internal {
 public:
};

ValidatorSlashEvents::ValidatorSlashEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.ValidatorSlashEvents)
}
ValidatorSlashEvents::ValidatorSlashEvents(const ValidatorSlashEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorSlashEvents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_slash_events_){from._impl_.validator_slash_events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.ValidatorSlashEvents)
}

inline void ValidatorSlashEvents::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.validator_slash_events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorSlashEvents::~ValidatorSlashEvents() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.ValidatorSlashEvents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorSlashEvents::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_validator_slash_events()->~RepeatedPtrField();
}

void ValidatorSlashEvents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorSlashEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.ValidatorSlashEvents)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_validator_slash_events()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorSlashEvents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1 [json_name = "validatorSlashEvents", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validator_slash_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorSlashEvents::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.ValidatorSlashEvents)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1 [json_name = "validatorSlashEvents", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validator_slash_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_validator_slash_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.ValidatorSlashEvents)
  return target;
}

::size_t ValidatorSlashEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.ValidatorSlashEvents)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_events = 1 [json_name = "validatorSlashEvents", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_validator_slash_events_size();
  for (const auto& msg : this->_internal_validator_slash_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorSlashEvents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorSlashEvents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorSlashEvents::GetClassData() const { return &_class_data_; }


void ValidatorSlashEvents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorSlashEvents*>(&to_msg);
  auto& from = static_cast<const ValidatorSlashEvents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.ValidatorSlashEvents)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_validator_slash_events()->MergeFrom(from._internal_validator_slash_events());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorSlashEvents::CopyFrom(const ValidatorSlashEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.ValidatorSlashEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorSlashEvents::IsInitialized() const {
  return true;
}

void ValidatorSlashEvents::InternalSwap(ValidatorSlashEvents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_validator_slash_events()->InternalSwap(other->_internal_mutable_validator_slash_events());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorSlashEvents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[6]);
}
// ===================================================================

class FeePool::_Internal {
 public:
};

void FeePool::clear_community_pool() {
  _internal_mutable_community_pool()->Clear();
}
FeePool::FeePool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.FeePool)
}
FeePool::FeePool(const FeePool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeePool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.community_pool_){from._impl_.community_pool_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.FeePool)
}

inline void FeePool::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.community_pool_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeePool::~FeePool() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.FeePool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeePool::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_community_pool()->~RepeatedPtrField();
}

void FeePool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeePool::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.FeePool)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_community_pool()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeePool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.DecCoin community_pool = 1 [json_name = "communityPool", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_community_pool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeePool::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.FeePool)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin community_pool = 1 [json_name = "communityPool", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_community_pool_size()); i < n; i++) {
    const auto& repfield = this->_internal_community_pool(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.FeePool)
  return target;
}

::size_t FeePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.FeePool)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin community_pool = 1 [json_name = "communityPool", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_community_pool_size();
  for (const auto& msg : this->_internal_community_pool()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeePool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeePool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeePool::GetClassData() const { return &_class_data_; }


void FeePool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeePool*>(&to_msg);
  auto& from = static_cast<const FeePool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.FeePool)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_community_pool()->MergeFrom(from._internal_community_pool());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeePool::CopyFrom(const FeePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.FeePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeePool::IsInitialized() const {
  return true;
}

void FeePool::InternalSwap(FeePool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_community_pool()->InternalSwap(other->_internal_mutable_community_pool());
}

::PROTOBUF_NAMESPACE_ID::Metadata FeePool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[7]);
}
// ===================================================================

class CommunityPoolSpendProposal::_Internal {
 public:
};

void CommunityPoolSpendProposal::clear_amount() {
  _internal_mutable_amount()->Clear();
}
CommunityPoolSpendProposal::CommunityPoolSpendProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
}
CommunityPoolSpendProposal::CommunityPoolSpendProposal(const CommunityPoolSpendProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommunityPoolSpendProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){from._impl_.amount_}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.recipient_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
}

inline void CommunityPoolSpendProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){arena}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.recipient_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommunityPoolSpendProposal::~CommunityPoolSpendProposal() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommunityPoolSpendProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_amount()->~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.recipient_.Destroy();
}

void CommunityPoolSpendProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommunityPoolSpendProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_amount()->Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunityPoolSpendProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.CommunityPoolSpendProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.CommunityPoolSpendProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string recipient = 3 [json_name = "recipient"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.CommunityPoolSpendProposal.recipient"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommunityPoolSpendProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.CommunityPoolSpendProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.CommunityPoolSpendProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string recipient = 3 [json_name = "recipient"];
  if (!this->_internal_recipient().empty()) {
    const std::string& _s = this->_internal_recipient();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.CommunityPoolSpendProposal.recipient");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_amount_size()); i < n; i++) {
    const auto& repfield = this->_internal_amount(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
  return target;
}

::size_t CommunityPoolSpendProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->_internal_amount()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string recipient = 3 [json_name = "recipient"];
  if (!this->_internal_recipient().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommunityPoolSpendProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommunityPoolSpendProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommunityPoolSpendProposal::GetClassData() const { return &_class_data_; }


void CommunityPoolSpendProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommunityPoolSpendProposal*>(&to_msg);
  auto& from = static_cast<const CommunityPoolSpendProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amount()->MergeFrom(from._internal_amount());
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommunityPoolSpendProposal::CopyFrom(const CommunityPoolSpendProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityPoolSpendProposal::IsInitialized() const {
  return true;
}

void CommunityPoolSpendProposal::InternalSwap(CommunityPoolSpendProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_amount()->InternalSwap(other->_internal_mutable_amount());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_, lhs_arena,
                                       &other->_impl_.recipient_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunityPoolSpendProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[8]);
}
// ===================================================================

class DelegatorStartingInfo::_Internal {
 public:
};

DelegatorStartingInfo::DelegatorStartingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.DelegatorStartingInfo)
}
DelegatorStartingInfo::DelegatorStartingInfo(const DelegatorStartingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelegatorStartingInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stake_) {}

    , decltype(_impl_.previous_period_) {}

    , decltype(_impl_.height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stake_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.stake_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stake().empty()) {
    _this->_impl_.stake_.Set(from._internal_stake(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.previous_period_, &from._impl_.previous_period_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.previous_period_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.DelegatorStartingInfo)
}

inline void DelegatorStartingInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.stake_) {}

    , decltype(_impl_.previous_period_) { ::uint64_t{0u} }

    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stake_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.stake_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelegatorStartingInfo::~DelegatorStartingInfo() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.DelegatorStartingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelegatorStartingInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stake_.Destroy();
}

void DelegatorStartingInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelegatorStartingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.DelegatorStartingInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stake_.ClearToEmpty();
  ::memset(&_impl_.previous_period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.previous_period_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegatorStartingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 previous_period = 1 [json_name = "previousPeriod"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.previous_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string stake = 2 [json_name = "stake", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stake();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.DelegatorStartingInfo.stake"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 height = 3 [json_name = "height", (.gogoproto.jsontag) = "creation_height", (.amino.field_name) = "creation_height", (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DelegatorStartingInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.DelegatorStartingInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 previous_period = 1 [json_name = "previousPeriod"];
  if (this->_internal_previous_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_previous_period(), target);
  }

  // string stake = 2 [json_name = "stake", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_stake().empty()) {
    const std::string& _s = this->_internal_stake();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.DelegatorStartingInfo.stake");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 height = 3 [json_name = "height", (.gogoproto.jsontag) = "creation_height", (.amino.field_name) = "creation_height", (.amino.dont_omitempty) = true];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.DelegatorStartingInfo)
  return target;
}

::size_t DelegatorStartingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.DelegatorStartingInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stake = 2 [json_name = "stake", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_stake().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_stake());
  }

  // uint64 previous_period = 1 [json_name = "previousPeriod"];
  if (this->_internal_previous_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_previous_period());
  }

  // uint64 height = 3 [json_name = "height", (.gogoproto.jsontag) = "creation_height", (.amino.field_name) = "creation_height", (.amino.dont_omitempty) = true];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegatorStartingInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelegatorStartingInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegatorStartingInfo::GetClassData() const { return &_class_data_; }


void DelegatorStartingInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelegatorStartingInfo*>(&to_msg);
  auto& from = static_cast<const DelegatorStartingInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.DelegatorStartingInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stake().empty()) {
    _this->_internal_set_stake(from._internal_stake());
  }
  if (from._internal_previous_period() != 0) {
    _this->_internal_set_previous_period(from._internal_previous_period());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegatorStartingInfo::CopyFrom(const DelegatorStartingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.DelegatorStartingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatorStartingInfo::IsInitialized() const {
  return true;
}

void DelegatorStartingInfo::InternalSwap(DelegatorStartingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.stake_, lhs_arena,
                                       &other->_impl_.stake_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelegatorStartingInfo, _impl_.height_)
      + sizeof(DelegatorStartingInfo::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(DelegatorStartingInfo, _impl_.previous_period_)>(
          reinterpret_cast<char*>(&_impl_.previous_period_),
          reinterpret_cast<char*>(&other->_impl_.previous_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatorStartingInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[9]);
}
// ===================================================================

class DelegationDelegatorReward::_Internal {
 public:
};

void DelegationDelegatorReward::clear_reward() {
  _internal_mutable_reward()->Clear();
}
DelegationDelegatorReward::DelegationDelegatorReward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.DelegationDelegatorReward)
}
DelegationDelegatorReward::DelegationDelegatorReward(const DelegationDelegatorReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelegationDelegatorReward* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reward_){from._impl_.reward_}
    , decltype(_impl_.validator_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.DelegationDelegatorReward)
}

inline void DelegationDelegatorReward::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.reward_){arena}
    , decltype(_impl_.validator_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DelegationDelegatorReward::~DelegationDelegatorReward() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.DelegationDelegatorReward)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelegationDelegatorReward::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_reward()->~RepeatedPtrField();
  _impl_.validator_address_.Destroy();
}

void DelegationDelegatorReward::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelegationDelegatorReward::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.DelegationDelegatorReward)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_reward()->Clear();
  _impl_.validator_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegationDelegatorReward::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.DelegationDelegatorReward.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.DecCoin reward = 2 [json_name = "reward", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DelegationDelegatorReward::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.DelegationDelegatorReward)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.DelegationDelegatorReward.validator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .cosmos.base.v1beta1.DecCoin reward = 2 [json_name = "reward", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reward_size()); i < n; i++) {
    const auto& repfield = this->_internal_reward(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.DelegationDelegatorReward)
  return target;
}

::size_t DelegationDelegatorReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.DelegationDelegatorReward)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.DecCoin reward = 2 [json_name = "reward", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_reward_size();
  for (const auto& msg : this->_internal_reward()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string validator_address = 1 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegationDelegatorReward::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelegationDelegatorReward::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegationDelegatorReward::GetClassData() const { return &_class_data_; }


void DelegationDelegatorReward::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelegationDelegatorReward*>(&to_msg);
  auto& from = static_cast<const DelegationDelegatorReward&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.DelegationDelegatorReward)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_reward()->MergeFrom(from._internal_reward());
  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegationDelegatorReward::CopyFrom(const DelegationDelegatorReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.DelegationDelegatorReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegationDelegatorReward::IsInitialized() const {
  return true;
}

void DelegationDelegatorReward::InternalSwap(DelegationDelegatorReward* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_reward()->InternalSwap(other->_internal_mutable_reward());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegationDelegatorReward::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[10]);
}
// ===================================================================

class CommunityPoolSpendProposalWithDeposit::_Internal {
 public:
};

CommunityPoolSpendProposalWithDeposit::CommunityPoolSpendProposalWithDeposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
}
CommunityPoolSpendProposalWithDeposit::CommunityPoolSpendProposalWithDeposit(const CommunityPoolSpendProposalWithDeposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommunityPoolSpendProposalWithDeposit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.recipient_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.deposit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _impl_.deposit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deposit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deposit().empty()) {
    _this->_impl_.deposit_.Set(from._internal_deposit(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
}

inline void CommunityPoolSpendProposalWithDeposit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.recipient_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.deposit_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deposit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deposit_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommunityPoolSpendProposalWithDeposit::~CommunityPoolSpendProposalWithDeposit() {
  // @@protoc_insertion_point(destructor:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommunityPoolSpendProposalWithDeposit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.recipient_.Destroy();
  _impl_.amount_.Destroy();
  _impl_.deposit_.Destroy();
}

void CommunityPoolSpendProposalWithDeposit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommunityPoolSpendProposalWithDeposit::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.deposit_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommunityPoolSpendProposalWithDeposit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string recipient = 3 [json_name = "recipient"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.recipient"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 4 [json_name = "amount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string deposit = 5 [json_name = "deposit"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_deposit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.deposit"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommunityPoolSpendProposalWithDeposit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string recipient = 3 [json_name = "recipient"];
  if (!this->_internal_recipient().empty()) {
    const std::string& _s = this->_internal_recipient();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.recipient");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string amount = 4 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.amount");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string deposit = 5 [json_name = "deposit"];
  if (!this->_internal_deposit().empty()) {
    const std::string& _s = this->_internal_deposit();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit.deposit");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
  return target;
}

::size_t CommunityPoolSpendProposalWithDeposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string recipient = 3 [json_name = "recipient"];
  if (!this->_internal_recipient().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient());
  }

  // string amount = 4 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // string deposit = 5 [json_name = "deposit"];
  if (!this->_internal_deposit().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deposit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommunityPoolSpendProposalWithDeposit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommunityPoolSpendProposalWithDeposit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommunityPoolSpendProposalWithDeposit::GetClassData() const { return &_class_data_; }


void CommunityPoolSpendProposalWithDeposit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommunityPoolSpendProposalWithDeposit*>(&to_msg);
  auto& from = static_cast<const CommunityPoolSpendProposalWithDeposit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (!from._internal_deposit().empty()) {
    _this->_internal_set_deposit(from._internal_deposit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommunityPoolSpendProposalWithDeposit::CopyFrom(const CommunityPoolSpendProposalWithDeposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.distribution.v1beta1.CommunityPoolSpendProposalWithDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommunityPoolSpendProposalWithDeposit::IsInitialized() const {
  return true;
}

void CommunityPoolSpendProposalWithDeposit::InternalSwap(CommunityPoolSpendProposalWithDeposit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_, lhs_arena,
                                       &other->_impl_.recipient_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deposit_, lhs_arena,
                                       &other->_impl_.deposit_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunityPoolSpendProposalWithDeposit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_getter, &descriptor_table_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto_once,
      file_level_metadata_cosmos_2fdistribution_2fv1beta1_2fdistribution_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::Params*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::Params >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorHistoricalRewards*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorHistoricalRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorHistoricalRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorCurrentRewards*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorCurrentRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorCurrentRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorAccumulatedCommission >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorOutstandingRewards*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorOutstandingRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorOutstandingRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorSlashEvent*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorSlashEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorSlashEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::ValidatorSlashEvents*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::ValidatorSlashEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::ValidatorSlashEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::FeePool*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::FeePool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::FeePool >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::CommunityPoolSpendProposal*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::CommunityPoolSpendProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::CommunityPoolSpendProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::DelegatorStartingInfo*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::DelegatorStartingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::DelegatorStartingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::DelegationDelegatorReward*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::DelegationDelegatorReward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::DelegationDelegatorReward >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit*
Arena::CreateMaybeMessage< ::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::distribution::v1beta1::CommunityPoolSpendProposalWithDeposit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

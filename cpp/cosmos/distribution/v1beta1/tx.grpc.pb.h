// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/distribution/v1beta1/tx.proto
#ifndef GRPC_cosmos_2fdistribution_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_cosmos_2fdistribution_2fv1beta1_2ftx_2eproto__INCLUDED

#include "cosmos/distribution/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace distribution {
namespace v1beta1 {

// Msg defines the distribution Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.distribution.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // SetWithdrawAddress defines a method to change the withdraw address
    // for a delegator (or validator self-delegation).
    virtual ::grpc::Status SetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>> AsyncSetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>>(AsyncSetWithdrawAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>> PrepareAsyncSetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>>(PrepareAsyncSetWithdrawAddressRaw(context, request, cq));
    }
    // WithdrawDelegatorReward defines a method to withdraw rewards of delegator
    // from a single validator.
    virtual ::grpc::Status WithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>> AsyncWithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>>(AsyncWithdrawDelegatorRewardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>> PrepareAsyncWithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>>(PrepareAsyncWithdrawDelegatorRewardRaw(context, request, cq));
    }
    // WithdrawValidatorCommission defines a method to withdraw the
    // full commission to the validator address.
    virtual ::grpc::Status WithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>> AsyncWithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>>(AsyncWithdrawValidatorCommissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>> PrepareAsyncWithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>>(PrepareAsyncWithdrawValidatorCommissionRaw(context, request, cq));
    }
    // FundCommunityPool defines a method to allow an account to directly
    // fund the community pool.
    virtual ::grpc::Status FundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>> AsyncFundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>>(AsyncFundCommunityPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>> PrepareAsyncFundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>>(PrepareAsyncFundCommunityPoolRaw(context, request, cq));
    }
    // UpdateParams defines a governance operation for updating the x/distribution
    // module parameters. The authority is defined in the keeper.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    // CommunityPoolSpend defines a governance operation for sending tokens from
    // the community pool in the x/distribution module to another account, which
    // could be the governance module itself. The authority is defined in the
    // keeper.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status CommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>> AsyncCommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>>(AsyncCommunityPoolSpendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>> PrepareAsyncCommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>>(PrepareAsyncCommunityPoolSpendRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // SetWithdrawAddress defines a method to change the withdraw address
      // for a delegator (or validator self-delegation).
      virtual void SetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* request, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* request, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // WithdrawDelegatorReward defines a method to withdraw rewards of delegator
      // from a single validator.
      virtual void WithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* request, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* request, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // WithdrawValidatorCommission defines a method to withdraw the
      // full commission to the validator address.
      virtual void WithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* request, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* request, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // FundCommunityPool defines a method to allow an account to directly
      // fund the community pool.
      virtual void FundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* request, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* request, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateParams defines a governance operation for updating the x/distribution
      // module parameters. The authority is defined in the keeper.
      //
      // Since: cosmos-sdk 0.47
      virtual void UpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams* request, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams* request, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CommunityPoolSpend defines a governance operation for sending tokens from
      // the community pool in the x/distribution module to another account, which
      // could be the governance module itself. The authority is defined in the
      // keeper.
      //
      // Since: cosmos-sdk 0.47
      virtual void CommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* request, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* request, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>* AsyncSetWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>* PrepareAsyncSetWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>* AsyncWithdrawDelegatorRewardRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>* PrepareAsyncWithdrawDelegatorRewardRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>* AsyncWithdrawValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>* PrepareAsyncWithdrawValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>* AsyncFundCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>* PrepareAsyncFundCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>* AsyncCommunityPoolSpendRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>* PrepareAsyncCommunityPoolSpendRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>> AsyncSetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>>(AsyncSetWithdrawAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>> PrepareAsyncSetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>>(PrepareAsyncSetWithdrawAddressRaw(context, request, cq));
    }
    ::grpc::Status WithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>> AsyncWithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>>(AsyncWithdrawDelegatorRewardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>> PrepareAsyncWithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>>(PrepareAsyncWithdrawDelegatorRewardRaw(context, request, cq));
    }
    ::grpc::Status WithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>> AsyncWithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>>(AsyncWithdrawValidatorCommissionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>> PrepareAsyncWithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>>(PrepareAsyncWithdrawValidatorCommissionRaw(context, request, cq));
    }
    ::grpc::Status FundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>> AsyncFundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>>(AsyncFundCommunityPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>> PrepareAsyncFundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>>(PrepareAsyncFundCommunityPoolRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    ::grpc::Status CommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>> AsyncCommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>>(AsyncCommunityPoolSpendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>> PrepareAsyncCommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>>(PrepareAsyncCommunityPoolSpendRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* request, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void SetWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* request, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* request, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* response, std::function<void(::grpc::Status)>) override;
      void WithdrawDelegatorReward(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* request, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* request, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* response, std::function<void(::grpc::Status)>) override;
      void WithdrawValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* request, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* request, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* response, std::function<void(::grpc::Status)>) override;
      void FundCommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* request, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams* request, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams* request, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* request, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* response, std::function<void(::grpc::Status)>) override;
      void CommunityPoolSpend(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* request, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>* AsyncSetWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>* PrepareAsyncSetWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>* AsyncWithdrawDelegatorRewardRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>* PrepareAsyncWithdrawDelegatorRewardRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>* AsyncWithdrawValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>* PrepareAsyncWithdrawValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>* AsyncFundCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>* PrepareAsyncFundCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>* AsyncCommunityPoolSpendRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>* PrepareAsyncCommunityPoolSpendRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetWithdrawAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_WithdrawDelegatorReward_;
    const ::grpc::internal::RpcMethod rpcmethod_WithdrawValidatorCommission_;
    const ::grpc::internal::RpcMethod rpcmethod_FundCommunityPool_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
    const ::grpc::internal::RpcMethod rpcmethod_CommunityPoolSpend_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // SetWithdrawAddress defines a method to change the withdraw address
    // for a delegator (or validator self-delegation).
    virtual ::grpc::Status SetWithdrawAddress(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* request, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* response);
    // WithdrawDelegatorReward defines a method to withdraw rewards of delegator
    // from a single validator.
    virtual ::grpc::Status WithdrawDelegatorReward(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* request, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* response);
    // WithdrawValidatorCommission defines a method to withdraw the
    // full commission to the validator address.
    virtual ::grpc::Status WithdrawValidatorCommission(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* request, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* response);
    // FundCommunityPool defines a method to allow an account to directly
    // fund the community pool.
    virtual ::grpc::Status FundCommunityPool(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* request, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* response);
    // UpdateParams defines a governance operation for updating the x/distribution
    // module parameters. The authority is defined in the keeper.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams* request, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* response);
    // CommunityPoolSpend defines a governance operation for sending tokens from
    // the community pool in the x/distribution module to another account, which
    // could be the governance module itself. The authority is defined in the
    // keeper.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status CommunityPoolSpend(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* request, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetWithdrawAddress() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* /*request*/, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWithdrawAddress(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithdrawDelegatorReward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WithdrawDelegatorReward() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WithdrawDelegatorReward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawDelegatorReward(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawDelegatorReward(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithdrawValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WithdrawValidatorCommission() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_WithdrawValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawValidatorCommission(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FundCommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FundCommunityPool() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FundCommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundCommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* /*request*/, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFundCommunityPool(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::MsgFundCommunityPool* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CommunityPoolSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CommunityPoolSpend() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CommunityPoolSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPoolSpend(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* /*request*/, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommunityPoolSpend(::grpc::ServerContext* context, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetWithdrawAddress<WithAsyncMethod_WithdrawDelegatorReward<WithAsyncMethod_WithdrawValidatorCommission<WithAsyncMethod_FundCommunityPool<WithAsyncMethod_UpdateParams<WithAsyncMethod_CommunityPoolSpend<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetWithdrawAddress() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* request, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* response) { return this->SetWithdrawAddress(context, request, response); }));}
    void SetMessageAllocatorFor_SetWithdrawAddress(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* /*request*/, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetWithdrawAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* /*request*/, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WithdrawDelegatorReward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WithdrawDelegatorReward() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* request, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* response) { return this->WithdrawDelegatorReward(context, request, response); }));}
    void SetMessageAllocatorFor_WithdrawDelegatorReward(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WithdrawDelegatorReward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawDelegatorReward(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawDelegatorReward(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WithdrawValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WithdrawValidatorCommission() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* request, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* response) { return this->WithdrawValidatorCommission(context, request, response); }));}
    void SetMessageAllocatorFor_WithdrawValidatorCommission(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WithdrawValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawValidatorCommission(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FundCommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FundCommunityPool() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgFundCommunityPool, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* request, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* response) { return this->FundCommunityPool(context, request, response); }));}
    void SetMessageAllocatorFor_FundCommunityPool(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::MsgFundCommunityPool, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgFundCommunityPool, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FundCommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundCommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* /*request*/, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FundCommunityPool(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* /*request*/, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgUpdateParams, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::MsgUpdateParams* request, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::MsgUpdateParams, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgUpdateParams, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CommunityPoolSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CommunityPoolSpend() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* request, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* response) { return this->CommunityPoolSpend(context, request, response); }));}
    void SetMessageAllocatorFor_CommunityPoolSpend(
        ::grpc::MessageAllocator< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CommunityPoolSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPoolSpend(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* /*request*/, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommunityPoolSpend(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* /*request*/, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetWithdrawAddress<WithCallbackMethod_WithdrawDelegatorReward<WithCallbackMethod_WithdrawValidatorCommission<WithCallbackMethod_FundCommunityPool<WithCallbackMethod_UpdateParams<WithCallbackMethod_CommunityPoolSpend<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetWithdrawAddress() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* /*request*/, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithdrawDelegatorReward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WithdrawDelegatorReward() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WithdrawDelegatorReward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawDelegatorReward(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithdrawValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WithdrawValidatorCommission() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_WithdrawValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FundCommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FundCommunityPool() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FundCommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundCommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* /*request*/, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CommunityPoolSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CommunityPoolSpend() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CommunityPoolSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPoolSpend(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* /*request*/, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetWithdrawAddress() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* /*request*/, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetWithdrawAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WithdrawDelegatorReward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WithdrawDelegatorReward() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WithdrawDelegatorReward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawDelegatorReward(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawDelegatorReward(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WithdrawValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WithdrawValidatorCommission() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_WithdrawValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithdrawValidatorCommission(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FundCommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FundCommunityPool() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FundCommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundCommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* /*request*/, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFundCommunityPool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CommunityPoolSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CommunityPoolSpend() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CommunityPoolSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPoolSpend(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* /*request*/, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommunityPoolSpend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetWithdrawAddress() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetWithdrawAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* /*request*/, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetWithdrawAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WithdrawDelegatorReward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WithdrawDelegatorReward() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WithdrawDelegatorReward(context, request, response); }));
    }
    ~WithRawCallbackMethod_WithdrawDelegatorReward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawDelegatorReward(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawDelegatorReward(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WithdrawValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WithdrawValidatorCommission() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WithdrawValidatorCommission(context, request, response); }));
    }
    ~WithRawCallbackMethod_WithdrawValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithdrawValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WithdrawValidatorCommission(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FundCommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FundCommunityPool() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FundCommunityPool(context, request, response); }));
    }
    ~WithRawCallbackMethod_FundCommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FundCommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* /*request*/, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FundCommunityPool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CommunityPoolSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CommunityPoolSpend() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CommunityPoolSpend(context, request, response); }));
    }
    ~WithRawCallbackMethod_CommunityPoolSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CommunityPoolSpend(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* /*request*/, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CommunityPoolSpend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetWithdrawAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetWithdrawAddress() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>* streamer) {
                       return this->StreamedSetWithdrawAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetWithdrawAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetWithdrawAddress(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress* /*request*/, ::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetWithdrawAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::MsgSetWithdrawAddress,::cosmos::distribution::v1beta1::MsgSetWithdrawAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithdrawDelegatorReward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WithdrawDelegatorReward() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>* streamer) {
                       return this->StreamedWithdrawDelegatorReward(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WithdrawDelegatorReward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithdrawDelegatorReward(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithdrawDelegatorReward(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::MsgWithdrawDelegatorReward,::cosmos::distribution::v1beta1::MsgWithdrawDelegatorRewardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithdrawValidatorCommission : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WithdrawValidatorCommission() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>* streamer) {
                       return this->StreamedWithdrawValidatorCommission(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WithdrawValidatorCommission() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithdrawValidatorCommission(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission* /*request*/, ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithdrawValidatorCommission(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommission,::cosmos::distribution::v1beta1::MsgWithdrawValidatorCommissionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FundCommunityPool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FundCommunityPool() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::MsgFundCommunityPool, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::MsgFundCommunityPool, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>* streamer) {
                       return this->StreamedFundCommunityPool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FundCommunityPool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FundCommunityPool(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgFundCommunityPool* /*request*/, ::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFundCommunityPool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::MsgFundCommunityPool,::cosmos::distribution::v1beta1::MsgFundCommunityPoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::MsgUpdateParams, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::MsgUpdateParams, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::distribution::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::MsgUpdateParams,::cosmos::distribution::v1beta1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CommunityPoolSpend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CommunityPoolSpend() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>* streamer) {
                       return this->StreamedCommunityPoolSpend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CommunityPoolSpend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CommunityPoolSpend(::grpc::ServerContext* /*context*/, const ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend* /*request*/, ::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommunityPoolSpend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::distribution::v1beta1::MsgCommunityPoolSpend,::cosmos::distribution::v1beta1::MsgCommunityPoolSpendResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetWithdrawAddress<WithStreamedUnaryMethod_WithdrawDelegatorReward<WithStreamedUnaryMethod_WithdrawValidatorCommission<WithStreamedUnaryMethod_FundCommunityPool<WithStreamedUnaryMethod_UpdateParams<WithStreamedUnaryMethod_CommunityPoolSpend<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetWithdrawAddress<WithStreamedUnaryMethod_WithdrawDelegatorReward<WithStreamedUnaryMethod_WithdrawValidatorCommission<WithStreamedUnaryMethod_FundCommunityPool<WithStreamedUnaryMethod_UpdateParams<WithStreamedUnaryMethod_CommunityPoolSpend<Service > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace distribution
}  // namespace cosmos


#endif  // GRPC_cosmos_2fdistribution_2fv1beta1_2ftx_2eproto__INCLUDED

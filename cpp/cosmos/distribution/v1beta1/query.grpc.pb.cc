// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/distribution/v1beta1/query.proto

#include "cosmos/distribution/v1beta1/query.pb.h"
#include "cosmos/distribution/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace distribution {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/cosmos.distribution.v1beta1.Query/Params",
  "/cosmos.distribution.v1beta1.Query/ValidatorDistributionInfo",
  "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards",
  "/cosmos.distribution.v1beta1.Query/ValidatorCommission",
  "/cosmos.distribution.v1beta1.Query/ValidatorSlashes",
  "/cosmos.distribution.v1beta1.Query/DelegationRewards",
  "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards",
  "/cosmos.distribution.v1beta1.Query/DelegatorValidators",
  "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress",
  "/cosmos.distribution.v1beta1.Query/CommunityPool",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Params_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatorDistributionInfo_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatorOutstandingRewards_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatorCommission_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatorSlashes_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelegationRewards_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelegationTotalRewards_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelegatorValidators_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelegatorWithdrawAddress_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CommunityPool_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryParamsRequest, ::cosmos::distribution::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryParamsRequest, ::cosmos::distribution::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryParamsResponse, ::cosmos::distribution::v1beta1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidatorDistributionInfo_, context, request, response);
}

void Query::Stub::async::ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorDistributionInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::ValidatorDistributionInfo(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorDistributionInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* Query::Stub::PrepareAsyncValidatorDistributionInfoRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidatorDistributionInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse>* Query::Stub::AsyncValidatorDistributionInfoRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatorDistributionInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidatorOutstandingRewards_, context, request, response);
}

void Query::Stub::async::ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorOutstandingRewards_, context, request, response, std::move(f));
}

void Query::Stub::async::ValidatorOutstandingRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorOutstandingRewards_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* Query::Stub::PrepareAsyncValidatorOutstandingRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidatorOutstandingRewards_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse>* Query::Stub::AsyncValidatorOutstandingRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatorOutstandingRewardsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidatorCommission_, context, request, response);
}

void Query::Stub::async::ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorCommission_, context, request, response, std::move(f));
}

void Query::Stub::async::ValidatorCommission(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorCommission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* Query::Stub::PrepareAsyncValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse, ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidatorCommission_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse>* Query::Stub::AsyncValidatorCommissionRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatorCommissionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidatorSlashes_, context, request, response);
}

void Query::Stub::async::ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorSlashes_, context, request, response, std::move(f));
}

void Query::Stub::async::ValidatorSlashes(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorSlashes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* Query::Stub::PrepareAsyncValidatorSlashesRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse, ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidatorSlashes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse>* Query::Stub::AsyncValidatorSlashesRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatorSlashesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelegationRewards_, context, request, response);
}

void Query::Stub::async::DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegationRewards_, context, request, response, std::move(f));
}

void Query::Stub::async::DelegationRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegationRewards_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* Query::Stub::PrepareAsyncDelegationRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse, ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelegationRewards_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse>* Query::Stub::AsyncDelegationRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegationRewardsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelegationTotalRewards_, context, request, response);
}

void Query::Stub::async::DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegationTotalRewards_, context, request, response, std::move(f));
}

void Query::Stub::async::DelegationTotalRewards(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegationTotalRewards_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* Query::Stub::PrepareAsyncDelegationTotalRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelegationTotalRewards_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse>* Query::Stub::AsyncDelegationTotalRewardsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegationTotalRewardsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelegatorValidators_, context, request, response);
}

void Query::Stub::async::DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorValidators_, context, request, response, std::move(f));
}

void Query::Stub::async::DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorValidators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* Query::Stub::PrepareAsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelegatorValidators_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse>* Query::Stub::AsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegatorValidatorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelegatorWithdrawAddress_, context, request, response);
}

void Query::Stub::async::DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorWithdrawAddress_, context, request, response, std::move(f));
}

void Query::Stub::async::DelegatorWithdrawAddress(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorWithdrawAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* Query::Stub::PrepareAsyncDelegatorWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelegatorWithdrawAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse>* Query::Stub::AsyncDelegatorWithdrawAddressRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegatorWithdrawAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CommunityPool_, context, request, response);
}

void Query::Stub::async::CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CommunityPool_, context, request, response, std::move(f));
}

void Query::Stub::async::CommunityPool(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CommunityPool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* Query::Stub::PrepareAsyncCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse, ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CommunityPool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse>* Query::Stub::AsyncCommunityPoolRaw(::grpc::ClientContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCommunityPoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryParamsRequest, ::cosmos::distribution::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryParamsRequest* req,
             ::cosmos::distribution::v1beta1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* req,
             ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* resp) {
               return service->ValidatorDistributionInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* req,
             ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* resp) {
               return service->ValidatorOutstandingRewards(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* req,
             ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* resp) {
               return service->ValidatorCommission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* req,
             ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* resp) {
               return service->ValidatorSlashes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* req,
             ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* resp) {
               return service->DelegationRewards(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* req,
             ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* resp) {
               return service->DelegationTotalRewards(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* req,
             ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* resp) {
               return service->DelegatorValidators(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* req,
             ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* resp) {
               return service->DelegatorWithdrawAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* req,
             ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* resp) {
               return service->CommunityPool(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryParamsRequest* request, ::cosmos::distribution::v1beta1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValidatorDistributionInfo(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorDistributionInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValidatorOutstandingRewards(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorOutstandingRewardsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValidatorCommission(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorCommissionRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorCommissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValidatorSlashes(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryValidatorSlashesRequest* request, ::cosmos::distribution::v1beta1::QueryValidatorSlashesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DelegationRewards(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationRewardsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DelegationTotalRewards(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegationTotalRewardsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DelegatorValidators(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorValidatorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DelegatorWithdrawAddress(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressRequest* request, ::cosmos::distribution::v1beta1::QueryDelegatorWithdrawAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::CommunityPool(::grpc::ServerContext* context, const ::cosmos::distribution::v1beta1::QueryCommunityPoolRequest* request, ::cosmos::distribution::v1beta1::QueryCommunityPoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace distribution
}  // namespace v1beta1


// Code generated with goa v3.7.0, DO NOT EDIT.
//
// InjectiveChartRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_chart_rpc;

option go_package = "/injective_chart_rpcpb";

// InjectiveChartRPC implements historical chart data retrieval.
service InjectiveChartRPC {
	// Request for history bars of spotMarket for TradingView.
	rpc SpotMarketHistory (SpotMarketHistoryRequest) returns (SpotMarketHistoryResponse);
	// Request for history bars of derivativeMarket for TradingView.
	rpc DerivativeMarketHistory (DerivativeMarketHistoryRequest) returns (DerivativeMarketHistoryResponse);
	// Gets spot market summary for the latest interval (hour, day, month)
	rpc SpotMarketSummary (SpotMarketSummaryRequest) returns (SpotMarketSummaryResponse);
	// Gets batch summary for all active markets, for the latest interval (hour,
// day, month)
	rpc AllSpotMarketSummary (AllSpotMarketSummaryRequest) returns (AllSpotMarketSummaryResponse);
	// Gets derivative market summary for the latest interval (hour, day, month)
	rpc DerivativeMarketSummary (DerivativeMarketSummaryRequest) returns (DerivativeMarketSummaryResponse);
	// Gets batch summary for all active markets, for the latest interval (hour,
// day, month)
	rpc AllDerivativeMarketSummary (AllDerivativeMarketSummaryRequest) returns (AllDerivativeMarketSummaryResponse);
}

message SpotMarketHistoryRequest {
	// Specify unique ticker to search
	string symbol = 1;
	// As an alternative is possible to provide a marketId
	string market_id = 2;
	// Symbol resolution. Possible resolutions are daily (D or 1D, 2D ... ), weekly
// (1W, 2W ...), monthly (1M, 2M...) and an intra-day resolution – minutes(1, 2
// ...).
	string resolution = 3;
	// Unix timestamp (UTC) of the leftmost required bar, including from
	sint32 from = 4;
	// Unix timestamp (UTC) of the rightmost required bar, including to. It can be
// in the future. In this case, the rightmost required bar is the latest
// available bar.
	sint32 to = 5;
	// Number of bars (higher priority than from) starting with to. If countback is
// set, from should be ignored.
	sint32 countback = 6;
}

message SpotMarketHistoryResponse {
	// Bar time, Unix timestamp (UTC). Daily bars should only have the date part,
// time should be 0.
	repeated sint32 t = 1;
	// Open price.
	repeated double o = 2;
	// High price.
	repeated double h = 3;
	// Low price.
	repeated double l = 4;
	// Close price.
	repeated double c = 5;
	// Volume.
	repeated double v = 6;
	// Status of the request.
	string s = 7;
}

message DerivativeMarketHistoryRequest {
	// Specify unique ticker to search.
	string symbol = 1;
	// As an alternative is possible to provide a marketId
	string market_id = 2;
	// Symbol resolution. Possible resolutions are daily (D or 1D, 2D ... ), weekly
// (1W, 2W ...), monthly (1M, 2M...) and an intra-day resolution – minutes(1, 2
// ...).
	string resolution = 3;
	// Unix timestamp (UTC) of the leftmost required bar, including from
	sint32 from = 4;
	// Unix timestamp (UTC) of the rightmost required bar, including to. It can be
// in the future. In this case, the rightmost required bar is the latest
// available bar.
	sint32 to = 5;
	// Number of bars (higher priority than from) starting with to. If countback is
// set, from should be ignored.
	sint32 countback = 6;
}

message DerivativeMarketHistoryResponse {
	// Bar time, Unix timestamp (UTC). Daily bars should only have the date part,
// time should be 0.
	repeated sint32 t = 1;
	// Open price.
	repeated double o = 2;
	// High price.
	repeated double h = 3;
	// Low price.
	repeated double l = 4;
	// Close price.
	repeated double c = 5;
	// Volume.
	repeated double v = 6;
	// Status of the request.
	string s = 7;
}

message SpotMarketSummaryRequest {
	// Market ID of the spot market
	string market_id = 1;
	// Specify the resolution
	string resolution = 2;
}

message SpotMarketSummaryResponse {
	// Market ID of the derivativeMarket market
	string market_id = 1;
	// Open price.
	double open = 2;
	// High price.
	double high = 3;
	// Low price.
	double low = 4;
	// Volume.
	double volume = 5;
	// Current price based on latest fill event.
	double price = 6;
	// Change percent from opening price.
	double change = 7;
}

message AllSpotMarketSummaryRequest {
	// Specify the resolution
	string resolution = 1;
}

message AllSpotMarketSummaryResponse {
	repeated MarketSummaryResp field = 1;
}

message MarketSummaryResp {
	// Market ID of the derivativeMarket market
	string market_id = 1;
	// Open price.
	double open = 2;
	// High price.
	double high = 3;
	// Low price.
	double low = 4;
	// Volume.
	double volume = 5;
	// Current price based on latest fill event.
	double price = 6;
	// Change percent from opening price.
	double change = 7;
}

message DerivativeMarketSummaryRequest {
	// Market ID of the derivative market
	string market_id = 1;
	// Request the summary of index price feed
	bool index_price = 2;
	// Specify the resolution
	string resolution = 3;
}

message DerivativeMarketSummaryResponse {
	// Market ID of the derivativeMarket market
	string market_id = 1;
	// Open price.
	double open = 2;
	// High price.
	double high = 3;
	// Low price.
	double low = 4;
	// Volume.
	double volume = 5;
	// Current price based on latest fill event.
	double price = 6;
	// Change percent from opening price.
	double change = 7;
}

message AllDerivativeMarketSummaryRequest {
	// Specify the resolution
	string resolution = 1;
}

message AllDerivativeMarketSummaryResponse {
	repeated MarketSummaryResp field = 1;
}
